<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>123</title>
    <url>/2025/02/28/123/</url>
    <content><![CDATA[<h1 id="在线代码测评系统"><a href="#在线代码测评系统" class="headerlink" title="在线代码测评系统"></a>在线代码测评系统</h1><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p><a href="https://gitee.com/xj-oj/oj-project/tree/master">https://gitee.com/xj-oj/oj-project/tree/master</a></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>Java版本：Jdk 17</li>
<li>数据库：MySQL 8.0、Redis 6.2.6</li>
<li>开发工具 ：IntelliJ IDEA、Maven 3.8.6</li>
</ul>
<h2 id="采用技术"><a href="#采用技术" class="headerlink" title="采用技术"></a>采用技术</h2><ul>
<li>Spring Boot、MyBatis-Plus、redis</li>
<li>vue3、Axios、Element Plus<br><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014222.png" alt="img.png"></li>
</ul>
<h2 id="部署运行环境"><a href="#部署运行环境" class="headerlink" title="部署运行环境"></a>部署运行环境</h2><ul>
<li>Windows</li>
</ul>
<h2 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014199.gif" alt="img"></p>
<ul>
<li>视图层包括网站主站点和后台管理系统，主站点负责向用户提供服务，是用户看到的系统页面。用户可以在上面进行登录注册、个人信息管理、查看题目、编写代码、提交代码、查看测评状态、查看排名、参加竞赛、查看竞赛结果以及发布文章等主要操作。后台管理系统是专门给系统管理员使用的管理后台，管理员可以在上面进行用户管理、题目管理、竞赛管理、日志管理以及查看系统运行状态等操作。视图层通过Ajax与后端接口进行数据交互。</li>
<li>网络接口层的主要职责是接收用户的请求，根据请求参数的不同，做出不同的响应，响应数据的格式是JSON数据。</li>
<li>业务层包括用户服务、题目服务、竞赛服务、代码服务、测评服务、文件服务、文章服务等功能模块。业务层主要是实现系统功能的代码部分，通过数据映射实现和数据层的交互，从而实现数据的持久化。</li>
<li>数据层是系统最底层，也是最重要的一层，系统中所有的数据均保存在数据层的MySQL服务和Redis服务中。</li>
</ul>
<h2 id="系统总体设计"><a href="#系统总体设计" class="headerlink" title="系统总体设计"></a>系统总体设计</h2><p>本系统主要分为用户和管理员两个主要的模块。用户模块主要包括登录注册、个人中心、题目浏览、代码评测、竞赛参与、文章发布等多个子功能模块。管理员的功能模块包括用户管理、题目管理、测评管理、竞赛管理、文章管理等。本系统详细的功能模块划分图如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014210.png" alt="img"></p>
<h3 id="代码测评流程图"><a href="#代码测评流程图" class="headerlink" title="代码测评流程图"></a>代码测评流程图</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014220.png" alt="image-20230919193056867"></p>
<p>测评结果设计：</p>
<p>Compile Error：编译错误。用户提交的代码中有语法错误，无法通过编译器检查。</p>
<p>Partial Accepted：部分测评用例通过。表面用户提交的源代码可以通过部分测评用例，还有一部分测评用例无法通过，需要用户考虑其他的可能性。</p>
<p>Accepted：通过。用户提交的源代码经过测试后通过了所有的测评用例，表明用户解决了该题目。</p>
<p>Wrong Answer：答案错误。表示用户提交的源代码的输出结果错误，没有通过任何一个测评用例。</p>
<p>Runtime Error：运行时错误。程序在运行时异常终止，可能的原因有段错误、除0、栈溢出或数组越界等多种错误。</p>
<p>Time Limit Exceeded：超时。用户提交的源代码在测试运行时超出了题目设定的最大运行时间限制，不符合题目的要求。</p>
<p>Memory Limit Exceeded：内存超限。程序在运行时使用的内存空间超出题目设定的内存限制。</p>
<p>System Error：系统错误。在进行代码测评时，测评机器发送错误，这个错误与系统相关。</p>
<h3 id="编译器设置"><a href="#编译器设置" class="headerlink" title="编译器设置"></a>编译器设置</h3><table>
<thead>
<tr>
<th>名称</th>
<th>版本</th>
<th>编译命令</th>
</tr>
</thead>
<tbody><tr>
<td>C</td>
<td>GCC  4.8.5</td>
<td>&#x2F;usr&#x2F;bin&#x2F;gcc  {src_path} -o {exe_path}</td>
</tr>
<tr>
<td>C++</td>
<td>G++  4.8.5</td>
<td>&#x2F;usr&#x2F;bin&#x2F;g++  {src_path} -o {exe_path}</td>
</tr>
<tr>
<td>Java</td>
<td>JDK  17.0.6</td>
<td>&#x2F;usr&#x2F;bin&#x2F;javac  {src_path} -d {exe_path}</td>
</tr>
<tr>
<td>Python</td>
<td>Python  3.6.8</td>
<td>&#x2F;usr&#x2F;bin&#x2F;python3  {src_path}</td>
</tr>
<tr>
<td>Golang</td>
<td>Golang  1.20.2</td>
<td>&#x2F;usr&#x2F;bin&#x2F;go  build -o {exe_path} {src_path}</td>
</tr>
<tr>
<td>JavaScript</td>
<td>Node.js  16.19.1</td>
<td>&#x2F;usr&#x2F;bin&#x2F;node  {src_path}</td>
</tr>
</tbody></table>
<h2 id="主要功能实现"><a href="#主要功能实现" class="headerlink" title="主要功能实现"></a>主要功能实现</h2><p>(一) 用户模块</p>
<ol>
<li>登录注册</li>
</ol>
<p>注册和登录是系统中其他功能的使用前提，进入注册页面后，用户需要输入用户名、电子邮箱、邮箱验证码、密码和确认密码，只有邮箱验证码和Redis缓存中保存的一致、邮箱未注册、两次输入的密码一致，用户才能注册成功。系统注册页面如图4.1所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014203.png" alt="img"></p>
<ol start="2">
<li>个人中心</li>
</ol>
<p>个人中心主要用于向用户展示自己的个人信息。同时用户还可以进行个人资料的编辑和重置密码等操作。如图所示是系统个人中心页面。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014224.png" alt="img"></p>
<ol start="3">
<li>查看题目</li>
</ol>
<p>用户可以在题目列表可以分页查看题目列表，包括题目名称、难度、提交次数、通过率等等信息。题目详情页可以查看题目详细信息和进行代码提交。如图4.3为题目列表页，图为题目详情页。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014727.png" alt="img"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014681.png" alt="img"></p>
<ol start="4">
<li>代码测评</li>
</ol>
<p>代码测评在使用后在如上图4.4页面提交代码后进行的。代码测评的流程如下：</p>
<ol>
<li>用户提交代码；</li>
<li>进行代码安全性检查，检查是否有危害系统运行的代码输入；</li>
<li>编译代码（不需要编译的语言没有这一步）；</li>
<li>逐一运行测评用例，判断输出结果是否和正确结果一致；</li>
<li>所有测试用例运行完成后，将结果返回给用户。</li>
</ol>
<ol start="5">
<li>发布文章</li>
</ol>
<p>发布文章页面中用户需要填写标题、分类、正文等内容。发布文章页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014699.png" alt="img"></p>
<p>(二) 管理员模块</p>
<ol>
<li>用户管理</li>
</ol>
<p>管理员可以对系统中的注册用户进行管理。用户管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014735.png" alt="img"></p>
<ol start="2">
<li>题目管理</li>
</ol>
<p>管理员可以对当前系统中的题目进行管理。题目管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014759.png" alt="img"></p>
<ol start="3">
<li>测评管理</li>
</ol>
<p>管理员进入测评管理模块后，可以查看题目测评记录。当然这些测评记录都是用户提交代码进行测评时生成的。测评管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014753.png" alt="img"></p>
<ol start="4">
<li>竞赛管理</li>
</ol>
<p>管理员是系统中唯一可以对竞赛进行管理的角色。竞赛管理包括查看、创建和删除等操作。创建竞赛时需要设定竞赛的开始和结束时间。竞赛管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014181.png" alt="img"></p>
<ol start="5">
<li>文章管理</li>
</ol>
<p>管理员可以对文章进行管理。实现了查看文章列表、删除文章等功能。文章管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014184.png" alt="img"></p>
<h1 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h1><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><ul>
<li>后端服务</li>
<li>后端管理界面</li>
<li>前端显示界面</li>
</ul>
<h3 id="后端服务"><a href="#后端服务" class="headerlink" title="后端服务"></a>后端服务</h3><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><ul>
<li>SpringBoot</li>
<li>MySql</li>
<li>Redis</li>
</ul>
<h3 id="后端管理界面"><a href="#后端管理界面" class="headerlink" title="后端管理界面"></a>后端管理界面</h3><h4 id="技术选型-1"><a href="#技术选型-1" class="headerlink" title="技术选型"></a>技术选型</h4><ul>
<li>Html、Css、 JavaScript</li>
<li>thymeleaf</li>
<li>组件库 <a href="https://layui.dev/docs/2/base.html">Layui</a></li>
</ul>
<h3 id="前端显示界面"><a href="#前端显示界面" class="headerlink" title="前端显示界面"></a>前端显示界面</h3><h4 id="技术选型-2"><a href="#技术选型-2" class="headerlink" title="技术选型"></a>技术选型</h4><ul>
<li>Vue</li>
<li>组件库 <a href="https://element-plus.org/zh-CN/component/overview.html">Element-plus</a></li>
<li>文本编辑器 TODO</li>
</ul>
<h2 id="人员分工（垂直分工）"><a href="#人员分工（垂直分工）" class="headerlink" title="人员分工（垂直分工）"></a>人员分工（垂直分工）</h2><blockquote>
<p>项目整体架构，有三端，前端显示界面，后端管理界面，后端代码逻辑</p>
<p>分工方式为，根据业务功能，完成相应三端代码的编写以及MySql表的设计</p>
<p><strong>每个模块都会用到JavaScript、Css、Html、Vue、Java、Sql、MybatisPlus等技术</strong></p>
<p><strong>另外每个模块均由自己完成单元测试</strong></p>
</blockquote>
<h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ul>
<li>各个语言代码的执行逻辑环境和代码编写（C、C++、Python、Java、Go已经实现）</li>
<li>前端首页、关于界面</li>
<li>前端、后端代码脚手架编写</li>
<li>代码执行逻辑解耦、完成代码沙箱</li>
<li>代码执行安全管理</li>
<li>接口文档接入</li>
<li>功能测试</li>
</ul>
<p>使用到的技术：FileUtils、Runtime、Vue3、Element-Plus、thymeleaf、knife4j</p>
<h3 id="题目测评"><a href="#题目测评" class="headerlink" title="题目测评"></a>题目测评</h3><ul>
<li>测评结果（Evaluation模块内容）</li>
<li>解决跨域问题</li>
<li>完成腾讯cos服务的接入</li>
<li>代码编辑界面</li>
</ul>
<p>使用到的技术：</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014289.png" alt="image-20240924112142857" style="zoom:50%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014305.png" alt="image-20240924112223751" style="zoom:50%;" />

<p>代码编辑器 <a href="https://github.com/koca/vue-prism-editor/blob/master/README.md">https://github.com/koca/vue-prism-editor/blob/master/README.md</a></p>
<h3 id="题目管理"><a href="#题目管理" class="headerlink" title="题目管理"></a>题目管理</h3><ul>
<li>题目管理</li>
<li>题目创建、题目测试用例添加</li>
</ul>
<p>使用到的技术：无特别技术</p>
<h3 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h3><ul>
<li>博客创建</li>
<li>个人对自己创建博客的管理（编辑和删除）</li>
<li>博客的浏览</li>
<li>博客的搜索</li>
</ul>
<p>使用到的技术：</p>
<p>富文本编辑器 wangEditor	文档地址<a href="https://www.wangeditor.com/">https://www.wangeditor.com/</a></p>
<h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><ul>
<li>前端显示界面登录</li>
<li>后端管理界面登录、</li>
<li>邮箱验证注册</li>
<li>个人信息简介</li>
</ul>
<p>使用到的技术：</p>
<p>前端登录：Cookies、Redis（不必要可以不讲）</p>
<p>后端登录：拦截器 LoginInterceptor、Cookies</p>
<p>邮箱配置：</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014471.png" alt="image-20240924113300957" style="zoom:50%;" />

<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>用户管理</li>
<li>用户排名设计</li>
</ul>
<p>使用到的技术：无特别技术</p>
]]></content>
  </entry>
  <entry>
    <title>213124234543</title>
    <url>/2025/03/01/213124234543/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/02/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>second test</title>
    <url>/2025/02/28/second-test/</url>
    <content><![CDATA[<h1 id="大家网卡端午安康"><a href="#大家网卡端午安康" class="headerlink" title="大家网卡端午安康"></a>大家网卡端午安康</h1><p>看记得我骄傲达瓦的哇的</p>
<p>的空间哇达瓦打开哇的哇d</p>
<p>大家哇靠来得及哇达瓦 </p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2025/02/28/test/</url>
    <content><![CDATA[<h1 id="大家晚安的wa"><a href="#大家晚安的wa" class="headerlink" title="大家晚安的wa"></a>大家晚安的wa</h1><p>大家哇靠的哇dw</p>
]]></content>
  </entry>
  <entry>
    <title>2134</title>
    <url>/2025/02/28/2134/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据的两种结构<strong>逻辑结构</strong>和<strong>存储结构（物理结构）</strong></p>
<ul>
<li>逻辑结构<ul>
<li>线性结构<ul>
<li>线性表</li>
<li>队列</li>
<li>栈</li>
</ul>
</li>
<li>非线性结构<ul>
<li>树形结构</li>
<li>图状结构</li>
<li>集合结构</li>
</ul>
</li>
</ul>
</li>
<li>存储结构<ul>
<li>顺序存储结构</li>
<li>链式存储结构</li>
</ul>
</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法是<strong>解决某一特定问题的指定描述</strong></p>
<h3 id="算法的特征"><a href="#算法的特征" class="headerlink" title="算法的特征"></a>算法的特征</h3><ul>
<li>有穷性</li>
<li>确定性（唯一性）</li>
<li>可行性</li>
<li>输入</li>
<li>输出</li>
</ul>
<h3 id="算法的评价"><a href="#算法的评价" class="headerlink" title="算法的评价"></a>算法的评价</h3><ul>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>效率和低存储</li>
</ul>
<h4 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h4><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003136951-1004055513.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003137847-1896422554.png" style="zoom:80%;" />



<h4 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h4><p>和时间复杂度相比不那么重要，一般算法采取的措施为用空间换时间，即用一部分的空间消耗来缩短计算时间。</p>
<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="汉诺塔问题（递归调用）"><a href="#汉诺塔问题（递归调用）" class="headerlink" title="汉诺塔问题（递归调用）"></a>汉诺塔问题（递归调用）</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003138540-1572386921.png" style="zoom:60%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 汉诺塔算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HanNoTa</span>(<span class="params">n, a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        HanNoTa(n - <span class="number">1</span>, a, c, b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;moving form <span class="subst">&#123;a&#125;</span> to <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">        HanNoTa(n - <span class="number">1</span>, b, a, c)</span><br><span class="line"></span><br><span class="line">HanNoTa(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>







<h1 id="查找排序"><a href="#查找排序" class="headerlink" title="查找排序"></a>查找排序</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二分查找</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li, val, key=<span class="number">1</span></span>):</span><br><span class="line">    list_li = <span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(li))), li))</span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">        list_li = <span class="built_in">sorted</span>(list_li, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(list_li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> list_li[mid][<span class="number">1</span>] == val:</span><br><span class="line">            <span class="keyword">return</span> list_li[mid][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> list_li[mid][<span class="number">1</span>] &gt; val:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">ind = binary_search(a, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br><span class="line">ind = binary_search(b, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br></pre></td></tr></table></figure>







<h2 id="检查排序是否完成"><a href="#检查排序是否完成" class="headerlink" title="检查排序是否完成"></a>检查排序是否完成</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">li, reverse=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> reverse == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[i] &gt; li[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> reverse == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[i] &lt; li[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j + <span class="number">1</span>]:</span><br><span class="line">                li[j], li[j + <span class="number">1</span>] = li[j + <span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">bubble_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>



<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        <span class="keyword">if</span> min_loc != i:</span><br><span class="line">            li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">select_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>



<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">            li[j + <span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j + <span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">insert_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>



<h2 id="希尔排序（高级版插入排序）"><a href="#希尔排序（高级版插入排序）" class="headerlink" title="希尔排序（高级版插入排序）"></a>希尔排序（高级版插入排序）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort_gap</span>(<span class="params">li, gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">            li[j + gap] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j + gap] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10000</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line">li1 = copy.deepcopy(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(li1)</span><br><span class="line">start = time.time()</span><br><span class="line">shell_sort(li)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br><span class="line"><span class="built_in">print</span>(li1)</span><br><span class="line">start = time.time()</span><br><span class="line">insert_sort_gap(li1, <span class="number">1</span>)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(li1)</span><br></pre></td></tr></table></figure>



<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># sys.setrecursionlimit(100000)     # 设置递归最大深度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    tmp = li[left]  <span class="comment"># 记录下最左边的数</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:  <span class="comment"># 找到记录下的数的最合适的位置</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:  <span class="comment"># 从右边找比tmp小的数的位置</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        li[left] = li[right]  <span class="comment"># 把右边较大的值写到左边的位置上</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:  <span class="comment"># 从左边找比tmp大的数的位置</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]  <span class="comment"># 把左边较小的值写到右边的位置上</span></span><br><span class="line">    li[left] = tmp  <span class="comment"># 把记录下的数写到合适的位置</span></span><br><span class="line">    <span class="keyword">return</span> left  <span class="comment"># 返回找到的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_quick_sort</span>(<span class="params">li, left, right</span>):  <span class="comment"># 递归调用</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:  <span class="comment"># 至少两个元素才进行递归调用</span></span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        _quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">        _quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li</span>):</span><br><span class="line">    _quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">start = time.time()</span><br><span class="line">quick_sort(li)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure>





<h2 id="堆排序（二叉树）"><a href="#堆排序（二叉树）" class="headerlink" title="堆排序（二叉树）"></a>堆排序（二叉树）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param li:列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点的位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># 最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j为根节点的左孩子</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 把堆顶元素存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:	<span class="comment"># 建立大根堆</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j + <span class="number">1</span>] &gt; li[j]:  <span class="comment"># 如果右孩子存在并且比左孩子大</span></span><br><span class="line">            j = j + <span class="number">1</span>  <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:  <span class="comment"># 如果孩子节点大于父亲节点</span></span><br><span class="line">            li[i] = li[j]  <span class="comment"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class="line">            i = j  <span class="comment"># 指针下移</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 因为tmp比孩子节点更大，找到合适的位置</span></span><br><span class="line">            li[i] = tmp  <span class="comment"># 找到根节点合适的位置并放入</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp  <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n - <span class="number">2</span>) // <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class="line">        sift(li, i, n - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 建堆完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]  <span class="comment"># 将最后一个元素与堆顶元素交换位置</span></span><br><span class="line">        sift(li, <span class="number">0</span>, i - <span class="number">1</span>)  <span class="comment"># i-1是新的high</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">start = time.time()</span><br><span class="line">heap_sort(li)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure>

<h4 id="python中内置好的堆排序函数"><a href="#python中内置好的堆排序函数" class="headerlink" title="python中内置好的堆排序函数"></a>python中内置好的堆排序函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中内置好的堆排序</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">random.shuffle(li)      <span class="comment"># 打乱列表</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">heapq.heapify(li)       <span class="comment"># 建堆</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">    <span class="built_in">print</span>(heapq.heappop(li), end=<span class="string">&quot;,&quot;</span>)       <span class="comment"># 弹出一个堆中最小的元素</span></span><br></pre></td></tr></table></figure>



<h4 id="利用堆排序解决topk问题"><a href="#利用堆排序解决topk问题" class="headerlink" title="利用堆排序解决topk问题"></a>利用堆排序解决topk问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用堆排序解决topk问题</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param li:列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点的位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># 最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j为根节点的左孩子</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 把堆顶元素存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment"># 建立小根堆</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j + <span class="number">1</span>] &lt; li[j]:  <span class="comment"># 如果右孩子存在并且比左孩子小</span></span><br><span class="line">            j = j + <span class="number">1</span>  <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &lt; tmp:  <span class="comment"># 如果孩子节点小于父亲节点</span></span><br><span class="line">            li[i] = li[j]  <span class="comment"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class="line">            i = j  <span class="comment"># 指针下移</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 因为tmp比孩子节点更小，找到合适的位置</span></span><br><span class="line">            li[i] = tmp  <span class="comment"># 找到根节点合适的位置并放入</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp  <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topk</span>(<span class="params">li, k</span>):</span><br><span class="line">    heap = li[<span class="number">0</span>:k]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((k - <span class="number">2</span>) // <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 建立小根堆</span></span><br><span class="line">        sift(heap, i, k - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(li) - <span class="number">1</span>):  <span class="comment"># 遍历</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &gt; heap[<span class="number">0</span>]:</span><br><span class="line">            heap[<span class="number">0</span>] = li[i]</span><br><span class="line">            sift(heap, <span class="number">0</span>, k - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 对结果排序</span></span><br><span class="line">        heap[<span class="number">0</span>], heap[i] = heap[i], heap[<span class="number">0</span>]</span><br><span class="line">        sift(heap, <span class="number">0</span>, i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> heap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(topk(li, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>





<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):  <span class="comment"># 对列表中mid左右两边的子列表进行排序</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:  <span class="comment"># 左右两个子列表都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high + <span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有两个元素，递归</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        _merge_sort(li, low, mid)</span><br><span class="line">        _merge_sort(li, mid + <span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li</span>):</span><br><span class="line">    _merge_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">merge_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>







<h2 id="六种排序方法的总结"><a href="#六种排序方法的总结" class="headerlink" title="六种排序方法的总结"></a>六种排序方法的总结</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139244-909999252.png" style="zoom:80%;" />





<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(li), <span class="built_in">max</span>(li) + <span class="number">1</span>)]</span><br><span class="line">    min_num = <span class="built_in">min</span>(li)</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val - min_num] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(ind + min_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">9</span>, <span class="number">21</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">count_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>





<h2 id="桶排序（高级版计数排序）"><a href="#桶排序（高级版计数排序）" class="headerlink" title="桶排序（高级版计数排序）"></a>桶排序（高级版计数排序）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 桶排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(li)</span><br><span class="line">    n = max_num // <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        buckets = [[]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var // (max_num // n), n - <span class="number">1</span>)       <span class="comment"># i表示var放到几号桶里</span></span><br><span class="line">        buckets[i].append(var)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i]) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):     <span class="comment"># 保持桶内的顺序</span></span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j - <span class="number">1</span>]:</span><br><span class="line">                buckets[i][j], buckets[i][j - <span class="number">1</span>] = buckets[i][j - <span class="number">1</span>], buckets[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        li.extend(buc)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">200</span>))</span><br><span class="line">li1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">200</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li == li1)</span><br><span class="line">bucket_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(li == li1)</span><br></pre></td></tr></table></figure>





<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(li)</span><br><span class="line">    it = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">10</span> ** it &lt;= max_num:  <span class="comment"># 求最大数的位数</span></span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 创建桶</span></span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:  <span class="comment"># 把数放入桶中</span></span><br><span class="line">            digit = (var // <span class="number">10</span> ** it) % <span class="number">10</span>  <span class="comment"># 依次取每个数的位数</span></span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line"></span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">radix_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(check(li))</span><br></pre></td></tr></table></figure>





<h1 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><ul>
<li><strong><a href="#%E5%88%97%E8%A1%A8%EF%BC%88%E5%8D%B3%E9%A1%BA%E5%BA%8F%E8%A1%A8%EF%BC%89">顺序表</a></strong></li>
<li><strong><a href="#%E9%93%BE%E8%A1%A8">链表</a></strong></li>
</ul>
<h2 id="列表（即顺序表）"><a href="#列表（即顺序表）" class="headerlink" title="列表（即顺序表）"></a>列表（即顺序表）</h2><ol>
<li>列表内的每个节点储存的元素为地址，所以列表内部可以时任意数据类型</li>
<li>列表是动态分配存储空间，列表长度不够的时候，python底层会为列表重新开辟一个更大的空间，并把原先列表中存储的地址复制到新开辟的空间中</li>
</ol>
<h2 id="栈（后进先出）"><a href="#栈（后进先出）" class="headerlink" title="栈（后进先出）"></a>栈（后进先出）</h2><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>列表（li）结构可以实现栈</p>
<ul>
<li>进栈：li.append</li>
<li>出栈：li.pop</li>
<li>取栈顶：li[-1]</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack = Stack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br><span class="line"><span class="built_in">print</span>(stack.is_empty())</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br><span class="line"><span class="built_in">print</span>(stack.is_empty())</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br></pre></td></tr></table></figure>



<h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stack_linked</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Node=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = Node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = ListNode(val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = ListNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        val = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack = stack_linked()</span><br><span class="line">stack.push(<span class="number">5</span>)</span><br><span class="line">stack.push(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop().val)</span><br><span class="line"><span class="built_in">print</span>(stack.head.val)</span><br></pre></td></tr></table></figure>



<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><h4 id="迷宫问题（找的不一定是最短路径）"><a href="#迷宫问题（找的不一定是最短路径）" class="headerlink" title="迷宫问题（找的不一定是最短路径）"></a>迷宫问题（找的不一定是最短路径）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x + <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y + <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x - <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y - <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_path</span>(<span class="params">x1, y1, x2, y2</span>):</span><br><span class="line">    stack = []</span><br><span class="line">    stack.append((x1, y1))</span><br><span class="line">    <span class="built_in">map</span>[x1][y1]=<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                stack.append(nextNode)</span><br><span class="line">                <span class="built_in">map</span>[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">map</span>[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">            stack.pop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有路&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map_path(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>



<h4 id="十进制转化为其他进制"><a href="#十进制转化为其他进制" class="headerlink" title="十进制转化为其他进制"></a>十进制转化为其他进制</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制转化为其他进制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base_conversion</span>(<span class="params">val, base</span>):</span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">while</span> val != <span class="number">0</span>:</span><br><span class="line">        li.append(val % base)</span><br><span class="line">        val = val // base</span><br><span class="line"></span><br><span class="line">    li.reverse()</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,li))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base_conversion(<span class="number">120</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>



<h2 id="队列（先进先出）"><a href="#队列（先进先出）" class="headerlink" title="队列（先进先出）"></a>队列（先进先出）</h2><p>列表（li）可以实现队列</p>
<ul>
<li>入队：li.append</li>
<li>出队：li.pop(0)</li>
<li>取队头：li[0]</li>
</ul>
<h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><h4 id="基础队列类"><a href="#基础队列类" class="headerlink" title="基础队列类"></a>基础队列类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.queue) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue = Queue()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.is_empty())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.get_top())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.is_empty())</span><br></pre></td></tr></table></figure>



<h4 id="循环队列类"><a href="#循环队列类" class="headerlink" title="循环队列类"></a>循环队列类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">100</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        <span class="variable language_">self</span>.size = size</span><br><span class="line">        <span class="variable language_">self</span>.rear = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.front = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_filled():</span><br><span class="line">            <span class="variable language_">self</span>.rear = (<span class="variable language_">self</span>.rear + <span class="number">1</span>) % <span class="variable language_">self</span>.size</span><br><span class="line">            <span class="variable language_">self</span>.queue[<span class="variable language_">self</span>.rear] = element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is filled&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>.front = (<span class="variable language_">self</span>.front + <span class="number">1</span>) % <span class="variable language_">self</span>.size</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="variable language_">self</span>.front]</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="variable language_">self</span>.rear]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.rear == <span class="variable language_">self</span>.front</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_filled</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.rear + <span class="number">1</span>) % <span class="variable language_">self</span>.size == <span class="variable language_">self</span>.front</span><br><span class="line"></span><br><span class="line">queue=Queue(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.is_empty())</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line">queue.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.is_filled())</span><br><span class="line"><span class="built_in">print</span>(queue.get_top())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br></pre></td></tr></table></figure>



<h4 id="内置队列"><a href="#内置队列" class="headerlink" title="内置队列"></a>内置队列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque  <span class="comment"># 双向队列</span></span><br><span class="line"></span><br><span class="line">q = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">4</span>)</span><br><span class="line">q.append(<span class="number">5</span>)  <span class="comment"># 队尾进</span></span><br><span class="line"><span class="built_in">print</span>(q.popleft())  <span class="comment"># 队首出</span></span><br><span class="line"></span><br><span class="line">q.clear()</span><br><span class="line">q.appendleft(<span class="number">1</span>)  <span class="comment"># 队首进</span></span><br><span class="line">q.appendleft(<span class="number">2</span>)</span><br><span class="line">q.appendleft(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.pop())  <span class="comment"># 队尾出</span></span><br><span class="line"><span class="built_in">print</span>(q.pop())</span><br><span class="line"><span class="built_in">print</span>(q.pop())</span><br></pre></td></tr></table></figure>



<h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">queue_linked</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.front = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.rear = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val</span>):</span><br><span class="line">        node = Node(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.front <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.front = node</span><br><span class="line">            <span class="variable language_">self</span>.rear = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.rear.<span class="built_in">next</span> = node</span><br><span class="line">            <span class="variable language_">self</span>.rear = <span class="variable language_">self</span>.rear.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.front == <span class="variable language_">self</span>.rear <span class="keyword">and</span> <span class="variable language_">self</span>.front:</span><br><span class="line">            node = <span class="variable language_">self</span>.front</span><br><span class="line">            <span class="variable language_">self</span>.front = <span class="variable language_">self</span>.rear = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.front:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            node = <span class="variable language_">self</span>.front</span><br><span class="line">            <span class="variable language_">self</span>.front = <span class="variable language_">self</span>.front.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.front.val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.front <span class="keyword">and</span> <span class="variable language_">self</span>.rear:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.front</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            <span class="built_in">print</span>(p.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue = queue_linked()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.pop().val)</span><br><span class="line"><span class="built_in">print</span>(queue.pop().val)</span><br><span class="line"><span class="built_in">print</span>(queue.pop().val)</span><br><span class="line"><span class="comment"># print(queue.peek())</span></span><br><span class="line">queue.show()</span><br></pre></td></tr></table></figure>



<h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><h4 id="迷宫问题（求的是最短路径）"><a href="#迷宫问题（求的是最短路径）" class="headerlink" title="迷宫问题（求的是最短路径）"></a>迷宫问题（求的是最短路径）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x + <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y + <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x - <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y - <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_path</span>(<span class="params">path, <span class="built_in">map</span></span>):</span><br><span class="line">    curNode = path[-<span class="number">1</span>]</span><br><span class="line">    realpath = []</span><br><span class="line">    <span class="keyword">while</span> curNode[<span class="number">2</span>] != -<span class="number">1</span>:</span><br><span class="line">        realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">map</span>[curNode[<span class="number">0</span>]][curNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">        curNode = path[curNode[<span class="number">2</span>]]</span><br><span class="line">    realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">map</span>[curNode[<span class="number">0</span>]][curNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">    realpath.reverse()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> realpath:</span><br><span class="line">        <span class="built_in">print</span>(node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_path_shortest</span>(<span class="params">x1, y1, x2, y2, <span class="built_in">map</span></span>):</span><br><span class="line">    map1 = copy.deepcopy(<span class="built_in">map</span>)</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append((x1, y1, -<span class="number">1</span>))</span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = queue.popleft()</span><br><span class="line">        path.append(curNode)</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            print_path(path, <span class="built_in">map</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> di <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = di(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> map1[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                queue.append((nextNode[<span class="number">0</span>], nextNode[<span class="number">1</span>], <span class="built_in">len</span>(path) - <span class="number">1</span>))</span><br><span class="line">                map1[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有路&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">map_path_shortest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="built_in">map</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>







<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="单链表的创建"><a href="#单链表的创建" class="headerlink" title="单链表的创建"></a>单链表的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LinkListIterator</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, node</span>):</span><br><span class="line">            <span class="variable language_">self</span>.node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.node:</span><br><span class="line">                cur_node = <span class="variable language_">self</span>.node</span><br><span class="line">                <span class="variable language_">self</span>.node = cur_node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> cur_node.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> iterable:</span><br><span class="line">            <span class="variable language_">self</span>.extend(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        s = ListNode(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = s</span><br><span class="line">            <span class="variable language_">self</span>.tail = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.tail.<span class="built_in">next</span> = s</span><br><span class="line">            <span class="variable language_">self</span>.tail = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> iterable:</span><br><span class="line">            <span class="variable language_">self</span>.append(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="keyword">if</span> n == obj:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, li: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = ListNode(li[<span class="number">0</span>])</span><br><span class="line">        <span class="variable language_">self</span>.tail = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">            node = ListNode(element)</span><br><span class="line">            <span class="variable language_">self</span>.tail.<span class="built_in">next</span> = node</span><br><span class="line">            <span class="variable language_">self</span>.tail = node</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_head</span>(<span class="params">self, li: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = ListNode(li[<span class="number">0</span>])</span><br><span class="line">        <span class="variable language_">self</span>.tail = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">            node = ListNode(element)</span><br><span class="line">            node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">            <span class="variable language_">self</span>.head = node</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        Node = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> Node != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(Node.val, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            Node = Node.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        node = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> node != <span class="variable language_">self</span>.tail:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.get_length():</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> index:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cur.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_index</span>(<span class="params">self, value</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.val == value:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt;= <span class="number">0</span>:</span><br><span class="line">            node = ListNode(val)</span><br><span class="line">            node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">            <span class="variable language_">self</span>.head = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt;= <span class="variable language_">self</span>.get_length():</span><br><span class="line">            <span class="variable language_">self</span>.tail.<span class="built_in">next</span> = ListNode(val)</span><br><span class="line">            <span class="variable language_">self</span>.tail = <span class="variable language_">self</span>.tail.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> index:</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        node.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.get_length():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pre = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">1</span>:</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        pre.<span class="built_in">next</span> = pre.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtValue</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head.val == value:</span><br><span class="line">            <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == value:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.LinkListIterator(<span class="variable language_">self</span>.head)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;&lt;&quot;</span> + <span class="string">&quot;,&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="variable language_">self</span>)) + <span class="string">&quot;&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = LinkedList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>])</span><br><span class="line">li.show()</span><br><span class="line"><span class="built_in">print</span>(li.get_length())</span><br><span class="line"><span class="built_in">print</span>(li.get_index(<span class="number">6</span>))</span><br><span class="line">li.addAtIndex(<span class="number">7</span>, <span class="number">4</span>)</span><br><span class="line">li.show()</span><br><span class="line">li.deleteAtValue(<span class="number">3</span>)</span><br><span class="line">li.show()</span><br><span class="line"><span class="built_in">print</span>(li.get_index(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = ListNode()</span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">0</span>  <span class="comment"># 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> (index):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cur.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtHead</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_node = ListNode(val)</span><br><span class="line">        new_node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>.head.<span class="built_in">next</span> = new_node</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtTail</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_node = ListNode(val)</span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> (cur.<span class="built_in">next</span>):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = new_node</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.addAtHead(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index == <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="variable language_">self</span>.addAtTail(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt; <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        pre = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> (index):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        node.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pre = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> (index):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        pre.<span class="built_in">next</span> = pre.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>.size -= <span class="number">1</span></span><br></pre></td></tr></table></figure>





<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139985-802441053.png" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140429-1838041831.png" style="zoom:80%;" />





<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140952-1508005939.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003141477-1809483299.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142022-1131773000.png" style="zoom:80%;" />

<h4 id="双链表的创建"><a href="#双链表的创建" class="headerlink" title="双链表的创建"></a>双链表的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.prev = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedListDouble</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._head, <span class="variable language_">self</span>._tail = Node(<span class="number">0</span>), Node(<span class="number">0</span>)  <span class="comment"># 虚拟节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head.<span class="built_in">next</span>, <span class="variable language_">self</span>._tail.prev = <span class="variable language_">self</span>._tail, <span class="variable language_">self</span>._head</span><br><span class="line">        <span class="variable language_">self</span>._count = <span class="number">0</span>  <span class="comment"># 添加的节点数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_node</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; Node:</span><br><span class="line">        <span class="comment"># 当index小于_count//2时, 使用_head查找更快, 反之_tail更快</span></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="variable language_">self</span>._count // <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 使用prev往前找</span></span><br><span class="line">            node = <span class="variable language_">self</span>._tail</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._count - index):</span><br><span class="line">                node = node.prev</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 使用next往后找</span></span><br><span class="line">            node = <span class="variable language_">self</span>._head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>):</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the value of the index-th node in the linked list. If the index is invalid, return -1.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="variable language_">self</span>._count:</span><br><span class="line">            node = <span class="variable language_">self</span>._get_node(index)</span><br><span class="line">            <span class="keyword">return</span> node.val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtHead</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the first element of the linked list.</span></span><br><span class="line"><span class="string">         After the insertion, the new node will be the first node of the linked list.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._update(<span class="variable language_">self</span>._head, <span class="variable language_">self</span>._head.<span class="built_in">next</span>, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtTail</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Append a node of value val to the last element of the linked list.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._update(<span class="variable language_">self</span>._tail.prev, <span class="variable language_">self</span>._tail, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the index-th node in the linked list.</span></span><br><span class="line"><span class="string">        If index equals to the length of linked list, the node will be appended to the end of linked list.</span></span><br><span class="line"><span class="string">        If index is greater than the length, the node will not be inserted.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt; <span class="variable language_">self</span>._count:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = <span class="variable language_">self</span>._get_node(index)</span><br><span class="line">        <span class="variable language_">self</span>._update(node.prev, node, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update</span>(<span class="params">self, prev: Node, <span class="built_in">next</span>: Node, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            更新节点</span></span><br><span class="line"><span class="string">            :param prev: 相对于更新的前一个节点</span></span><br><span class="line"><span class="string">            :param next: 相对于更新的后一个节点</span></span><br><span class="line"><span class="string">            :param val:  要添加的节点值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 计数累加</span></span><br><span class="line">        <span class="variable language_">self</span>._count += <span class="number">1</span></span><br><span class="line">        node = Node(val)</span><br><span class="line">        prev.<span class="built_in">next</span>, <span class="built_in">next</span>.prev = node, node</span><br><span class="line">        node.prev, node.<span class="built_in">next</span> = prev, <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Delete the index-th node in the linked list, if the index is valid.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="variable language_">self</span>._count:</span><br><span class="line">            node = <span class="variable language_">self</span>._get_node(index)</span><br><span class="line">            <span class="comment"># 计数-1</span></span><br><span class="line">            <span class="variable language_">self</span>._count -= <span class="number">1</span></span><br><span class="line">            node.prev.<span class="built_in">next</span>, node.<span class="built_in">next</span>.prev = node.<span class="built_in">next</span>, node.prev</span><br></pre></td></tr></table></figure>





<h3 id="链表与数组的差别"><a href="#链表与数组的差别" class="headerlink" title="链表与数组的差别"></a>链表与数组的差别</h3><ul>
<li>链表<ul>
<li>优点：插入删除操作较快，内存可以动态分配</li>
<li>缺点：查找操作较慢</li>
</ul>
</li>
<li>数组<ul>
<li>优点：结构简单，查找操作快</li>
<li>缺点：插入删除操作较慢，内存不能动态分配</li>
</ul>
</li>
</ul>
<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>python中的<strong>集合</strong>，<strong>字典</strong>结构在底层都是用的哈希表来实现的</p>
<h2 id="哈希表（开辟的一系列连续的地址即数组）"><a href="#哈希表（开辟的一系列连续的地址即数组）" class="headerlink" title="哈希表（开辟的一系列连续的地址即数组）"></a>哈希表（开辟的一系列连续的地址即数组）</h2><h2 id="哈希函数（计算输入的值在哈希表中对应下标的函数）"><a href="#哈希函数（计算输入的值在哈希表中对应下标的函数）" class="headerlink" title="哈希函数（计算输入的值在哈希表中对应下标的函数）"></a>哈希函数（计算输入的值在哈希表中对应下标的函数）</h2><h2 id="哈希冲突（对于不同的输入哈希函数输出的结果可能相同）"><a href="#哈希冲突（对于不同的输入哈希函数输出的结果可能相同）" class="headerlink" title="哈希冲突（对于不同的输入哈希函数输出的结果可能相同）"></a>哈希冲突（对于不同的输入哈希函数输出的结果可能相同）</h2><ul>
<li>解决哈希冲突的方法<ul>
<li>线性探测法：如果地址冲突，那么它所存放的位置在哈希表中加一</li>
<li>二次探测法：利用二次函数，计算冲突时，应该存储的位置</li>
<li>拉链存储法：哈希表的每个节点存储的是链表<ul>
<li><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142551-437647432.png" style="zoom:80%;" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>根节点</li>
<li>叶子节点</li>
<li>树的深度</li>
<li>节点的度</li>
<li>树的度</li>
<li>父亲节点</li>
<li>孩子节点（左孩子&#x2F;右孩子）</li>
<li>子树</li>
</ul>
<h2 id="二叉树（度为2的树）"><a href="#二叉树（度为2的树）" class="headerlink" title="二叉树（度为2的树）"></a>二叉树（度为2的树）</h2><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol>
<li><p><strong>对于非空二叉树，如果叶子节点树为n<del>0</del>，度为2的节点数为n<del>2</del>，则有n<del>0</del>&#x3D;n<del>2</del>+1</strong></p>
</li>
<li><p><strong>对于非空二叉树的第i层上最多有2^i-1^个节点（满二叉树）</strong></p>
</li>
<li><p><strong>一颗深度为k的二叉树中，最多有2^k^-1个节点（满二叉树）</strong></p>
</li>
<li><p><strong>具有n个节点的完全二叉树的深度为：$\lfloor log_2n \rfloor+1$</strong></p>
</li>
<li><p><strong>如果对于一颗有n个节点的完全二叉树的节点按层序编号，则对任意节点i（1&lt;&#x3D;i&lt;&#x3D;n）</strong></p>
<ol>
<li><p><strong>如果i&#x3D;1，则节点i时二叉树的根节点，如果i&gt;1,则其父亲节点为$\lfloor i&#x2F;2 \rfloor$</strong></p>
</li>
<li><p><strong>如果$2i\leq n$，则其左孩子是节点2i，否则i无左孩子，为叶子节点</strong></p>
</li>
<li><p><strong>如果$2i+1\leq n$，其右孩子是节点2i+1，否则节点i无右孩子</strong></p>
</li>
</ol>
</li>
</ol>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003143534-675539412.png" alt="Snipaste_2023-01-26_11-05-11" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144113-2080533132.png" alt="Snipaste_2023-01-26_11-08-01" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144872-1933819243.png" alt="Snipaste_2023-01-26_11-08-32" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003145823-249465355.png" alt="Snipaste_2023-01-26_11-09-15" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003146532-1929601304.png" style="zoom:80%;" />



<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul>
<li><p>顺序存储（用列表或者数组储存）（一般适用于完全二叉树）</p>
</li>
<li><p>链式存储</p>
</li>
<li><p>列表存储</p>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003147452-974457570.png" style="zoom:80%;" /></li>
</ul>
<h3 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h3><h4 id="层次按序创建"><a href="#层次按序创建" class="headerlink" title="层次按序创建"></a>层次按序创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = left</span><br><span class="line">        <span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.lt = []</span><br><span class="line">        <span class="keyword">if</span> li:</span><br><span class="line">            <span class="variable language_">self</span>.extend(li)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, li: <span class="built_in">list</span></span>):  <span class="comment"># 层次添加创建</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">            <span class="variable language_">self</span>.add(i)</span><br><span class="line">        <span class="variable language_">self</span>.clear()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, number</span>):</span><br><span class="line">        <span class="comment"># if number is None:</span></span><br><span class="line">        <span class="comment">#     self.lt.pop(0)</span></span><br><span class="line">        <span class="comment">#     return</span></span><br><span class="line">        node = TreeNode(number)  <span class="comment"># 将输入的数字节点化，使其具有左右孩子的属性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.root == <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.root = node</span><br><span class="line">            <span class="variable language_">self</span>.lt.append(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="variable language_">self</span>.lt:</span><br><span class="line">                point = <span class="variable language_">self</span>.lt[<span class="number">0</span>]  <span class="comment"># 依次对左右孩子未满的节点分配孩子</span></span><br><span class="line">                <span class="keyword">if</span> point.val == <span class="literal">None</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.lt.pop(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> point.left == <span class="literal">None</span>:</span><br><span class="line">                    point.left = node</span><br><span class="line">                    <span class="variable language_">self</span>.lt.append(point.left)  <span class="comment"># 该节点后面作为父节点也是未满的，也要加入到列表中。</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> point.right == <span class="literal">None</span>:</span><br><span class="line">                    point.right = node</span><br><span class="line">                    <span class="variable language_">self</span>.lt.append(point.right)  <span class="comment"># 与左孩子同理</span></span><br><span class="line">                    <span class="variable language_">self</span>.lt.pop(<span class="number">0</span>)  <span class="comment"># 表示该节点已拥有左右孩子，从未满列表中去除</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):  <span class="comment"># 清除值为None的节点</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">level_order_traversal</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">            queue = deque()</span><br><span class="line">            queue.append(root)</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.val == <span class="literal">None</span>:</span><br><span class="line">                    node.left = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right <span class="keyword">and</span> node.right.val == <span class="literal">None</span>:</span><br><span class="line">                    node.right = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line"></span><br><span class="line">        level_order_traversal(<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):  <span class="comment"># 前序遍历输出</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(root.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            dfs(root.left)</span><br><span class="line">            dfs(root.right)</span><br><span class="line"></span><br><span class="line">        dfs(<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, val</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">searchdata</span>(<span class="params">T, val</span>):</span><br><span class="line">            <span class="keyword">if</span> T == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> T.val == val:</span><br><span class="line">                <span class="keyword">return</span> T</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = searchdata(T.left, val)</span><br><span class="line">                <span class="keyword">if</span> p != <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> p</span><br><span class="line">                p = searchdata(T.right, val)</span><br><span class="line">                <span class="keyword">if</span> p != <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> searchdata(<span class="variable language_">self</span>.root, val)</span><br></pre></td></tr></table></figure>



<h4 id="函数前序创建"><a href="#函数前序创建" class="headerlink" title="函数前序创建"></a>函数前序创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">creat_binary_tree</span>(<span class="params">input_list=[]</span>):</span><br><span class="line">    <span class="comment"># 构建二叉树</span></span><br><span class="line">    <span class="comment"># param input_list:输入数列</span></span><br><span class="line">    <span class="comment"># 当我们在函数中传入的数列不存在或者传入的数列中元素的个数等于0时，表示是一棵空树</span></span><br><span class="line">    <span class="comment"># 此时不需要操作，直接返回None即可</span></span><br><span class="line">    <span class="keyword">if</span> input_list <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(input_list) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 结点中的数据等于列表中的第一个元素，每次pop出去一个元素，后面的元素会往前走一个位置</span></span><br><span class="line">    <span class="comment"># 这样可以保证元素的一次弹出</span></span><br><span class="line">    val = input_list.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 当弹出的元素是None时，表示该节点为空，直接返回None</span></span><br><span class="line">    <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 通过刚才定义的TreeNode类新建node</span></span><br><span class="line">    node = TreeNode(val)</span><br><span class="line">    <span class="comment"># node的左孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class="line">    node.left = creat_binary_tree(input_list)</span><br><span class="line">    <span class="comment"># node的右孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class="line">    node.right = creat_binary_tree(input_list)</span><br><span class="line">    <span class="comment"># 返回node结点</span></span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>



<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ol>
<li>递归遍历</li>
<li>非递归遍历</li>
</ol>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层次遍历</li>
</ul>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003148331-2135232511.png" style="zoom:80%;" />

<h4 id="递归遍历代码"><a href="#递归遍历代码" class="headerlink" title="递归遍历代码"></a>递归遍历代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order_traversal</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="comment"># param node:二叉树节点</span></span><br><span class="line">    <span class="comment"># 当node为空表示为一棵空树，不需要进行前序遍历直接返回即可</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 此时node不为空，直接打印node的val域</span></span><br><span class="line">    <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="comment"># 递归的先序遍历node的左孩子</span></span><br><span class="line">    pre_order_traversal(node.left)</span><br><span class="line">    <span class="comment"># 递归的先序遍历node的左孩子</span></span><br><span class="line">    pre_order_traversal(node.right)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">in_order_traversal</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="comment"># param node:二叉树节点</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 递归的中序遍历node的左孩子</span></span><br><span class="line">    in_order_traversal(node.left)</span><br><span class="line">    <span class="comment"># 打印节点的值</span></span><br><span class="line">    <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="comment"># 递归的中序遍历node的左孩子</span></span><br><span class="line">    in_order_traversal(node.right)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_order_traversal</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="comment"># param node:二叉树节点</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 递归的后序遍历node的左孩子</span></span><br><span class="line">    post_order_traversal(node.left)</span><br><span class="line">    <span class="comment"># 递归的后序遍历node的左孩子</span></span><br><span class="line">    post_order_traversal(node.right)</span><br><span class="line">    <span class="comment"># 打印节点的值</span></span><br><span class="line">    <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque, Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level_order_traversal</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            queue.append(node.right)</span><br></pre></td></tr></table></figure>



<h4 id="非递归遍历代码"><a href="#非递归遍历代码" class="headerlink" title="非递归遍历代码"></a>非递归遍历代码</h4><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003149366-1785461924.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="comment"># 根结点为空则返回空列表</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack = [root]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="comment"># 中结点先处理</span></span><br><span class="line">        result.append(node.val)</span><br><span class="line">        <span class="comment"># 右孩子先入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        <span class="comment"># 左孩子后入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序遍历-迭代-LC94_二叉树的中序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack = []  <span class="comment"># 不能提前将root结点加入stack中</span></span><br><span class="line">    result = []</span><br><span class="line">    cur = root</span><br><span class="line">    <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">        <span class="comment"># 先迭代访问最底层的左子树结点</span></span><br><span class="line">        <span class="keyword">if</span> cur:</span><br><span class="line">            stack.append(cur)</span><br><span class="line">            cur = cur.left</span><br><span class="line">        <span class="comment"># 到达最左结点后处理栈顶结点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            result.append(cur.val)</span><br><span class="line">            <span class="comment"># 取栈顶元素右结点</span></span><br><span class="line">            cur = cur.right</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后序遍历-迭代-LC145_二叉树的后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack = [root]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="comment"># 中结点先处理</span></span><br><span class="line">        result.append(node.val)</span><br><span class="line">        <span class="comment"># 左孩子先入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">        <span class="comment"># 右孩子后入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">    <span class="comment"># 将最终的数组翻转</span></span><br><span class="line">    <span class="keyword">return</span> result[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>





<h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003150422-1241951893.png" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151230-137109831.png" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151864-1062009624.png" style="zoom:80%;" />

<p><img src="/"></p>
<h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, head=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = head</span><br><span class="line">        <span class="variable language_">self</span>.lst = []</span><br><span class="line">        <span class="variable language_">self</span>.huffman_code = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, li: <span class="built_in">list</span></span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">            res.append(HuffmanNode(i))</span><br><span class="line">        <span class="variable language_">self</span>.lst = res[:]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(res) &gt; <span class="number">1</span>:</span><br><span class="line">            res.sort(key=<span class="keyword">lambda</span> item: item.val)</span><br><span class="line">            node_left = res.pop(<span class="number">0</span>)</span><br><span class="line">            node_right = res.pop(<span class="number">0</span>)</span><br><span class="line">            node_father = HuffmanNode(node_left.val + node_right.val)</span><br><span class="line">            node_father.left = node_left</span><br><span class="line">            node_father.right = node_right</span><br><span class="line">            node_left.parent = node_father</span><br><span class="line">            node_right.parent = node_father</span><br><span class="line">            res.append(node_father)</span><br><span class="line"></span><br><span class="line">        res[<span class="number">0</span>].parent = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.head = res[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encoding</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        huffman_code = [<span class="string">&#x27;&#x27;</span>] * <span class="built_in">len</span>(<span class="variable language_">self</span>.lst)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.lst)):</span><br><span class="line">            node = <span class="variable language_">self</span>.lst[i]</span><br><span class="line">            <span class="keyword">while</span> node != <span class="variable language_">self</span>.head:</span><br><span class="line">                <span class="keyword">if</span> node.parent.left == node:</span><br><span class="line">                    huffman_code[i] = <span class="string">&quot;0&quot;</span> + huffman_code[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    huffman_code[i] = <span class="string">&quot;1&quot;</span> + huffman_code[i]</span><br><span class="line">                node = node.parent</span><br><span class="line">        <span class="variable language_">self</span>.huffman_code = huffman_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">huffmantree = HuffmanTree()</span><br><span class="line">huffmantree.create([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">level_order_traversal(huffmantree.head)</span><br><span class="line">huffmantree.encoding()</span><br><span class="line"><span class="built_in">print</span>(huffmantree.huffman_code)</span><br></pre></td></tr></table></figure>





<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003152778-490328608.png" style="zoom:80%;" />



<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul>
<li>插入</li>
<li>查询</li>
<li>删除</li>
</ul>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003153588-922353087.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154127-989110491.png" style="zoom:80%;" />





<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154644-1062126191.png" style="zoom:80%;" />





<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BiTreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = data</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="comment"># if self.root is None:</span></span><br><span class="line">            <span class="comment">#     self.root=BiTreeNode(data[0])</span></span><br><span class="line">            <span class="comment">#     data=data[1:]</span></span><br><span class="line">            <span class="comment"># for i in data:</span></span><br><span class="line">            <span class="comment">#     self.insert(self.root, i)</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">                <span class="variable language_">self</span>.insert_no_rec(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, node, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = BiTreeNode(val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt;= node.val:</span><br><span class="line">            node.left = <span class="variable language_">self</span>.insert(node.left, val)</span><br><span class="line">        <span class="keyword">elif</span> val &gt; node.val:</span><br><span class="line">            node.right = <span class="variable language_">self</span>.insert(node.right, val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_no_rec</span>(<span class="params">self, val</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="variable language_">self</span>.root = BiTreeNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt;= p.val:</span><br><span class="line">                <span class="keyword">if</span> p.left:</span><br><span class="line">                    p = p.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.left = BiTreeNode(val)</span><br><span class="line">                    p.left.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> val &gt; p.val:</span><br><span class="line">                <span class="keyword">if</span> p.right:</span><br><span class="line">                    p = p.right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.right = BiTreeNode(val)</span><br><span class="line">                    p.right.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, node, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> node.val &lt; val:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.query(node.right, val)</span><br><span class="line">        <span class="keyword">elif</span> node.val &gt; val:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.query(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_no_rec</span>(<span class="params">self, val</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            <span class="keyword">if</span> p.val &lt; val:</span><br><span class="line">                p = p.right</span><br><span class="line">            <span class="keyword">elif</span> p.val &gt; val:</span><br><span class="line">                p = p.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__remove_node_1</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> node == node.parent.left:</span><br><span class="line">            node.parent.left = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__remove_node_21</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            <span class="variable language_">self</span>.root = node.left</span><br><span class="line">            node.left.parent = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> node == node.parent.left:</span><br><span class="line">            node.parent.left = node.left</span><br><span class="line">            node.left.parent = node.parent</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.right = node.left</span><br><span class="line">            node.left.parent = node.parent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__remove_node_22</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            <span class="variable language_">self</span>.root = node.right</span><br><span class="line">        <span class="keyword">elif</span> node == node.parent.left:</span><br><span class="line">            node.parent.left = node.right</span><br><span class="line">            node.right.parent = node.parent</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.right = node.right</span><br><span class="line">            node.right.parent = node.parent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.root:</span><br><span class="line">            node = <span class="variable language_">self</span>.query_no_rec(val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="variable language_">self</span>.__remove_node_1(node)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="variable language_">self</span>.__remove_node_21(node)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.left:</span><br><span class="line">                <span class="variable language_">self</span>.__remove_node_22(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min_node = node.right</span><br><span class="line">                <span class="keyword">while</span> min_node.left:</span><br><span class="line">                    min_node = min_node.left</span><br><span class="line">                node.val = min_node.val</span><br><span class="line">                <span class="keyword">if</span> min_node.right:</span><br><span class="line">                    <span class="variable language_">self</span>.__remove_node_22(min_node)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.__remove_node_1(min_node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = BST([<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>])</span><br><span class="line">in_order_traversal(T.root)</span><br><span class="line">T.delete(<span class="number">1</span>)</span><br><span class="line">T.delete(<span class="number">1</span>)</span><br><span class="line">T.delete(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">in_order_traversal(T.root)</span><br></pre></td></tr></table></figure>





<h2 id="AVL树（平衡二叉搜索树）"><a href="#AVL树（平衡二叉搜索树）" class="headerlink" title="AVL树（平衡二叉搜索树）"></a>AVL树（平衡二叉搜索树）</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155158-1066944240.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155688-884961537.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156322-127906496.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156892-1756837025.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003157549-2080550850.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003158464-610122918.png" style="zoom: 80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003159072-1840188905.png" style="zoom:80%;" />



<p>旋转操作过于复杂，可以先将列表元素排好序，然后使用二分递归的方法</p>
<p>代码如下：</p>
<h3 id="二分递归代码"><a href="#二分递归代码" class="headerlink" title="二分递归代码"></a>二分递归代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sortedArrayToBST</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; TreeNode:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">left, right</span>):</span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(nums[mid])</span><br><span class="line">        root.left = helper(left, mid - <span class="number">1</span>)</span><br><span class="line">        root.right = helper(mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">root = sortedArrayToBST(li)</span><br><span class="line">in_order_traversal(root)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">pre_order_traversal(root)</span><br></pre></td></tr></table></figure>



<h1 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003200141-1341052574.png" style="zoom:80%;" />



<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003201672-1580609190.png" alt="Snipaste_2023-01-29_12-34-45" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003202403-279314825.png" alt="Snipaste_2023-01-29_12-35-01" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203221-868073196.png" alt="Snipaste_2023-01-29_12-35-20" style="zoom:80%;" />



<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203861-1157806461.png" alt="Snipaste_2023-01-29_12-35-47" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003204640-1744020770.png" alt="Snipaste_2023-01-29_12-36-19" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003205278-1739834.png" alt="Snipaste_2023-01-29_12-36-36" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206036-1784944727.png" alt="Snipaste_2023-01-29_12-36-59" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206570-1588493395.png" alt="Snipaste_2023-01-29_12-37-34" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png" alt="Snipaste_2023-01-29_12-38-14" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png" alt="Snipaste_2023-01-29_12-38-31" style="zoom:80%;" />



<h2 id="二叉树的转换"><a href="#二叉树的转换" class="headerlink" title="二叉树的转换"></a>二叉树的转换</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png" alt="Snipaste_2023-01-29_12-42-06" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png" alt="Snipaste_2023-01-29_12-42-19" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png" alt="Snipaste_2023-01-29_12-42-43" style="zoom:80%;" />



<h2 id="树和森林的转换"><a href="#树和森林的转换" class="headerlink" title="树和森林的转换"></a>树和森林的转换</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png" alt="Snipaste_2023-01-29_12-43-13" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png" alt="Snipaste_2023-01-29_12-43-35" style="zoom:80%;" />



<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png" alt="Snipaste_2023-01-29_12-38-31"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png" alt="Snipaste_2023-01-29_12-42-06"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png" alt="Snipaste_2023-01-29_12-42-19"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png" alt="Snipaste_2023-01-29_12-42-43"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png" alt="Snipaste_2023-01-29_12-43-13"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png" alt="Snipaste_2023-01-29_12-43-35"></p>
<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213366-1097965655.png" alt="Snipaste_2023-01-29_12-53-48" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213974-555461917.png" alt="Snipaste_2023-01-29_12-54-05" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003214649-1107760089.png" alt="Snipaste_2023-01-29_12-54-16" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003215384-1593542650.png" alt="Snipaste_2023-01-29_12-54-46" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003216741-1239051182.png" alt="Snipaste_2023-01-29_12-55-05" style="zoom:80%;" />



<h2 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003217958-1656900174.png" alt="Snipaste_2023-01-29_12-55-28" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003219485-415832396.png" alt="Snipaste_2023-01-29_12-55-40" style="zoom:80%;" />





<h1 id="KMP匹配算法"><a href="#KMP匹配算法" class="headerlink" title="KMP匹配算法"></a>KMP匹配算法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;KMP模板&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">prefix_function</span>(<span class="params">s</span>):     </span><br><span class="line">            n = <span class="built_in">len</span>(s)</span><br><span class="line">            pi = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">while</span> j&gt;<span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:     <span class="comment"># 当前位置s[i]与s[j]不等</span></span><br><span class="line">                    j = pi[j-<span class="number">1</span>]                 <span class="comment"># j指向之前位置，s[i]与s[j]继续比较</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j]:                <span class="comment"># s[i]与s[j]相等，j+1，指向后一位</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                pi[i] = j</span><br><span class="line">            <span class="keyword">return</span> pi</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)</span><br><span class="line">        pi = prefix_function(t)             <span class="comment"># 预处理得到t的前缀函数</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;再次基于KMP的思想在s中匹配t&#x27;&#x27;&#x27;</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> j&gt;<span class="number">0</span> <span class="keyword">and</span> s[i] != t[j]:</span><br><span class="line">                j = pi[j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s[i] == t[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> j == m:          <span class="comment"># 匹配到了t，直接返回</span></span><br><span class="line">                    <span class="keyword">return</span> i-m+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>



<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003220125-1474032413.png" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221102-1400626471.png" alt="Snipaste_2023-01-30_21-23-39" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221760-951587005.png" alt="Snipaste_2023-01-30_21-23-51" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003223080-1565255626.png" alt="Snipaste_2023-01-30_21-24-05" style="zoom:80%;" />



<h3 id="图的相关概念"><a href="#图的相关概念" class="headerlink" title="图的相关概念"></a>图的相关概念</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224084-979841846.png" alt="Snipaste_2023-01-30_21-24-39" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224678-1822077730.png" alt="Snipaste_2023-01-30_21-27-08" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003225334-754846157.png" alt="Snipaste_2023-01-30_21-27-21" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003226064-2073402920.png" alt="Snipaste_2023-01-30_21-28-02" style="zoom:80%;" />



<h3 id="图的相关性质"><a href="#图的相关性质" class="headerlink" title="图的相关性质"></a>图的相关性质</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003227782-1734937726.png" alt="Snipaste_2023-01-30_21-28-23" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003228360-914587659.png" alt="Snipaste_2023-01-30_21-28-57" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003229809-1591759326.png" alt="Snipaste_2023-01-30_21-29-56" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230414-1174857769.png" alt="Snipaste_2023-01-30_21-30-30" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230901-753351247.png" alt="Snipaste_2023-01-30_21-30-56" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232047-1465767147.png" alt="Snipaste_2023-01-30_21-32-43" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232591-1535683489.png" alt="Snipaste_2023-01-30_21-32-49" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003233903-1441000794.png" alt="Snipaste_2023-01-30_21-35-23" style="zoom:80%;" />



<h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003234489-1562431798.png" alt="Snipaste_2023-01-30_21-37-04" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235002-186776549.png" alt="Snipaste_2023-01-30_21-38-14" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235940-966594377.png" alt="Snipaste_2023-01-30_21-38-52" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003236923-1957281841.png" alt="Snipaste_2023-01-30_21-40-54" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003237832-290120583.png" alt="Snipaste_2023-01-30_21-41-09" style="zoom:80%;" />



<h3 id="邻接矩阵的实现"><a href="#邻接矩阵的实现" class="headerlink" title="邻接矩阵的实现"></a>邻接矩阵的实现</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003238610-1261452464.png" alt="Snipaste_2023-01-30_21-44-14" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003239140-377931477.png" alt="Snipaste_2023-01-30_21-44-57" style="zoom:80%;" />

<h3 id="邻接矩阵的优劣"><a href="#邻接矩阵的优劣" class="headerlink" title="邻接矩阵的优劣"></a>邻接矩阵的优劣</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240392-891512478.png" alt="Snipaste_2023-01-30_21-45-11" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240971-599857625.png" alt="Snipaste_2023-01-30_21-45-28" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003241646-615119159.png" alt="Snipaste_2023-01-30_21-46-00" style="zoom:80%;" />



<h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242241-1455856646.png" alt="Snipaste_2023-01-30_21-47-17" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242920-1071739990.png" alt="Snipaste_2023-01-30_21-48-11" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244210-201636686.png" alt="Snipaste_2023-01-30_21-49-30" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244800-1895554840.png" alt="Snipaste_2023-01-30_21-51-13" style="zoom:80%;" />





<h3 id="邻接表的实现"><a href="#邻接表的实现" class="headerlink" title="邻接表的实现"></a>邻接表的实现</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003245466-1236361989.png" alt="Snipaste_2023-01-30_21-52-09" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003246047-1124627896.png" alt="Snipaste_2023-01-30_21-52-42" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003247795-1194230170.png" alt="Snipaste_2023-01-30_22-01-57" style="zoom:80%;" />



<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003248572-1701553633.png" alt="Snipaste_2023-01-30_22-02-13" style="zoom:80%;" />



<h2 id="库的调用"><a href="#库的调用" class="headerlink" title="库的调用"></a>库的调用</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249097-1216946408.png" alt="Snipaste_2023-01-30_22-02-38" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249555-896105563.png" alt="Snipaste_2023-01-30_22-04-03" style="zoom:80%;" />



<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003250450-820535375.png" alt="Snipaste_2023-01-30_22-04-28" style="zoom:80%;" />

<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327912-1791489249.png"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003328541-504477056.png" alt="Snipaste_2023-02-28_16-08-42"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003329403-1941220318.png" alt="Snipaste_2023-02-28_16-13-13"></p>
<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003330598-1653542503.png" alt="Snipaste_2023-02-28_16-19-30"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331313-1137883969.png" alt="Snipaste_2023-02-28_16-21-29"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331838-750586068.png" alt="Snipaste_2023-02-28_16-23-46"></p>
<h3 id="BFS与DFS算法比较"><a href="#BFS与DFS算法比较" class="headerlink" title="BFS与DFS算法比较"></a>BFS与DFS算法比较</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003332467-729896859.png" alt="Snipaste_2023-02-28_16-24-06"></p>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003333918-1866209963.png" alt="Snipaste_2023-02-28_16-26-09"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003334742-393473291.png" alt="Snipaste_2023-02-28_16-30-23"></p>
<h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335324-58306181.png" alt="Snipaste_2023-02-28_16-44-11"></p>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335897-1621272128.png" alt="Snipaste_2023-02-28_16-44-51"></p>
<h3 id="算法比较"><a href="#算法比较" class="headerlink" title="算法比较"></a>算法比较</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003336585-2131642442.png" alt="Snipaste_2023-02-28_16-45-00"></p>
<h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><h3 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003337712-141859434.png" alt="Snipaste_2023-02-28_17-03-13"></p>
<h3 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339292-402468428.png" alt="Snipaste_2023-02-28_17-10-57"></p>
<h2 id="AOV网"><a href="#AOV网" class="headerlink" title="AOV网"></a>AOV网</h2><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339993-7971698.png" alt="Snipaste_2023-02-28_19-06-17"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003340535-1327013302.png" alt="Snipaste_2023-02-28_19-53-17"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003341740-1508867142.png" alt="Snipaste_2023-02-28_19-06-41"></p>
<h2 id="AOE网"><a href="#AOE网" class="headerlink" title="AOE网"></a>AOE网</h2><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003342477-1005485536.png" alt="Snipaste_2023-02-28_19-54-05"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003343197-1311676865.png" alt="Snipaste_2023-02-28_19-53-51"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003344783-1167898578.png" alt="Snipaste_2023-02-28_19-54-39"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003345521-1452441577.png" alt="Snipaste_2023-02-28_19-55-12"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003346601-1565523348.png"></p>
<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003347998-887538165.png" alt="Snipaste_2023-02-28_19-50-40"></p>
<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003251575-1640247239.png" style="zoom:80%;" />



<h2 id="找零问题"><a href="#找零问题" class="headerlink" title="找零问题"></a>找零问题</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252277-1148509851.png" style="zoom:80%;" />

<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [<span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">t, n</span>):</span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line">    <span class="keyword">for</span> i, money <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">        m[i] = n // money</span><br><span class="line">        n = n % money</span><br><span class="line">    <span class="keyword">return</span> m, n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(change(t, <span class="number">376</span>))</span><br></pre></td></tr></table></figure>







<h2 id="分数背包问题"><a href="#分数背包问题" class="headerlink" title="分数背包问题"></a>分数背包问题</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252844-150015143.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253313-1442258686.png" style="zoom:80%;" />

<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods=[(<span class="number">60</span>,<span class="number">10</span>),(<span class="number">100</span>,<span class="number">20</span>),(<span class="number">120</span>,<span class="number">30</span>)]</span><br><span class="line">goods.sort(key=<span class="keyword">lambda</span>  x:x[<span class="number">0</span>]/x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fractional_backpack</span>(<span class="params">goods,w</span>):</span><br><span class="line">    m=[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(goods))]</span><br><span class="line">    total_v=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,(prize,weight) <span class="keyword">in</span> <span class="built_in">enumerate</span>(goods):</span><br><span class="line">        <span class="keyword">if</span> w&gt;=weight:</span><br><span class="line">            m[i]=<span class="number">1</span></span><br><span class="line">            total_v+=prize</span><br><span class="line">            w-=weight</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[i]=w/weight</span><br><span class="line">            total_v+=m[i]*prize</span><br><span class="line">            w=<span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> total_v,m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fractional_backpack(goods,<span class="number">50</span>))</span><br></pre></td></tr></table></figure>





<h2 id="拼接最大数字问题"><a href="#拼接最大数字问题" class="headerlink" title="拼接最大数字问题"></a>拼接最大数字问题</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253781-1770455863.png" style="zoom:80%;" />



<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line">li = [<span class="number">32</span>, <span class="number">94</span>, <span class="number">128</span>, <span class="number">1286</span>, <span class="number">6</span>, <span class="number">71</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xy_cmp</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x + y &lt; y + x:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x + y &gt; y + x:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number_join</span>(<span class="params">li</span>):</span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    li.sort(key=cmp_to_key(xy_cmp))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number_join(li))</span><br></pre></td></tr></table></figure>





<h2 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003254578-1413807720.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003255393-2021528861.png" style="zoom:80%;" />



<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">activities = [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">7</span>), (<span class="number">5</span>, <span class="number">9</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">6</span>, <span class="number">10</span>), (<span class="number">8</span>, <span class="number">11</span>), (<span class="number">8</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">14</span>), (<span class="number">12</span>, <span class="number">16</span>)]</span><br><span class="line">activities.sort(key=itemgetter(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(activities)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">activity_selection</span>(<span class="params">a</span>):</span><br><span class="line">    res = [a[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> a[i][<span class="number">0</span>] &gt;= res[-<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">            res.append(a[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(activity_selection(activities))</span><br></pre></td></tr></table></figure>











<h1 id="动态规划（DP算法）"><a href="#动态规划（DP算法）" class="headerlink" title="动态规划（DP算法）"></a>动态规划（DP算法）</h1><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256037-686054189.png" style="zoom:80%;" />



<h2 id="钢管切割问题"><a href="#钢管切割问题" class="headerlink" title="钢管切割问题"></a>钢管切割问题</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256581-759536913.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003257430-1510450101.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258325-770199969.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258821-873262621.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259320-454356517.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259850-370054211.png" style="zoom:80%;" />





<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rot_dp</span>(<span class="params">p, n</span>):</span><br><span class="line">    r = p.copy()</span><br><span class="line">    length = <span class="built_in">len</span>(p)</span><br><span class="line">    solution_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">        res = r[i]</span><br><span class="line">        solution = (i, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, (i + <span class="number">1</span>) // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, r[j] + r[i - j])</span><br><span class="line">            <span class="keyword">if</span> res == r[j] + r[i - j]:</span><br><span class="line">                solution = (j, i - j)</span><br><span class="line"></span><br><span class="line">        solution_list.append(solution)</span><br><span class="line">        r[i] = res</span><br><span class="line">    <span class="keyword">while</span> n &gt;= length:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        solution = <span class="built_in">tuple</span>()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, (length + <span class="number">1</span>) // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, r[j] + r[length - j])</span><br><span class="line">            <span class="keyword">if</span> res == r[j] + r[length - j]:</span><br><span class="line">                solution = (j, length - j)</span><br><span class="line">        solution_list.append(solution)</span><br><span class="line">        r.append(res)</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">    solution_list.insert(<span class="number">0</span>, <span class="built_in">tuple</span>())</span><br><span class="line">    <span class="keyword">return</span> r[-<span class="number">1</span>], solution_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">li</span>):</span><br><span class="line">    queue = [li[-<span class="number">1</span>]]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        tmp = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">            res.append(tmp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queue.append(li[tmp[<span class="number">0</span>]])</span><br><span class="line">            queue.append(li[tmp[<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rot</span>(<span class="params">p, n</span>):</span><br><span class="line">    r, solution_list = cut_rot_dp(p, n)</span><br><span class="line">    res = find(solution_list)</span><br><span class="line">    <span class="keyword">return</span> r, res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(cut_rot(p,<span class="number">49</span>))</span><br></pre></td></tr></table></figure>









<h2 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003300320-1875440287.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302210-1297330831.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302759-1918691034.png" style="zoom:80%;" />



<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lcs</span>(<span class="params">x, y</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    b = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i - <span class="number">1</span>] == y[j - <span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                b[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> c[i - <span class="number">1</span>][j] &gt; c[i][j - <span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j]</span><br><span class="line">                b[i][j] = <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = c[i][j - <span class="number">1</span>]</span><br><span class="line">                b[i][j] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> c[m][n], b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcs_trackback</span>(<span class="params">x, y</span>):</span><br><span class="line">    c, b = lcs(x, y)</span><br><span class="line">    i = <span class="built_in">len</span>(x)</span><br><span class="line">    j = <span class="built_in">len</span>(y)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b[i][j] == <span class="number">1</span>:</span><br><span class="line">            res.append(x[i - <span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b[i][j] == <span class="number">2</span>:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcs_trackback(<span class="string">&quot;ABCBDAB&quot;</span>,<span class="string">&quot;BDCABA&quot;</span>))</span><br></pre></td></tr></table></figure>





<h1 id="欧几里得算法（求最大公约数）"><a href="#欧几里得算法（求最大公约数）" class="headerlink" title="欧几里得算法（求最大公约数）"></a>欧几里得算法（求最大公约数）</h1><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303247-879832102.png" style="zoom:80%;" />



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">        r = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = r</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gcd(<span class="number">12</span>, <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(gcd2(<span class="number">12</span>, <span class="number">16</span>))</span><br></pre></td></tr></table></figure>



<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303671-24523928.png" style="zoom:80%;" />



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fraction</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="variable language_">self</span>.molecule=a</span><br><span class="line">        <span class="variable language_">self</span>.denominator=b</span><br><span class="line">        x=<span class="variable language_">self</span>.gcd(a,b)</span><br><span class="line">        <span class="variable language_">self</span>.molecule/=x</span><br><span class="line">        <span class="variable language_">self</span>.denominator/=x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">            r = a % b</span><br><span class="line">            a = b</span><br><span class="line">            b = r</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        denominator=<span class="variable language_">self</span>.zgs(<span class="variable language_">self</span>.denominator,other.denominator)</span><br><span class="line">        molecule=<span class="variable language_">self</span>.molecule*denominator/<span class="variable language_">self</span>.denominator+other.molecule*denominator/other.denominator</span><br><span class="line">        <span class="keyword">return</span> Fraction(molecule,denominator)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zgs</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        x=<span class="variable language_">self</span>.gcd(a,b)</span><br><span class="line">        <span class="keyword">return</span> a*b/x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d/%d&quot;</span>%(<span class="variable language_">self</span>.molecule,<span class="variable language_">self</span>.denominator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1=Fraction(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line">num2=Fraction(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(num1+num2)</span><br></pre></td></tr></table></figure>







<h1 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h1><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304114-1449543961.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304589-1304774116.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305197-1886034459.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305618-318237693.png" style="zoom:80%;" />

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306185-1583924888.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306636-1961503250.png" style="zoom:80%;" />





<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307137-225997543.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307834-1722959623.png" style="zoom:80%;" />





<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003308660-734490389.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309265-469661568.png" style="zoom:80%;" />



<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309831-970662596.png" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310262-665839716.png" style="zoom:80%;" />





<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310781-13662355.png" style="zoom:80%;" />

<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003311241-1568389696.png" style="zoom:80%;" />



<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312023-736659876.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312535-479714437.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313046-396414824.png" style="zoom:80%;" />

<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313487-715915219.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314040-471835656.png" style="zoom:80%;" />

<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314566-1454255918.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003315019-438218292.png" style="zoom:80%;" />

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003316020-1263868583.png" style="zoom:80%;" />



<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317015-2100024309.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317621-1181143597.png" style="zoom:80%;" />



<h3 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318427-1886468152.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318866-234284078.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319300-434134883.png" style="zoom:80%;" />



<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319749-1583805141.png" style="zoom:80%;" />



<p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003348540-317771781.png"></p>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320248-760156051.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320739-907826483.png" style="zoom:80%;" />



<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321202-1035783405.png" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321658-1470874291.png" style="zoom:80%;" />



<h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003322212-866246714.png" alt="Snipaste_2023-01-11_10-40-01" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323017-394699248.png" alt="Snipaste_2023-01-11_10-44-09" style="zoom:80%;" />



<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323959-1055100366.png" alt="Snipaste_2023-01-11_10-44-47" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003324611-1326580995.png" alt="Snipaste_2023-01-11_11-05-36" style="zoom:80%;" />



<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003325672-1529465519.png" alt="Snipaste_2023-01-11_11-12-14" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326296-584057204.png" style="zoom:80%;" />



<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326910-962180721.png" alt="Snipaste_2023-01-11_11-06-47" style="zoom:80%;" />



<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327394-830844690.png" alt="Snipaste_2023-01-11_11-11-40" style="zoom:80%;" />





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>test46</title>
    <url>/2025/03/01/test46/</url>
    <content><![CDATA[<h1 id="djwka-dklwaj-d"><a href="#djwka-dklwaj-d" class="headerlink" title="djwka dklwaj d"></a>djwka dklwaj d</h1><p>djklwakdwkla djwalk </p>
<p>dwjkadklwja </p>
]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2025/02/28/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="dwja-dkwa"><a href="#dwja-dkwa" class="headerlink" title="dwja dkwa\"></a>dwja dkwa\</h1><p>kjdwja dw a</p>
<p>djkwa dwa</p>
<p>jdwak </p>
]]></content>
      <categories>
        <category>web</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>test45</title>
    <url>/2025/03/01/test45/</url>
    <content><![CDATA[<h1 id="xieekdjwakdjk-wa"><a href="#xieekdjwakdjk-wa" class="headerlink" title="xieekdjwakdjk wa"></a>xieekdjwakdjk wa</h1><p>dkjlwa dwa</p>
<p>dwjkaldk wa d</p>
]]></content>
  </entry>
</search>
