<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git学习笔记</title>
    <url>/2025/03/01/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="先看一个实际需求，引出-Git"><a href="#先看一个实际需求，引出-Git" class="headerlink" title="先看一个实际需求，引出 Git"></a>先看一个实际需求，引出 Git</h1><h2 id="问题-公司五一活动计划"><a href="#问题-公司五一活动计划" class="headerlink" title="问题: 公司五一活动计划"></a><strong>问题</strong>: <strong>公司五一活动计划</strong></h2><ul>
<li><strong>先说一个最简单的情况，比如你做了公司五一活动计划书(如图)</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728738.jpeg"></p>
<h2 id="解决方案-版本管理工具-Git"><a href="#解决方案-版本管理工具-Git" class="headerlink" title="解决方案: 版本管理工具(Git)"></a><strong>解决方案</strong>: <strong>版本管理工具</strong>(Git)</h2><h3 id="一句话-Git-是目前最流行的分布式版本控制软件"><a href="#一句话-Git-是目前最流行的分布式版本控制软件" class="headerlink" title="一句话: Git 是目前最流行的分布式版本控制软件"></a><strong>一句话: Git 是目前最流行的分布式版本控制软件</strong></h3><h2 id="Git-是怎么来的"><a href="#Git-是怎么来的" class="headerlink" title="Git 是怎么来的?"></a>Git <strong>是怎么来的</strong>?</h2><h3 id="Git-之父-：李纳斯·托沃兹（Linus-Benedic-Torvalds）1969、芬兰"><a href="#Git-之父-：李纳斯·托沃兹（Linus-Benedic-Torvalds）1969、芬兰" class="headerlink" title="Git 之父 ：李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰"></a><strong>Git 之父 ：李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</strong></h3><h3 id="Git-小故事"><a href="#Git-小故事" class="headerlink" title="Git 小故事"></a><strong>Git 小故事</strong></h3><p>1、Linux 内核开源项目有着为数众广的参与者, 绝大多数的 Linux 内核维护工作, 都花在了提交补丁、保存归档的繁琐事务上(1991－2002 年间)。到 2002 年, 整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码</p>
<p>2、到了 2005 年, 开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。(Linux 社区有好事者，破解 BitKeeper, 也让 BitKeeper 恼火.)</p>
<p>3、自己动手丰衣足食, Linus Torvalds 用 2 周，开发出一套版本控制系统, 也是后来的 Git</p>
<p>4、Git 是目前世界上最先进的分布式版本控制系统, 免费、开源</p>
<h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><h2 id="一句话-在开发的过程中用于管理对文件、目录或工程等内容的修改历史，方便查看历史记录，备份以便恢复以前的版本的软件工程技术"><a href="#一句话-在开发的过程中用于管理对文件、目录或工程等内容的修改历史，方便查看历史记录，备份以便恢复以前的版本的软件工程技术" class="headerlink" title="一句话: 在开发的过程中用于管理对文件、目录或工程等内容的修改历史，方便查看历史记录，备份以便恢复以前的版本的软件工程技术"></a><strong>一句话</strong>: <strong>在开发的过程中用于管理对文件、目录或工程等内容的修改历史，方便查看历史记录，备份以便恢复以前的版本的软件工程技术</strong></h2><h2 id="可以完成哪些功能？"><a href="#可以完成哪些功能？" class="headerlink" title="可以完成哪些功能？"></a><strong>可以完成哪些功能？</strong></h2><ol>
<li><p><strong>实现跨区域多人协同开发</strong></p>
</li>
<li><p><strong>追踪和记载一个或者多个文件的历史记录</strong></p>
</li>
<li><p><strong>组织和保护你的源代码和文档</strong></p>
</li>
<li><p><strong>统计工作量</strong></p>
</li>
<li><p><strong>并行开发、提高开发效率</strong></p>
</li>
<li><p><strong>跟踪记录整个软件的开发过程</strong></p>
</li>
<li><p><strong>减轻开发人员负担，节省时间，同时降低人为错误</strong></p>
<h2 id="主流版本控制工具-软件"><a href="#主流版本控制工具-软件" class="headerlink" title="主流版本控制工具&#x2F;软件"></a><strong>主流版本控制工具</strong>&#x2F;<strong>软件</strong></h2></li>
<li><p><strong>Git</strong></p>
</li>
<li><p><strong>SVN（Subversion）</strong></p>
</li>
<li><p><strong>CVS（Concurrent Versions System）</strong></p>
</li>
<li><p><strong>VSS（Micorosoft Visual SourceSafe）</strong></p>
</li>
<li><p><strong>TFS（Team Foundation Server）</strong></p>
</li>
<li><p><strong>Visual Studio Online</strong></p>
</li>
</ol>
<h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a><strong>版本控制分类</strong></h2><h3 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a><strong>本地版本控制</strong></h3><ul>
<li><strong>老韩解读-本地版本控制</strong></li>
</ul>
<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如</p>
<p>RCS</p>
<p><a href="https://wenku.baidu.com/view/7a9ee0875cbfc77da26925c52cc58bd6318693e1.html">https://wenku.baidu.com/view/7a9ee0875cbfc77da26925c52cc58bd6318693e1.html</a></p>
<ul>
<li><strong>示意图</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728739.jpeg"></p>
<h3 id="集中版本控制"><a href="#集中版本控制" class="headerlink" title="集中版本控制"></a><strong>集中版本控制</strong></h3><ul>
<li><strong>介绍</strong></li>
</ul>
<ol>
<li><strong>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</strong></li>
<li><strong>用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本</strong></li>
<li><strong>所有数据都保存在单一的服务器上，如果这个服务器会损坏(有很大的风险), 这样就会丢失所有的数据，需要定期备份</strong></li>
<li><strong>代表产品：SVN、CVS、VSS</strong></li>
</ol>
<ul>
<li><strong>示意图</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728740.jpeg"></p>
<h3 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a><strong>分布式版本控制</strong></h3><ul>
<li><strong>老韩解读-分布式版本控制</strong></li>
</ul>
<ol>
<li><strong>所有版本信息仓库全部同步到本地的每个用户</strong></li>
<li><strong>可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。</strong></li>
<li><strong>每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据</strong></li>
<li><strong>更加安全, 不会因为服务器损坏或者网络问题，造成不能工作的情况</strong></li>
<li><strong>代表软件: Git</strong></li>
</ol>
<ul>
<li><strong>示意图</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728741.jpeg"></p>
<h2 id="Git-VS-SVN"><a href="#Git-VS-SVN" class="headerlink" title="Git VS SVN"></a>Git VS SVN</h2><h3 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a><strong>SVN</strong></h3><ol>
<li><strong>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本</strong></li>
<li><strong>完成工作后，需要把自己的代码送到中央服务器。集中式版本控制系统是必须联网才能工作</strong></li>
</ol>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><strong>Git</strong></h3><ol>
<li><strong>Git 是分布式版本控制系统，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。</strong></li>
<li><strong>协同的方法说明：比如自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git 可以直接看到更新了哪些代码和文件</strong></li>
</ol>
<h1 id="Git-下载-安装"><a href="#Git-下载-安装" class="headerlink" title="Git 下载&amp;安装"></a>Git 下载&amp;安装</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a><strong>官网</strong></h2><ol>
<li><strong>地址: <a href="https://git-scm.com/">https://git-scm.com/</a></strong></li>
<li><strong>下载版本: Git-2.33.0.2-64-bit.exe</strong></li>
<li><strong>下载慢，可以到镜像下载 :</strong> <a href="http://npm.taobao.org/mirrors/git-for-windows/"><strong>http://npm.taobao.org/mirrors/git-for-windows/</strong></a></li>
</ol>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a><strong>卸载</strong></h3><ol>
<li><strong>说明：如果安装过，可以卸载和老师版本保持一致</strong></li>
<li><strong>卸载步骤</strong><ol>
<li><strong>到</strong> windows <strong>的应用和功能，到的</strong> git, <strong>卸载即可</strong>(<strong>如图</strong>)<br><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271957251.jpeg"></li>
<li><strong>检查环境变量 ， 如果有和</strong> Git <strong>相关的，删除即可</strong></li>
</ol>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><ol>
<li><strong>说明：直接下一步即可，建议安装到非系统盘, 比如 d:\</strong></li>
<li><strong>细节：安装路径不要带中文、空格、特殊字符</strong></li>
</ol>
<h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a><strong>验证安装是否成功</strong></h2><ul>
<li><strong>点击右键如图</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728743.jpeg"></p>
<h1 id="Git-资料"><a href="#Git-资料" class="headerlink" title="Git 资料"></a>Git 资料</h1><ol>
<li><p>Git <strong>大全</strong></p>
<ol>
<li><strong>地址: <a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a></strong></li>
<li><strong>Git 常用命令</strong><ol>
<li><strong>仓库</strong> <a href="https://gitee.com/all-about-git#%E4%BB%93%E5%BA%93">https://gitee.com/all-about-git#%E4%BB%93%E5%BA%93</a></li>
<li><strong>配置</strong> <a href="https://gitee.com/all-about-git#%E9%85%8D%E7%BD%AE">https://gitee.com/all-about-git#%E9%85%8D%E7%BD%AE</a></li>
<li><strong>增 加</strong> &#x2F; <strong>删 除 文 件</strong> <a href="https://gitee.com/all-about-git#%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6">https://gitee.com/all-about-git#%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6</a></li>
<li><strong>代码提交</strong> <a href="https://gitee.com/all-about-git#%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4">https://gitee.com/all-about-git#%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4</a></li>
<li><strong>分支</strong> <a href="https://gitee.com/all-about-git#%E5%88%86%E6%94%AF">https://gitee.com/all-about-git#%E5%88%86%E6%94%AF</a></li>
<li><strong>标签</strong> <a href="https://gitee.com/all-about-git#%E6%A0%87%E7%AD%BE">https://gitee.com/all-about-git#%E6%A0%87%E7%AD%BE</a></li>
<li><strong>查看信息</strong> <a href="https://gitee.com/all-about-git#%E6%9F%A5%E7%9C%8B%E4%BF%A1%E6%81%AF">https://gitee.com/all-about-git#%E6%9F%A5%E7%9C%8B%E4%BF%A1%E6%81%AF</a></li>
<li><strong>远程同步</strong> <a href="https://gitee.com/all-about-git#%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5">https://gitee.com/all-about-git#%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5</a></li>
</ol>
</li>
</ol>
</li>
<li><p>Git <strong>互动学习</strong></p>
<ol>
<li><strong>地址: <a href="https://oschina.gitee.io/learn-git-branching/">https://oschina.gitee.io/learn-git-branching/</a></strong></li>
</ol>
</li>
</ol>
<h1 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h1><h2 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a><strong>设置用户名与邮箱</strong></h2><h3 id="说明：使用-Git-前，需要设置你的用户名称和-Email-地址"><a href="#说明：使用-Git-前，需要设置你的用户名称和-Email-地址" class="headerlink" title="说明：使用 Git 前，需要设置你的用户名称和 Email 地址"></a><strong>说明：使用 Git 前，需要设置你的用户名称和 Email 地址</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728744.jpeg"></p>
<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a><strong>具体操作</strong></h3><ol>
<li><strong>安装Git 后, 首先要设置你的用户名称和e-mail 地址, 因为每次Git 提交都会使用该信息</strong></li>
<li>**指令 **</li>
</ol>
<p><strong>#用户名</strong></p>
<p>git config –global user.name “hspedu” </p>
<p><strong>#邮箱</strong></p>
<p>git config –global user.email “<a href="mailto:hspedu@xx.com">hspedu@xx.com</a>“</p>
<ol start="3">
<li><strong>指令成功执行，会生成 C:\Users\Administrator\.gitconfig, 信息如下</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728745.jpeg"></p>
<h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a><strong>查看配置</strong></h2><h3 id="查看所有配置：git-config-l"><a href="#查看所有配置：git-config-l" class="headerlink" title="查看所有配置：git config -l"></a><strong>查看所有配置：git config -l</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728744.jpeg"></p>
<h4 id="查看系统配置：git-config-–system-–list"><a href="#查看系统配置：git-config-–system-–list" class="headerlink" title="查看系统配置：git config –system –list"></a><strong>查看系统配置：git config –system –list</strong></h4><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728746.jpeg"></p>
<h3 id="查看当前用户配置：git-config-–global-–list"><a href="#查看当前用户配置：git-config-–global-–list" class="headerlink" title="查看当前用户配置：git config –global –list"></a><strong>查看当前用户配置：git config –global –list</strong></h3><p>说明：该指令显示的就是 C:\Users\Administrator\.gitconfig 内容</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728747.jpeg"></p>
<h2 id="Git-的配置文件"><a href="#Git-的配置文件" class="headerlink" title="Git 的配置文件"></a>Git <strong>的配置文件</strong></h2><h3 id="system-配置文件"><a href="#system-配置文件" class="headerlink" title="system 配置文件"></a><strong>system 配置文件</strong></h3><p>Git\etc\gitconfig ：Git 安装目录下的 gitconfig</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728748.jpeg"></p>
<h3 id="global-全局文件"><a href="#global-全局文件" class="headerlink" title="global 全局文件"></a><strong>global 全局文件</strong></h3><p>1、C:\Users\Administrator\ .gitconfig 只适用于当前登录用户的配置</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728745.jpeg"></p>
<h1 id="Git-工作原理-重要"><a href="#Git-工作原理-重要" class="headerlink" title="Git 工作原理[重要]"></a>Git 工作原理[重要]</h1><h2 id="四个工作区域-关系"><a href="#四个工作区域-关系" class="headerlink" title="四个工作区域&amp;关系"></a><strong>四个工作区域</strong>&amp;<strong>关系</strong></h2><ul>
<li><strong>四个工作区域</strong></li>
</ul>
<p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库 (Repository 或 Git Directory)。如果再加上远程的 git 仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728749.jpeg"></p>
<ol>
<li><strong>Workspace：工作区，就是你平时存放项目代码的地方</strong></li>
<li><strong>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</strong></li>
<li><strong>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</strong></li>
<li><strong>Remote：远程仓库，托管代码的服务器(比如 Github&#x2F;Gitee)，可以简单的认为是你项目组中的一台电脑用于远程数据交换</strong></li>
</ol>
<ul>
<li><strong>对本地的三个区域再说明(如图)</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728750.jpeg"></p>
<p>√ Directory：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</p>
<p>√ WorkSpace：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</p>
<p>√ .git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。</p>
<p>√ Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的</p>
<p>更新放在暂存区。</p>
<p>√ Local Repo：本地仓库，一个存放在本地的版本库；HEAD 只是当前的开发分支(branch)。</p>
<p>√ Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复 WorkSpace 中的临时状态。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h2><p>Git 的工作流程说明：</p>
<ol>
<li><strong>在工作目录中添加、修改文件；</strong></li>
<li><strong>将需要进行版本管理的文件放入暂存区域；</strong></li>
<li><strong>将暂存区域的文件提交到git 本地仓库。</strong></li>
</ol>
<p>因此，git 管理的文件有三种状态：已修改(modified),已暂存(staged),已提交(committed)</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728751.jpeg"></p>
<h1 id="Git-仓库创建"><a href="#Git-仓库创建" class="headerlink" title="Git 仓库创建"></a>Git 仓库创建</h1><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a><strong>创建工作目录与常用指令</strong></h2><ol>
<li><strong>工作目录（WorkSpace)一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</strong></li>
<li><strong>6 个命令 - 示意图</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728752.jpeg"></p>
<h2 id="本地仓库-创建"><a href="#本地仓库-创建" class="headerlink" title="本地仓库-创建"></a><strong>本地仓库</strong>-<strong>创建</strong></h2><h3 id="创建全新的仓库"><a href="#创建全新的仓库" class="headerlink" title="创建全新的仓库"></a><strong>创建全新的仓库</strong></h3><h4 id="需求：演示在本地创建全新仓库-d-hspgit"><a href="#需求：演示在本地创建全新仓库-d-hspgit" class="headerlink" title="需求：演示在本地创建全新仓库 d:\hspgit"></a><strong>需求：演示在本地创建全新仓库</strong> d:\hspgit</h4><h4 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a><strong>操作演示</strong></h4><p>说明: 创建全新的仓库，需要用 GIT 管理的项目的根目录执行</p>
<ol>
<li><strong>创建目录d:\hspgit 作为本地 git 仓库</strong></li>
<li><strong>右键</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728753.jpeg"></p>
<ol start="3">
<li><strong>执行 git init</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728754.jpeg"></p>
<ol start="4">
<li><strong>执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728755.jpeg"></p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a><strong>克隆远程仓库</strong></h3><h4 id="需求：演示在本地克隆远程仓库-d-hspgit2"><a href="#需求：演示在本地克隆远程仓库-d-hspgit2" class="headerlink" title="需求：演示在本地克隆远程仓库 d:\hspgit2"></a><strong>需求：演示在本地克隆远程仓库</strong> d:\hspgit2</h4><h4 id="操作演示-1"><a href="#操作演示-1" class="headerlink" title="操作演示"></a><strong>操作演示</strong></h4><p>说明: 克隆远程代码仓库，就是将远程服务器上的仓库完全镜像一份至本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆一个代码仓库和它的整个代码历史(版本信息)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> [url] <span class="comment"># url 就是远程git 项目的地址</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>创建目录d:\hspgit2 作为本地git 仓库</strong></li>
<li><strong>在 github 或者 gitee 找一个项目的 地址 url, 比如</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728756.jpeg"></p>
<p><a href="https://gitee.com/6tail/lunar-javascript.git">https://gitee.com/6tail/lunar-javascript.git</a></p>
<ol start="3">
<li><strong>执行克隆指令</strong></li>
</ol>
<p>git clone <a href="https://gitee.com/6tail/lunar-javascript.git">https://gitee.com/6tail/lunar-javascript.git</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728757.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728758.jpeg"></p>
<h1 id="Git-文件管理"><a href="#Git-文件管理" class="headerlink" title="Git 文件管理"></a>Git 文件管理</h1><h2 id="文件四种状态"><a href="#文件四种状态" class="headerlink" title="文件四种状态"></a><strong>文件四种状态</strong></h2><ul>
<li><strong>版本控制就是对文件的版本控制，在 Git 管理中，文件被统一管理，有四个状态</strong></li>
</ul>
<ol>
<li><p><strong>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制. 通过</strong></p>
<p>git add 状态变为 Staged</p>
</li>
<li><p><strong>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种处理方式, 如果它被修改, 变为Modified. 如果使用git rm 移出版本库,则成为 Untracked</strong></p>
</li>
<li><p><strong>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这种文件有两个去处, 通</strong></p>
</li>
</ol>
<p>过git add 可进入暂存staged 状态, 使用git checkout 则丢弃修改过, 返回到unmodify 状态,这个 git checkout 即从库中取出文件, 覆盖当前修改</p>
<ol start="4">
<li><strong>Staged: 暂存状态. 执行 git commit 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为 Unmodify 状态. 执行 git reset HEAD filename 取消暂存, 文件状态为 Modified</strong></li>
</ol>
<h2 id="文件操作指令"><a href="#文件操作指令" class="headerlink" title="文件操作指令"></a><strong>文件操作指令</strong></h2><h3 id="查看指定文件状态：git-status-filename"><a href="#查看指定文件状态：git-status-filename" class="headerlink" title="查看指定文件状态：git status [filename]"></a><strong>查看指定文件状态：git status [filename]</strong></h3><p>先在 D:\hspgit2\lunar-javascript , 创建一个测试文件 ABC.txt</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728759.jpeg"></p>
<h3 id="查看所有文件状态：git-status"><a href="#查看所有文件状态：git-status" class="headerlink" title="查看所有文件状态：git status"></a><strong>查看所有文件状态：git status</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728760.jpeg"></p>
<h3 id="添加所有文件到暂存区：git-add"><a href="#添加所有文件到暂存区：git-add" class="headerlink" title="添加所有文件到暂存区：git add ."></a><strong>添加所有文件到暂存区：git add .</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728761.jpeg"></p>
<h3 id="提交暂存区中的内容到本地仓库：git-commit-m-“消息内容”"><a href="#提交暂存区中的内容到本地仓库：git-commit-m-“消息内容”" class="headerlink" title="提交暂存区中的内容到本地仓库：git commit -m “消息内容”"></a><strong>提交暂存区中的内容到本地仓库：git commit -m “消息内容”</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728762.jpeg"></p>
<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a><strong>忽略文件</strong></h2><h3 id="实际需求：我们不想把某些文件纳入版本控制中，-如何处理"><a href="#实际需求：我们不想把某些文件纳入版本控制中，-如何处理" class="headerlink" title="实际需求：我们不想把某些文件纳入版本控制中， 如何处理?"></a><strong>实际需求：我们不想把某些文件纳入版本控制中， 如何处理?</strong></h3><p><strong>忽略文件处理方式</strong></p>
<ul>
<li><strong>不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等, 在主目录下建立”.gitignore”文件(默认就有)，此文件有如下规则：</strong></li>
</ul>
<ol>
<li><strong>忽略文件中的空行或以井号（#）开始的行</strong></li>
<li><strong>支持 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</strong></li>
<li><strong>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</strong></li>
<li><strong>如果名称的最前面是一个路径分隔符（&#x2F;），表示忽略 .gitignore 文件所在的目录，不包括其任何子目录 中的 dir 目录</strong></li>
<li><strong>如果名称的最后面是一个路径分隔符（&#x2F;），忽略 .gitignore 文件所在的目录和所有子目录的 dir 目录</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">老师提示: 常用规则,掌握一些，其它查看文档</span></span><br><span class="line">*.java #忽略所有.java 结尾的文件</span><br><span class="line">!hsp.java #hsp.java 除外韩顺平Java 工程师更加详细的规则https://blog.csdn.net/w8y56f/article/details/103263924?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.Edefault%7ECTRLIST%7Edefault-1.showsourcetag&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-lt-1.showsourcetag</span><br></pre></td></tr></table></figure>

<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728763.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728764.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728765.jpeg"></p>
<h3 id="看一个实例"><a href="#看一个实例" class="headerlink" title="看一个实例"></a><strong>看一个实例</strong></h3><ul>
<li><strong>文件 D:\hspgit2\lunar-javascript\.gitignore</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728766.jpeg"></p>
<h1 id="Gitee-创建代码仓库"><a href="#Gitee-创建代码仓库" class="headerlink" title="Gitee 创建代码仓库"></a>Gitee 创建代码仓库</h1><h2 id="创建-Gitee-账号"><a href="#创建-Gitee-账号" class="headerlink" title="创建 Gitee 账号"></a><strong>创建</strong> Gitee <strong>账号</strong></h2><h3 id="gitee-官网：https-gitee-com"><a href="#gitee-官网：https-gitee-com" class="headerlink" title="gitee 官网：https://gitee.com/"></a><strong>gitee 官网：<a href="https://gitee.com/">https://gitee.com/</a></strong></h3><h3 id="注册地址：https-gitee-com-signup"><a href="#注册地址：https-gitee-com-signup" class="headerlink" title="注册地址：https://gitee.com/signup"></a><strong>注册地址：<a href="https://gitee.com/signup">https://gitee.com/signup</a></strong></h3><h3 id="也可以使用-微信、QQ、Github-账号登录…"><a href="#也可以使用-微信、QQ、Github-账号登录…" class="headerlink" title="也可以使用 微信、QQ、Github 账号登录…"></a><strong>也可以使用 微信、QQ、Github 账号登录…</strong></h3><h3 id="创建账号-具体操作"><a href="#创建账号-具体操作" class="headerlink" title="创建账号-具体操作"></a><strong>创建账号-具体操作</strong></h3><ol>
<li><strong>注册地址: <a href="https://gitee.com/signup">https://gitee.com/signup</a></strong></li>
<li><strong>查看邮箱，得到验证码</strong></li>
<li><strong>填写得到的验证码和你的gitee 账号密码</strong></li>
<li><strong>点击注册, 如果都填写正确，就会注册成功，进入 gitee</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728767.jpeg"></p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a><strong>创建仓库</strong></h2><ol>
<li><strong>点击创建仓库</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728768.jpeg"></p>
<ol start="2">
<li><strong>输入仓库的信息, 仓库开源, 需要绑定手机号.</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728769.jpeg"></p>
<ol start="3">
<li><strong>点击创建</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728770.jpeg"></p>
<h2 id="设置本机绑定-SSH-公钥，实现免密登录"><a href="#设置本机绑定-SSH-公钥，实现免密登录" class="headerlink" title="设置本机绑定 SSH 公钥，实现免密登录"></a><strong>设置本机绑定</strong> SSH <strong>公钥，实现免密登录</strong></h2><h3 id="生成-SSH-公钥"><a href="#生成-SSH-公钥" class="headerlink" title="生成 SSH 公钥"></a><strong>生成 SSH 公钥</strong></h3><ol>
<li><strong>进入 C:\Users\Administrator\.ssh , 没有就手动创建该文件夹</strong></li>
<li><strong>如果该目录下有相应文件，先删除(第一次操作是没有的)</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728771.jpeg"></p>
<ol start="3">
<li><p><strong>执行指令 ssh-keygen , 生成文件(说明：直接回车即可), ssh-keygen 指令更多说明: <a href="https://blog.csdn.net/weixin_37335761/article/details/120146098">https://blog.csdn.net/weixin_37335761/article/details/120146098</a> 比如: ssh-keygen -t rsa</strong></p>
<p>-C <a href="mailto:%27hello@qq.com">‘hello@qq.com'</a> -f ~&#x2F;.ssh&#x2F;github_id_rsa</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728772.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728773.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728774.jpeg"></p>
<ol>
<li><strong>将公钥信息 public key 添加到码云账户</strong></li>
<li><strong>点击设置</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728775.jpeg"></p>
<ol start="2">
<li><strong>点击 SSH 公钥</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728776.jpeg"></p>
<ol start="3">
<li><strong>复制生成的 id_rsa.pub 内容</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728777.jpeg"></p>
<ol start="4">
<li><strong>拷贝到如下位置</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728778.jpeg"></p>
<ol start="5">
<li><strong>提示输入密码验证，然后就成功了</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728779.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728780.jpeg"></p>
<ol>
<li><strong>将创建的仓库</strong>-<strong>克隆到本地</strong></li>
<li><strong>先找到仓库，并得到仓库地址 url</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728781.jpeg"></p>
<ol start="2">
<li><strong>创建 D:\gitee_hsp_java</strong></li>
<li><strong>执行克隆指令</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728783.jpeg"></p>
<ol start="4">
<li><strong>克隆成功</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728784.jpeg"></p>
<h1 id="IDEA-项目使用-Git-管理"><a href="#IDEA-项目使用-Git-管理" class="headerlink" title="IDEA 项目使用 Git 管理"></a>IDEA 项目使用 Git 管理</h1><h2 id="需求-1-说明"><a href="#需求-1-说明" class="headerlink" title="需求 1-说明"></a><strong>需求</strong> 1-<strong>说明</strong></h2><p><strong>将 gitee 创建的 hspjava 项目拉取到 IDEA，进行管理</strong></p>
<h2 id="需求-1-实现步骤"><a href="#需求-1-实现步骤" class="headerlink" title="需求 1-实现步骤"></a><strong>需求</strong> 1-<strong>实现步骤</strong></h2><h3 id="界面操作"><a href="#界面操作" class="headerlink" title="界面操作"></a><strong>界面操作</strong></h3><ol>
<li><strong>将 Gitee 初始化 hspjava，拉取到 IDEA</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728785.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728786.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728787.jpeg"></p>
<ol start="2">
<li><strong>创建一个crm 模块，进行测试</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728788.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728789.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728790.jpeg"></p>
<ol start="3">
<li><strong>创建 HI.java, 进行测试</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728791.jpeg"></p>
<ol start="4">
<li><strong>将HI.java add 到 git, 说明：将 HI.java 加入到暂存区</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728792.jpeg"></p>
<ol start="5">
<li><strong>将HI.java commit 到 git</strong><ol>
<li><strong>commit 只是将 HI.java 提交到本地仓库</strong></li>
<li><strong>并没有 push 到远程仓库(即GitHub&#x2F;Gitee)</strong></li>
</ol>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728793.jpeg"></p>
<ol start="6">
<li><strong>将HI.java push 到 Gitee , 会输入用户名密码验证(是 Gitee 的账号).</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728794.jpeg"></p>
<ol start="7">
<li><strong>观察 Gitee 上项目的变化</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728795.jpeg"></p>
<h3 id="也可以使用命令行完成"><a href="#也可以使用命令行完成" class="headerlink" title="也可以使用命令行完成"></a><strong>也可以使用命令行完成</strong></h3><ul>
<li><strong>操作指令</strong></li>
</ul>
<p>测试: 创建一个新文件 OK.java</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728796.jpeg"></p>
<ul>
<li><strong>看下 Gitee 项目的变化，会与新的 push 文件</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728797.jpeg"></p>
<h2 id="需求-2-说明"><a href="#需求-2-说明" class="headerlink" title="需求 2-说明"></a><strong>需求</strong> 2-<strong>说明</strong></h2><p><strong>创建了一个IDEA 项目(没有从Gitee 拉取), 后面又希望和 Gitee 的某个代码仓库关联，如何操作?</strong></p>
<h2 id="需求-2-实现步骤"><a href="#需求-2-实现步骤" class="headerlink" title="需求 2-实现步骤"></a><strong>需求</strong> 2-<strong>实现步骤</strong></h2><h3 id="界面操作-1"><a href="#界面操作-1" class="headerlink" title="界面操作"></a><strong>界面操作</strong></h3><ol>
<li><strong>在 Gitee 创建一个仓库,比如 hsp-sns</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728798.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728799.jpeg"></p>
<ol start="2">
<li><strong>创建一个springboot &#x2F;maven 项目 hsp-sns</strong></li>
<li><strong>克隆 gitee 的 hsp-sns 到 d:&#x2F;git-hsp-sns</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728800.jpeg"></p>
<ol start="4">
<li><strong>将克隆下拉的hsp-sns 的文件，拷贝到 IDEA 对应项目中</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728801.jpeg"></p>
<ol start="5">
<li><strong>刷新，或者重启IDEA 项目</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728802.jpeg"></p>
<ol start="6">
<li><strong>创建文件D:\java_projects\hsp-erp\src\main\java\com\hspedu\hspsns\Hello.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>完成 add, commit , push 一系列操作</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728803.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728804.jpeg"></p>
<ol start="8">
<li>观察 gitee 上项目的变化</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728805.jpeg"></p>
<h3 id="也可以使用命令行完成-1"><a href="#也可以使用命令行完成-1" class="headerlink" title="也可以使用命令行完成"></a><strong>也可以使用命令行完成</strong></h3><h2 id="如何查看操作记录"><a href="#如何查看操作记录" class="headerlink" title="如何查看操作记录"></a><strong>如何查看操作记录</strong></h2><h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a><strong>示意图</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728806.jpeg"></p>
<h2 id="需求-3-说明"><a href="#需求-3-说明" class="headerlink" title="需求 3-说明"></a><strong>需求</strong> 3-<strong>说明</strong></h2><ol>
<li><strong>一个 IDEA 项目(从 Gitee clone), 后面又希望获取 Gitee 的代码仓库最新代码， 如何操作?</strong><ol>
<li><strong>看老师具体演示-pull</strong></li>
</ol>
</li>
<li><strong>学习使用</strong> Git <strong>的小技巧分享</strong></li>
</ol>
<h1 id="GIT-分支管理"><a href="#GIT-分支管理" class="headerlink" title="GIT 分支管理"></a>GIT 分支管理</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><h3 id="一个分支实例"><a href="#一个分支实例" class="headerlink" title="一个分支实例"></a><strong>一个分支实例</strong></h3><p>项目地址 <a href="https://gitee.com/ZhongBangKeJi/CRMEB-Min">https://gitee.com/ZhongBangKeJi/CRMEB-Min</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728807.jpeg"></p>
<h3 id="分支合并示意图"><a href="#分支合并示意图" class="headerlink" title="分支合并示意图"></a><strong>分支合并示意图</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728808.jpeg"></p>
<ol>
<li><strong>分支可以有多个(根据业务需求)</strong></li>
<li><strong>如果各分支没有交集，始终平行发展，则不需要合并(merge)</strong></li>
<li><strong>如果两个分支，需要合并，则执行merge 操作.</strong></li>
</ol>
<h2 id="创建-IDEA-Maven-项目-和-Gitee-的-hsp-erp-代码仓库关联"><a href="#创建-IDEA-Maven-项目-和-Gitee-的-hsp-erp-代码仓库关联" class="headerlink" title="创建 IDEA Maven 项目, 和 Gitee 的 hsp-erp 代码仓库关联"></a><strong>创建</strong> IDEA Maven <strong>项目</strong>, <strong>和</strong> Gitee <strong>的</strong> hsp-erp <strong>代码仓库关联</strong></h2><ol>
<li><p><strong>先在 Gitee 创建仓库hsp-erp, 并设置成开源</strong></p>
</li>
<li><p><strong>在新的目录比如 d:&#x2F;idea_projects 使用idea 创建hsp-erp maven, 并和Gitee 仓库hsp-erp</strong></p>
<p>关联, 前面老师已经讲过了, 自己回顾一下</p>
</li>
<li><p><strong>创建文件 HspErpApplication.java , 写入一些内容</strong></p>
</li>
<li><p><strong>将HspErpApplication.java push 到 Gitee 远程仓库 , 执行 add-&gt;commit-&gt;push</strong></p>
</li>
<li><p><strong>观察 Gitee 远程仓库是否已经 push 成功</strong></p>
</li>
</ol>
<h2 id="git-分支指令"><a href="#git-分支指令" class="headerlink" title="git 分支指令"></a>git <strong>分支指令</strong></h2><ol>
<li><strong>地址: <a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a></strong></li>
<li><strong>指令一览</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个 commit，合并进当前分支</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span></span><br></pre></td></tr></table></figure>

<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a><strong>应用实例</strong></h3><ol>
<li><strong>需求：克隆</strong> hsp-erp <strong>仓库</strong>, <strong>创建分支</strong> v1.0, <strong>并提交到远程仓库</strong></li>
<li><strong>指令操作演示</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728809.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728810.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728811.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728812.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728813.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728814.jpeg"></p>
<h2 id="IDEA-项目创建分支"><a href="#IDEA-项目创建分支" class="headerlink" title="IDEA 项目创建分支"></a>IDEA <strong>项目创建分支</strong></h2><ol>
<li><strong>创建分支</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728815.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728816.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728817.jpeg"></p>
<ol start="2">
<li><strong>把分支同步到Gitee 远程仓库</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728818.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728819.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728820.jpeg"></p>
<ol start="3">
<li><strong>查看远程仓库</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728821.jpeg"></p>
<h2 id="IDEA-项目切换分支-进行工作"><a href="#IDEA-项目切换分支-进行工作" class="headerlink" title="IDEA 项目切换分支, 进行工作"></a>IDEA <strong>项目切换分支</strong>, <strong>进行工作</strong></h2><ol>
<li><strong>切换分支(指令checkout)</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728822.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728823.jpeg"></p>
<ol start="2">
<li><strong>在v2.0 分支下 , 我们修改&#x2F;增加一下文件, 就是针对当前v2.0 的</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728824.jpeg"></p>
<ol start="3">
<li><strong>把HspErpApplication.java Add-&gt;Commit-&gt;Push 到 Remote 仓库, 按照老师步骤来.</strong><ol>
<li><strong>执行 Add</strong></li>
<li><strong>执行 Commit</strong></li>
<li><strong>执行 Push</strong></li>
</ol>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728825.jpeg"></p>
<ol start="4">
<li><strong>观察 Gitee 的远程仓库变化</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728826.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728827.jpeg"></p>
<ol start="5">
<li><strong>观察本地仓库 版本切换的变化</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728828.jpeg"></p>
<p><strong>—————————-</strong></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728829.jpeg"></p>
<ol>
<li>IDEA <strong>项目分支合并</strong>, <strong>没有冲突的情况</strong></li>
</ol>
<ul>
<li><strong>在进行分支合并时, 如果没有冲突(比如没有修改同一个文件), 这时会比较顺畅.</strong></li>
</ul>
<ol>
<li><strong>案例演示&#x2F;需求说明: 将分支v3.0 合并到 Master 主分支</strong></li>
<li><strong>从 master 开一个分支 v3.0, 在 v3.0 增加一些文件, 不在 master 和 v3.0 修改同一个文件</strong></li>
<li><strong>将分支v3.0, 同步到Gitee 远程仓库, 操作步骤和前面一样开v2.0 一样.</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728830.jpeg"></p>
<p><strong>———————————–</strong></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728831.jpeg"></p>
<ol start="4">
<li><strong>切换到v3.0, 并增加一个文件 Hi.java, 并 Add-&gt;Commit-&gt;Push 到远程仓库</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728832.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728833.jpeg"></p>
<ol start="5">
<li><strong>注意看Master 主分支，在本地仓库和远程仓库, 都没有Hi.java</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728834.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728835.jpeg"></p>
<ol start="6">
<li><strong>将v3.0 合并到Master 分支, 注意当前是 Master 主分支(看图标)</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728836.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728837.jpeg"></p>
<ol start="7">
<li><strong>注意看Master 主分支，这时在本地仓库, 有 Hi.java , 但是远程仓库还没有</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728838.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728839.jpeg"></p>
<ol start="8">
<li><strong>将本地的Master 分支, Push 到远程仓库, 这时观察远程仓库 Master 下也有HI.java 了</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728840.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728841.jpeg"></p>
<h2 id="IDEA-项目分支合并-有冲突的情况"><a href="#IDEA-项目分支合并-有冲突的情况" class="headerlink" title="IDEA 项目分支合并, 有冲突的情况"></a>IDEA <strong>项目分支合并</strong>, <strong>有冲突的情况</strong></h2><h3 id="接受某一方-解决冲突"><a href="#接受某一方-解决冲突" class="headerlink" title="接受某一方, 解决冲突"></a><strong>接受某一方, 解决冲突</strong></h3><ul>
<li><strong>如果同一文件在合并分支时都被修改了则会引起冲突, 修改冲突文件后重新提交</strong></li>
</ul>
<p>(说明：这时要决定保留哪个分支代码)</p>
<ol>
<li><strong>案例演示&#x2F;需求说明: 将分支v3.0 合并到 Master 主分支</strong></li>
<li><strong>切换到v3.0, 修改 HspErpApplication.java</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728842.jpeg"></p>
<ol start="3">
<li><p><strong>把 HspErpApplication.java 进行 Add-&gt;Commit-&gt;Push 操作(如果已经 Add 过, 就不需要</strong></p>
<p>Add), 前面老师已经演示好几遍了</p>
</li>
<li><p><strong>切 换 到 Master, 也 修 改 一 下 Master 的 HspErpApplication.java , 同 样 进 行</strong></p>
<p>Add-&gt;Commit-&gt;Push (如果已经 Add 过, 就不需要 Add) 操作.</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728843.jpeg"></p>
<ol start="5">
<li><strong>将V3.0 合并到 Master</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728844.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728845.jpeg"></p>
<p><strong>———————————————————-</strong></p>
<p>出现冲突</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728846.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728847.jpeg"></p>
<ol start="6">
<li><strong>观察本地的Master 分支的 HspErpApplication.java , 已经和V3.0 一致了, 但是远程仓库的 Master 还是没有变化, (原因 Master 分支还没有 Push)</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728848.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728849.jpeg"></p>
<ol start="7">
<li><p><strong>再将 Master Push 到 Gitee 远程仓库, 就会看到相应的变化(注意在 Push 前, 请确认要</strong></p>
<p>Push 的文件&#x2F;文件夹是已经 Committed, 否则你看不到变化.)</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728850.jpeg"></p>
<h4 id="手动修改，解决冲突"><a href="#手动修改，解决冲突" class="headerlink" title="手动修改，解决冲突"></a><strong>手动修改，解决冲突</strong></h4><h2 id="IDEA-项目删除分支"><a href="#IDEA-项目删除分支" class="headerlink" title="IDEA 项目删除分支"></a>IDEA <strong>项目删除分支</strong></h2><h3 id="彻底删除某个分支"><a href="#彻底删除某个分支" class="headerlink" title="彻底删除某个分支"></a><strong>彻底删除某个分支</strong></h3><ol>
<li><strong>如果某个分支不需要了, 可以删除, 一定要慎重</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728851.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728852.jpeg"></p>
<ol start="2">
<li><strong>注意观察远程仓库, 分支 V3.0 也没有了</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271728853.jpeg"></p>
<h3 id="只删除本地分支-还可以重新获取"><a href="#只删除本地分支-还可以重新获取" class="headerlink" title="只删除本地分支, 还可以重新获取"></a><strong>只删除本地分支, 还可以重新获取</strong></h3><h2 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a><strong>注意事项和细节说明</strong></h2><ol>
<li><p><strong>如果同一文件在合并分支时都被修改了则会引起冲突, 修改冲突文件后重新提交(说明：这时要决定保留哪个分支代码)</strong></p>
</li>
<li><p><strong>Master 主分支应该非常稳定，用来发布新版本，一般情况下不要在上面工作，工作一般在新建的分支(比如dev、v1.0、v2.0)上工作</strong></p>
</li>
<li><p><strong>分支代码稳定后，可以合并到主分支 Master</strong></p>
</li>
<li><p><strong>在进行分支合并时, 最好是各分支都已经处于 Committed 的状态, 这样可以减小处理合并冲突的难度.</strong></p>
</li>
<li><p><strong>Push 操作, 是 Push 你已经Committed 的代码, 如果你修改了一个文件, 但是你没有执行</strong></p>
<p>Commit ,那么你 Push 的其实是上次 Committed 的状态</p>
</li>
<li><p><strong>add 、 commit 、push 的操作可以针对单个文件, 也可以针对文件夹(可以看一下 Idea</strong></p>
<p>的 git 操作菜单)</p>
</li>
<li><p><strong>文件要 Commit 前需要先 Add 到 暂存区 , 以后文件修改了, 就可以直接 Commit</strong></p>
</li>
<li><p><strong>如果要删除文件, 可以在本地删除该文件, 然后 commit 文件所在文件夹即可, 并重新</strong></p>
<p>push 该分支, 那么在远程仓库, 也会删除对应分支的文件.(IDEA 演示)</p>
</li>
</ol>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="1-初始化与克隆"><a href="#1-初始化与克隆" class="headerlink" title="1. 初始化与克隆"></a>1. <strong>初始化与克隆</strong></h2><ul>
<li><p><strong><code>git init</code></strong><br>在当前目录初始化一个新的 Git 仓库。</p>
</li>
<li><p><strong><code>git clone &lt;repository_url&gt;</code></strong><br>克隆远程仓库到本地。</p>
</li>
</ul>
<h2 id="2-查看状态与日志"><a href="#2-查看状态与日志" class="headerlink" title="2. 查看状态与日志"></a>2. <strong>查看状态与日志</strong></h2><ul>
<li><p><strong><code>git status</code></strong><br>查看工作目录和暂存区的状态，显示哪些文件被修改、暂存或未跟踪。</p>
</li>
<li><p><strong><code>git log</code></strong><br>查看提交历史，显示每次提交的详细信息。</p>
</li>
<li><p><strong><code>git log --oneline</code></strong><br>以简洁的单行格式显示提交历史。</p>
</li>
<li><p><strong><code>git log --graph</code></strong><br>以图形化方式显示分支和合并历史。</p>
</li>
</ul>
<h2 id="3-添加与提交"><a href="#3-添加与提交" class="headerlink" title="3. 添加与提交"></a>3. <strong>添加与提交</strong></h2><ul>
<li><p><strong><code>git add &lt;file&gt;</code></strong><br>将文件添加到暂存区，准备提交。</p>
</li>
<li><p><strong><code>git add .</code></strong><br>将所有修改的文件添加到暂存区。</p>
</li>
<li><p><strong><code>git commit -m &quot;&lt;message&gt;&quot;</code></strong><br>提交暂存区的更改，并附上提交信息。</p>
</li>
<li><p><strong><code>git commit -a -m &quot;&lt;message&gt;&quot;</code></strong><br>跳过暂存区，直接提交所有已跟踪文件的更改。</p>
</li>
</ul>
<h2 id="4-分支操作"><a href="#4-分支操作" class="headerlink" title="4. 分支操作"></a>4. <strong>分支操作</strong></h2><ul>
<li><p><strong><code>git branch</code></strong><br>列出所有本地分支，当前分支前会有一个 <code>*</code> 号。</p>
</li>
<li><p><strong><code>git branch &lt;branch_name&gt;</code></strong><br>创建一个新分支。</p>
</li>
<li><p><strong><code>git checkout &lt;branch_name&gt;</code></strong><br>切换到指定分支。</p>
</li>
<li><p><strong><code>git checkout -b &lt;branch_name&gt;</code></strong><br>创建并切换到新分支。</p>
</li>
<li><p><strong><code>git merge &lt;branch_name&gt;</code></strong><br>将指定分支合并到当前分支。</p>
</li>
<li><p><strong><code>git branch -d &lt;branch_name&gt;</code></strong><br>删除指定分支。</p>
</li>
</ul>
<h2 id="5-远程操作"><a href="#5-远程操作" class="headerlink" title="5. 远程操作"></a>5. <strong>远程操作</strong></h2><ul>
<li><p><strong><code>git remote -v</code></strong><br>查看远程仓库的详细信息。</p>
</li>
<li><p><strong><code>git remote add &lt;name&gt; &lt;url&gt;</code></strong><br>添加一个新的远程仓库。</p>
</li>
<li><p><strong><code>git fetch &lt;remote&gt;</code></strong><br>从远程仓库获取最新更改，但不合并到当前分支。</p>
</li>
<li><p><strong><code>git pull &lt;remote&gt; &lt;branch&gt;</code></strong><br>从远程仓库获取最新更改并合并到当前分支。</p>
</li>
<li><p><strong><code>git push &lt;remote&gt; &lt;branch&gt;</code></strong><br>将本地分支的提交推送到远程仓库。</p>
</li>
<li><p><strong><code>git push -u &lt;remote&gt; &lt;branch&gt;</code></strong><br>将本地分支推送到远程仓库，并设置上游分支，方便以后直接使用 <code>git push</code>。</p>
</li>
</ul>
<h2 id="6-撤销与回退"><a href="#6-撤销与回退" class="headerlink" title="6. 撤销与回退"></a>6. <strong>撤销与回退</strong></h2><ul>
<li><p><strong><code>git reset &lt;file&gt;</code></strong><br>将文件从暂存区移除，但保留工作目录中的更改。</p>
</li>
<li><p><strong><code>git reset --hard</code></strong><br>撤销所有未提交的更改，恢复到上一次提交的状态。</p>
</li>
<li><p><strong><code>git checkout -- &lt;file&gt;</code></strong><br>撤销对文件的修改，恢复到上一次提交的状态。</p>
</li>
<li><p><strong><code>git revert &lt;commit&gt;</code></strong><br>创建一个新的提交，撤销指定提交的更改。</p>
</li>
</ul>
<h2 id="7-标签"><a href="#7-标签" class="headerlink" title="7. 标签"></a>7. <strong>标签</strong></h2><ul>
<li><p><strong><code>git tag</code></strong><br>列出所有标签。</p>
</li>
<li><p><strong><code>git tag &lt;tag_name&gt;</code></strong><br>在当前提交上创建一个轻量标签。</p>
</li>
<li><p><strong><code>git tag -a &lt;tag_name&gt; -m &quot;&lt;message&gt;&quot;</code></strong><br>创建一个带注释的标签。</p>
</li>
<li><p><strong><code>git push &lt;remote&gt; &lt;tag_name&gt;</code></strong><br>将标签推送到远程仓库。</p>
</li>
<li><p><strong><code>git push &lt;remote&gt; --tags</code></strong><br>将所有标签推送到远程仓库。</p>
</li>
</ul>
<h2 id="8-其他常用指令"><a href="#8-其他常用指令" class="headerlink" title="8. 其他常用指令"></a>8. <strong>其他常用指令</strong></h2><ul>
<li><p><strong><code>git diff</code></strong><br>查看工作目录与暂存区之间的差异。</p>
</li>
<li><p><strong><code>git diff --cached</code></strong><br>查看暂存区与上一次提交之间的差异。</p>
</li>
<li><p><strong><code>git stash</code></strong><br>将当前工作目录的修改暂存起来，方便切换分支。</p>
</li>
<li><p><strong><code>git stash pop</code></strong><br>恢复最近一次暂存的修改。</p>
</li>
<li><p><strong><code>git cherry-pick &lt;commit&gt;</code></strong><br>将指定提交应用到当前分支。</p>
</li>
<li><p><strong><code>git rebase &lt;branch&gt;</code></strong><br>将当前分支的提交“变基”到指定分支上。</p>
</li>
</ul>
<h2 id="9-配置"><a href="#9-配置" class="headerlink" title="9. 配置"></a>9. <strong>配置</strong></h2><ul>
<li><p><strong><code>git config --global user.name &quot;&lt;name&gt;&quot;</code></strong><br>设置全局用户名。</p>
</li>
<li><p><strong><code>git config --global user.email &quot;&lt;email&gt;&quot;</code></strong><br>设置全局用户邮箱。</p>
</li>
<li><p><strong><code>git config --list</code></strong><br>列出当前 Git 配置。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>OJ在线代码测评系统</title>
    <url>/2025/03/01/OJ%E5%9C%A8%E7%BA%BF%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="在线代码测评系统"><a href="#在线代码测评系统" class="headerlink" title="在线代码测评系统"></a>在线代码测评系统</h1><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p><a href="https://gitee.com/xj-oj/oj-project/tree/master">https://gitee.com/xj-oj/oj-project/tree/master</a></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>Java版本：Jdk 17</li>
<li>数据库：MySQL 8.0、Redis 6.2.6</li>
<li>开发工具 ：IntelliJ IDEA、Maven 3.8.6</li>
</ul>
<h2 id="采用技术"><a href="#采用技术" class="headerlink" title="采用技术"></a>采用技术</h2><ul>
<li>Spring Boot、MyBatis-Plus、redis</li>
<li>vue3、Axios、Element Plus<br><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/img.png" alt="img.png"></li>
</ul>
<h2 id="部署运行环境"><a href="#部署运行环境" class="headerlink" title="部署运行环境"></a>部署运行环境</h2><ul>
<li>Windows</li>
</ul>
<h2 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/1.gif" alt="img"></p>
<ul>
<li>视图层包括网站主站点和后台管理系统，主站点负责向用户提供服务，是用户看到的系统页面。用户可以在上面进行登录注册、个人信息管理、查看题目、编写代码、提交代码、查看测评状态、查看排名、参加竞赛、查看竞赛结果以及发布文章等主要操作。后台管理系统是专门给系统管理员使用的管理后台，管理员可以在上面进行用户管理、题目管理、竞赛管理、日志管理以及查看系统运行状态等操作。视图层通过Ajax与后端接口进行数据交互。</li>
<li>网络接口层的主要职责是接收用户的请求，根据请求参数的不同，做出不同的响应，响应数据的格式是JSON数据。</li>
<li>业务层包括用户服务、题目服务、竞赛服务、代码服务、测评服务、文件服务、文章服务等功能模块。业务层主要是实现系统功能的代码部分，通过数据映射实现和数据层的交互，从而实现数据的持久化。</li>
<li>数据层是系统最底层，也是最重要的一层，系统中所有的数据均保存在数据层的MySQL服务和Redis服务中。</li>
</ul>
<h2 id="系统总体设计"><a href="#系统总体设计" class="headerlink" title="系统总体设计"></a>系统总体设计</h2><p>本系统主要分为用户和管理员两个主要的模块。用户模块主要包括登录注册、个人中心、题目浏览、代码评测、竞赛参与、文章发布等多个子功能模块。管理员的功能模块包括用户管理、题目管理、测评管理、竞赛管理、文章管理等。本系统详细的功能模块划分图如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/2.png" alt="img"></p>
<h3 id="代码测评流程图"><a href="#代码测评流程图" class="headerlink" title="代码测评流程图"></a>代码测评流程图</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/3.png" alt="image-20230919193056867"></p>
<p>测评结果设计：</p>
<p>Compile Error：编译错误。用户提交的代码中有语法错误，无法通过编译器检查。</p>
<p>Partial Accepted：部分测评用例通过。表面用户提交的源代码可以通过部分测评用例，还有一部分测评用例无法通过，需要用户考虑其他的可能性。</p>
<p>Accepted：通过。用户提交的源代码经过测试后通过了所有的测评用例，表明用户解决了该题目。</p>
<p>Wrong Answer：答案错误。表示用户提交的源代码的输出结果错误，没有通过任何一个测评用例。</p>
<p>Runtime Error：运行时错误。程序在运行时异常终止，可能的原因有段错误、除0、栈溢出或数组越界等多种错误。</p>
<p>Time Limit Exceeded：超时。用户提交的源代码在测试运行时超出了题目设定的最大运行时间限制，不符合题目的要求。</p>
<p>Memory Limit Exceeded：内存超限。程序在运行时使用的内存空间超出题目设定的内存限制。</p>
<p>System Error：系统错误。在进行代码测评时，测评机器发送错误，这个错误与系统相关。</p>
<h3 id="编译器设置"><a href="#编译器设置" class="headerlink" title="编译器设置"></a>编译器设置</h3><table>
<thead>
<tr>
<th>名称</th>
<th>版本</th>
<th>编译命令</th>
</tr>
</thead>
<tbody><tr>
<td>C</td>
<td>GCC  4.8.5</td>
<td>&#x2F;usr&#x2F;bin&#x2F;gcc  {src_path} -o {exe_path}</td>
</tr>
<tr>
<td>C++</td>
<td>G++  4.8.5</td>
<td>&#x2F;usr&#x2F;bin&#x2F;g++  {src_path} -o {exe_path}</td>
</tr>
<tr>
<td>Java</td>
<td>JDK  17.0.6</td>
<td>&#x2F;usr&#x2F;bin&#x2F;javac  {src_path} -d {exe_path}</td>
</tr>
<tr>
<td>Python</td>
<td>Python  3.6.8</td>
<td>&#x2F;usr&#x2F;bin&#x2F;python3  {src_path}</td>
</tr>
<tr>
<td>Golang</td>
<td>Golang  1.20.2</td>
<td>&#x2F;usr&#x2F;bin&#x2F;go  build -o {exe_path} {src_path}</td>
</tr>
<tr>
<td>JavaScript</td>
<td>Node.js  16.19.1</td>
<td>&#x2F;usr&#x2F;bin&#x2F;node  {src_path}</td>
</tr>
</tbody></table>
<h2 id="主要功能实现"><a href="#主要功能实现" class="headerlink" title="主要功能实现"></a>主要功能实现</h2><p>(一) 用户模块</p>
<ol>
<li>登录注册</li>
</ol>
<p>注册和登录是系统中其他功能的使用前提，进入注册页面后，用户需要输入用户名、电子邮箱、邮箱验证码、密码和确认密码，只有邮箱验证码和Redis缓存中保存的一致、邮箱未注册、两次输入的密码一致，用户才能注册成功。系统注册页面如图4.1所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip004.png" alt="img"></p>
<ol start="2">
<li>个人中心</li>
</ol>
<p>个人中心主要用于向用户展示自己的个人信息。同时用户还可以进行个人资料的编辑和重置密码等操作。如图所示是系统个人中心页面。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip010.png" alt="img"></p>
<ol start="3">
<li>查看题目</li>
</ol>
<p>用户可以在题目列表可以分页查看题目列表，包括题目名称、难度、提交次数、通过率等等信息。题目详情页可以查看题目详细信息和进行代码提交。如图4.3为题目列表页，图为题目详情页。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip008.png" alt="img"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip006.png" alt="img"></p>
<ol start="4">
<li>代码测评</li>
</ol>
<p>代码测评在使用后在如上图4.4页面提交代码后进行的。代码测评的流程如下：</p>
<ol>
<li>用户提交代码；</li>
<li>进行代码安全性检查，检查是否有危害系统运行的代码输入；</li>
<li>编译代码（不需要编译的语言没有这一步）；</li>
<li>逐一运行测评用例，判断输出结果是否和正确结果一致；</li>
<li>所有测试用例运行完成后，将结果返回给用户。</li>
</ol>
<ol start="5">
<li>发布文章</li>
</ol>
<p>发布文章页面中用户需要填写标题、分类、正文等内容。发布文章页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip018.png" alt="img"></p>
<p>(二) 管理员模块</p>
<ol>
<li>用户管理</li>
</ol>
<p>管理员可以对系统中的注册用户进行管理。用户管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip012.png" alt="img"></p>
<ol start="2">
<li>题目管理</li>
</ol>
<p>管理员可以对当前系统中的题目进行管理。题目管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip016.png" alt="img"></p>
<ol start="3">
<li>测评管理</li>
</ol>
<p>管理员进入测评管理模块后，可以查看题目测评记录。当然这些测评记录都是用户提交代码进行测评时生成的。测评管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip014.png" alt="img"></p>
<ol start="4">
<li>竞赛管理</li>
</ol>
<p>管理员是系统中唯一可以对竞赛进行管理的角色。竞赛管理包括查看、创建和删除等操作。创建竞赛时需要设定竞赛的开始和结束时间。竞赛管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip020.png" alt="img"></p>
<ol start="5">
<li>文章管理</li>
</ol>
<p>管理员可以对文章进行管理。实现了查看文章列表、删除文章等功能。文章管理页面如图所示。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20240924112142857.png" alt="img"></p>
<h1 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h1><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><ul>
<li>后端服务</li>
<li>后端管理界面</li>
<li>前端显示界面</li>
</ul>
<h3 id="后端服务"><a href="#后端服务" class="headerlink" title="后端服务"></a>后端服务</h3><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><ul>
<li>SpringBoot</li>
<li>MySql</li>
<li>Redis</li>
</ul>
<h3 id="后端管理界面"><a href="#后端管理界面" class="headerlink" title="后端管理界面"></a>后端管理界面</h3><h4 id="技术选型-1"><a href="#技术选型-1" class="headerlink" title="技术选型"></a>技术选型</h4><ul>
<li>Html、Css、 JavaScript</li>
<li>thymeleaf</li>
<li>组件库 <a href="https://layui.dev/docs/2/base.html">Layui</a></li>
</ul>
<h3 id="前端显示界面"><a href="#前端显示界面" class="headerlink" title="前端显示界面"></a>前端显示界面</h3><h4 id="技术选型-2"><a href="#技术选型-2" class="headerlink" title="技术选型"></a>技术选型</h4><ul>
<li>Vue</li>
<li>组件库 <a href="https://element-plus.org/zh-CN/component/overview.html">Element-plus</a></li>
<li>文本编辑器 TODO</li>
</ul>
<h2 id="人员分工（垂直分工）"><a href="#人员分工（垂直分工）" class="headerlink" title="人员分工（垂直分工）"></a>人员分工（垂直分工）</h2><blockquote>
<p>项目整体架构，有三端，前端显示界面，后端管理界面，后端代码逻辑</p>
<p>分工方式为，根据业务功能，完成相应三端代码的编写以及MySql表的设计</p>
<p><strong>每个模块都会用到JavaScript、Css、Html、Vue、Java、Sql、MybatisPlus等技术</strong></p>
<p><strong>另外每个模块均由自己完成单元测试</strong></p>
</blockquote>
<h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ul>
<li>各个语言代码的执行逻辑环境和代码编写（C、C++、Python、Java、Go已经实现）</li>
<li>前端首页、关于界面</li>
<li>前端、后端代码脚手架编写</li>
<li>代码执行逻辑解耦、完成代码沙箱</li>
<li>代码执行安全管理</li>
<li>接口文档接入</li>
<li>功能测试</li>
</ul>
<p>使用到的技术：FileUtils、Runtime、Vue3、Element-Plus、thymeleaf、knife4j</p>
<h3 id="题目测评"><a href="#题目测评" class="headerlink" title="题目测评"></a>题目测评</h3><ul>
<li>测评结果（Evaluation模块内容）</li>
<li>解决跨域问题</li>
<li>完成腾讯cos服务的接入</li>
<li>代码编辑界面</li>
</ul>
<p>使用到的技术：</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20240924112223751.png" alt="image-20240924112142857" style="zoom:50%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20240924113300957.png" alt="image-20240924112223751" style="zoom:50%;" />

<p>代码编辑器 <a href="https://github.com/koca/vue-prism-editor/blob/master/README.md">https://github.com/koca/vue-prism-editor/blob/master/README.md</a></p>
<h3 id="题目管理"><a href="#题目管理" class="headerlink" title="题目管理"></a>题目管理</h3><ul>
<li>题目管理</li>
<li>题目创建、题目测试用例添加</li>
</ul>
<p>使用到的技术：无特别技术</p>
<h3 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h3><ul>
<li>博客创建</li>
<li>个人对自己创建博客的管理（编辑和删除）</li>
<li>博客的浏览</li>
<li>博客的搜索</li>
</ul>
<p>使用到的技术：</p>
<p>富文本编辑器 wangEditor	文档地址<a href="https://www.wangeditor.com/">https://www.wangeditor.com/</a></p>
<h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><ul>
<li>前端显示界面登录</li>
<li>后端管理界面登录、</li>
<li>邮箱验证注册</li>
<li>个人信息简介</li>
</ul>
<p>使用到的技术：</p>
<p>前端登录：Cookies、Redis（不必要可以不讲）</p>
<p>后端登录：拦截器 LoginInterceptor、Cookies</p>
<p>邮箱配置：</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/clip002.png" alt="image-20240924113300957" style="zoom:50%;" />

<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>用户管理</li>
<li>用户排名设计</li>
</ul>
<p>使用到的技术：无特别技术</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx学习笔记</title>
    <url>/2025/03/01/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="先看-2-个实际需求，引出-Nginx"><a href="#先看-2-个实际需求，引出-Nginx" class="headerlink" title="先看 2 个实际需求，引出 Nginx"></a>先看 2 个实际需求，引出 Nginx</h1><h2 id="需求-1-访问不同微服务"><a href="#需求-1-访问不同微服务" class="headerlink" title="需求 1: 访问不同微服务"></a><strong>需求</strong> 1: <strong>访问不同微服务</strong></h2><p>- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147826.jpeg"></p>
<h2 id="需求-2-轮询访问服务"><a href="#需求-2-轮询访问服务" class="headerlink" title="需求 2: 轮询访问服务"></a><strong>需求</strong> 2: <strong>轮询访问服务</strong></h2><p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147827.jpeg"></p>
<h2 id="解决方案-Nginx"><a href="#解决方案-Nginx" class="headerlink" title="解决方案: Nginx"></a><strong>解决方案</strong>: Nginx</h2><ol>
<li><strong>反向代理</strong></li>
<li><strong>负载均衡</strong></li>
<li><strong>动静分离</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147828.jpeg"></p>
<ol start="4">
<li><strong>高可用集群</strong></li>
</ol>
<h2 id="Nginx-在分布式-微服务-架构的位置"><a href="#Nginx-在分布式-微服务-架构的位置" class="headerlink" title="Nginx 在分布式 微服务 架构的位置"></a>Nginx <strong>在分布式 微服务 架构的位置</strong></h2><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><h2 id="Nginx-是什么-能干什么"><a href="#Nginx-是什么-能干什么" class="headerlink" title="Nginx 是什么? 能干什么?"></a>Nginx <strong>是什么</strong>? <strong>能干什么</strong>?</h2><ol>
<li><strong>是什么：Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理 WEB 服务器</strong></li>
<li><strong>能干什么：反向代理 负载均衡 动静分离</strong></li>
<li><strong>牛逼之处：高性能，高负载 有报告表明能支持高达 50,000 个并发连接数</strong></li>
<li><strong>详细说明：<a href="https://lnmp.org/nginx.html">https://lnmp.org/nginx.html</a></strong></li>
</ol>
<h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a><strong>官方资料</strong></h2><ol>
<li><strong>官网：<a href="https://nginx.org/">https://nginx.org/</a></strong></li>
<li><strong>使用文档：<a href="https://nginx.org/en/docs/">https://nginx.org/en/docs/</a></strong></li>
</ol>
<h1 id="Nginx-核心功能"><a href="#Nginx-核心功能" class="headerlink" title="Nginx 核心功能"></a>Nginx 核心功能</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a><strong>正向代理</strong></h2><ol>
<li><strong>一句话：如果我们要访问</strong> <a href="http://www.google.com/"><strong>www.google.com</strong></a> <strong>但是直接访问不到，则需要通过代理服务器来访问，这种代理服务就称为正向代理</strong></li>
<li><strong>一图胜千言</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147829.jpeg"></p>
<p>老韩图解</p>
<ol>
<li><strong>我们知道<a href="http://www.google.com/">www.google.com</a> , 但是访问不到</strong></li>
<li><strong>所以使用代理服务器帮助我们(即客户端)来上网, 注意帮助的对象是客户端, 这种代理,我们称为正向代理.</strong></li>
<li><strong>正向代理同时也隐藏了客户端信息.</strong></li>
<li><strong>再次说明，正向代理帮助的是客户端, 因此可以把 客户端+正向代理服务 , 视为一个整体</strong></li>
</ol>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><strong>反向代理</strong></h2><ol>
<li><strong>一句话：客户端将请求发送到代理服务器，由代理服务器去选择目标服务器获取数据后，返回给客户端，这种代理方式为反向代理</strong></li>
<li><strong>一图胜千言</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147830.jpeg"></p>
<p>老韩图解</p>
<ol>
<li><strong>项目设计者, 不希望客户端直接访问目标Web 服务器(比如目标 Web 服务器是集群, 如果直接访问就会提供多个公网 IP), 而是希望提供一个统一的访问 IP, 这个是理解反向代理的前提，即为什么要反向代理.</strong></li>
<li><strong>反向代理帮助的对象是目标 Web 服务器</strong></li>
<li><strong>当客户端请求达到反向代理服务后，由反向代理服务来决定如何访问目标 Web 服务器</strong>(或者是哪个 Web 服务器), 这个过程对客户端是透明的.</li>
<li><strong>反向代理服务会暴露公共的IP, 只要能上网，就可以访问，但是对于反向代理服务器 管理的&#x2F;代理的 Web 服务器通常是在局域网内，不能直接访问，只能通过反向代理来访问.</strong></li>
<li><strong>我们可以将 反向代理服务+反向代理服务代理的Web 服务器 视为一个整体</strong></li>
<li><strong>反向代理会屏蔽 内网服务器(也就是他代理的服务)信息, 并实现负载均衡访问</strong></li>
</ol>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><strong>负载均衡</strong></h2><ol>
<li><p><strong>一句话：当客户端向反向代理服务器(比如 Nginx)发出请求，如果 Nginx 代理了多个</strong></p>
<p>WEB 服务器(集群)，Nginx 会将请求&#x2F;负载分发到不同的服务器，也就是负载均衡</p>
</li>
<li><p><strong>一图胜千言</strong></p>
</li>
</ol>
<p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147831.jpeg"></p>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a><strong>动静分离</strong></h2><ol>
<li><strong>一句话：为了加快网站的解析速度，可以把动态资源和静态资源由不同的服务器来解析，降低单个服务器的压力</strong></li>
<li><strong>传统的项目资源部署</strong></li>
</ol>
<p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147832.jpeg"></p>
<ol start="3">
<li><strong>动静分离项目资源部署</strong></li>
</ol>
<p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147833.jpeg"></p>
<h1 id="Nginx-下载-安装-启动"><a href="#Nginx-下载-安装-启动" class="headerlink" title="Nginx 下载&amp;安装&amp;启动"></a>Nginx 下载&amp;安装&amp;启动</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><strong>下载</strong></h2><ol>
<li><strong>下载地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></strong></li>
<li><strong>版本：nginx-1.20.2.tar.gz</strong></li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><h3 id="安装-Linux-登录-Linux"><a href="#安装-Linux-登录-Linux" class="headerlink" title="安装 Linux, 登录 Linux"></a><strong>安装 Linux, 登录 Linux</strong></h3><p>1、我在讲解 Linux 的时候(用的 CentOS7.6, 请小伙伴和我保持一致), 已经讲过, 非常的全面细致</p>
<p>2、带学员看一下笔记位置</p>
<p>3、带学员看一下 Linux 视频课程在哪里</p>
<p>4、保证能登录 Linux</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147834.jpeg"></p>
<p>5、保证访问外网-在Linux 讲过怎么配置</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147835.jpeg"></p>
<h3 id="具体安装步骤"><a href="#具体安装步骤" class="headerlink" title="具体安装步骤"></a><strong>具体安装步骤</strong></h3><ol>
<li><strong>搭建 gcc 环境</strong></li>
</ol>
<p>yum -y install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</p>
<p><strong>老韩提示 1</strong>: 一定要保证当前的linux 系统, 可以连接外网, 因为yum 需要到外网,获取数据</p>
<p><strong>老韩提示 2</strong>: 如何在 Linux 配置网络, 可以连接到外网, 带学员看一下文档和视频位置</p>
<p>(<a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=63">https://www.bilibili.com/video/BV1Sv411r7vd?p=63</a>).</p>
<p><strong>老韩提示 3</strong>: 执行上面指令的时候, 可能会报 Centos Another app is currently holding the yum lock..错误,是因为yum 不时会自动升级, 占用了端口或文件, 解决方案 (1)可以重启Linux, 立即执行该指令 (2)或者等一会再执行(3) 或者参考 <a href="https://www.cnblogs.com/lzxianren/p/4254059.html">https://www.cnblogs.com/lzxianren/p/4254059.html</a>, 老韩用的是第 1 种解决方案, 可以搞定..</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147836.jpeg"></p>
<ol start="2">
<li><p><strong>将nginx-1.20.2.tar.gz 上传到Linux &#x2F;opt 目录</strong></p>
</li>
<li><p><strong>切换到&#x2F;opt 目录, 解压 nginx-1.20.2.tar.gz</strong></p>
<p>tar -zxvf nginx-1.20.2.tar.gz</p>
</li>
<li><p><strong>将解压后的文件放到指定位置</strong></p>
</li>
</ol>
<p>mv nginx-1.20.2 &#x2F;usr&#x2F;local&#x2F;nginx</p>
<ol start="5">
<li><strong>进入文件目录</strong></li>
</ol>
<p><strong>cd &#x2F;usr&#x2F;local&#x2F;nginx</strong></p>
<ol start="6">
<li><strong>配置 nginx 路径</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastcgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --conf-path=/usr/local/nginx/nginx.conf </span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>补全 nginx 配置目录</strong></li>
</ol>
<p><strong>mkdir &#x2F;var&#x2F;temp&#x2F;nginx -p</strong></p>
<ol start="8">
<li><strong>编译并安装</strong></li>
</ol>
<p>make &amp;&amp; make install</p>
<ol start="9">
<li><strong>测试配置与 nginx 是否正常，当出现 successful 即可</strong></li>
</ol>
<p>.&#x2F;sbin&#x2F;nginx -t</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147837.jpeg"></p>
<ol start="11">
<li><strong>启动 nginx</strong></li>
</ol>
<p>.&#x2F;sbin&#x2F;nginx -c nginx.conf</p>
<ol start="12">
<li><strong>查看进程&#x2F;或端口(默认端口是 80) ps -ef | grep nginx</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147838.jpeg"></p>
<h3 id="启动-Nginx-可能的错误-和解决方案"><a href="#启动-Nginx-可能的错误-和解决方案" class="headerlink" title="启动 Nginx 可能的错误 和解决方案"></a><strong>启动 Nginx 可能的错误 和解决方案</strong></h3><p>1. 解决 nginx 启动报错 nginx: [emerg] open() “&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid” failed (2: No such file or directory)</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147839.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147840.jpeg"></p>
<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a><strong>验证是否安装成功</strong></h2><ol>
<li><strong>nginx 默认监听端口 80，出现 Welcome to nginx!该页面就是搞定了</strong></li>
<li><strong>Linux 的浏览器：<a href="http://localhost/">http://localhost</a></strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147841.jpeg"></p>
<h2 id="配置防火墙，让-Windows-访问-Nginx"><a href="#配置防火墙，让-Windows-访问-Nginx" class="headerlink" title="配置防火墙，让 Windows 访问 Nginx"></a><strong>配置防火墙，让</strong> Windows <strong>访问</strong> Nginx</h2><ol>
<li><strong>说明：默认情况下 Windows 是不能访问 Nginx , 因为防火墙是关闭 80 端口的</strong></li>
<li><strong>具体配置</strong></li>
</ol>
<ul>
<li><strong>查看开放的端口号</strong></li>
</ul>
<p>firewall-cmd –list-all</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147842.jpeg"></p>
<ul>
<li><p><strong>设置开放的端口号</strong></p>
<p>#firewall-cmd –add-service&#x3D;http –permanent #增加了一个 http 服务,理解</p>
<p>firewall-cmd –add-port&#x3D;80&#x2F;tcp –permanent</p>
</li>
<li><p><strong>重启防火墙</strong></p>
<p>firewall-cmd –reload</p>
</li>
</ul>
<p>**老 韩 提 示 ： 防 火 墙 配 置 详 情 ， &lt;&lt; 韩 顺 平 一 周 学 会 Linux&gt;&gt; <a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=77">https://www.bilibili.com/video/BV1Sv411r7vd?p=77</a></p>
<p><strong>测试: windows 浏览器:</strong> <a href="http://192.168.12.134/"><strong>http://192.168.12.134/</strong></a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147843.jpeg"></p>
<h1 id="Nginx-命令行参数"><a href="#Nginx-命令行参数" class="headerlink" title="Nginx 命令行参数"></a>Nginx 命令行参数</h1><h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a><strong>指令说明</strong></h2><h3 id="地址：https-nginx-org-en-docs-switches-html"><a href="#地址：https-nginx-org-en-docs-switches-html" class="headerlink" title="地址：https://nginx.org/en/docs/switches.html"></a><strong>地址：<a href="https://nginx.org/en/docs/switches.html">https://nginx.org/en/docs/switches.html</a></strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147844.jpeg"></p>
<h2 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a><strong>使用演示</strong></h2><ol>
<li><strong>启动 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c nginx.conf</strong></li>
<li><strong>停止 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</strong></li>
<li><strong>重新加载(不需要重启) &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</strong></li>
<li><strong>查看版本 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -v</strong></li>
<li><strong>查看版本、配置参数 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -V</strong></li>
</ol>
<h1 id="nginx-conf-配置文件"><a href="#nginx-conf-配置文件" class="headerlink" title="nginx.conf 配置文件"></a>nginx.conf 配置文件</h1><h2 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a><strong>基本说明</strong></h2><h3 id="Nginx-的配置文件位置"><a href="#Nginx-的配置文件位置" class="headerlink" title="Nginx 的配置文件位置"></a><strong>Nginx 的配置文件位置</strong></h3><p>1、文件位置</p>
<ol>
<li><strong>安装目录\conf\nginx.conf</strong></li>
<li><strong>安装目录\nginx.conf</strong></li>
</ol>
<p>2、两个文件是一样的</p>
<ol>
<li><p><strong>多说一句：使用 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx 启动 Nginx ，默认用的是 安装目录</strong> \nginx.conf 配置文件</p>
</li>
<li><p><strong>作用：完成对 Nginx 的各种配置，包括端口，并发数，重写规则等</strong></p>
</li>
<li><p><strong>nginx.conf 组成</strong></p>
<ol>
<li><strong>全局块</strong></li>
<li>events <strong>块</strong></li>
<li>http <strong>块</strong></li>
</ol>
</li>
<li><p><strong>nginx.conf 详细文档</strong></p>
<ol>
<li><strong>地址: 文档：<a href="https://blog.csdn.net/liuchang19950703/article/details/110792007">https://blog.csdn.net/liuchang19950703/article/details/110792007</a></strong></li>
<li><strong>文档: Nginx 配置文件 nginx.conf 详解.docx</strong></li>
<li><strong>详细内容</strong></li>
</ol>
</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Nginx 用户及组：用户组。window 下不指定</span></span><br><span class="line"><span class="comment">#user nobody;</span></span><br><span class="line"><span class="comment">#工作进程：数目。根据硬件调整，通常等于CPU 数量或者2 倍于CPU。</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">#错误日志：存放路径。</span></span><br><span class="line"><span class="comment">#error_log logs/error.log;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"><span class="comment">#pid(进程标识符)：存放路径</span></span><br><span class="line"><span class="attribute">pid</span> /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"><span class="comment">#一个进程能打开的文件描述符最大值，理论上该值因该是最多能打开的文件数除以进程数。</span></span><br><span class="line"><span class="comment">#但是由于nginx 负载并不是完全均衡的，所以这个值最好等于最多能打开的文件数。</span></span><br><span class="line"><span class="comment">#LINUX 系统可以执行sysctl -a | grep fs.file 可以看到linux 文件描述符。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用epoll 的I/O 模型。linux 建议epoll，FreeBSD 建议采用kqueue，window 下不指定。</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，</span></span><br><span class="line">    <span class="comment">#一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#client_header_buffer_size 4k;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定mime 类型,类型由mime.type 文件定义</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    <span class="comment">#日志格式设置</span></span><br><span class="line">    <span class="comment">#log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line">    <span class="comment">#用了log_format 指令设置了日志格式之后，需要用access_log 指令指定日志文件的存放路径</span></span><br><span class="line">    <span class="comment">#记录了哪些用户，哪些页面以及用户浏览器、ip 和其他的访问信息</span></span><br><span class="line">    <span class="comment">#access_log logs/host.access.log main;</span></span><br><span class="line">    <span class="comment">#access_log logs/host.access.404.log log404;</span></span><br><span class="line">    <span class="comment">#服务器名字的hash 表大小</span></span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">    <span class="comment">#客户端请求头缓冲大小。</span></span><br><span class="line">    <span class="comment">#nginx 默认会用client_header_buffer_size 这个buffer 来读取header 值，</span></span><br><span class="line">    <span class="comment">#如果header 过大，它会使用large_client_header_buffers 来读取。</span></span><br><span class="line">    <span class="comment">#如果设置过小HTTP 头/Cookie 过大会报400 错误nginx 400 bad request</span></span><br><span class="line">    <span class="comment">#如果超过buffer，就会报HTTP 414 错误(URI Too Long)</span></span><br><span class="line">    <span class="comment">#nginx 接受最长的HTTP 头部大小必须比其中一个buffer 大</span></span><br><span class="line">    <span class="comment">#否则就会报400 的HTTP 错误(Bad Request)</span></span><br><span class="line">    <span class="comment">#client_header_buffer_size 32k;</span></span><br><span class="line">    <span class="comment">#large_client_header_buffers 4 32k;</span></span><br><span class="line">    <span class="comment">#隐藏ngnix 版本号</span></span><br><span class="line">    <span class="comment">#server_tokens off;</span></span><br><span class="line">    <span class="comment">#忽略不合法的请求头</span></span><br><span class="line">    <span class="comment">#ignore_invalid_headers on;</span></span><br><span class="line">    <span class="comment">#让nginx 在处理自己内部重定向时不默认使用server_name 设置中的第一个域名</span></span><br><span class="line">    <span class="comment">#server_name_in_redirect off;</span></span><br><span class="line">    <span class="comment">#客户端请求体的大小</span></span><br><span class="line">    <span class="comment">#client_body_buffer_size 8m;</span></span><br><span class="line">    <span class="comment">#开启文件传输，一般应用都应设置为on；若是有下载的应用，则可以设置成off 来平衡网络I/O 和磁盘的I/O 来降低系统负</span></span><br><span class="line">    载</span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#告诉nginx 在一个数据包里发送所有头文件，而不一个接一个的发送。</span></span><br><span class="line">    <span class="comment">#tcp_nopush on;</span></span><br><span class="line">    <span class="comment">#tcp_nodelay off 会增加通信的延时，但是会提高带宽利用率。在高延时、数据量大的通信场景中应该会有不错的效果</span></span><br><span class="line">    <span class="comment">#tcp_nodelay on，会增加小包的数量，但是可以提高响应速度。在及时性高的通信场景中应该会有不错的效果</span></span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#gzip 模块设置，使用gzip 压缩可以降低网站带宽消耗，同时提升访问速度。</span></span><br><span class="line">    <span class="comment">#gzip on; #开启gzip</span></span><br><span class="line">    <span class="comment">#gzip_min_length 1k; #最小压缩大小</span></span><br><span class="line">    <span class="comment">#gzip_buffers 4 16k; #压缩缓冲区</span></span><br><span class="line">    <span class="comment">#gzip_http_version 1.0; #压缩版本</span></span><br><span class="line">    <span class="comment">#gzip_comp_level 2; #压缩等级</span></span><br><span class="line">    <span class="comment">#gzip_types text/plain text/css text/xml text/javascript application/json application/x-javascript application/xml</span></span><br><span class="line">    application/xml+rss;<span class="comment">#压缩类型</span></span><br><span class="line">    <span class="comment">#负载均衡</span></span><br><span class="line">    <span class="comment">#max_fails 为允许请求失败的次数，默认为1</span></span><br><span class="line">    <span class="comment">#weight 为轮询权重，根据不同的权重分配可以用来平衡服务器的访问率。</span></span><br><span class="line">    <span class="comment"># upstream myServer&#123;</span></span><br><span class="line">    <span class="comment"># server 192.168.247.129:8080 max_fails=3 weight=2;</span></span><br><span class="line">    <span class="comment"># server 192.168.247.129:8081 max_fails=3 weight=4;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment"># listen 80;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #IP/域名可以有多个，用空格隔开</span></span><br><span class="line"><span class="comment"># server_name 192.168.247.129;</span></span><br><span class="line"><span class="comment"># #server_name www.test.com;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #charset koi8-r;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #access_log logs/host.access.log main;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #反向代理配置，</span></span><br><span class="line"><span class="comment"># #将所有请求为www.test.com 的请求全部转发到upstream 中定义的目标服务器中。</span></span><br><span class="line"><span class="comment"># location / &#123;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #此处配置的域名必须与upstream 的域名一致，才能转发。</span></span><br><span class="line"><span class="comment"># proxy_pass http://myServer;</span></span><br><span class="line"><span class="comment"># #proxy_pass http://192.168.247.129:8080;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># proxy_connect_timeout 20; #nginx 跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span></span><br><span class="line"><span class="comment"># #client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line"><span class="comment"># #proxy_send_timeout 300; #后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line"><span class="comment"># #proxy_read_timeout 300; #连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line"><span class="comment"># #proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line"><span class="comment"># #proxy_buffers 4 32k; #proxy_buffers 缓冲区，网页平均在32k 以下的话，这样设置</span></span><br><span class="line"><span class="comment"># #proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line"><span class="comment"># #proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream 服务器传</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># root html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #定义首页索引文件的名称</span></span><br><span class="line"><span class="comment"># index index.html index.htm;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #动静分离静态资源走linux 动态资源走tomcat</span></span><br><span class="line"><span class="comment"># # 注意/source/image/下面寻找资源</span></span><br><span class="line"><span class="comment"># location /image/ &#123;</span></span><br><span class="line"><span class="comment"># root /source/;</span></span><br><span class="line"><span class="comment"># autoindex on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 出现50x 错误时，使用/50x.html 页返回给客户端</span></span><br><span class="line"><span class="comment"># error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment"># location = /50x.html &#123;</span></span><br><span class="line"><span class="comment"># root html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下面是配置生产环境中既支持HTTP 又支持HTTPS,保证用户在浏览器中输入HTTP 也能正常访问</span></span><br><span class="line"><span class="comment"># SSL 证书配置</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> cert/yphtoy.com.pem; <span class="comment">#加密证书路径</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> cert/yphtoy.com.key; <span class="comment">#加密私钥路径</span></span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#加密协议</span></span><br><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>; <span class="comment">#加密访问缓存设置,可以大大提高访问速度</span></span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>; <span class="comment">#加密访问缓存过期时间</span></span><br><span class="line"><span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5; <span class="comment">#加密算法</span></span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>; <span class="comment">#是否由服务器决定采用哪种加密算法</span></span><br><span class="line"><span class="comment"># 负载均衡</span></span><br><span class="line"><span class="section">upstream</span> api_upstream &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> max_fails=<span class="number">3</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> max_fails=<span class="number">3</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#api 接口(兼容HTTP)</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> api.test.com;</span><br><span class="line">    <span class="comment"># 301 重定向跳转到HTTPS 接口</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#api 接口(兼容HTTPS)</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> api.test.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://api_upstream;</span><br><span class="line">        <span class="comment">#语法： proxy_cookie_path oldpath replacepath;</span></span><br><span class="line">        <span class="comment">#oldpath 就是你要替换的路径replacepath 就是要替换的值</span></span><br><span class="line">        <span class="comment">#作用：同一个web 服务器下面多个应用之间能获取到cookie</span></span><br><span class="line">        <span class="attribute">proxy_cookie_path</span> /api/ /;</span><br><span class="line">        <span class="comment">#服务端接收的请求头Cooke 值不变</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Cookie <span class="variable">$http_cookie</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#管理后台端(兼容HTTP)</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> manage.test.com;</span><br><span class="line">    <span class="comment"># 301 重定向跳转到HTTPS 接口</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/<span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> html</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#管理后台端(兼容HTTPS)</span></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> manage.test.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /home/test/web/dist</span><br><span class="line">        index /index.html;</span><br><span class="line">        <span class="comment">#语法：try_files 【$uri】【$uri/】【参数】</span></span><br><span class="line">        <span class="comment">#当用户请求https://manage.test.com/login 时，</span></span><br><span class="line">        <span class="comment">#一.如果配置了上面的默认index,会依次请求</span></span><br><span class="line">        <span class="comment">#1./home/test/web/dist/login 查找有没有login 这个文件，没有的话</span></span><br><span class="line">        <span class="comment">#2./home/test/web/dist/index.html 有就直接返回</span></span><br><span class="line">        <span class="comment">#二.如果没有配置了上面的默认index 或者配置了没有找到对应的资源,会依次请求</span></span><br><span class="line">        <span class="comment">#1./home/test/web/dist/login 查找有没有login 这个文件，没有的话</span></span><br><span class="line">        <span class="comment">#2./home/test/web/dist/login/ 查找有没有login 这个目录，没有的话</span></span><br><span class="line">        <span class="comment">#3.请求https://manage.test.com/index.html nginx 内部做了一个子请求</span></span><br><span class="line">        <span class="comment">#三.总的来说,index 的优先级比try_files 高,请求会先去找index 配置,这里最后一个参数必须存在</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        <span class="comment">#解决跨域问题</span></span><br><span class="line">        <span class="comment">#允许跨域请求地址(*表示全部,但是无法满足带cookie 请求,因为cookie 只能在当前域请求)</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="variable">$http_origin</span>;</span><br><span class="line">        <span class="comment">#允许接收cookie 和发送cookie</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="comment">#允许请求的方法</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET,POST,DELETE,PUT,OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="comment">#允许请求头（Content-Type:请求数据/媒体类型x-requested-with:判断请求是异步还是同步自定义header 比如token）</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="variable">$http_access_control_request_headers</span>;</span><br><span class="line">        <span class="comment">#浏览器缓存请求头信息,1800 秒内,只会有1 次请求，不会出现&quot;OPTIONS&quot;预请求,节约资源</span></span><br><span class="line">        <span class="comment">#add_header Access-Control-Max-Age &#x27;1800&#x27;;</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#服务端HttpServletRequest 可以获得用户的真实ip</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="comment">#服务端HttpServletRequest 可以获得用户的真实ip 和经过的每一层代理服务器的ip</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="comment">#服务端接收的请求头Host 值不变</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx-conf-讲解"><a href="#nginx-conf-讲解" class="headerlink" title="nginx.conf 讲解"></a>nginx.conf <strong>讲解</strong></h2><ol>
<li><strong>一张图说明 nginx.conf 结构</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147845.jpeg"></p>
<ol start="2">
<li><strong>看一下 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</strong></li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">#error_log logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"><span class="comment">#pid logs/nginx.pid;</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    <span class="comment">#log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line">    <span class="comment">#access_log logs/access.log main;</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush on;</span></span><br><span class="line">    <span class="comment">#keepalive_timeout 0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#gzip on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#access_log logs/host.access.log main;</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">            <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment"># proxy_pass http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment"># root html;</span></span><br><span class="line">        <span class="comment"># fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment"># fastcgi_index index.php;</span></span><br><span class="line">        <span class="comment"># fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment"># include fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment"># deny all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment"># listen 8000;</span></span><br><span class="line">    <span class="comment"># listen somename:8080;</span></span><br><span class="line">    <span class="comment"># server_name somename alias another.alias;</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment"># root html;</span></span><br><span class="line">    <span class="comment"># index index.html index.htm;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment"># listen 443 ssl;</span></span><br><span class="line">    <span class="comment"># server_name localhost;</span></span><br><span class="line">    <span class="comment"># ssl_certificate cert.pem;</span></span><br><span class="line">    <span class="comment"># ssl_certificate_key cert.key;</span></span><br><span class="line">    <span class="comment"># ssl_session_cache shared:SSL:1m;</span></span><br><span class="line">    <span class="comment"># ssl_session_timeout 5m;</span></span><br><span class="line">    <span class="comment"># ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment"># ssl_prefer_server_ciphers on;</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment"># root html;</span></span><br><span class="line">    <span class="comment"># index index.html index.htm;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a><strong>全局块</strong></h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h4><ol>
<li><strong>从配置文件开始到 events 块之间的内容</strong></li>
<li><strong>主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx服务器的用户(组)、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等</strong></li>
</ol>
<h4 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a><strong>简单分析</strong></h4><p>1、#这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</p>
<p>2、配置举例:</p>
<p>worker_processes 1;</p>
<h3 id="events-块"><a href="#events-块" class="headerlink" title="events 块"></a><strong>events 块</strong></h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a><strong>说明</strong></h4><ol>
<li><strong>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接</strong></li>
<li><strong>常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 work process 可以同时支持的最大连接数等</strong></li>
</ol>
<h4 id="简单分析-1"><a href="#简单分析-1" class="headerlink" title="简单分析"></a><strong>简单分析</strong></h4><p>1、#上述例子就表示每个 work process 支持的最大连接数为 1024, 这部分的配置对</p>
<p>Nginx 的性能影响较大，在实际中应根据实际情况配置</p>
<p>2、配置举例 events {</p>
<p>worker_connections 1024;</p>
<p><strong>}</strong></p>
<h3 id="http-块"><a href="#http-块" class="headerlink" title="http 块"></a><strong>http 块</strong></h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a><strong>说明</strong></h4><ol>
<li><strong>这是 Nginx 服务器配置中最复杂的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里</strong></li>
<li><strong>http 块也可以包括 http 全局块、server 块</strong></li>
</ol>
<h4 id="http-全局块"><a href="#http-全局块" class="headerlink" title="http 全局块"></a>http <strong>全局块</strong></h4><p>1、http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单连接请求数上限等</p>
<p>2、配置举例： </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> mime.types; <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启文件传输</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcp_nopush on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#keepalive_timeout 0;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="server-块"><a href="#server-块" class="headerlink" title="server 块"></a>server <strong>块</strong></h4><ol>
<li><strong>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</strong></li>
<li><strong>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</strong></li>
<li><strong>每个 server 块也分为全局 server 块，以及可以同时包含多个 location 块。</strong><ol>
<li><strong>全局 server 块</strong><br>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</li>
<li><strong>location 块</strong><br>一个 server 块可以配置多个 location 块</li>
</ol>
</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log logs/host.access.log main;</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><strong>小结: 这块的主要作用是基于 Nginx 服务器接收到的请求字符串（ 例如 server_name&#x2F;uri-string），对虚拟主机名称(也可以是 IP 别名) 之外的字符串（例如 前面的 &#x2F;uri-string）进行匹配，对特定的请求进行处理。比如地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</strong><ol>
<li><strong>实例</strong> 1<strong>：修改端口</strong></li>
<li><strong>实例</strong> 2<strong>：配置多个</strong> server</li>
</ol>
</li>
</ol>
<h1 id="反向代理-快速入门"><a href="#反向代理-快速入门" class="headerlink" title="反向代理-快速入门"></a>反向代理-快速入门</h1><h2 id="需求说明-图解"><a href="#需求说明-图解" class="headerlink" title="需求说明&#x2F;图解"></a><strong>需求说明</strong>&#x2F;<strong>图解</strong></h2><ol>
<li><p>需求说明&#x2F;图解</p>
<ol>
<li><p><strong>在浏览器输入 <a href="http://www.hsp.com(windows)/">www.hsp.com(windows)</a>, 可以访问到 tomcat</strong></p>
</li>
<li><p><strong>使用 Nginx 反向代理功能, 完成需求.</strong></p>
</li>
</ol>
</li>
<li><p>如图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147846.jpeg"></p>
<h2 id="反向代理配置-思路分析-图解"><a href="#反向代理配置-思路分析-图解" class="headerlink" title="反向代理配置-思路分析&#x2F;图解"></a><strong>反向代理配置</strong>-<strong>思路分析</strong>&#x2F;<strong>图解</strong></h2><p>-- 思路分析示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147847.jpeg"></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><h3 id="安-装-JDK-，-在-8-以-上-参-考-韩-顺-平-一-周-学-会-Linux"><a href="#安-装-JDK-，-在-8-以-上-参-考-韩-顺-平-一-周-学-会-Linux" class="headerlink" title="安 装 JDK ， 在 8 以 上 , 参 考 : &lt;&lt; 韩 顺 平 一 周 学 会 Linux&gt;&gt; https://www.bilibili.com/video/BV1Sv411r7vd?p=86"></a>安 装 JDK ， 在 8 以 上 , 参 考 : &lt;&lt; 韩 顺 平 一 周 学 会 Linux&gt;&gt; <a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=86">https://www.bilibili.com/video/BV1Sv411r7vd?p=86</a></h3><ol>
<li><p>安装步骤</p>
<ol>
<li>mkdir &#x2F;opt&#x2F;jdk</li>
<li>通过 xftp6 上传到 &#x2F;opt&#x2F;jdk 下</li>
<li>cd &#x2F;opt&#x2F;jdk</li>
<li>解压 tar -zxvf jdk-8u261-linux-x64.tar.gz</li>
<li>mkdir &#x2F;usr&#x2F;local&#x2F;java</li>
<li>mv &#x2F;opt&#x2F;jdk&#x2F;jdk1.8.0_261 &#x2F;usr&#x2F;local&#x2F;java</li>
<li>配置环境变量的配置文件 vim &#x2F;etc&#x2F;profile</li>
<li>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_261</li>
<li>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</li>
<li>source &#x2F;etc&#x2F;profile [让新的环境变量生效]</li>
</ol>
</li>
<li><p>测试是否安装成功</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147848.jpeg"></p>
<h3 id="安-装-Tomcat-，-参-考-韩-顺-平-一-周-学-会-Linux"><a href="#安-装-Tomcat-，-参-考-韩-顺-平-一-周-学-会-Linux" class="headerlink" title="安 装 Tomcat ， 参 考 : &lt;&lt; 韩 顺 平 一 周 学 会 Linux&gt;&gt; https://www.bilibili.com/video/BV1Sv411r7vd?p=87"></a>安 装 Tomcat ， 参 考 : &lt;&lt; 韩 顺 平 一 周 学 会 Linux&gt;&gt; <a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=87">https://www.bilibili.com/video/BV1Sv411r7vd?p=87</a></h3><p>1、步骤</p>
<ol>
<li>上传安装文件，并解压缩到&#x2F;opt&#x2F;tomcat</li>
<li>进入解压目录&#x2F;bin , 启动 tomcat .&#x2F;startup.sh</li>
<li>开放端口 8080 , 回顾 firewall-cmd</li>
</ol>
<p>2、测试是否安装成功</p>
<p>在windows、Linux 下 访问 <a href="http://linuxip:8080/">http://linuxip:8080</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147849.jpeg"></p>
<h3 id="修改-C-Windows-System32-drivers-etc-hosts-配置虚拟主机名"><a href="#修改-C-Windows-System32-drivers-etc-hosts-配置虚拟主机名" class="headerlink" title="修改 C:\Windows\System32\drivers\etc\hosts 配置虚拟主机名"></a><strong>修改 C:\Windows\System32\drivers\etc\hosts 配置虚拟主机名</strong></h3><p>#127.0.0.1 <a href="http://www.mynews.com/">www.mynews.com</a></p>
<p>127.0.0.1 localhost</p>
<p>#eureka 主机名和 ip 映射</p>
<p>127.0.0.1 eureka9001.com</p>
<p>127.0.0.1 eureka9002.com</p>
<p>192.168.12.134 <a href="http://www.hsp.com/">www.hsp.com</a></p>
<h3 id="修改-安装目录-nginx-conf"><a href="#修改-安装目录-nginx-conf" class="headerlink" title="修改 安装目录\nginx.conf"></a><strong>修改 安装目录\nginx.conf</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147850.jpeg"></p>
<h3 id="小技巧-如何查看-nginx-conf-的配置错误"><a href="#小技巧-如何查看-nginx-conf-的配置错误" class="headerlink" title="小技巧: 如何查看 nginx.conf 的配置错误"></a><strong>小技巧: 如何查看 nginx.conf 的配置错误</strong></h3><ul>
<li><strong>nginx -t #检测默认配置文件</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147851.jpeg"></p>
<ul>
<li><strong>nginx -t -c 配置文件 #指定检测配置文件</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147852.jpeg"></p>
<h2 id="完成测试"><a href="#完成测试" class="headerlink" title="完成测试"></a><strong>完成测试</strong></h2><ol>
<li><strong>重启 或者 重新加载 Nginx</strong></li>
<li><strong>windows 浏览器输入:</strong> <a href="http://www.hsp.com/"><strong>http://www.hsp.com</strong></a></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147846.jpeg"></p>
<h2 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a><strong>注意事项和细节</strong></h2><ol>
<li><strong>Nginx 对外提供访问入口，充当反向代理服务器，Tomcat 的端口就无需对外暴露-测试一把</strong></li>
<li><strong>开启和关闭防火墙的端口</strong></li>
</ol>
<ul>
<li><strong>以 8080 端口为例，关闭 8080 端口</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --remove-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>以 8080 端口为例，开放 8080 端口</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>查看防火墙状态</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>



<h1 id="反向代理配置-Location-实例"><a href="#反向代理配置-Location-实例" class="headerlink" title="反向代理配置-Location 实例"></a>反向代理配置-Location 实例</h1><h2 id="需求说明-图解-1"><a href="#需求说明-图解-1" class="headerlink" title="需求说明&#x2F;图解"></a><strong>需求说明</strong>&#x2F;<strong>图解</strong></h2><p>-- 效果示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147853.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147854.jpeg"></p>
<h2 id="反向代理配置-思路分析-图解-1"><a href="#反向代理配置-思路分析-图解-1" class="headerlink" title="反向代理配置-思路分析&#x2F;图解"></a><strong>反向代理配置</strong>-<strong>思路分析</strong>&#x2F;<strong>图解</strong></h2><p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147855.jpeg"></p>
<h2 id="Location-语法规则"><a href="#Location-语法规则" class="headerlink" title="Location 语法规则"></a>Location <strong>语法规则</strong></h2><h3 id="解读-1-location-语法规则"><a href="#解读-1-location-语法规则" class="headerlink" title="解读 1-location 语法规则"></a><strong>解读 1-location 语法规则</strong></h3><h4 id="Location规则"><a href="#Location规则" class="headerlink" title="Location规则"></a>Location规则</h4><p>语法规则： location [&#x3D;|~|~*|^~] &#x2F;uri&#x2F; {… }</p>
<p>首先匹配 &#x3D;，其次匹配^~,其次是按文件中顺序的<strong>正则匹配</strong>，最后是交给 &#x2F;通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>&#x3D; 开头表示精确匹配</td>
</tr>
<tr>
<td>^~</td>
<td>^~开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为&#x2F;static&#x2F;20%&#x2F;aa，可以被规则^~ &#x2F;static&#x2F; &#x2F;aa匹配到（注意是空格）</td>
</tr>
<tr>
<td>~</td>
<td>~ 开头表示区分大小写的正则匹配</td>
</tr>
<tr>
<td>~*</td>
<td>~* 开头表示不区分大小写的正则匹配</td>
</tr>
<tr>
<td>!~和!~*</td>
<td>!~和!~*分别为区分大小写不匹配及不区分大小写不匹配的正则</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>用户所使用的代理（一般为浏览器）</td>
</tr>
<tr>
<td>$http_x_forwarded_for</td>
<td>可以记录客户端IP，通过代理服务器来记录客户端的ip地址</td>
</tr>
<tr>
<td>$http_referer</td>
<td>可以记录用户是从哪个链接访问过来的</td>
</tr>
</tbody></table>
<p><strong>匹配规则示例</strong>：</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272112243.GIF" alt="IMG_256"></p>
<hr>
<p>location &#x3D; &#x2F; {</p>
<p>#规则A</p>
<p>}</p>
<p>location &#x3D; &#x2F;login {</p>
<p>#规则B</p>
<p>}</p>
<p>location ^~ &#x2F;static&#x2F; {</p>
<p>#规则C</p>
<p>}</p>
<p>location ~ \.(gif|jpg|png|js|css)$ {</p>
<p>#规则D</p>
<p>}</p>
<p>location ~* \.(gif|jpg|png|js|css)$ {</p>
<p>#规则E</p>
<p>}</p>
<p>location !~ \.xhtml$ {</p>
<p>#规则F</p>
<p>}</p>
<p>location !~* \.xhtml$ {</p>
<p>#规则G</p>
<p>}</p>
<p>location &#x2F; {</p>
<p>#规则H</p>
<p>}</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272112243.GIF" alt="IMG_257"></p>
<hr>
<p>那么产生的效果如下：</p>
<p>1. 访问根目录&#x2F;，比如<a href="http://localhost/%E5%B0%86%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99A">http://localhost/将匹配规则A</a></p>
<p>2. 访问 <a href="http://localhost/login">http://localhost/login</a> 将匹配规则B，<a href="http://localhost/register%E5%88%99%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99H">http://localhost/register则匹配规则H</a></p>
<p>3. 访问 <a href="http://localhost/static/a.html">http://localhost/static/a.html</a> 将匹配规则C</p>
<p>4. 访问 <a href="http://localhost/a.gif,http://localhost/b.jpg">http://localhost/a.gif,http://localhost/b.jpg</a> 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用，而<a href="http://localhost/static/c.png%E5%88%99%E4%BC%98%E5%85%88%E5%8C%B9%E9%85%8D%E5%88%B0%E8%A7%84%E5%88%99C">http://localhost/static/c.png则优先匹配到规则C</a></p>
<p>5. 访问 <a href="http://localhost/a.PNG">http://localhost/a.PNG</a> 则匹配规则E，而不会匹配规则D，因为规则E不区分大小写。</p>
<p>6. 访问 <a href="http://localhost/a.xhtml">http://localhost/a.xhtml</a> 不会匹配规则F和规则G，<a href="http://localhost/a.XHTML%E4%B8%8D%E4%BC%9A%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99G%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E3%80%82%E8%A7%84%E5%88%99F%EF%BC%8C%E8%A7%84%E5%88%99G%E5%B1%9E%E4%BA%8E%E6%8E%92%E9%99%A4%E6%B3%95%EF%BC%8C%E7%AC%A6%E5%90%88%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E4%BD%86%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E6%83%B3%E7%9C%8B%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%AD%E5%93%AA%E9%87%8C%E4%BC%9A%E7%94%A8%E5%88%B0%E3%80%82">http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。</a></p>
<p>7. 访问 <a href="http://localhost/category/id/1111">http://localhost/category/id/1111</a> 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（<a href="http://lib.csdn.net/base/php">PHP</a>），tomcat（jsp），nginx作为反向代理服务器存在。</p>
<h4 id="实际常用规则"><a href="#实际常用规则" class="headerlink" title="实际常用规则"></a>实际常用规则</h4><p>#直接匹配网站根目录，通过域名访问网站首页比较频繁，使用这个会加速处理。</p>
<p>#这里是直接转发给后端应用服务器了，也可以是一个静态首页</p>
<p># 第一个必选规则</p>
<p>location &#x3D; &#x2F; {</p>
<p>proxy_pass <a href="http://tomcat:8080/index">http://tomcat:8080/index</a></p>
<p>}</p>
<p># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</p>
<p># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272112243.GIF" alt="IMG_258"></p>
<hr>
<p>location ^~ &#x2F;static&#x2F; {</p>
<p># 请求&#x2F;static&#x2F;a.txt 将被映射到实际目录文件:&#x2F;webroot&#x2F;res&#x2F;static&#x2F;a.txt</p>
<p>root &#x2F;webroot&#x2F;res&#x2F;;</p>
<p>}</p>
<p>location ~* \.(gif|jpg|jpeg|png|css|js|html|ico)${</p>
<p>root &#x2F;webroot&#x2F;res&#x2F;;</p>
<p>}</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272112243.GIF" alt="IMG_259"></p>
<hr>
<p>第三个规则就是通用规则，用来转发动态请求到后端应用服务器</p>
<p>#非静态文件请求就默认是动态请求，自己根据实际把握</p>
<p>#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</p>
<p>location &#x2F; {</p>
<p>proxy_pass <a href="http://tomcat:8080/">http://tomcat:8080/</a></p>
<p>}</p>
<h4 id="Location解析过程"><a href="#Location解析过程" class="headerlink" title="Location解析过程"></a>Location解析过程</h4><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272112244.png" alt="IMG_260"></p>
<p>老韩梳理[大概]：</p>
<p>1、 先判断精准命中，如果命中，立即返回结果并结束解析过程。</p>
<p>2、 判断普通命中，如果有多个命中，“记录”下来“最长”的命中结果（记录但不结束，最长的为准）[一会还要梳理]。</p>
<p>3、 继续判断正则表达式的解析结果，按配置里的正则表达式顺序为准，由上至下开始匹配，一旦匹配成功1个，立即返回结果，并结束解析过程。</p>
<p>4、 普通命中顺序无所谓，是因为按命中的长短来确定。正则命中，顺序有所谓，因为是从前往后命中的。</p>
<h3 id="总结——精准匹配-匹配-正则匹配-普通匹配"><a href="#总结——精准匹配-匹配-正则匹配-普通匹配" class="headerlink" title="总结——精准匹配&gt;^~匹配&gt;正则匹配&gt;普通匹配"></a>总结——精准匹配&gt;^~匹配&gt;正则匹配&gt;普通匹配</h3><h3 id="解读-2-nginx-的-location-解析过程"><a href="#解读-2-nginx-的-location-解析过程" class="headerlink" title="解读 2-nginx 的 location 解析过程"></a><strong>解读 2-nginx 的 location 解析过程</strong></h3><p>- 参考 : <a href="https://blog.huati365.com/89af5ae5a56d1b96">https://blog.huati365.com/89af5ae5a56d1b96</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147856.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147857.jpeg"></p>
<h2 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><ol>
<li><strong>修改 C:\Windows\System32\drivers\etc\hosts 配置虚拟主机名</strong></li>
</ol>
<p>#127.0.0.1 <a href="http://www.mynews.com/">www.mynews.com</a></p>
<p>127.0.0.1 localhost</p>
<p>#eureka 主机名和 ip 映射</p>
<p>127.0.0.1 eureka9001.com</p>
<p>127.0.0.1 eureka9002.com</p>
<p>192.168.56.100 hspliving.com</p>
<p>192.168.12.134 <a href="http://www.hsp.com/">www.hsp.com</a></p>
<p>192.168.12.134 <a href="http://www.hspmall.com/">www.hspmall.com</a></p>
<ol start="2">
<li><strong>修改 安装目录\nginx.conf</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147858.jpeg"></p>
<ol start="3">
<li><strong>在 Linux 的 Tomcat 创建 webapps\product\hi.html</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147859.jpeg"></p>
<p>hi.html</p>
<p>&lt;h1&gt;product service linux tomcat &lt;&#x2F;h1&gt;</p>
<ol start="4">
<li><p><strong>在 windows 的 Tomcat 创建 webapps\member\hi.html</strong></p>
</li>
<li><p><strong>linux 防火墙打开 10000 端口</strong></p>
</li>
<li><p><strong>保证 linux 可以访问Windows Tomcat 【即：可以访问 Windows 的 8080 端口， 可暂时关闭 windows 防火墙，测完恢复】</strong></p>
</li>
</ol>
<h2 id="完成测试-1"><a href="#完成测试-1" class="headerlink" title="完成测试"></a><strong>完成测试</strong></h2><ol>
<li><strong>确保启动 Linux 下的 Tomcat</strong></li>
<li><strong>确保启动 Windows 下的 Tomcat</strong></li>
<li><strong>重启 或者 重新加载 Nginx</strong></li>
<li><strong>windows 浏览器输入[注意带上端口]: <a href="http://www.hspmall.com:10000/product/hi.html">http://www.hspmall.com:10000/product/hi.html</a> <a href="http://www.hspmall.com:10000/member/hi.html">http://www.hspmall.com:10000/member/hi.html</a></strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147853.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147860.jpeg"></p>
<h2 id="几个小实验-多测试"><a href="#几个小实验-多测试" class="headerlink" title="几个小实验-多测试"></a><strong>几个小实验</strong>-<strong>多测试</strong></h2><h1 id="负载均衡-配置实例"><a href="#负载均衡-配置实例" class="headerlink" title="负载均衡-配置实例"></a>负载均衡-配置实例</h1><h2 id="需求说明-图解-2"><a href="#需求说明-图解-2" class="headerlink" title="需求说明&#x2F;图解"></a><strong>需求说明</strong>&#x2F;<strong>图解</strong></h2><p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147861.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147862.jpeg"></p>
<h2 id="负载均衡配置-思路分析-图解"><a href="#负载均衡配置-思路分析-图解" class="headerlink" title="负载均衡配置-思路分析&#x2F;图解"></a><strong>负载均衡配置</strong>-<strong>思路分析</strong>&#x2F;<strong>图解</strong></h2><p>-- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147863.jpeg"></p>
<h2 id="负载均衡配置规则"><a href="#负载均衡配置规则" class="headerlink" title="负载均衡配置规则"></a><strong>负载均衡配置规则</strong></h2><ul>
<li><strong>负载均衡就是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快</strong></li>
<li><strong>linux 下有 Nginx、LVS、Haproxy 等等服务可以提供负载均衡服务， Nginx 提供了几种分配方式(策略)：</strong></li>
</ul>
<p>1、轮询(默认)</p>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</p>
<p>2、weight</p>
<p>weight 代表权,重默认为 1,权重越高被分配的客户端越多</p>
<p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> hspservers&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.12.134:8080</span> weight=<span class="number">1</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.12.134:8081</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3、ip_hash</p>
<p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决</p>
<p>session 的问题。例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> hspservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.12.134:8081</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.12.134:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4、fair(第三方)</p>
<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> hspservers&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.12.134:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.12.134:8081</span>;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><h3 id="修改-C-Windows-System32-drivers-etc-hosts-配置虚拟主机名-1"><a href="#修改-C-Windows-System32-drivers-etc-hosts-配置虚拟主机名-1" class="headerlink" title="修改 C:\Windows\System32\drivers\etc\hosts 配置虚拟主机名"></a><strong>修改 C:\Windows\System32\drivers\etc\hosts 配置虚拟主机名</strong></h3><p>#127.0.0.1 <a href="http://www.mynews.com/">www.mynews.com</a></p>
<p>127.0.0.1 localhost</p>
<p>#eureka 主机名和 ip 映射</p>
<p>127.0.0.1 eureka9001.com</p>
<p>127.0.0.1 eureka9002.com</p>
<p>192.168.12.134 <a href="http://www.hsp.com/">www.hsp.com</a></p>
<p>192.168.12.134 <a href="http://www.hspmall.com/">www.hspmall.com</a></p>
<p>192.168.12.134 <a href="http://www.hspcrm.com/">www.hspcrm.com</a></p>
<h3 id="修改-安装目录-nginx-conf-1"><a href="#修改-安装目录-nginx-conf-1" class="headerlink" title="修改 安装目录\nginx.conf"></a><strong>修改 安装目录\nginx.conf</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147864.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147865.jpeg"></p>
<h3 id="在-Linux-的-Tomcat8080-创建-webapps-search-look-html"><a href="#在-Linux-的-Tomcat8080-创建-webapps-search-look-html" class="headerlink" title="在 Linux 的 Tomcat8080 创建 webapps\search\look.html"></a><strong>在 Linux 的 Tomcat8080 创建 webapps\search\look.html</strong></h3><p> look.html</p>
<p>&lt;h1&gt;tomcat 8080 search &lt;&#x2F;h1&gt;</p>
<h3 id="在-Linux-下重新安装一份-Tomcat-并将端口修改成-8081"><a href="#在-Linux-下重新安装一份-Tomcat-并将端口修改成-8081" class="headerlink" title="在 Linux 下重新安装一份 Tomcat, 并将端口修改成 8081"></a><strong>在 Linux 下重新安装一份 Tomcat, 并将端口修改成 8081</strong></h3><ol>
<li><strong>修改 tomcat 的 conf\server.xml , 注意要修改如下位置,否则该 Tomcat 是不能正常工作.</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147866.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147867.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147868.jpeg"></p>
<ol start="2">
<li><strong>细节说明：不同版本的 tomcat 修改的端口还不一样, 小伙伴们灵活处理即可，一定要认真，否则后面测试失败，你排除错误会花费很长时间，让你搞到怀疑人生</strong></li>
</ol>
<h3 id="在-Linux-的-Tomcat8081-创建-webapps-search-look-html"><a href="#在-Linux-的-Tomcat8081-创建-webapps-search-look-html" class="headerlink" title="在 Linux 的 Tomcat8081 创建 webapps\search\look.html"></a><strong>在 Linux 的 Tomcat8081 创建 webapps\search\look.html</strong></h3><p> look.html</p>
<p>&lt;h1&gt;tomcat 8081 search &lt;&#x2F;h1&gt;</p>
<h3 id="linux-防火墙打开-80-端口，-保证外网可以访问"><a href="#linux-防火墙打开-80-端口，-保证外网可以访问" class="headerlink" title="linux 防火墙打开 80 端口， 保证外网可以访问"></a><strong>linux 防火墙打开 80 端口， 保证外网可以访问</strong></h3><h2 id="完成测试-2"><a href="#完成测试-2" class="headerlink" title="完成测试"></a><strong>完成测试</strong></h2><h3 id="启动-Linux-下两个-Tomcat"><a href="#启动-Linux-下两个-Tomcat" class="headerlink" title="启动 Linux 下两个 Tomcat"></a><strong>启动 Linux 下两个 Tomcat</strong></h3><p>1、查看启动的端口, 确保有 8080 和 8081 端口在监听(老韩提示: 如果 tomcat 没有监听对应端口, 说明启动失败了, 可以尝试先执行 shutdown.sh 再执行 startup.sh 解决)</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147869.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147870.jpeg"></p>
<p>2、在 linux 下可以正常访问到两个页面</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147871.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147872.jpeg"></p>
<h3 id="启动-或者-重新加载-Nginx"><a href="#启动-或者-重新加载-Nginx" class="headerlink" title="启动 或者 重新加载 Nginx"></a><strong>启动 或者 重新加载 Nginx</strong></h3><h3 id="windows-浏-览-器-输-入-保-证-浏-览-器-不-是-无-痕-上-网-http-www-hspcrm-com-search-look-html"><a href="#windows-浏-览-器-输-入-保-证-浏-览-器-不-是-无-痕-上-网-http-www-hspcrm-com-search-look-html" class="headerlink" title="windows 浏 览 器 输 入 ( 保 证 浏 览 器 不 是 无 痕 上 网 ): http://www.hspcrm.com/search/look.html"></a><strong>windows 浏 览 器 输 入 ( 保 证 浏 览 器 不 是 无 痕 上 网 ):</strong> <a href="http://www.hspcrm.com/search/look.html"><strong>http://www.hspcrm.com/search/look.html</strong></a></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147861.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147862.jpeg"></p>
<h2 id="注意事项和避免的坑"><a href="#注意事项和避免的坑" class="headerlink" title="注意事项和避免的坑"></a><strong>注意事项和避免的坑</strong></h2><ol>
<li><strong>nginx.conf 的 upstream 不能带下划线, 否则会失败, 但是语法检测不到</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147873.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147874.jpeg"></p>
<ol start="2">
<li><p><strong>如果你的浏览器是无痕上网, 负载均衡可能失效, 因为 Nginx 无法采集到相关信息, 老师 就遇到这个情况. 改用其它浏览器即可(比如 chrome)</strong></p>
</li>
<li><p><strong>老韩提示: 如果某 tomcat 没有监听对应端口, 说明启动失败了, 可以尝试先执行</strong></p>
<p>shutdown.sh 再执行 startup.sh 解决</p>
</li>
</ol>
<h2 id="几个小实现-多测试"><a href="#几个小实现-多测试" class="headerlink" title="几个小实现-多测试"></a><strong>几个小实现</strong>-<strong>多测试</strong></h2><h3 id="文档-Nginx-的-upstream-配置技巧"><a href="#文档-Nginx-的-upstream-配置技巧" class="headerlink" title="文档: Nginx 的 upstream 配置技巧"></a><strong>文档: Nginx 的 upstream 配置技巧</strong></h3><p>1、基本介绍</p>
<p>Nginx 是一个反向代理软件，大部分的网站都采用Nginx 作为网站&#x2F;平台的<br>服务器软件。Nginx 除了可以直接作为web 服务器使用外，更多的情况是<br>通过反向代理将请求转发给上游服务器<br>配置上游服务器可以使用upstream 进行设置，通过upstream 可以实现服<br>务的负载均衡规则，可以提高服务器的高可用性。</p>
<p>2、地址: <a href="https://zhuanlan.zhihu.com/p/409693332">https://zhuanlan.zhihu.com/p/409693332</a></p>
<h3 id="如果停掉-1-个-Tomcat-会怎样"><a href="#如果停掉-1-个-Tomcat-会怎样" class="headerlink" title="如果停掉 1 个 Tomcat, 会怎样?"></a><strong>如果停掉 1 个 Tomcat, 会怎样?</strong></h3><h3 id="如果停掉-1-个-Tomcat-然后又恢复，会怎样"><a href="#如果停掉-1-个-Tomcat-然后又恢复，会怎样" class="headerlink" title="如果停掉 1 个 Tomcat, 然后又恢复，会怎样?"></a><strong>如果停掉 1 个 Tomcat, 然后又恢复，会怎样?</strong></h3><h3 id="如何给不同的服务，分配权重-weight"><a href="#如何给不同的服务，分配权重-weight" class="headerlink" title="如何给不同的服务，分配权重 weight"></a><strong>如何给不同的服务，分配权重 weight</strong></h3><h1 id="动静分离-应用实例"><a href="#动静分离-应用实例" class="headerlink" title="动静分离-应用实例"></a>动静分离-应用实例</h1><h2 id="什么是动静分离"><a href="#什么是动静分离" class="headerlink" title="什么是动静分离"></a><strong>什么是动静分离</strong></h2><ol>
<li><strong>Nginx 动静分离简单来说就是把动态跟静态请求分开，可以理解成使用 Nginx 处理静态页面&#x2F;资源，Tomcat 处理动态页面&#x2F;资源。</strong></li>
<li><strong>动静分离可以减轻 Tomcat 压力，静态请求由 Nginx 处理，提供系统整体性能.</strong></li>
<li><strong>回顾前面-示意图</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147875.jpeg"></p>
<h2 id="需求说明-图解-3"><a href="#需求说明-图解-3" class="headerlink" title="需求说明&#x2F;图解"></a><strong>需求说明</strong>&#x2F;<strong>图解</strong></h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147876.jpeg"></p>
<h2 id="动静配置-思路分析-图解"><a href="#动静配置-思路分析-图解" class="headerlink" title="动静配置-思路分析&#x2F;图解"></a><strong>动静配置</strong>-<strong>思路分析</strong>&#x2F;<strong>图解</strong></h2><p>– 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147877.jpeg"></p>
<h2 id="先使用传统方式实现"><a href="#先使用传统方式实现" class="headerlink" title="先使用传统方式实现"></a><strong>先使用传统方式实现</strong></h2><ol>
<li><strong>创建tomcat\webapps\search\cal.jsp [老韩说明: 为了测试方便, 在tomcat2 也对应创建一份]</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%-- Created by IntelliJ IDEA. User: 韩顺平 Version: 1.0 To change this template use File | Settings | File Templates. --%&gt;</span><br><span class="line">    &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello, jsp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cal.jpg&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP, 计算器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            &lt;% int i=20; int j=70; int res=i + j; out.println(i + &quot; + &quot; + j + &quot; = &quot; + res); %&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<ol start="2">
<li><p><strong>拷贝 cal.jpg 到 tomcat\webapps\search\image 目录, [ 老韩说明: 为了测试方便, 在</strong></p>
<p>tomcat2 也对应创建一份]</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147878.jpeg"></p>
<ol start="3">
<li><strong>浏览器访问</strong> <a href="http://www.hspcrm.com/search/cal.jsp"><strong>http://www.hspcrm.com/search/cal.jsp</strong></a> <strong>就可以看到正确页面</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147879.jpeg"></p>
<h2 id="动静分离优化步骤"><a href="#动静分离优化步骤" class="headerlink" title="动静分离优化步骤"></a><strong>动静分离优化步骤</strong></h2><ol>
<li><strong>修改 安装目录\nginx.conf</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147880.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147881.jpeg"></p>
<ol start="2">
<li><strong>创 建 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;search&#x2F;image 目 录 ， 因 为 图 片 路 径 其 实 是</strong></li>
</ol>
<p>ip&#x2F;search&#x2F;image</p>
<ol start="3">
<li><strong>将 Linux 的 两 个 Tomcat\webapps\search\image 目 录 删 除 ， 在</strong></li>
</ol>
<p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;search&#x2F;image 目录下放入图片</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147882.jpeg"></p>
<ol start="4">
<li><strong>linux 防火墙打开 80 端口， 保证外网可以访问</strong></li>
</ol>
<h2 id="完成测试-3"><a href="#完成测试-3" class="headerlink" title="完成测试"></a><strong>完成测试</strong></h2><ol>
<li><strong>启动 或者 重新加载 Nginx</strong></li>
<li><strong>windows 浏览器输入</strong> <a href="http://www.hspcrm.com/search/cal.jsp"><strong>http://www.hspcrm.com/search/cal.jsp</strong></a></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147879.jpeg"></p>
<p>老师解读</p>
<ol>
<li><strong>这时图片就是从 Nginx 直接返回的</strong></li>
<li><strong>而请求cal.jsp 才转发到对应 tomcat 完成</strong></li>
</ol>
<h3 id="如果有css-js-文件-需要动静分离，按照规则配置即可"><a href="#如果有css-js-文件-需要动静分离，按照规则配置即可" class="headerlink" title="如果有css js 文件 需要动静分离，按照规则配置即可"></a><strong>如果有css js 文件 需要动静分离，按照规则配置即可</strong></h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147883.jpeg"></p>
<h1 id="Nginx-工作机制-参数设置"><a href="#Nginx-工作机制-参数设置" class="headerlink" title="Nginx 工作机制&amp;参数设置"></a>Nginx 工作机制&amp;参数设置</h1><h2 id="master-worker-机制"><a href="#master-worker-机制" class="headerlink" title="master-worker 机制"></a>master-worker <strong>机制</strong></h2><h3 id="master-worker-工作原理图-先搂一眼"><a href="#master-worker-工作原理图-先搂一眼" class="headerlink" title="master-worker 工作原理图-先搂一眼"></a><strong>master-worker 工作原理图-先搂一眼</strong></h3><p>– 示意图</p>
<p>master-worker 机制</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147884.jpeg"></p>
<p>老韩图解</p>
<ol>
<li><strong>一个 master 管理多个 worker</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147885.jpeg"></p>
<h3 id="一说master-worker-机制"><a href="#一说master-worker-机制" class="headerlink" title="一说master-worker 机制"></a><strong>一说master-worker 机制</strong></h3><ul>
<li><strong>争抢机制示意图</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147886.jpeg"></p>
<p>老韩图解</p>
<ol>
<li><p><strong>一个master Process 管理多个worker process, 也就是说Nginx 采用的是多进程结构, 而</strong>不是多线程结构.</p>
</li>
<li><p><strong>当client 发出请求(任务)时，master Process 会通知管理的 worker process</strong></p>
</li>
<li><p><strong>worker process 开始争抢任务, 争抢到的worker process 会开启连接,完成任务</strong></p>
</li>
<li><p><strong>每个 worker 都是一个独立的进程，每个进程里只有一个主线程</strong></p>
</li>
<li><p><strong>Nginx 采用了 IO 多路复用机制(需要在 Linux 环境), 使用 IO 多路复用机制, 是 Nginx 在使用为数不多的 worker process 就可以实现高并发的关键</strong></p>
</li>
</ol>
<h3 id="二说master-worker-机制"><a href="#二说master-worker-机制" class="headerlink" title="二说master-worker 机制"></a><strong>二说master-worker 机制</strong></h3><ul>
<li><strong>二说 Master-Worker 模式</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147887.jpeg"></p>
<p>老韩对上图说明</p>
<ul>
<li><p><strong>Master-Worker 模式</strong></p>
<p>1、Nginx 在启动后，会有一个 master 进程和多个相互独立的 worker 进程。</p>
<p>2、Master 进程 接收来自外界的信号，向各 worker 进程发送信号，每个进程都有可能来</p>
</li>
</ul>
<p>处理这个连接。</p>
<p>​	3、Master 进程能监控 Worker 进程的运行状态，当 worker 进程退出后(异常情况下)，会自动启动新的 worker 进程。</p>
<ul>
<li><strong>accept_mutex 解决 “惊群现象”&#x2F;理论</strong></li>
</ul>
<p>1、所有子进程都继承了父进程的 sockfd，当连接进来时，所有子进程都将收到通知并“争着”与它建立连接，这就叫“惊群现象”。</p>
<p>2、大量的进程被激活又挂起，只有一个进程可以 accept() 到这个连接，会消耗系统资源。</p>
<p>3、Nginx 提供了一个 accept_mutex ，这是一个加在 accept 上的一把共享锁。即每个 worker 进程在执行 accept 之前都需要先获取锁，获取不到就放弃执行 accept()。有了这把锁之后，同一时刻，就只会有一个进程去 accpet()，就不会有惊群问题了。</p>
<p>4、当一个 worker 进程在 accept() 这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，完成一个完整的请求。</p>
<p>5、一个请求，完全由 worker 进程来处理，而且只能在一个 worker 进程中处理。</p>
<ul>
<li><strong>用多进程结构而不用多线程结构的好处&#x2F;理论</strong></li>
</ul>
<p>1、节省锁带来的开销, 每个 worker 进程都是独立的进程，不共享资源，不需要加锁。在编程以及问题查上时，也会方便很多。</p>
<p>2、独立进程，减少风险。采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快重新启动新的 worker 进程</p>
<ul>
<li><strong>实现高并发的秘密-IO 多路复用</strong></li>
</ul>
<p>1、对于 Nginx 来讲，一个进程只有一个主线程，那么它是怎么实现高并发的呢？</p>
<p>2、采用了IO 多路复用的原理，通过异步非阻塞的事件处理机制，epoll 模型，实现了轻量级和高并发</p>
<p>3、nginx 是如何具体实现的呢，举例来说：每进来一个 request，会有一个 worker 进程去处理。但不是全程的处理，处理到什么程度呢？处理到可能发生阻塞的地方，比如向上游(后端)服务器转发 request，并等待请求返回。那么，这个处理的 worker 不会这么傻等着，他会在发送完请求后，注册一个事件：”如果 upstream 返回了，告诉我一声，我再接着干”。于是他就休息去了。此时，如果再有 request 进来，他就可以很快再按这种方式处理。而一旦上游服务器返回了，就会触发这个事件，worker 才会来接手，这个 request 才会接着往下走。由于 web server 的工作性质决定了每个request 的大部份生命都是在网络传输中，实际上花费在server 机器上的时间片不多，这就是几个进程就能解决高并发的秘密所在</p>
<ul>
<li><strong>老韩小结：Nginx 的 master-worker 工作机制的优势</strong></li>
</ul>
<p>1、支持 nginx -s reload 热部署, 这个特征在前面我们使用过</p>
<p>2、对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多</p>
<p>3、每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式&#x2F;IO 多路复用 来处理请求， 即使是高并发请求也能应对.</p>
<p>4、采用独立的进程，互相之间不会影响，一个 worker 进程退出后，其它 worker 进程还在工作，服务不会中断，master 进程则很快启动新的worker 进程</p>
<p>5. 一个 worker 分配一个 CPU ， 那么 worker 的线程可以把一个 cpu 的性能发挥到极致</p>
<h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a><strong>参数设置</strong></h2><h3 id="worker-processes"><a href="#worker-processes" class="headerlink" title="worker_processes"></a><strong>worker_processes</strong></h3><ul>
<li><strong>需要设置多少个 worker</strong></li>
</ul>
<p>每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 worker 数和服务器的 cpu数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p>
<ul>
<li><strong>设置 worker 数量, Nginx 默认没有开启利用多核cpu，可以通过增加 worker_cpu_affinity</strong>配置参数来充分利用多核 cpu 的性能</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2 核cpu，开启2 个进程</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">01</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">#2 核cpu，开启4 个进程，</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">01</span> <span class="number">10</span> <span class="number">01</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">#4 核cpu，开启2 个进程，0101 表示开启第一个和第三个内核，1010 表示开启第二个和</span></span><br><span class="line">第四个内核；</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">0101</span> <span class="number">1010</span>;</span><br><span class="line"><span class="comment">#4 个cpu，开启4 个进程</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">0001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1000</span>;</span><br><span class="line"><span class="comment">#8 核cpu，开启8 个进程</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">8</span>;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span> <span class="number">00100000</span> <span class="number">01000000</span> <span class="number">10000000</span>;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>worker_cpu_affinity 理解</strong></li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147888.jpeg"></p>
<ul>
<li><strong>配置实例</strong></li>
</ul>
<ol>
<li><strong>vi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147889.jpeg"></p>
<ol start="2">
<li><strong>重新加载 nginx</strong></li>
</ol>
<p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p>
<ol start="3">
<li><strong>查看 nginx 的 worker process 情况</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147890.jpeg"></p>
<h3 id="worker-connection"><a href="#worker-connection" class="headerlink" title="worker_connection"></a><strong>worker_connection</strong></h3><ol>
<li><strong>worker_connection 表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 worker_connections * worker_processes</strong><ol>
<li><strong>默认：worker_connections: 1024</strong></li>
<li><strong>调大：worker_connections: 60000，（调大到 6 万连接）</strong></li>
<li><strong>同时要根据系统的最大打开文件数来调整.</strong></li>
</ol>
</li>
</ol>
<p>系统的最大打开文件数&gt;&#x3D; worker_connections*worker_process</p>
<p>根据系统的最大打开文件数来调整，worker_connections 进程连接数量要小<br>于等于系统的最大打开文件数，worker_connections 进程连接数量真实数量&#x3D;worker_connections * worker_process<br>查看系统的最大打开文件数<br>ulimit -a|grep “open files”<br>open files (-n) 65535</p>
<ol start="2">
<li><strong>根据最大连接数计算最大并发数：如果是支持 http1.1 的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是： worker_connections * worker_processes &#x2F;2，而如果 是  HTTP 作 为 反 向 代 理 来 说 ， 最 大 并 发 数 量 应 该 是 worker_connections * worker_processes&#x2F;4。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接， 看一个示意图</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147891.jpeg"></p>
<h3 id="配置-Linux-最大打开文件数"><a href="#配置-Linux-最大打开文件数" class="headerlink" title="配置 Linux 最大打开文件数"></a><strong>配置 Linux 最大打开文件数</strong></h3><ol>
<li><p><strong>使用 ulimit -a 可以查看当前系统的所有限制值，使用 ulimit -n 可以查看当前的最大打开文件数。</strong></p>
</li>
<li><p><strong>新装的linux 默认只有 1024，当作负载较大的服务器时，很容易遇到 error: too many open files。因此，需要将其改大。</strong></p>
</li>
<li><p><strong>使用 ulimit -n 65535 可即时修改，但重启后就无效了。(注 ulimit -SHn 65535 等效 ulimit</strong></p>
<p>-n 65535，-S 指soft，-H 指 hard)</p>
</li>
<li><p><strong>有如下三种修改方式：</strong></p>
<ol>
<li><strong>在&#x2F;etc&#x2F;rc.local 中增加一行 ulimit -SHn 65535</strong></li>
<li><strong>在&#x2F;etc&#x2F;profile 中增加一行 ulimit -SHn 65535</strong></li>
<li><strong>在&#x2F;etc&#x2F;security&#x2F;limits.conf 最后增加如下两行记录</strong><ul>
<li>soft nofile 65535</li>
<li>hard nofile 65535</li>
</ul>
</li>
</ol>
</li>
</ol>
<p>在 CentOS 中使用第 1 种方式无效果，使用第 3 种方式有效果，而在 Debian 中使用第 2 种有效果</p>
<ol start="5">
<li><strong>参考: <a href="https://blog.csdn.net/weixin_43055250/article/details/124980838">https://blog.csdn.net/weixin_43055250/article/details/124980838</a></strong></li>
</ol>
<h1 id="搭建高可用集群"><a href="#搭建高可用集群" class="headerlink" title="搭建高可用集群"></a>搭建高可用集群</h1><h2 id="Keepalived-Nginx-高可用集群-主从模式"><a href="#Keepalived-Nginx-高可用集群-主从模式" class="headerlink" title="Keepalived+Nginx 高可用集群(主从模式)"></a>Keepalived+Nginx <strong>高可用集群</strong>(<strong>主从模式</strong>)</h2><h3 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a><strong>集群架构图</strong></h3><p>- 老韩解读</p>
<p>1、准备两台 nginx 服务器, 一台做主服务器, 一台做备份服务器</p>
<p>2、两台 Nginx 服务器的 IP 地址, 可以自己配置, 不一定和老师一样(具体配置看 Linux 网络配置章节)</p>
<p>3、安装 keepalived , 保证主从之间的通讯</p>
<p>4、对外提供统一的访问 IP(虚拟 IP-VIP)</p>
<p>- 示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147892.jpeg"></p>
<h3 id="具体搭建步骤"><a href="#具体搭建步骤" class="headerlink" title="具体搭建步骤"></a><strong>具体搭建步骤</strong></h3><h4 id="搭建高可用集群基础环境"><a href="#搭建高可用集群基础环境" class="headerlink" title="搭建高可用集群基础环境"></a><strong>搭建高可用集群基础环境</strong></h4><p>1、准备两台 Linux 服务器 192.168.198.130 和 192.168.198.131</p>
<ol>
<li><strong>可以克隆来完成</strong></li>
<li><strong>也可以直接拷贝一份</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147893.jpeg"></p>
<p>2、在两台 Linux 服务器, 安装并配置好 Nginx</p>
<ol>
<li><strong>安装配置Nginx 步骤前面讲过, 如果你克隆的Linux, 本身就有安装好了Nginx, 直接使用即可.</strong></li>
<li><strong>验证安装是否成功, 在 windows 可以通过 IP 访问到 Nginx, 具体的操作步骤和注意事项, 前面也都是说过了</strong></li>
<li><strong>因为我们是拷贝了一份 Linux , 而新的Linux 的 Ip 已经变化了, 所以需要克隆的 Linux</strong>的 nginx.conf 文件中的 IP 地址, 做相应的修改</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147894.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147895.jpeg"></p>
<ol start="3">
<li>如图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147896.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147897.jpeg"></p>
<p>3、在两台 Linux 服务器, 安装 keepalived</p>
<ol>
<li><strong>下载 keepalived-2.0.20.tar.gz 源码安装包, <a href="https://keepalived.org/download.html">https://keepalived.org/download.html</a></strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147898.jpeg"></p>
<ol start="2">
<li><strong>上传到两台 Linux &#x2F;root 目录下</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147899.jpeg"></p>
<ol start="3">
<li><strong>mkdir &#x2F;root&#x2F;keepalived</strong></li>
<li><strong>解压文件到指定目录: tar -zxvf keepalived-2.0.20.tar.gz -C .&#x2F;keepalived</strong></li>
<li><strong>cd &#x2F;root&#x2F;keepalived&#x2F;keepalived-2.0.20</strong></li>
<li><strong>.&#x2F;configure –sysconf&#x3D;&#x2F;etc –prefix&#x3D;&#x2F;usr&#x2F;local</strong></li>
</ol>
<p>说明: 将配置文件放在 &#x2F;etc 目录下, 安装路径在 &#x2F;usr&#x2F;local</p>
<ol start="7">
<li><strong>make &amp;&amp; make install</strong></li>
</ol>
<p>说明: 编译并安装</p>
<ol start="8">
<li><p><strong>如果成功, 就会安装好 keepalived 【可以检查一下】</strong></p>
<p>说明: keepalived 的配置目录在 &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf keepalived 的启动指令在 &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;keepalived</p>
</li>
<li><p><strong>提示: 两台 Linux 都要安装 keepalived</strong></p>
</li>
</ol>
<h4 id="完成高可用集群配置"><a href="#完成高可用集群配置" class="headerlink" title="完成高可用集群配置"></a><strong>完成高可用集群配置</strong></h4><ol>
<li><strong>将 其 中 一 台 Linux( 比 如 192.168.198.130) 指 定 为 Master ： vi</strong></li>
</ol>
<p>&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147900.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147901.jpeg"></p>
<ol start="2">
<li><p><strong>将其中一台 Linux( 比如 192.168.198.131) 指定为 Backup( 备份服务器) ： vi</strong></p>
<p>&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147902.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147903.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147904.jpeg"></p>
<ol start="3">
<li>启动 两台 Linux 的keepalived 指令: &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;keepalived</li>
<li>观察两台 linux 的 ens33 是否已经绑定 192.168.198.18</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147905.jpeg"></p>
<h4 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a><strong>注意事项和细节</strong></h4><p>1、keepalived 启动后无法 ping 通 VIP，提示 ping: sendmsg: Operation not permitted <a href="https://blog.csdn.net/xjuniao/article/details/101793935">https://blog.csdn.net/xjuniao/article/details/101793935</a></p>
<p>2、nginx+keepalived 配置说明和需要避开的坑</p>
<p><a href="https://blog.csdn.net/qq_42921396/article/details/123074780">https://blog.csdn.net/qq_42921396/article/details/123074780</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h3><p>1、首先保证 windows 可以连通 192.168.198.18 这个虚拟 IP</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147906.jpeg"></p>
<p>2、访问 nginx 如图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147908.jpeg"></p>
<p>说明：大家可以看到, 因为 192.168.198.130 是 Master 他的优先级高, 所以访问的就是</p>
<p>192.168.198.130 的 Nginx, 同时仍然是支持负载均衡的.</p>
<p>3、停止 192.168.198.130 的 keepalived 服务, 否则直接关闭 192.168.198.130 主机</p>
<p>, 再次访问 <a href="http://192.168.198.18/search/cal.jsp">http://192.168.198.18/search/cal.jsp</a> , 这时虚拟 IP 绑定发生漂移, 绑定到</p>
<p>192.168.198.131 Backup 服务, 访问效果如图</p>
<p>这里老师直接关闭 192.168.198.130 Master 的 keepalived 来测试</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147909.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147910.jpeg"></p>
<h3 id="自动检测Nginx-异常-终止-keepalived"><a href="#自动检测Nginx-异常-终止-keepalived" class="headerlink" title="自动检测Nginx 异常, 终止 keepalived"></a><strong>自动检测Nginx 异常, 终止 keepalived</strong></h3><h4 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h4><p>1、编写 shell 脚本: vi &#x2F;etc&#x2F;keepalived&#x2F;ch_nginx.sh</p>
<p>简单说明: 下面的脚本就是去统计 ps -C nginx –no-header 的行数, 如果为 0 , 说明 nginx已经异常终止了, 就执行 killall keepalived</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">num=`ps -C nginx --no-header | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">killall keepalived</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>



<p>2、修改 ch_nginx.sh 权限</p>
<p>chmod 755 ch_nginx.sh</p>
<p>3、修改 192.168.198.130 主 Master 配置文件, 指令: vi &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147911.jpeg"></p>
<p>4、重新启动 192.168.198.130 Master 的 keepalived , 这时因为 Master 的优先级高，会争夺到 VIP 优先绑定.</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147912.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147913.jpeg"></p>
<p>5、手动关闭 192.168.198.130 Master 的 Nginx</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147914.jpeg"></p>
<p>注意观察 keepalived 也终止了</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147915.jpeg"></p>
<p>6、再次访问 nginx , 发现 192.168.198.18 这个虚拟IP 又和 192.168.198.131 备份服务器绑定了.</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502272147916.jpeg"></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><p>1、keepalived vrrp_script 脚本不执行解决办法</p>
<p>-打开日志观察</p>
<p>tail -f &#x2F;var&#x2F;log&#x2F;messages</p>
<p>-重启 keepalived</p>
<p>systemctl restart keepalived.service</p>
<p>–老师说明一下: 备课时，曾经出现过文件找不到 可以修改执行脚本文件名，不要有_就 OK</p>
<ol start="2">
<li><strong>如果配置有定时检查 Nginx 异常的脚本, 需要先启动 nginx ,在启动 keepalived ,否则 keepalived 一起动就被 killall 了</strong></li>
<li><strong>老师提醒: 小伙伴们配置时，会遇到各种各样问题，有针对性解决即可</strong></li>
<li><strong>配置文件keepalived.conf 详解</strong></li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里只注释要修改的地方</span></span><br><span class="line"><span class="section">global_defs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="section">notification_email</span> &#123;</span><br><span class="line"></span><br><span class="line">        test@foxmail.<span class="attribute">com</span> <span class="comment">#接收通知的邮件地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from Alexandre.Cassen<span class="variable">@firewall</span>.loc <span class="comment">#发送邮件的邮箱</span></span><br><span class="line">    smtp_server <span class="number">192.168.200.1</span> <span class="comment">#smtp server 地址</span></span><br><span class="line">    smtp_connect_timeout <span class="number">30</span></span><br><span class="line">    router_id Node132 <span class="comment">#Node132 为主机标识</span></span><br><span class="line">    vrrp_skip_check_adv_addr</span><br><span class="line">    <span class="comment">#vrrp_strict #这里需要注释，避免虚拟ip 无法ping 通</span></span><br><span class="line">    vrrp_garp_interval <span class="number">0</span></span><br><span class="line">    vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">state</span> MASTER <span class="comment">#主节点MASTER 备用节点为BACKUP</span></span><br><span class="line">    interface ens33 <span class="comment">#网卡名称</span></span><br><span class="line">    virtual_router_id <span class="number">51</span> <span class="comment">#VRRP 组名，两个节点的设置必须一样，指明属于同一VRRP 组</span></span><br><span class="line">    priority <span class="number">100</span> <span class="comment">#主节点的优先级（1-254 之间），备用节点必须比主节点优先级低</span></span><br><span class="line">    advert_int <span class="number">1</span> <span class="comment">#组播信息发送间隔，两个节点设置必须一样</span></span><br><span class="line">    authentication &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#设置验证信息，两个节点必须一致</span></span><br><span class="line">        <span class="attribute">auth_type</span> PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#指定虚拟IP, 两个节点设置必须一样</span></span><br><span class="line">        192.168.200.16</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="nginx-conf-详解"><a href="#nginx-conf-详解" class="headerlink" title="nginx.conf 详解"></a>nginx.conf 详解</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">#Nginx用户及组：用户 组。window下不指定</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#工作进程：数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#错误日志：存放路径。</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#pid(进程标识符)：存放路径</span></span><br><span class="line"><span class="attribute">pid</span>       /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#一个进程能打开的文件描述符最大值，理论上该值因该是最多能打开的文件数除以进程数。</span></span><br><span class="line"><span class="comment">#但是由于nginx负载并不是完全均衡的，所以这个值最好等于最多能打开的文件数。</span></span><br><span class="line"><span class="comment">#LINUX系统可以执行 sysctl -a | grep fs.file 可以看到linux文件描述符。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="comment">#使用epoll的I/O 模型。linux建议epoll，FreeBSD建议采用kqueue，window下不指定。</span></span><br><span class="line">	<span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，</span></span><br><span class="line">	<span class="comment">#一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">	<span class="comment">#client_header_buffer_size 4k;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="comment">#设定mime类型,类型由mime.type文件定义</span></span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">	</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#日志格式设置</span></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	<span class="comment">#用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径</span></span><br><span class="line">	<span class="comment">#记录了哪些用户，哪些页面以及用户浏览器、ip和其他的访问信息</span></span><br><span class="line">	<span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">	<span class="comment">#access_log  logs/host.access.404.log  log404;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#客户端请求头缓冲大小。</span></span><br><span class="line">    <span class="comment">#nginx默认会用client_header_buffer_size这个buffer来读取header值，</span></span><br><span class="line">    <span class="comment">#如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    <span class="comment">#如果设置过小HTTP头/Cookie过大 会报400 错误 nginx 400 bad request</span></span><br><span class="line">    <span class="comment">#如果超过buffer，就会报HTTP 414错误(URI Too Long)</span></span><br><span class="line">    <span class="comment">#nginx接受最长的HTTP头部大小必须比其中一个buffer大</span></span><br><span class="line">    <span class="comment">#否则就会报400的HTTP错误(Bad Request)</span></span><br><span class="line">    <span class="comment">#client_header_buffer_size 32k;</span></span><br><span class="line">    <span class="comment">#large_client_header_buffers 4 32k;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#隐藏ngnix版本号</span></span><br><span class="line">    <span class="comment">#server_tokens off;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#忽略不合法的请求头</span></span><br><span class="line">    <span class="comment">#ignore_invalid_headers   on;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#让 nginx 在处理自己内部重定向时不默认使用  server_name设置中的第一个域名</span></span><br><span class="line">    <span class="comment">#server_name_in_redirect off;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#客户端请求体的大小</span></span><br><span class="line">    <span class="comment">#client_body_buffer_size    8m;</span></span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#开启文件传输，一般应用都应设置为on；若是有下载的应用，则可以设置成off来平衡网络I/O和磁盘的I/O来降低系统负载</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#tcp_nodelay off 会增加通信的延时，但是会提高带宽利用率。在高延时、数据量大的通信场景中应该会有不错的效果</span></span><br><span class="line">    <span class="comment">#tcp_nodelay on，会增加小包的数量，但是可以提高响应速度。在及时性高的通信场景中应该会有不错的效果</span></span><br><span class="line">	<span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#gzip模块设置，使用 gzip 压缩可以降低网站带宽消耗，同时提升访问速度。</span></span><br><span class="line">    <span class="comment">#gzip  on;                     #开启gzip</span></span><br><span class="line">    <span class="comment">#gzip_min_length  1k;          #最小压缩大小</span></span><br><span class="line">    <span class="comment">#gzip_buffers     4 16k;       #压缩缓冲区</span></span><br><span class="line">    <span class="comment">#gzip_http_version 1.0;        #压缩版本</span></span><br><span class="line">    <span class="comment">#gzip_comp_level 2;            #压缩等级</span></span><br><span class="line">    <span class="comment">#gzip_types   text/plain text/css text/xml text/javascript application/json application/x-javascript application/xml application/xml+rss;#压缩类型</span></span><br><span class="line">    </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#负载均衡</span></span><br><span class="line">	<span class="comment">#max_fails为允许请求失败的次数，默认为1</span></span><br><span class="line">	<span class="comment">#weight为轮询权重，根据不同的权重分配可以用来平衡服务器的访问率。</span></span><br><span class="line">    <span class="comment"># upstream myServer&#123;</span></span><br><span class="line">    <span class="comment">#   server  192.168.247.129:8080 max_fails=3 weight=2;</span></span><br><span class="line">    <span class="comment">#   server  192.168.247.129:8081 max_fails=3 weight=4;	</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       80;</span></span><br><span class="line">	<span class="comment">#	</span></span><br><span class="line">	<span class="comment">#	#IP/域名可以有多个，用空格隔开</span></span><br><span class="line">	<span class="comment">#	server_name  192.168.247.129;</span></span><br><span class="line">	<span class="comment">#	#server_name  www.test.com;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">    <span class="comment">#    #charset koi8-r;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">    <span class="comment">#    #access_log  logs/host.access.log  main;</span></span><br><span class="line">	<span class="comment">#	</span></span><br><span class="line">	<span class="comment">#   #反向代理配置，</span></span><br><span class="line">    <span class="comment">#   #将所有请求为www.test.com的请求全部转发到upstream中定义的目标服务器中。</span></span><br><span class="line">    <span class="comment">#   location / &#123;</span></span><br><span class="line">	<span class="comment">#   			</span></span><br><span class="line">	<span class="comment">#	    #此处配置的域名必须与upstream的域名一致，才能转发。</span></span><br><span class="line">	<span class="comment">#	    proxy_pass http://myServer;</span></span><br><span class="line">	<span class="comment">#	    #proxy_pass http://192.168.247.129:8080;</span></span><br><span class="line">	<span class="comment">#		</span></span><br><span class="line">	<span class="comment">#		 proxy_connect_timeout 20;          #nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">	<span class="comment">#		</span></span><br><span class="line">    <span class="comment">#        #client_max_body_size       10m;   #允许客户端请求的最大单文件字节数</span></span><br><span class="line">    <span class="comment">#        #client_body_buffer_size    128k;  #缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">	<span class="comment">#		 #proxy_send_timeout         300;   #后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">    <span class="comment">#        #proxy_read_timeout         300;   #连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">    <span class="comment">#        #proxy_buffer_size          4k;    #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">    <span class="comment">#        #proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">    <span class="comment">#        #proxy_busy_buffers_size    64k;   #高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    <span class="comment">#        #proxy_temp_file_write_size 64k;   #设定缓存文件夹大小，大于这个值，将从upstream服务器传    		</span></span><br><span class="line">	<span class="comment">#		</span></span><br><span class="line">	<span class="comment">#		root   html;</span></span><br><span class="line">	<span class="comment">#		</span></span><br><span class="line">	<span class="comment">#		#定义首页索引文件的名称</span></span><br><span class="line">	<span class="comment">#		index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">    <span class="comment">#   #动静分离 静态资源走linux 动态资源走tomcat</span></span><br><span class="line">    <span class="comment">#   # 注意 /source/image/下面寻找资源</span></span><br><span class="line">    <span class="comment">#   location /image/ &#123;</span></span><br><span class="line">    <span class="comment">#       root /source/;</span></span><br><span class="line">	<span class="comment">#       autoindex on;</span></span><br><span class="line">    <span class="comment">#   &#125; 		</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment">#    # 出现50x错误时，使用/50x.html页返回给客户端</span></span><br><span class="line">    <span class="comment">#    error_page   500 502 503 504  /50x.html;</span></span><br><span class="line">    <span class="comment">#    location = /50x.html &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	<span class="comment">#下面是配置生产环境中既支持HTTP又支持HTTPS,保证用户在浏览器中输入HTTP也能正常访问</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># SSL证书 配置                                 </span></span><br><span class="line">	<span class="attribute">ssl_certificate</span>     	cert/yphtoy.com.pem;   <span class="comment">#加密证书路径</span></span><br><span class="line">	<span class="attribute">ssl_certificate_key</span>	cert/yphtoy.com.key;       <span class="comment">#加密私钥路径</span></span><br><span class="line">	<span class="attribute">ssl_protocols</span>		TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;     <span class="comment">#加密协议</span></span><br><span class="line">	<span class="attribute">ssl_session_cache</span>	shared:SSL:<span class="number">1m</span>;             <span class="comment">#加密访问缓存设置,可以大大提高访问速度</span></span><br><span class="line">	<span class="attribute">ssl_session_timeout</span>	<span class="number">10m</span>;                       <span class="comment">#加密访问缓存过期时间</span></span><br><span class="line">	<span class="attribute">ssl_ciphers</span>		HIGH:!aNULL:!MD5;              <span class="comment">#加密算法</span></span><br><span class="line">	<span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;	               <span class="comment">#是否由服务器决定采用哪种加密算法</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 负载均衡</span></span><br><span class="line">	<span class="section">upstream</span> api_upstream</span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> max_fails=<span class="number">3</span> weight=<span class="number">1</span>;</span><br><span class="line">		<span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> max_fails=<span class="number">3</span> weight=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#api 接口(兼容HTTP)</span></span><br><span class="line">	server&#123;</span><br><span class="line">	    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">		<span class="attribute">server_name</span> api.test.com;</span><br><span class="line">		<span class="comment"># 301重定向跳转到HTTPS接口</span></span><br><span class="line">		<span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">		<span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#api 接口(兼容HTTPS)</span></span><br><span class="line">	server&#123;</span><br><span class="line">	    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">		<span class="attribute">server_name</span> api.test.com;</span><br><span class="line">		<span class="section">location</span> / &#123;</span><br><span class="line">		   <span class="attribute">root</span> html;</span><br><span class="line">		   <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">		   <span class="attribute">proxy_pass</span> http://api_upstream;</span><br><span class="line">		   </span><br><span class="line">		   <span class="comment">#语法： proxy_cookie_path oldpath replacepath;</span></span><br><span class="line">		   <span class="comment">#oldpath就是你要替换的路径 replacepath 就是要替换的值</span></span><br><span class="line">		   <span class="comment">#作用：同一个web服务器下面多个应用之间能获取到cookie</span></span><br><span class="line">		   <span class="attribute">proxy_cookie_path</span> /api/ /;</span><br><span class="line">		   </span><br><span class="line">		   <span class="comment">#服务端接收的请求头Cooke值不变</span></span><br><span class="line">		   <span class="attribute">proxy_set_header</span> Cookie <span class="variable">$http_cookie</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#管理后台端(兼容HTTP)</span></span><br><span class="line">	server&#123;</span><br><span class="line">	    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">		<span class="attribute">server_name</span> manage.test.com;</span><br><span class="line">		<span class="comment"># 301重定向跳转到HTTPS接口</span></span><br><span class="line">		<span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/<span class="variable">$request_uri</span>;</span><br><span class="line">		<span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">		<span class="section">location</span> = /50x.html&#123;</span><br><span class="line">			 <span class="attribute">root</span> html	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#管理后台端(兼容HTTPS)</span></span><br><span class="line">	server&#123;</span><br><span class="line">	    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">		<span class="attribute">server_name</span> manage.test.com;</span><br><span class="line">		<span class="section">location</span> / &#123;</span><br><span class="line">		    <span class="attribute">root</span> /home/test/web/dist</span><br><span class="line">			</span><br><span class="line">			index /index.html;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="comment">#语法：try_files 【$uri】 【 $uri/】 【参数】</span></span><br><span class="line">			<span class="comment">#当用户请求https://manage.test.com/login时，</span></span><br><span class="line">			<span class="comment">#一.如果配置了上面的默认index,会依次请求</span></span><br><span class="line">			<span class="comment">#1./home/test/web/dist/login       查找有没有login这个文件，没有的话</span></span><br><span class="line">			<span class="comment">#2./home/test/web/dist/index.html  有就直接返回</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">#二.如果没有配置了上面的默认index或者配置了没有找到对应的资源,会依次请求</span></span><br><span class="line">			<span class="comment">#1./home/test/web/dist/login        查找有没有login这个文件，没有的话</span></span><br><span class="line">			<span class="comment">#2./home/test/web/dist/login/       查找有没有login这个目录，没有的话</span></span><br><span class="line">		    <span class="comment">#3.请求https://manage.test.com/index.html  nginx内部做了一个子请求</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">#三.总的来说,index的优先级比try_files高,请求会先去找index配置,这里最后一个参数必须存在</span></span><br><span class="line">			<span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;	</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="comment">#解决跨域问题</span></span><br><span class="line">            <span class="comment">#允许跨域请求地址(*表示全部,但是无法满足带cookie请求,因为cookie只能在当前域请求)</span></span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="variable">$http_origin</span>;</span><br><span class="line">            <span class="comment">#允许接收cookie和发送cookie</span></span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">            <span class="comment">#允许请求的方法</span></span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET,POST,DELETE,PUT,OPTIONS&#x27;</span>;</span><br><span class="line">            <span class="comment">#允许请求头（Content-Type:请求数据/媒体类型 x-requested-with:判断请求是异步还是同步 自定义header 比如 token）</span></span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="variable">$http_access_control_request_headers</span>;</span><br><span class="line">            <span class="comment">#浏览器缓存请求头信息,1800秒内,只会有1次请求，不会出现&quot;OPTIONS&quot;预请求,节约资源</span></span><br><span class="line">            <span class="comment">#add_header Access-Control-Max-Age &#x27;1800&#x27;;</span></span><br><span class="line">		    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">                    <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="comment">#服务端HttpServletRequest可以获得用户的真实ip</span></span><br><span class="line">		    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">#服务端HttpServletRequest可以获得用户的真实ip和经过的每一层代理服务器的ip</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">#服务端接收的请求头Host值不变</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;</span><br><span class="line">			</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记</title>
    <url>/2025/03/01/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>!&gt; <a href="https://www.bilibili.com/video/BV1Sv411r7vd">韩顺平Linux课程链接</a></p>
<p>[toc]</p>
<h1 id="第-1-章-Linux-开山篇-内容介绍"><a href="#第-1-章-Linux-开山篇-内容介绍" class="headerlink" title="第 1 章 Linux 开山篇-内容介绍"></a>第 1 章 Linux 开山篇-内容介绍</h1><h2 id="本套-Linux-课程内容"><a href="#本套-Linux-课程内容" class="headerlink" title="本套 Linux 课程内容"></a>本套 Linux 课程内容</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621576.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621577.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621578.jpeg"></p>
<h2 id="Linux-使用在那些地方"><a href="#Linux-使用在那些地方" class="headerlink" title="Linux 使用在那些地方"></a>Linux 使用在那些地方</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621579.jpeg"></p>
<h2 id="Linux-的应用领域"><a href="#Linux-的应用领域" class="headerlink" title="Linux 的应用领域"></a>Linux 的应用领域</h2><h3 id="个人桌面领域的应用"><a href="#个人桌面领域的应用" class="headerlink" title="个人桌面领域的应用"></a>个人桌面领域的应用</h3><p>此领域是传统 linux 应用薄弱的环节，近些年来随着 ubuntu、fedora [fɪˈdɔ:rə] 等优秀桌面环境的兴起，linux 在个人桌面领域的占有率在逐渐的提高。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621580.jpeg"></p>
<h2 id="服务器领域"><a href="#服务器领域" class="headerlink" title="服务器领域"></a>服务器领域</h2><p>linux 在<strong>服务器领域</strong>的应用是最强的。</p>
<p>linux <strong>免费、稳定、高效</strong>等特点在这里得到了很好的体现，尤其在一些高端领域尤为广泛（c&#x2F;c++&#x2F;php&#x2F;java&#x2F;python&#x2F;go）。</p>
<h2 id="嵌入式领域"><a href="#嵌入式领域" class="headerlink" title="嵌入式领域"></a>嵌入式领域</h2><p>linux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行<strong>软件裁剪</strong>，内核最小可以达到几百 KB 等特点，使其近些年来在<strong>嵌入式领域</strong>的应用得到非常大的提高</p>
<p>主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、智能硬件等都是其应用领域。以后在<strong>物联网中应用会更加广泛</strong>。</p>
<h1 id="第-2-章-Linux-基础篇-Linux-入门"><a href="#第-2-章-Linux-基础篇-Linux-入门" class="headerlink" title="第 2 章 Linux 基础篇-Linux 入门"></a>第 2 章 Linux 基础篇-Linux 入门</h1><h2 id="Linux-介绍"><a href="#Linux-介绍" class="headerlink" title="Linux 介绍"></a>Linux 介绍</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol>
<li><p>linux 怎么读， 不下 10 种</p>
</li>
<li><p>linux 是一个开源、免费的操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多企业级的项目</p>
<p>(c&#x2F;c++&#x2F;php&#x2F;python&#x2F;java&#x2F;go)都会部署到 Linux&#x2F;unix 系统上。</p>
</li>
<li><p>常见的操作系统(windows、IOS、Android、MacOS, Linux, Unix)</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621581.jpeg"></p>
<ol start="4">
<li>Linux 吉祥物</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621582.png"></p>
<ol start="5">
<li>xLinux 之父 Linus Torvalds Git 创作者</li>
</ol>
<p>世界著名黑客</p>
<p>小伙伴看看 linux0.01 版源码(不到 1w 行)后面老韩给大家演示如何下载</p>
<p>最新版本 linux 内核源码</p>
<ol start="6">
<li><p>Linux 主要的发行版:</p>
<p><strong>Ubuntu(乌班图)、RedHat(红帽)、CentOS</strong>、Debain[蝶变]、Fedora、SuSE、OpenSUSE [示意图]</p>
</li>
</ol>
<h2 id="Linux-和-Unix-的关系"><a href="#Linux-和-Unix-的关系" class="headerlink" title="Linux 和 Unix 的关系"></a>Linux 和 Unix 的关系</h2><h3 id="unix-是怎么来的"><a href="#unix-是怎么来的" class="headerlink" title="unix 是怎么来的"></a>unix 是怎么来的</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621583.jpeg"></p>
<h3 id="Linux-是怎么来的"><a href="#Linux-是怎么来的" class="headerlink" title="Linux 是怎么来的"></a>Linux 是怎么来的</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621584.jpeg"></p>
<h3 id="Linux-和-Unix-关系图"><a href="#Linux-和-Unix-关系图" class="headerlink" title="Linux 和 Unix 关系图"></a>Linux 和 Unix 关系图</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621585.jpeg"></p>
<h1 id="第-3-章-Linux-基础篇-VM-和-Linux-的安装"><a href="#第-3-章-Linux-基础篇-VM-和-Linux-的安装" class="headerlink" title="第 3 章 Linux 基础篇- VM 和 Linux 的安装"></a>第 3 章 Linux 基础篇- VM 和 Linux 的安装</h1><h2 id="安装-vm-和-Centos"><a href="#安装-vm-和-Centos" class="headerlink" title="安装 vm 和 Centos"></a>安装 vm 和 Centos</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>学习 Linux 需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个 Centos 系统来学习</p>
<ol>
<li>先安装 virtual machine 15.5</li>
<li>再安装 Linux (CentOS 7.6&#x2F;centOS8.1)</li>
<li>原理示意图 [画]</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621586.jpeg"></p>
<h2 id="vmware15-5-下载"><a href="#vmware15-5-下载" class="headerlink" title="vmware15.5 下载"></a>vmware15.5 下载</h2><ol>
<li>官方地址：<a href="https://www.vmware.com/cn.html">https://www.vmware.com/cn.html</a></li>
<li>其它地址：<a href="https://www.nocmd.com/windows/740.html">https://www.nocmd.com/windows/740.html</a></li>
</ol>
<h2 id="VM-安装的步骤"><a href="#VM-安装的步骤" class="headerlink" title="VM 安装的步骤"></a>VM 安装的步骤</h2><ol>
<li>去 BIOS 里修改设置开启虚拟化设备支持（f2, f10）</li>
<li>安装虚拟机软件（vm15.5）, 演示一把，1. 在 BIOS 开启 CPU 虚拟化支持</li>
<li><a href="https://jingyan.baidu.com/article/ab0b56305f2882c15afa7dda.html">https://jingyan.baidu.com/article/ab0b56305f2882c15afa7dda.html</a> 2. 再安装</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621587.jpeg"></p>
<h2 id="Centos-下载地址"><a href="#Centos-下载地址" class="headerlink" title="Centos 下载地址"></a>Centos 下载地址</h2><ol>
<li>CentOS-7-x86_64-DVD-1810.iso CentOS 7.6 DVD 版 4G (目前主流的生产环境) <a href="http://mirrors.163.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso">http://mirrors.163.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso</a></li>
<li>CentOS-8.1.1911-x86_64-dvd1.iso CentOS 8.1 DVD 版 8G (未来的主流.) <a href="https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso">https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso</a></li>
</ol>
<h2 id="CentOS-安装的步骤"><a href="#CentOS-安装的步骤" class="headerlink" title="CentOS 安装的步骤"></a>CentOS 安装的步骤</h2><ol>
<li>创建虚拟机 [演示]</li>
<li>开始安装系统(CentOS7.6)的步骤 [演示] 提示生成复杂密码:<a href="https://suijimimashengcheng.51240.com/">https://suijimimashengcheng.51240.com/</a></li>
<li>CentOS 安装难点-网络连接方式理解 [示意图]</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621588.jpeg"></p>
<h2 id="安装虚拟机和CentOS-的练习"><a href="#安装虚拟机和CentOS-的练习" class="headerlink" title="安装虚拟机和CentOS 的练习"></a>安装虚拟机和CentOS 的练习</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621589.jpeg">学习 Linux 需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个 Centos 系统来学习， 请各位同学完成安装。</p>
<h2 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h2><p>如果你已经安装了一台 linux 操作系统，你还想再更多的，老韩提示大家：没有必要再重新安装，你只需要克隆就可以， 看演示。</p>
<ol>
<li>方式 1，直接拷贝一份安装好的虚拟机文件</li>
<li>方式 2，使用 vmware 的克隆操作，注意， 克隆时，需要先关闭 linux 系统</li>
</ol>
<h2 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h2><p>如果你在使用虚拟机系统的时候(比如 linux)，你想回到原先的某一个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理 。</p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><ol>
<li>安装好系统以后，先做一个快照 A</li>
<li>进入到系统。创建一个文件夹，再保存一个快照 B</li>
<li>回到系统刚刚安装好的状态 , 即 快照 A</li>
<li>试试看，是否还能再次回到快照 B</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621590.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621591.jpeg"></p>
<h2 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h2><p>我在前面讲过，虚拟系统安装好了，它的本质就是文件(放在文件夹的)。因此虚拟系统的迁移很方便，你可以把安装好的虚拟系统这个<strong>文件夹整体拷贝或者剪切</strong>到另外位置使用。删除也很简单，用 <strong>vmware 进行移除</strong>，再点击菜单-&gt;从</p>
<p>磁盘删除即可，或者直<strong>接手动删除虚拟系统对应的文件夹</strong>即可。 看老师给小伙伴演示一把 (把前面克隆的系统进行迁移和删除)</p>
<h2 id="安装-vmtools"><a href="#安装-vmtools" class="headerlink" title="安装 vmtools"></a>安装 vmtools</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li>vmtools 安装后，可以让我们在 windows 下更好的管理 vm 虚拟机</li>
<li>可以设置 windows 和 centos 的共享文件夹</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621592.jpeg"></p>
<h3 id="安装vmtools-的步骤"><a href="#安装vmtools-的步骤" class="headerlink" title="安装vmtools 的步骤"></a>安装vmtools 的步骤</h3><ol>
<li><p>进入 centos</p>
</li>
<li><p>点击 vm 菜单的-&gt;install vmware tools</p>
</li>
<li><p>centos 会出现一个 vm 的安装包, xx.tar.gz</p>
</li>
<li><p>拷贝到 &#x2F;opt</p>
</li>
<li><p>使用解压命令 tar, 得到一个安装文件</p>
<p>cd &#x2F;opt [进入到 opt 目录] tar -zxvf xx.tar.gz</p>
</li>
<li><p>进入该 vm 解压的目录 , &#x2F;opt 目录下</p>
<p>cd vmware…</p>
</li>
<li><p>安装 .&#x2F;vmware-install.pl</p>
</li>
<li><p>全部使用默认设置即可, 就可以安装成功</p>
</li>
<li><p>注意：安装 vmtools 需要有 gcc . gcc -v</p>
</li>
<li><p>示意图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621593.jpeg"></p>
<h3 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h3><ul>
<li>基本介绍</li>
</ul>
<p>为了方便，可以设置一个共享文件夹，比如 d:&#x2F;myshare</p>
<ul>
<li>具体步骤</li>
</ul>
<ol>
<li>菜单-&gt;vm-&gt;setting, 如图设置即可注意:设置选项为 always enable ,这样可以读写了</li>
<li>windows 和 centos 可共享 d:&#x2F;myshare 目录可以读写文件了</li>
<li>共享文件夹在 centos 的 &#x2F;mnt&#x2F;hgfs&#x2F; 下</li>
</ol>
<ul>
<li>注意事项和细节说明</li>
</ul>
<ol>
<li>windows 和 contos 就可以共享文件了，但是在实际开发中，文件的上传下载是需要使用 远程方式完成的</li>
<li><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621594.jpeg">远程方式登录，我们后面会具体讲解示意图</li>
</ol>
<h1 id="第-4-章-Linux-基础篇-目录结构"><a href="#第-4-章-Linux-基础篇-目录结构" class="headerlink" title="第 4 章 Linux 基础篇-目录结构"></a>第 4 章 Linux 基础篇-目录结构</h1><h2 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“&#x2F;”，然后在此目录下再创建其他的目录。</li>
<li>深刻理解 linux 树状文件目录是非常重要的，这里我给大家说明一下。</li>
<li>记住一句经典的话：在 Linux 世界里，一切皆文件(!!)</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621595.jpeg"></p>
<h2 id="具体的目录结构-不用背-知道即可"><a href="#具体的目录结构-不用背-知道即可" class="headerlink" title="具体的目录结构(不用背,知道即可)"></a>具体的目录结构(不用背,知道即可)</h2><ol>
<li><p>&#x2F;bin [常用] (&#x2F;usr&#x2F;bin 、 &#x2F;usr&#x2F;local&#x2F;bin)</p>
<p>是 Binary 的缩写, 这个目录存放着最经常使用的命令</p>
</li>
<li><p>&#x2F;sbin (&#x2F;usr&#x2F;sbin 、 &#x2F;usr&#x2F;local&#x2F;sbin)</p>
<p>s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p>&#x2F;home [常用]</p>
<p>存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名, 老师演示，</p>
</li>
</ol>
<p>体验</p>
<ol start="4">
<li><p>&#x2F;root [常用]</p>
<p>该目录为系统管理员，也称作超级权限者的用户主目录</p>
</li>
<li><p>&#x2F;lib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</p>
</li>
<li><p>&#x2F;lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p>
</li>
<li><p>&#x2F;etc [常用]</p>
<p>所有的系统管理所需要的配置文件和子目录, 比如安装 mysql 数据库 my.conf</p>
</li>
<li><p>&#x2F;usr [常用]</p>
<p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录。</p>
</li>
<li><p>&#x2F;boot [常用] 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</p>
</li>
<li><p>&#x2F;proc [不能动] 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p>
</li>
<li><p>&#x2F;srv [不能动] service 缩写，该目录存放一些服务启动之后需要提取的数据</p>
</li>
<li><p>&#x2F;sys [不能动]这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs &#x3D;》【别动】</p>
</li>
<li><p>&#x2F;tmp 这个目录是用来存放一些临时文件的</p>
</li>
<li><p>&#x2F;dev</p>
<p>类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</p>
</li>
<li><p>&#x2F;media [常用] linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</p>
</li>
<li><p>&#x2F;mnt [常用]</p>
<p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就</p>
</li>
</ol>
<p>可以查看里的内容了。 d:&#x2F;myshare</p>
<ol start="17">
<li><p>&#x2F;opt 这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</p>
</li>
<li><p>&#x2F;usr&#x2F;local [常用]</p>
<p>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p>
</li>
<li><p>&#x2F;var [常用]</p>
<p>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p>
</li>
<li><p>&#x2F;selinux [security-enhanced linux]</p>
<p>SELinux 是一种安全子系统,它能控制程序只能访问特定文件, 有三种工作模式，可以自行设置.</p>
</li>
</ol>
<h1 id="第-5-章-Linux-实操篇-远程登录到-Linux-服务器"><a href="#第-5-章-Linux-实操篇-远程登录到-Linux-服务器" class="headerlink" title="第 5 章 Linux 实操篇-远程登录到 Linux 服务器"></a>第 5 章 Linux 实操篇-远程登录到 Linux 服务器</h1><h2 id="为什么需要远程登录Linux"><a href="#为什么需要远程登录Linux" class="headerlink" title="为什么需要远程登录Linux"></a>为什么需要远程登录Linux</h2><h3 id="说明-公司开发时候，-具体的应用场景是这样的"><a href="#说明-公司开发时候，-具体的应用场景是这样的" class="headerlink" title="说明: 公司开发时候， 具体的应用场景是这样的"></a>说明: 公司开发时候， 具体的应用场景是这样的</h3><ol>
<li>linux 服务器是开发小组共享</li>
<li>正式上线的项目是运行在公网</li>
<li>因此程序员需要远程登录到 Linux 进行项目管理或者开发</li>
<li>画出简单的网络拓扑示意图(帮助理解)</li>
<li>远程登录客户端有 Xshell6， Xftp6 , 我们学习使用 Xshell 和 Xftp6 , 其它的远程工具大同小异</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621596.jpeg"></p>
<h2 id="远程登录Linux-Xshell6"><a href="#远程登录Linux-Xshell6" class="headerlink" title="远程登录Linux-Xshell6"></a>远程登录Linux-Xshell6</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ol>
<li>说明: Xshell 是目前最好的远程登录到 Linux 操作的软件，流畅的速度并且完美解决了中文乱码的问题， 是目前程</li>
</ol>
<p>序员首选的软件。</p>
<ol start="2">
<li>Xshell 是一个强大的安全终端模拟软件，它支持 SSH1, SSH2, 以及 Microsoft Windows 平台的 TELNET 协议。</li>
<li>Xshell 可以在 Windows 界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的</li>
</ol>
<h2 id="下载-安装-配置和使用"><a href="#下载-安装-配置和使用" class="headerlink" title="下载-安装-配置和使用:"></a>下载-安装-配置和使用:</h2><p>具体看老师的演示和操作</p>
<p>下载 free-for-home-school 版本</p>
<p>地址: <a href="https://www.netsarang.com/en/free-for-home-school/">https://www.netsarang.com/en/free-for-home-school/</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621597.jpeg"></p>
<h2 id="远程上传下载文件-Xftp6"><a href="#远程上传下载文件-Xftp6" class="headerlink" title="远程上传下载文件-Xftp6"></a>远程上传下载文件-Xftp6</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>是一个基于 windows 平台的功能强大的 SFTP、FTP 文件传输软件。使用了 Xftp 以后，windows 用户能安全地在 UNIX&#x2F;Linux 和 Windows PC 之间传输文件。[示意图]</p>
<p>软件下载方法在前面说过了</p>
<h3 id="Xftp6-安装配置和使用"><a href="#Xftp6-安装配置和使用" class="headerlink" title="Xftp6 安装配置和使用"></a>Xftp6 安装配置和使用</h3><p>具体看老师的演示和操作</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621598.jpeg"></p>
<h3 id="细节讨论"><a href="#细节讨论" class="headerlink" title="细节讨论"></a>细节讨论</h3><p>如何处理 Xftp 中文乱码问题</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621599.jpeg"></p>
<h2 id="Xftp6-和-XShell6-的使用"><a href="#Xftp6-和-XShell6-的使用" class="headerlink" title="Xftp6 和 XShell6 的使用"></a>Xftp6 和 XShell6 的使用</h2><h3 id="练习要求"><a href="#练习要求" class="headerlink" title="练习要求"></a>练习要求</h3><ol>
<li>通过 Xftp6 软件可以连接到 linux ,并传输一个文件(比如图片)到 &#x2F;root 目录</li>
<li>使用 xshell6 可以连接到 linux ,并且可以重新启动一把 linux 系统 , 提示: reboot</li>
</ol>
<h1 id="第-6-章-Linux-实操篇-Vi-和-Vim-编辑器"><a href="#第-6-章-Linux-实操篇-Vi-和-Vim-编辑器" class="headerlink" title="第 6 章 Linux 实操篇- Vi 和 Vim 编辑器"></a>第 6 章 Linux 实操篇- Vi 和 Vim 编辑器</h1><h2 id="vi-和-vim-的基本介绍"><a href="#vi-和-vim-的基本介绍" class="headerlink" title="vi 和 vim 的基本介绍"></a>vi 和 vim 的基本介绍</h2><p>Linux 系统会内置 vi 文本编辑器</p>
<p>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621600.jpeg"></p>
<h2 id="vi-和-vim-常用的三种模式"><a href="#vi-和-vim-常用的三种模式" class="headerlink" title="vi 和 vim 常用的三种模式"></a>vi 和 vim 常用的三种模式</h2><h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>以 vim 打开一个档案就直接进入一般模式了(这是<strong>默认的模式</strong>)。在这个模式中， 你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数据。</p>
<h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p>按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可.</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>输入 esc 再输入：在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的动作则是在此模式中达成的！</p>
<h2 id="vi-和-vim-基本使用"><a href="#vi-和-vim-基本使用" class="headerlink" title="vi 和 vim 基本使用"></a>vi 和 vim 基本使用</h2><p>使用 vim 开发一个 Hello.java 程序, 保存.步骤说明和演示</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621601.jpeg"></p>
<h2 id="各种模式的相互切换"><a href="#各种模式的相互切换" class="headerlink" title="各种模式的相互切换"></a>各种模式的相互切换</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621602.jpeg"></p>
<h2 id="vi-和-vim-快捷键"><a href="#vi-和-vim-快捷键" class="headerlink" title="vi 和 vim 快捷键"></a>vi 和 vim 快捷键</h2><h3 id="快捷键使用练习"><a href="#快捷键使用练习" class="headerlink" title="快捷键使用练习"></a>快捷键使用练习</h3><ol>
<li>拷贝当前行 yy , 拷贝当前行向下的 5 行 5yy，并粘贴（输入 p）。</li>
<li>删除当前行 dd , 删除当前行向下的 5 行 5dd</li>
<li>在文件中查找某个单词 [命令行下 &#x2F;关键字 ， 回车 查找 , 输入 n 就是查找下一个 ]</li>
<li>设置文件的行号，取消文件的行号.[命令行下 : set nu 和 :set nonu]</li>
<li>编辑 &#x2F;etc&#x2F;profile 文件，在一般模式下, 使用快捷键到该文档的最末行[G]和最首行[gg]</li>
<li>在一个文件中输入 “hello” ,在一般模式下, 然后又撤销这个动作 u</li>
<li>编辑 &#x2F;etc&#x2F;profile 文件，在一般模式下, 并将光标移动到 , 输入 20,再输入 shift+g</li>
<li>更多的看整理的文档</li>
<li>快捷键的键盘对应图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621603.jpeg"></p>
<h2 id="vi-和-vim-课堂练习"><a href="#vi-和-vim-课堂练习" class="headerlink" title="vi 和 vim 课堂练习"></a>vi 和 vim 课堂练习</h2><ol>
<li>看使用 vim &#x2F; vi 编写一个 Hello.java</li>
<li>把老师课堂讲的各种快捷键自己玩一把即可</li>
</ol>
<h1 id="第-7-章-Linux-实操篇-开机、重启和用户登录注销"><a href="#第-7-章-Linux-实操篇-开机、重启和用户登录注销" class="headerlink" title="第 7 章 Linux 实操篇-开机、重启和用户登录注销"></a>第 7 章 Linux 实操篇-开机、重启和用户登录注销</h1><h2 id="关机-重启命令"><a href="#关机-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>shutdown –h now 立该进行关机</li>
<li>shudown -h 1 “hello, 1 分钟后会关机了”</li>
<li>shutdown –r now 现在重新启动计算机</li>
<li>halt 关机，作用和上面一样.</li>
<li>reboot 现在重新启动计算机</li>
<li>sync 把内存的数据同步到磁盘.</li>
</ol>
<h3 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h3><ol>
<li>不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中</li>
<li>目前的 shutdown&#x2F;reboot&#x2F;halt 等命令均已经在关机前进行了 sync ， 老韩提醒: 小心驶得万年船</li>
</ol>
<h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.</li>
<li>在提示符下输入 logout 即可注销用户</li>
</ol>
<h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol>
<li>logout 注销指令在图形运行级别无效，在运行级别 3 下有效.</li>
<li>运行级别这个概念，后面给大家介绍</li>
</ol>
<h1 id="第-8-章-Linux-实操篇-用户管理"><a href="#第-8-章-Linux-实操篇-用户管理" class="headerlink" title="第 8 章 Linux 实操篇-用户管理"></a>第 8 章 Linux 实操篇-用户管理</h1><h2 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621604.jpeg">Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>useradd 用户名</p>
<h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><p>案例 1:添加一个用户 milan, 默认该用户的家目录在 &#x2F;home&#x2F;milan</p>
<h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><ol>
<li>当创建用户成功后，会自动的创建和用户同名的家目录</li>
<li>也可以通过 useradd -d 指定目录 新的用户名，给新创建的用户指定家目录</li>
</ol>
<h2 id="指定-修改密码"><a href="#指定-修改密码" class="headerlink" title="指定&#x2F;修改密码"></a>指定&#x2F;修改密码</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p>passwd 用户名</p>
<ol>
<li><p>应用案例给 milan 指定密码 passwd milan</p>
<p>补充，显示当前用户所在的目录 pwd</p>
</li>
</ol>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><p>userdel 用户名</p>
<h3 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例"></a>应用案例</h3><ol>
<li>删除用户 milan，但是要保留家目录, userdel milan</li>
<li>删除用户以及用户主目录, 比如 tom, userdel -r tom</li>
</ol>
<h3 id="细节说明-1"><a href="#细节说明-1" class="headerlink" title="细节说明"></a>细节说明</h3><p>是否保留家目录的讨论? 一般情况下，我们建议保留</p>
<h2 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h2><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h3><p>id 用户名</p>
<h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h3><p>案例：请查询 root 信息</p>
<p>#id root</p>
<h3 id="细节说明-2"><a href="#细节说明-2" class="headerlink" title="细节说明"></a>细节说明</h3><p>当用户不存在时，返回无此用户</p>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如 root</p>
<h3 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h3><p>su - 切换用户名</p>
<h3 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例"></a>应用实例</h3><p>创建一个用户 jack, ，指定密码，然后切换到 jack</p>
<h3 id="细节说明-3"><a href="#细节说明-3" class="headerlink" title="细节说明"></a>细节说明</h3><ol>
<li>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</li>
<li>当需要返回到原来用户时，使用 exit&#x2F;logout 指令</li>
</ol>
<h2 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户&#x2F;登录用户"></a>查看当前用户&#x2F;登录用户</h2><h3 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a>基本语法</h3><p>whoami&#x2F; who am I</p>
<h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>类似于角色，系统可以对有共性&#x2F;权限的多个用户进行统一的管理</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621606.jpeg"></p>
<h3 id="新增组"><a href="#新增组" class="headerlink" title="新增组"></a>新增组</h3><p>指令 : groupadd 组名案例演示</p>
<h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><p>指令(基本语法)： groupdel 组名</p>
<h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ol>
<li>增加用户时直接加上组</li>
<li>指令(基本语法) : useradd –g 用户组 用户名</li>
<li>增加一个用户 zwj, 直接将他指定到 wudang</li>
<li>groupadd wudang</li>
<li>useradd -g wudang zwj</li>
</ol>
<h3 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h3><p><strong>指令(基本语法)：usermod –g 用户组 用户名</strong></p>
<ul>
<li><p>案例演示</p>
<p>创建一个组 mojiao</p>
<p>把 zwj 放入到 mojiao</p>
<p>指令: usermod -g mojiao zwj</p>
</li>
</ul>
<h2 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h2><h3 id="etc-passwd-文件"><a href="#etc-passwd-文件" class="headerlink" title="&#x2F;etc&#x2F;passwd 文件"></a>&#x2F;etc&#x2F;passwd 文件</h3><p>用户（user）的配置文件，记录用户的各种信息</p>
<p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621607.jpeg"></p>
<h3 id="etc-shadow-文件"><a href="#etc-shadow-文件" class="headerlink" title="&#x2F;etc&#x2F;shadow 文件"></a>&#x2F;etc&#x2F;shadow 文件</h3><p>口令的配置文件</p>
<p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p>
<h3 id="etc-group-文件"><a href="#etc-group-文件" class="headerlink" title="&#x2F;etc&#x2F;group 文件"></a>&#x2F;etc&#x2F;group 文件</h3><p>组(group)的配置文件，记录 Linux 包含的组的信息每行含义：组名:口令:组标识号:组内用户列表</p>
<h1 id="第-9-章-Linux-实操篇-实用指令"><a href="#第-9-章-Linux-实操篇-实用指令" class="headerlink" title="第 9 章 Linux 实操篇-实用指令"></a>第 9 章 Linux 实操篇-实用指令</h1><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>运行级别说明：</p>
<p>0：关机</p>
<p>1：单用户【找回丢失密码】</p>
<p>2：多用户状态没有网络服务</p>
<p>3：<strong>多用户状态有网络服务</strong></p>
<p>4：系统未使用保留给用户</p>
<p>5：图形界面</p>
<p>6：系统重启</p>
<p>常用运行级别是 3 和 5 ，也可以指定默认运行级别， 后面演示</p>
<h3 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例"></a>应用实例</h3><p>命令：init [0123456] 应用案例： 通过 init 来切换不同的运行级别，比如动 5-3 ， 然后关机。</p>
<h3 id="CentOS7-后运行级别说明"><a href="#CentOS7-后运行级别说明" class="headerlink" title="CentOS7 后运行级别说明"></a>CentOS7 后运行级别说明</h3><p>在 centos7 以前， &#x2F;etc&#x2F;inittab 文件中 .</p>
<p>进行了简化 ，如下:</p>
<p><strong>multi-user.target</strong>: analogous to runlevel 3 <strong>graphical.target</strong>: analogous to runlevel 5 # To view current default target, run: <strong>systemctl get-default</strong></p>
<p># To set a default target, run:</p>
<p><strong>systemctl set-default TARGET.target</strong></p>
<h2 id="找回-root-密码"><a href="#找回-root-密码" class="headerlink" title="找回 root 密码"></a>找回 root 密码</h2><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>如何找回 root 密码</p>
<h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><ol>
<li>假设 root 密码忘记了，请问如何找回密码</li>
<li>设置运行级别，linux 运行后，直接进入到 命令行终端(3)</li>
</ol>
<h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><h3 id="man-获得帮助信息"><a href="#man-获得帮助信息" class="headerlink" title="man 获得帮助信息"></a>man 获得帮助信息</h3><p>基本语法：man [命令或配置文件]（功能描述：获得帮助信息）案例：查看 ls 命令的帮助信息 man ls</p>
<p>在 linux 下，隐藏文件是以 .开头 , 选项可以组合使用 比如 ls -al, 比如 ls -al &#x2F;root</p>
<h3 id="help-指令"><a href="#help-指令" class="headerlink" title="help 指令"></a>help 指令</h3><p>基本语法：help 命令 （功能描述：获得 shell 内置命令的帮助信息）</p>
<h3 id="应用实例-4"><a href="#应用实例-4" class="headerlink" title="应用实例"></a>应用实例</h3><p>案例：查看 cd 命令的帮助信息</p>
<h3 id="百度帮助更直接"><a href="#百度帮助更直接" class="headerlink" title="百度帮助更直接"></a>百度帮助更直接</h3><p>如果英语不太好的，也可以直接百度靠谱。</p>
<h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><h3 id="pwd-指令"><a href="#pwd-指令" class="headerlink" title="pwd 指令"></a>pwd 指令</h3><p>基本语法 ：pwd (功能描述：显示当前工作目录的绝对路径)</p>
<p>应用实例：案例：显示当前工作目录的绝对路径</p>
<h3 id="ls-指令"><a href="#ls-指令" class="headerlink" title="ls 指令"></a>ls 指令</h3><p>基本语法：ls [选项] [目录或是文件]</p>
<ul>
<li><p>常用选项</p>
<p>-a ：显示当前目录所有的文件和目录，包括隐藏的。</p>
<p>-l ：以列表的方式显示信息</p>
</li>
<li><p>应用实例</p>
<p>案例：查看当前目录的所有内容信息</p>
</li>
</ul>
<h3 id="cd-指令"><a href="#cd-指令" class="headerlink" title="cd 指令"></a>cd 指令</h3><p>基本语法：cd [参数] (功能描述：切换到指定目录)</p>
<p>理解：绝对路径和相对路径</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621608.jpeg"></p>
<p>cd ~ 或者 cd ：回到自己的家目录, 比如 你是 root ， cd ~ 到 &#x2F;root cd .. 回到当前目录的上一级目录</p>
<ul>
<li><p>应用实例</p>
<p>案例 1：使用绝对路径切换到 root 目录 ， cd &#x2F;root</p>
<p>案例 2: 使用相对路径到&#x2F;root 目录, 比如在 &#x2F;home&#x2F;tom , cd ..&#x2F;..&#x2F;root</p>
<p>案例 3：表示回到当前目录的上一级目录 , cd ..</p>
<p>案例 4：回到家目录 , cd ~</p>
</li>
</ul>
<h3 id="mkdir-指令"><a href="#mkdir-指令" class="headerlink" title="mkdir 指令"></a>mkdir 指令</h3><ul>
<li><p>mkdir 指令用于创建目录</p>
<p>基本语法：mkdir [选项] 要创建的目录</p>
<ul>
<li><p>常用选项</p>
<p>-p ：创建多级目录</p>
<ul>
<li><p>应用实例</p>
<p>案例 1:创建一个目录 &#x2F;home&#x2F;dog mkdir &#x2F;home&#x2F;dog</p>
<p>案例 2:创建多级目录 &#x2F;home&#x2F;animal&#x2F;tiger mkdir -p &#x2F;home&#x2F;animal&#x2F;tiger</p>
<p>rmdir 指令</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="rmdir-指令删除空目录"><a href="#rmdir-指令删除空目录" class="headerlink" title="rmdir 指令删除空目录"></a>rmdir 指令删除空目录</h3><ul>
<li><p>基本语法</p>
<p>rmdir [选项] 要删除的空目录</p>
</li>
<li><p>应用实例</p>
<p>案例:删除一个目录 &#x2F;home&#x2F;dog</p>
</li>
<li><p>使用细节</p>
<p>rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p>
<p>提示：如果需要删除非空目录，需要使用 rm -rf 要删除的目录比如： rm -rf &#x2F;home&#x2F;animal</p>
</li>
</ul>
<h3 id="touch-指令"><a href="#touch-指令" class="headerlink" title="touch 指令"></a>touch 指令</h3><ul>
<li>touch 指令创建空文件</li>
<li>基本语法</li>
</ul>
<p>touch 文件名称</p>
<ul>
<li><p>应用实例</p>
<p>案例: 在&#x2F;home 目录下 ， 创建一个空文件 hello.txt</p>
</li>
</ul>
<h3 id="cp-指令"><a href="#cp-指令" class="headerlink" title="cp 指令"></a>cp 指令</h3><p>cp 指令拷贝文件到指定目录</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621609.jpeg"></p>
<ul>
<li><p>基本语法</p>
<p>cp [选项] source dest</p>
</li>
<li><p>常用选项</p>
<p>-r ：递归复制整个文件夹</p>
</li>
<li><p>应用实例</p>
<p>案例 1: 将 &#x2F;home&#x2F;hello.txt 拷贝到 &#x2F;home&#x2F;bbb 目录下</p>
<p>cp hello.txt &#x2F;home&#x2F;bbb</p>
<p>案例 2: 递归复制整个文件夹，举例, 比如将 &#x2F;home&#x2F;bbb 整个目录， 拷贝到 &#x2F;opt cp -r &#x2F;home&#x2F;bbb &#x2F;opt</p>
</li>
<li><p>使用细节</p>
<p>强制覆盖不提示的方法：\cp , \cp -r &#x2F;home&#x2F;bbb &#x2F;opt</p>
</li>
</ul>
<h3 id="rm-指令"><a href="#rm-指令" class="headerlink" title="rm 指令"></a>rm 指令</h3><p>说明：rm 指令移除文件或目录</p>
<ul>
<li>基本语法</li>
</ul>
<p>rm [选项] 要删除的文件或目录</p>
<ul>
<li><p>常用选项</p>
<p>-r ：递归删除整个文件夹</p>
<p>-f ： 强制删除不提示</p>
</li>
<li><p>应用实例</p>
<p>案例 1: 将 &#x2F;home&#x2F;hello.txt 删除 , rm &#x2F;home&#x2F;hello.txt</p>
<p>案例 2: 递归删除整个文件夹 &#x2F;home&#x2F;bbb , rm -rf &#x2F;home&#x2F;bbb [删除整个文件夹，不提示]</p>
</li>
<li><p>使用细节</p>
<p>强制删除不提示的方法：带上 -f 参数即可</p>
</li>
</ul>
<h3 id="mv-指令"><a href="#mv-指令" class="headerlink" title="mv 指令"></a>mv 指令</h3><p>mv 移动文件与目录或重命名</p>
<ul>
<li><p>基本语法</p>
<p>mv oldNameFile newNameFile (功能描述：重命名) mv &#x2F;temp&#x2F;movefile &#x2F;targetFolder (功能描述：移动文件)</p>
</li>
<li><p>应用实例</p>
<p>案例 1: 将 &#x2F;home&#x2F;cat.txt 文件 重新命名为 pig.txt</p>
<p>案例 2:将 &#x2F;home&#x2F;pig.txt 文件 移动到 &#x2F;root 目录下</p>
<p>案例 3: 移动整个目录 , 比如将 &#x2F;opt&#x2F;bbb 移动到 &#x2F;home 下 mv &#x2F;opt&#x2F;bbb &#x2F;home&#x2F;</p>
<p>试试.</p>
</li>
</ul>
<h3 id="cat-指令"><a href="#cat-指令" class="headerlink" title="cat 指令"></a>cat 指令</h3><p>cat 查看文件内容</p>
<ul>
<li>基本语法</li>
</ul>
<p>cat [选项] 要查看的文件</p>
<ul>
<li><p>常用选项</p>
<p>-n ：显示行号</p>
</li>
<li><p>应用实例</p>
<p>案例 1: &#x2F;etc&#x2F;profile 文件内容，并显示行号</p>
</li>
<li><p>使用细节</p>
<p>cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more cat -n &#x2F;etc&#x2F;profile | more [进行交互]</p>
</li>
</ul>
<h3 id="more-指令"><a href="#more-指令" class="headerlink" title="more 指令"></a>more 指令</h3><p>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若干快捷键(交互的指令)，详见操作说明</p>
<ul>
<li><p>基本语法</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621610.jpeg">more 要查看的文件操作说明，如图</p>
</li>
<li><p>应用实例</p>
<p>案例: 采用 more 查看文件</p>
</li>
</ul>
<p>&#x2F;etc&#x2F;profile</p>
<h3 id="less-指令"><a href="#less-指令" class="headerlink" title="less 指令"></a>less 指令</h3><p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p>
<ul>
<li><p>基本语法</p>
<p>less 要查看的文件操作说明</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621611.jpeg"></p>
</li>
<li><p>应用实例</p>
<p>案例: 采用 less 查看一个大文件文件 &#x2F;opt&#x2F;杂文.txt less &#x2F;opt&#x2F;杂文.txt</p>
</li>
</ul>
<h3 id="echo-指令"><a href="#echo-指令" class="headerlink" title="echo 指令"></a>echo 指令</h3><p>echo 输出内容到控制台</p>
<ul>
<li><p>基本语法</p>
<p>echo [选项] [输出内容]</p>
</li>
<li><p>应用实例</p>
<p>案例: 使用 echo 指令输出环境变量, 比如输出 $PATH $HOSTNAME, echo $HOSTNAME</p>
</li>
</ul>
<p>案例: 使用 echo 指令输出 hello,world!</p>
<h3 id="head-指令"><a href="#head-指令" class="headerlink" title="head 指令"></a>head 指令</h3><p>head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容</p>
<ul>
<li><p>基本语法</p>
<p>head 文件 (功能描述：查看文件头 10 行内容)</p>
<p>head -n 5 文件 (功能描述：查看文件头 5 行内容，5 可以是任意行数)</p>
</li>
<li><p>应用实例</p>
<p>案例: 查看&#x2F;etc&#x2F;profile 的前面 5 行代码</p>
<p>head -n 5 &#x2F;etc&#x2F;profile</p>
</li>
</ul>
<h3 id="tail-指令"><a href="#tail-指令" class="headerlink" title="tail 指令"></a>tail 指令</h3><p>tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容。</p>
<ul>
<li>基本语法</li>
</ul>
<ol>
<li>tail 文件 （功能描述：查看文件尾 10 行内容）</li>
<li>tail -n 5 文件 （功能描述：查看文件尾 5 行内容，5 可以是任意行数）</li>
<li>tail -f 文件 （功能描述：实时追踪该文档的所有更新）<ul>
<li><p>应用实例</p>
<p>案例 1: 查看&#x2F;etc&#x2F;profile 最后 5 行的代码</p>
<p>tail -n 5 &#x2F;etc&#x2F;profile</p>
<p>案例 2: 实时监控 mydate.txt , 看看到文件有变化时，是否看到， 实时的追加 hello,world tail -f &#x2F;home&#x2F;mydate.txt</p>
</li>
</ul>
</li>
</ol>
<h3 id="指令-和-指令"><a href="#指令-和-指令" class="headerlink" title="&gt; 指令 和 &gt;&gt; 指令"></a>&gt; 指令 和 &gt;&gt; 指令</h3><p>&gt; 输出重定向和 &gt;&gt; 追加</p>
<ul>
<li>基本语法</li>
</ul>
<ol>
<li>ls -l &gt;文件 （功能描述：列表的内容写入文件 a.txt 中（覆盖写））</li>
<li>ls -al &gt;&gt;文件 （功能描述：列表的内容追加到文件 aa.txt 的末尾）</li>
<li>cat 文件 1 &gt; 文件 2 （功能描述：将文件 1 的内容覆盖到文件 2）</li>
<li>echo “内容”&gt;&gt; 文件 (追加)<ul>
<li><p>应用实例</p>
<p>案例 1: 将 &#x2F;home 目录下的文件列表 写入到 &#x2F;home&#x2F;info.txt 中, 覆盖写入</p>
<p>ls -l &#x2F;home &gt; &#x2F;home&#x2F;info.txt [如果 info.txt 没有，则会创建]案例 2: 将当前日历信息 追加到 &#x2F;home&#x2F;mycal 文件中</p>
<p>指令为： cal &gt;&gt; &#x2F;home&#x2F;mycal</p>
</li>
</ul>
</li>
</ol>
<h3 id="ln-指令"><a href="#ln-指令" class="headerlink" title="ln 指令"></a>ln 指令</h3><p>软链接也称为符号链接，类似于 windows 里的快捷方式，主要存放了链接其他文件的路径</p>
<ul>
<li><p>基本语法</p>
<p>ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 在&#x2F;home 目录下创建一个软连接 myroot，连接到 &#x2F;root 目录</p>
<p>ln -s &#x2F;root &#x2F;home&#x2F;myroot</p>
<p>案例 2: 删除软连接 myroot rm &#x2F;home&#x2F;myroot</p>
</li>
<li><p>细节说明</p>
<p>当我们使用 pwd 指令查看目录时，仍然看到的是软链接所在目录。</p>
</li>
</ul>
</li>
</ul>
<h3 id="history-指令"><a href="#history-指令" class="headerlink" title="history 指令"></a>history 指令</h3><p>查看已经执行过历史命令,也可以执行历史指令</p>
<ul>
<li><p>基本语法</p>
<p>history （功能描述：查看已经执行过历史命令）</p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 显示所有的历史命令</p>
<p>history</p>
<p>案例 2: 显示最近使用过的 10 个指令。</p>
<p>history 10</p>
<p>案例 3：执行历史编号为 5 的指令</p>
<p>!5</p>
</li>
</ul>
</li>
</ul>
<h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><h3 id="date-指令-显示当前日期"><a href="#date-指令-显示当前日期" class="headerlink" title="date 指令-显示当前日期"></a>date 指令-显示当前日期</h3><ul>
<li>基本语法</li>
</ul>
<ol>
<li>date （功能描述：显示当前时间）</li>
<li>date +%Y （功能描述：显示当前年份）</li>
<li>date +%m（功能描述：显示当前月份）</li>
<li>date +%d （功能描述：显示当前是哪一天）</li>
<li>date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</li>
</ol>
<ul>
<li><p>应用实例</p>
<p>案例 1: 显示当前时间信息</p>
<p>date</p>
<p>案例 2: 显示当前时间年月日</p>
<p>date “+%Y-%m-%d”</p>
</li>
</ul>
<p>案例 3: 显示当前时间年月日时分秒</p>
<p>date “+%Y-%m-%d %H:%M:%S”</p>
<h3 id="date-指令-设置日期"><a href="#date-指令-设置日期" class="headerlink" title="date 指令-设置日期"></a>date 指令-设置日期</h3><ul>
<li><p>基本语法</p>
<p>date -s 字符串时间</p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 设置系统当前时间 ， 比如设置成 2020-11-03 20:02:10</p>
<p>date -s “2020-11-03 20:02:10”</p>
</li>
</ul>
</li>
</ul>
<h3 id="cal-指令"><a href="#cal-指令" class="headerlink" title="cal 指令"></a>cal 指令</h3><p>查看日历指令 cal</p>
<ul>
<li><p>基本语法</p>
<p>cal [选项] （功能描述：不加选项，显示本月日历）</p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 显示当前日历 cal</p>
<p>案例 2: 显示 2020 年日历 : cal 2020</p>
</li>
</ul>
</li>
</ul>
<h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><h3 id="find-指令"><a href="#find-指令" class="headerlink" title="find 指令"></a>find 指令</h3><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p>
<ul>
<li><p>基本语法</p>
<p>find [搜索范围] [选项]</p>
</li>
<li><p>选项说明</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621612.jpeg"></p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 按文件名：根据名称查找&#x2F;home 目录下的 hello.txt 文件</p>
<p>find &#x2F;home -name hello.txt</p>
<p>案例 2：按拥有者：查找&#x2F;opt 目录下，用户名称为 nobody 的文件</p>
<p>find &#x2F;opt -user nobody</p>
<p>案例 3：查找整个 linux 系统下大于 200M 的文件（+n 大于 -n 小于 n 等于, 单位有 k,M,G） find &#x2F; -size +200M</p>
</li>
</ul>
<h3 id="locate-指令"><a href="#locate-指令" class="headerlink" title="locate 指令"></a>locate 指令</h3><p>locate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻</p>
<ul>
<li><p>基本语法</p>
<p>locate 搜索文件</p>
</li>
<li><p>特别说明</p>
<p>由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。</p>
</li>
<li><p>应用实例</p>
<p>案例 1: 请使用 locate 指令快速定位 hello.txt 文件所在目录</p>
<p>which 指令，可以查看某个指令在哪个目录下，比如 ls 指令在哪个目录</p>
<p>which ls</p>
</li>
</ul>
<h3 id="grep-指令和-管道符号"><a href="#grep-指令和-管道符号" class="headerlink" title="grep 指令和 管道符号 |"></a>grep 指令和 管道符号 |</h3><p>grep 过滤查找 ， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621613.jpeg"></p>
<ul>
<li><p>基本语法</p>
<p>grep [选项] 查找内容 源文件</p>
</li>
<li><p>常用选项</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621614.jpeg"></p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 请在 hello.txt 文件中，查找 “yes” 所在行，并且显示行号写法 1: cat &#x2F;home&#x2F;hello.txt | grep “yes”</p>
<p>写法 2: grep -n “yes” &#x2F;home&#x2F;hello.txt</p>
</li>
</ul>
<h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><h3 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip&#x2F;gunzip 指令"></a>gzip&#x2F;gunzip 指令</h3><p>gzip 用于压缩文件， gunzip 用于解压的</p>
<ul>
<li><p>基本语法</p>
<p>gzip 文件 （功能描述：压缩文件，只能将文件压缩为*.gz 文件）</p>
<p>gunzip 文件.gz （功能描述：解压缩文件命令）</p>
</li>
<li><p>应用实例</p>
<p>案例 1: gzip 压缩， 将 &#x2F;home 下的 hello.txt 文件进行压缩</p>
</li>
</ul>
<p>gzip &#x2F;home&#x2F;hello.txt</p>
<p>案例 2: gunzip 压缩， 将 &#x2F;home 下的 hello.txt.gz 文件进行解压缩</p>
<p>gunzip &#x2F;home&#x2F;hello.txt.gz</p>
<h3 id="zip-unzip-指令"><a href="#zip-unzip-指令" class="headerlink" title="zip&#x2F;unzip 指令"></a>zip&#x2F;unzip 指令</h3><p>zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621615.jpeg"></p>
<ul>
<li>基本语法</li>
</ul>
<p>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）</p>
<p>unzip [选项] XXX.zip （功能描述：解压缩文件）</p>
<ul>
<li><p>zip 常用选项</p>
<p>-r：递归压缩，即压缩目录</p>
</li>
<li><p>unzip 的常用选项</p>
<p>-d&lt;目录&gt; ：指定解压后文件的存放目录</p>
</li>
<li><p>应用实例</p>
<p>案例 1: 将 &#x2F;home 下的 所有文件&#x2F;文件夹进行压缩成 myhome.zip</p>
<p>zip -r myhome.zip &#x2F;home&#x2F; [将 home 目录及其包含的文件和子文件夹都压缩]案例 2: 将 myhome.zip 解压到 &#x2F;opt&#x2F;tmp 目录下</p>
<p>mkdir &#x2F;opt&#x2F;tmp</p>
<p>unzip -d &#x2F;opt&#x2F;tmp &#x2F;home&#x2F;myhome.zip</p>
</li>
</ul>
<h3 id="tar-指令"><a href="#tar-指令" class="headerlink" title="tar 指令"></a>tar 指令</h3><p>tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件。</p>
<table>
<thead>
<tr>
<th></th>
<th>基本语法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>tar</td>
<td>[选项] XXX.tar.gz</td>
<td>打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz)</td>
</tr>
<tr>
<td></td>
<td>选项说明</td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621616.jpeg"></p>
<ul>
<li><p>应用实例</p>
<p>案例 1: 压缩多个文件，将 &#x2F;home&#x2F;pig.txt 和 &#x2F;home&#x2F;cat.txt 压缩成 pc.tar.gz tar -zcvf pc.tar.gz &#x2F;home&#x2F;pig.txt &#x2F;home&#x2F;cat.txt</p>
<p>案例 2: 将&#x2F;home 的文件夹 压缩成 myhome.tar.gz tar -zcvf myhome.tar.gz &#x2F;home&#x2F;</p>
<p>案例 3: 将 pc.tar.gz 解压到当前目录</p>
<p>tar -zxvf pc.tar.gz</p>
<p>案例4: 将myhome.tar.gz 解压到 &#x2F;opt&#x2F;tmp2 目录下 (1) mkdir &#x2F;opt&#x2F;tmp2 (2) tar -zxvf &#x2F;home&#x2F;myhome.tar.gz -C &#x2F;opt&#x2F;tmp2</p>
</li>
</ul>
<h1 id="第-10-章Linux-实操篇-组管理和权限管理"><a href="#第-10-章Linux-实操篇-组管理和权限管理" class="headerlink" title="第 10 章Linux 实操篇-组管理和权限管理"></a>第 10 章Linux 实操篇-组管理和权限管理</h1><h2 id="Linux-组基本介绍"><a href="#Linux-组基本介绍" class="headerlink" title="Linux 组基本介绍"></a>Linux 组基本介绍</h2><p>在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux 中每个文件有所有者、所在组、其它组的概念。</p>
<ol>
<li>所有者</li>
<li>所在组</li>
<li>其它组</li>
<li>改变用户所在的组</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621617.jpeg"></p>
<h2 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件&#x2F;目录 所有者"></a>文件&#x2F;目录 所有者</h2><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。</p>
<h3 id="查看文件的所有者"><a href="#查看文件的所有者" class="headerlink" title="查看文件的所有者"></a>查看文件的所有者</h3><p>指令：ls –ahl</p>
<p>应用实例</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621618.jpeg"></p>
<ol>
<li><p>修改文件所有者指令：chown 用户名 文件名应用案例</p>
<p>要求：使用 root 创建一个文件 apple.txt ，然后将其所有者修改成 tom chown tom apple.txt</p>
</li>
</ol>
<h2 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><p>groupadd 组名</p>
<h3 id="应用实例-5"><a href="#应用实例-5" class="headerlink" title="应用实例"></a>应用实例</h3><ul>
<li><p>创建一个组, ,monster groupadd monster</p>
</li>
<li><p>创建一个用户 fox ，并放入到 monster 组中</p>
<p>useradd -g monster fox</p>
</li>
</ul>
<h2 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件&#x2F;目录 所在组"></a>文件&#x2F;目录 所在组</h2><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组(默认)。</p>
<h3 id="查看文件-目录所在组"><a href="#查看文件-目录所在组" class="headerlink" title="查看文件&#x2F;目录所在组"></a>查看文件&#x2F;目录所在组</h3><p>基本指令</p>
<p>ls –ahl</p>
<p>应用实例, 使用 fox 来创建一个文件，看看该文件属于哪个组?</p>
<p>-rw-r–r–. 1 fox monster 0 11 月 5 12:50 ok.txt</p>
<h3 id="修改文件-目录所在的组"><a href="#修改文件-目录所在的组" class="headerlink" title="修改文件&#x2F;目录所在的组"></a>修改文件&#x2F;目录所在的组</h3><ul>
<li><p>基本指令</p>
<p>chgrp 组名 文件名</p>
</li>
<li><p>应用实例</p>
<p>使用 root 用户创建文件 orange.txt ,看看当前这个文件属于哪个组，然后将这个文件所在组，修改到 fruit 组。</p>
<ol>
<li>groupadd fruit</li>
<li>touch orange.txt</li>
<li>看看当前这个文件属于哪个组 -&gt; root 组</li>
<li>chgrp fruit orange.txt</li>
</ol>
</li>
</ul>
<h2 id="其它组"><a href="#其它组" class="headerlink" title="其它组"></a>其它组</h2><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p>
<h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用 root 的管理权限可以改变某个用户所在的组。</p>
<h3 id="改变用户所在组-1"><a href="#改变用户所在组-1" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><p>usermod –g 新组名 用户名</p>
<p>usermod –d 目录名 用户名 改变该用户登陆的初始目录。<strong>特别说明</strong>：用户需要有进入到新目录的权限。</p>
<h3 id="应用实例-6"><a href="#应用实例-6" class="headerlink" title="应用实例"></a>应用实例</h3><p>将 zwj 这个用户从原来所在组，修改到 wudang 组</p>
<p>usermod -g wudang zwj</p>
<h2 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h2><p>ls -l 中显示的内容如下：</p>
<p>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p>
<p>0-9 位说明</p>
<p>第 0 位确定文件类型(d, - , l , c , b)</p>
<p><strong>l 是链接，相当于 windows 的快捷方式 d 是目录，相当于 windows 的文件夹 c 是字符设备文件，鼠标，键盘</strong></p>
<p><strong>b 是块设备，比如硬盘</strong></p>
<p>第 1-3 位确定<strong>所有者</strong>（该文件的所有者）拥有该文件的权限。—User</p>
<p>第 4-6 位确定<strong>所属组</strong>（同用户组的）拥有该文件的权限，—Group第 7-9 位确定<strong>其他用户</strong>拥有该文件的权限 —Other</p>
<h2 id="rwx-权限详解，难点"><a href="#rwx-权限详解，难点" class="headerlink" title="rwx 权限详解，难点"></a>rwx 权限详解，难点</h2><h3 id="rwx-作用到文件"><a href="#rwx-作用到文件" class="headerlink" title="rwx 作用到文件"></a>rwx 作用到文件</h3><ol>
<li>[ r ]代表可读(read): 可以读取,查看</li>
<li>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</li>
<li>[ x ]代表可执行(execute):可以被执行</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621619.jpeg"></p>
<h3 id="rwx-作用到目录"><a href="#rwx-作用到目录" class="headerlink" title="rwx 作用到目录"></a>rwx 作用到目录</h3><ol>
<li>[ r ]代表可读(read): 可以读取，ls 查看目录内容</li>
<li>[ w ]代表可写(write): 可以修改, 对目录内创建+删除+重命名目录</li>
<li>[ x ]代表可执行(execute):可以进入该目录</li>
</ol>
<h2 id="文件及目录权限实际案例"><a href="#文件及目录权限实际案例" class="headerlink" title="文件及目录权限实际案例"></a>文件及目录权限实际案例</h2><h3 id="ls-l-中显示的内容如下："><a href="#ls-l-中显示的内容如下：" class="headerlink" title="ls -l 中显示的内容如下："></a>ls -l 中显示的内容如下：</h3><p>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p>
<ul>
<li><p>10 个字符确定不同用户能对文件干什么第一个字符代表文件类型： - l d c b</p>
<p>其余字符每 3 个一组(rwx) 读(r) 写(w) 执行(x)第一组 rwx : 文件拥有者的权限是读、写和执行</p>
<p>第二组 rw- : 与文件拥有者同一组的用户的权限是读、写但不能执行 第三组 r– : 不与文件拥有者同组的其他用户的权限是读不能写和执行</p>
</li>
<li><p>可用数字表示为: r&#x3D;4,w&#x3D;2,x&#x3D;1 因此 rwx&#x3D;4+2+1&#x3D;7 , 数字可以进行组合</p>
</li>
<li><p>其它说明</p>
<p>1 文件：硬连接数或 目录：子目录数</p>
<p>root 用户</p>
<p>root 组</p>
</li>
</ul>
<p>1213 文件大小(字节)，如果是文件夹，显示 4096 字节</p>
<p>Feb 2 09:39 最后修改日期</p>
<p>abc 文件名</p>
<h2 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限-chmod"></a>修改权限-chmod</h2><h3 id="基本说明："><a href="#基本说明：" class="headerlink" title="基本说明："></a>基本说明：</h3><p>通过 chmod 指令，可以修改<strong>文件或者目录</strong>的权限。</p>
<h3 id="第一种方式：-、-、-变更权限"><a href="#第一种方式：-、-、-变更权限" class="headerlink" title="第一种方式：+ 、-、&#x3D; 变更权限"></a>第一种方式：+ 、-、&#x3D; 变更权限</h3><ul>
<li>u:所有者 g:所有组 o:其他人 a:所有人(u、g、o 的总和)<ol>
<li>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件&#x2F;目录名</li>
<li>chmod o+w 文件&#x2F;目录名</li>
<li>chmod a-x 文件&#x2F;目录名</li>
</ol>
</li>
<li>案例演示<ol>
<li><p>给 abc 文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。</p>
<p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;rx abc</p>
</li>
<li><p>给 abc 文件的所有者除去执行的权限，增加组写的权限</p>
<p>chmod u-x,g+w abc</p>
</li>
<li><p>给 abc 文件的所有用户添加读的权限</p>
<p>chmod a+r abc</p>
</li>
</ol>
</li>
</ul>
<h3 id="第二种方式：通过数字变更权限"><a href="#第二种方式：通过数字变更权限" class="headerlink" title="第二种方式：通过数字变更权限"></a>第二种方式：通过数字变更权限</h3><p>r&#x3D;4 w&#x3D;2 x&#x3D;1 rwx&#x3D;4+2+1&#x3D;7 chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件目录名相当于 chmod 751 文件&#x2F;目录名</p>
<ul>
<li><p>案例演示</p>
<p>要求：将 &#x2F;home&#x2F;abc.txt 文件的权限修改成 rwxr-xr-x, 使用给数字的方式实现：</p>
</li>
</ul>
<p>chmod 755 &#x2F;home&#x2F;abc.txt</p>
<h2 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h2><h3 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>chown newowner 文件&#x2F;目录 改变所有者</p>
<p>chown newowner:newgroup 文件&#x2F;目录 改变所有者和所在组</p>
<p><strong>-R</strong> 如果是目录 则使其下所有子文件或目录递归生效</p>
<ul>
<li>案例演示</li>
</ul>
<ol>
<li>请将 &#x2F;home&#x2F;abc.txt 文件的所有者修改成 tom chown tom &#x2F;home&#x2F;abc.txt</li>
<li>请将 &#x2F;home&#x2F;test 目录下所有的文件和目录的所有者都修改成 tom chown -R tom &#x2F;home&#x2F;test</li>
</ol>
<h2 id="修改文件-目录所在组-chgrp"><a href="#修改文件-目录所在组-chgrp" class="headerlink" title="修改文件&#x2F;目录所在组-chgrp"></a>修改文件&#x2F;目录所在组-chgrp</h2><h3 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>chgrp newgroup 文件&#x2F;目录 【 改变所在组】</p>
<h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><p>请将 &#x2F;home&#x2F;abc .txt 文件的所在组修改成 shaolin (少林) groupadd shaolin</p>
<p>chgrp shaolin &#x2F;home&#x2F;abc.txt</p>
<p>请将 &#x2F;home&#x2F;test 目录下所有的文件和目录的所在组都修改成 shaolin(少林) chgrp -R shaolin &#x2F;home&#x2F;test</p>
<h2 id="最佳实践-警察和土匪游戏"><a href="#最佳实践-警察和土匪游戏" class="headerlink" title="最佳实践-警察和土匪游戏"></a>最佳实践-警察和土匪游戏</h2><p><strong>police ， bandit jack, jerry: 警察 xh, xq: 土匪</strong></p>
<ol>
<li><p>创建组 groupadd police ; groupadd bandit</p>
</li>
<li><p>创建用户</p>
<p>useradd -g police jack ; useradd -g police jerry useradd -g bandit xh; useradd -g bandit xq</p>
</li>
<li><p>jack 创建一个文件，自己可以读 r 写 w，本组人可以读，其它组没人任何权限</p>
<p>首先 jack 登录 ； vim jack.txt ; chmod 640 jack.txt</p>
</li>
<li><p>jack 修改该文件，让其它组人可以读, 本组人可以读写</p>
<p>chmod o&#x3D;r,g&#x3D;r jack.txt</p>
</li>
<li><p>xh 投靠 警察，看看是否可以读写. usermod -g police xh</p>
</li>
<li><p>测试，看看 xh 是否可以读写，xq 是否可以, 小结论，就是如果要对目录内的文件进行操作，需要要有对该目录的相应权限</p>
</li>
<li><p>示意图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621620.jpeg"></p>
<h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>练习文件权限管理[课堂练习], 完成如下操作.</p>
<ol>
<li><p>建立两个组（神仙(sx),妖怪(yg)）</p>
</li>
<li><p>建立四个用户(唐僧,悟空，八戒，沙僧)</p>
</li>
<li><p>设置密码</p>
</li>
<li><p>把悟空，八戒放入妖怪 唐僧 沙僧 在神仙</p>
</li>
<li><p>用悟空建立一个文件 （monkey.java 该文件要输出 i am monkey）</p>
</li>
<li><p>给八戒一个可以 r w 的权限</p>
</li>
<li><p>八戒修改 monkey.java 加入一句话( i am pig)</p>
</li>
<li><p>唐僧 沙僧 对该文件没有权限</p>
</li>
<li><p>把 沙僧 放入妖怪组</p>
</li>
<li><p>让沙僧 修改 该文件 monkey, 加入一句话 (“我是沙僧，我是妖怪!”);</p>
</li>
<li><p>对文件夹 rwx 的细节讨论和测试!!! x: 表示可以进入到该目录, 比如 cd r: 表示可以 ls , 将目录的内容显示</p>
<p>w: 表示可以在该目录，删除或者创建文件</p>
</li>
<li><p>示意图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621621.jpeg"></p>
<h2 id="课堂练习-2，完成如下操作"><a href="#课堂练习-2，完成如下操作" class="headerlink" title="课堂练习 2，完成如下操作"></a>课堂练习 2，完成如下操作</h2><ol>
<li>用 root 登录，建立用户 mycentos,自己设定密码</li>
<li>用 mycentos 登录，在主目录下建立目录 test&#x2F;t11&#x2F;t1</li>
<li>在 t1 中建立一个文本文件 aa,用 vi 编辑其内容为 ls –al</li>
<li>改变 aa 的权限为可执行文件[可以将当前日期追加到一个文件],运行该文件.&#x2F;aa</li>
<li>删除新建立的目录 test&#x2F;t11&#x2F;t1</li>
<li>删除用户 mycentos 及其主目录中的内容</li>
<li>将 linux 设置成进入到图形界面的</li>
<li>重新启动 linux 或关机</li>
</ol>
<h1 id="第-11-章Linux-实操篇-定时任务调度"><a href="#第-11-章Linux-实操篇-定时任务调度" class="headerlink" title="第 11 章Linux 实操篇-定时任务调度"></a>第 11 章Linux 实操篇-定时任务调度</h1><h2 id="crond-任务调度"><a href="#crond-任务调度" class="headerlink" title="crond 任务调度"></a>crond 任务调度</h2><p>crontab 进行 定时任务的设置</p>
<h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>任务调度：是指系统在某个时间执行的特定的命令或程序。</p>
<p>任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等个别用户工作：个别用户可能希望执行某些程序，比如对 mysql 数据库的备份。示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621622.jpeg"></p>
<h3 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a>基本语法</h3><p>crontab [选项]</p>
<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621623.jpeg"></p>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>设置任务调度文件：&#x2F;etc&#x2F;crontab</p>
<p>设置个人任务调度。执行 crontab –e 命令。接着输入任务到调度文件</p>
<p>如：*&#x2F;1 * * * * ls –l &#x2F;etc&#x2F; &gt; &#x2F;tmp&#x2F;to.txt</p>
<p>意思说每小时的每分钟执行 ls –l &#x2F;etc&#x2F; &gt; &#x2F;tmp&#x2F;to.txt 命令</p>
<ul>
<li><p>参数细节说明</p>
<p>5 个占位符的说明</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621624.jpeg"></p>
<ul>
<li>特殊符号的说明</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621625.jpeg"></p>
<ul>
<li>特殊时间执行案例</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621626.jpeg"></p>
<h3 id="应用实例-7"><a href="#应用实例-7" class="headerlink" title="应用实例"></a>应用实例</h3><ul>
<li><p>案例 1：每隔 1 分钟，就将当前的日期信息，追加到 &#x2F;tmp&#x2F;mydate 文件中</p>
<p>*&#x2F;1 * * * * date &gt;&gt; &#x2F;tmp&#x2F;mydate</p>
</li>
<li><p>案例 2：每隔 1 分钟， 将当前日期和日历都追加到 &#x2F;home&#x2F;mycal 文件中步骤:</p>
<ol>
<li>vim &#x2F;home&#x2F;my.sh 写入内容 date &gt;&gt; &#x2F;home&#x2F;mycal 和 cal &gt;&gt; &#x2F;home&#x2F;mycal</li>
<li>给 my.sh 增加执行权限，chmod u+x &#x2F;home&#x2F;my.sh</li>
<li>crontab -e 增加 *&#x2F;1 * * * * &#x2F;home&#x2F;my.sh</li>
</ol>
</li>
<li><p>案例 3: 每天凌晨 2:00 将 mysql 数据库 testdb ，备份到文件中。提示: 指令为</p>
<p>mysqldump -u root -p 密码 数据库 &gt; &#x2F;home&#x2F;db.bak</p>
<p>步骤(1) crontab -e</p>
<p>步骤(2) 0 2 * * * mysqldump -u root -proot testdb &gt; &#x2F;home&#x2F;db.bak</p>
</li>
</ul>
<h3 id="crond-相关指令"><a href="#crond-相关指令" class="headerlink" title="crond 相关指令"></a>crond 相关指令</h3><p>conrtab –r：终止任务调度。</p>
<p>crontab –l：列出当前有那些任务调度</p>
<p>service crond restart [重启任务调度]</p>
<h2 id="at-定时任务"><a href="#at-定时任务" class="headerlink" title="at 定时任务"></a>at 定时任务</h2><h3 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol>
<li><p>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行。</p>
</li>
<li><p>默认情况下，atd 守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</p>
</li>
<li><p>at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</p>
</li>
<li><p>在使用 at 命令的时候，一定要保证 atd 进程的启动 , 可以使用相关指令来查看</p>
<p>ps -ef | grep atd &#x2F;&#x2F;可以检测 atd 是否在运行</p>
</li>
<li><p>画一个示意图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621627.jpeg"></p>
<h3 id="at-命令格式"><a href="#at-命令格式" class="headerlink" title="at 命令格式"></a>at 命令格式</h3><p>at [选项] [时间]</p>
<p>Ctrl + D 结束 at 命令的输入， 输出两次</p>
<h3 id="at-命令选项"><a href="#at-命令选项" class="headerlink" title="at 命令选项"></a>at 命令选项</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621628.jpeg"></p>
<h3 id="at-时间定义"><a href="#at-时间定义" class="headerlink" title="at 时间定义"></a>at 时间定义</h3><ul>
<li>at 指定时间的方法：</li>
</ul>
<ol>
<li><p>接受在当天的 hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。 例如：04:00</p>
</li>
<li><p>使用 midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午 4 点）等比较模糊的词语来指定时间。</p>
</li>
<li><p>采用 12 小时计时制，即在时间后面加上 AM（上午）或 PM（下午）来说明是上午还是下午。 例如：12pm</p>
</li>
<li><p>指定命令执行的具体日期，指定格式为 month day（月 日）或 mm&#x2F;dd&#x2F;yy（月&#x2F;日&#x2F;年）或 dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。 例如：04:00 2021-03-1</p>
</li>
<li><p>使用相对计时法。指定格式为：now + count time-units ，now 就是当前时间，time-units 是时间单位，这里能够是 minutes</p>
<p>（分钟）、hours（小时）、days（天）、weeks（星期）。count 是时间的数量，几天，几小时。 例如：now + 5 minutes</p>
</li>
<li><p>直接使用 today（今天）、tomorrow（明天）来指定完成命令的时间。</p>
</li>
</ol>
<h3 id="应用实例-8"><a href="#应用实例-8" class="headerlink" title="应用实例"></a>应用实例</h3><p>案例 1：2 天后的下午 5 点执行 &#x2F;bin&#x2F;ls &#x2F;home</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621629.jpeg"></p>
<p>案例 2：atq 命令来查看系统中没有执行的工作任务</p>
<p>案例 3：明天 17 点钟，输出时间到指定文件内 比如 &#x2F;root&#x2F;date100.log</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621630.jpeg"></p>
<p>案例 4：2 分钟后，输出时间到指定文件内 比如 &#x2F;root&#x2F;date200.log</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621631.jpeg"></p>
<p>案例 5：删除已经设置的任务 , atrm 编号</p>
<p>atrm 4 &#x2F;&#x2F;表示将 job 队列，编号为 4 的 job 删除.</p>
<h1 id="第-12-章Linux-实操篇-Linux-磁盘分区、挂载"><a href="#第-12-章Linux-实操篇-Linux-磁盘分区、挂载" class="headerlink" title="第 12 章Linux 实操篇-Linux 磁盘分区、挂载"></a>第 12 章Linux 实操篇-Linux 磁盘分区、挂载</h1><h2 id="Linux-分区"><a href="#Linux-分区" class="headerlink" title="Linux 分区"></a>Linux 分区</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><ol>
<li><p>Linux 来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构 , Linux</p>
<p>中每个分区都是用来组成整个文件系统的一部分。</p>
</li>
<li><p>Linux 采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p>
</li>
<li><p>示意图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621632.jpeg"></p>
<h3 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h3><ol>
<li>Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘</li>
<li>对于 IDE 硬盘，驱动器标识符为“hdx~”,其中“hd”表明分区所在设备的类型，这里是指 IDE 硬盘了。“x”为盘号（a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）,“~”代表分区，前四个分区用数字 1 到 4 表示，它们是</li>
</ol>
<p>主分区或扩展分区，从 5 开始就是逻辑分区。例，hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区,hdb2表示为第二个 IDE 硬盘上的第二个主分区或扩展分区。</p>
<ol start="3">
<li><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621633.jpeg">对于 SCSI 硬盘则标识为“sdx~”，SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和 IDE 硬盘的表示方法一样</li>
</ol>
<h3 id="查看所有设备挂载情况"><a href="#查看所有设备挂载情况" class="headerlink" title="查看所有设备挂载情况"></a>查看所有设备挂载情况</h3><ul>
<li>命令 ：lsblk 或者 lsblk -f</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621634.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621635.jpeg"></p>
<h2 id="挂载的经典案例"><a href="#挂载的经典案例" class="headerlink" title="挂载的经典案例"></a>挂载的经典案例</h2><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>下面我们以<strong>增加一块硬盘</strong>为例来熟悉下磁盘的相关指令和深入理解磁盘分区、挂载、卸载的概念。</p>
<h3 id="如何增加一块硬盘"><a href="#如何增加一块硬盘" class="headerlink" title="如何增加一块硬盘"></a>如何增加一块硬盘</h3><ol>
<li>虚拟机添加硬盘</li>
<li>分区</li>
<li>格式化</li>
<li>挂载</li>
<li>设置可以自动挂载</li>
</ol>
<h3 id="虚拟机增加硬盘步骤-1"><a href="#虚拟机增加硬盘步骤-1" class="headerlink" title="虚拟机增加硬盘步骤 1"></a>虚拟机增加硬盘步骤 1</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621636.jpeg">在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，至到完成。然后重启系统（才能识别）！</p>
<h3 id="虚拟机增加硬盘步骤-2"><a href="#虚拟机增加硬盘步骤-2" class="headerlink" title="虚拟机增加硬盘步骤 2"></a>虚拟机增加硬盘步骤 2</h3><ul>
<li><p>分区命令 fdisk &#x2F;dev&#x2F;sdb</p>
<p>开始对&#x2F;sdb 分区</p>
<p>m 显示命令列表</p>
<p>p 显示磁盘分区 同 fdisk –l n 新增分区</p>
<p>d 删除分区</p>
<p>w 写入并退出</p>
</li>
<li><p>说明： 开始分区后输入 n，新增分区，然后选择 p ，分区类型为主分区。两次回车默认剩余全部空间。最后输入 w</p>
<p>写入分区并退出，若不保存退出输入 q。</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621637.jpeg"></p>
<h3 id="虚拟机增加硬盘步骤-3"><a href="#虚拟机增加硬盘步骤-3" class="headerlink" title="虚拟机增加硬盘步骤 3"></a>虚拟机增加硬盘步骤 3</h3><ul>
<li><p>格式化磁盘</p>
<p>分区命令:mkfs -t ext4 &#x2F;dev&#x2F;sdb1</p>
<p>其中 ext4 是分区类型</p>
</li>
</ul>
<h3 id="虚拟机增加硬盘步骤-4"><a href="#虚拟机增加硬盘步骤-4" class="headerlink" title="虚拟机增加硬盘步骤 4"></a>虚拟机增加硬盘步骤 4</h3><ul>
<li><p>挂载: 将一个分区与一个目录联系起来，</p>
<p>mount 设备名称 挂载目录</p>
<p>例如： mount &#x2F;dev&#x2F;sdb1 &#x2F;newdisk</p>
</li>
<li><p>umount 设备名称 或者 挂载目录</p>
</li>
</ul>
<p>例如： umount &#x2F;dev&#x2F;sdb1 或者 umount &#x2F;newdisk</p>
<ul>
<li>老师注意: 用命令行挂载,<strong>重启后会失</strong>效</li>
</ul>
<h3 id="虚拟机增加硬盘步骤-5"><a href="#虚拟机增加硬盘步骤-5" class="headerlink" title="虚拟机增加硬盘步骤 5"></a>虚拟机增加硬盘步骤 5</h3><p>永久挂载: 通过修改&#x2F;etc&#x2F;fstab 实现挂载添加完成后 执行 mount –a 即刻生效</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621638.jpeg"></p>
<h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><h3 id="查询系统整体磁盘使用情况"><a href="#查询系统整体磁盘使用情况" class="headerlink" title="查询系统整体磁盘使用情况"></a>查询系统整体磁盘使用情况</h3><ul>
<li><p>基本语法</p>
<p>df -h</p>
</li>
<li><p>应用实例</p>
<p>查询系统整体磁盘使用情况</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621639.jpeg"></p>
<h3 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h3><ul>
<li><p>基本语法</p>
<p>du -h</p>
</li>
<li><p>查询指定目录的磁盘占用情况，默认为当前目录</p>
<p>-s 指定目录占用大小汇总</p>
<p>-h 带计量单位</p>
<p>-a 含文件</p>
<p>--max-depth&#x3D;1 子目录深度</p>
<p>-c 列出明细的同时，增加汇总值</p>
</li>
<li><p>应用实例</p>
<p>查询 &#x2F;opt 目录的磁盘占用情况，深度为 1</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621640.jpeg"></p>
<h2 id="磁盘情况-工作实用指令"><a href="#磁盘情况-工作实用指令" class="headerlink" title="磁盘情况-工作实用指令"></a>磁盘情况-工作实用指令</h2><ol>
<li><p>统计&#x2F;opt 文件夹下文件的个数</p>
<p>ls -l &#x2F;opt | grep “^-“ | wc -l</p>
</li>
<li><p>统计&#x2F;opt 文件夹下目录的个数</p>
<p>ls -l &#x2F;opt | grep “^d” | wc -l</p>
</li>
<li><p>统计&#x2F;opt 文件夹下文件的个数，包括子文件夹里的</p>
</li>
</ol>
<p>ls -lR &#x2F;opt | grep “^-“ | wc -l</p>
<ol start="4">
<li><p>统计&#x2F;opt 文件夹下目录的个数，包括子文件夹里的</p>
<p>ls -lR &#x2F;opt | grep “^d” | wc -l</p>
</li>
<li><p>以树状显示目录结构 tree 目录 ， 注意，如果没有 tree ,则使用 <strong>yum install tree</strong> 安装</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621641.jpeg"></p>
<h1 id="第-13-章Linux-实操篇-网络配置"><a href="#第-13-章Linux-实操篇-网络配置" class="headerlink" title="第 13 章Linux 实操篇-网络配置"></a>第 13 章Linux 实操篇-网络配置</h1><h2 id="Linux-网络配置原理图"><a href="#Linux-网络配置原理图" class="headerlink" title="Linux 网络配置原理图"></a>Linux 网络配置原理图</h2><h3 id="画出原理图，帮助理解"><a href="#画出原理图，帮助理解" class="headerlink" title="画出原理图，帮助理解"></a>画出原理图，帮助理解</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621642.jpeg"></p>
<h2 id="查看网络IP-和网关"><a href="#查看网络IP-和网关" class="headerlink" title="查看网络IP 和网关"></a>查看网络IP 和网关</h2><h3 id="查看虚拟网络编辑器和修改IP-地址"><a href="#查看虚拟网络编辑器和修改IP-地址" class="headerlink" title="查看虚拟网络编辑器和修改IP 地址"></a>查看虚拟网络编辑器和修改IP 地址</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621643.png"></p>
<h3 id="查看网关"><a href="#查看网关" class="headerlink" title="查看网关"></a>查看网关</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621644.jpeg"></p>
<h2 id="查看-windows-环境的中-VMnet8-网络配置-ipconfig-指令"><a href="#查看-windows-环境的中-VMnet8-网络配置-ipconfig-指令" class="headerlink" title="查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)"></a>查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621645.jpeg"></p>
<h2 id="查看-linux-的网络配置-ifconfig"><a href="#查看-linux-的网络配置-ifconfig" class="headerlink" title="查看 linux 的网络配置 ifconfig"></a>查看 linux 的网络配置 ifconfig</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621646.jpeg"></p>
<h2 id="ping-测试主机之间网络连通性"><a href="#ping-测试主机之间网络连通性" class="headerlink" title="ping 测试主机之间网络连通性"></a>ping 测试主机之间网络连通性</h2><h3 id="基本语法-7"><a href="#基本语法-7" class="headerlink" title="基本语法"></a>基本语法</h3><p>ping 目的主机 （功能描述：测试当前服务器是否可以连接目的主机）</p>
<h3 id="应用实例-9"><a href="#应用实例-9" class="headerlink" title="应用实例"></a>应用实例</h3><p>测试当前服务器是否可以连接百度</p>
<p>ping <a href="http://www.baidu.com/">www.baidu.com</a></p>
<h2 id="linux-网络环境配置"><a href="#linux-网络环境配置" class="headerlink" title="linux 网络环境配置"></a>linux 网络环境配置</h2><h3 id="第一种方法-自动获取-："><a href="#第一种方法-自动获取-：" class="headerlink" title="第一种方法(自动获取)："></a>第一种方法(自动获取)：</h3><p>说明：登陆后，通过界面的来设置自动获取ip，特点：linux 启动后会自动获取 IP,缺点是每次自动获取的 ip 地址可能不一样</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621647.jpeg"></p>
<h3 id="第二种方法-指定ip"><a href="#第二种方法-指定ip" class="headerlink" title="第二种方法(指定ip)"></a>第二种方法(指定ip)</h3><ul>
<li><p>说明</p>
<p>直接修改配置文件来指定 IP,并可以连接到外网(程序员推荐)</p>
</li>
<li><p><strong>编辑 vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</strong></p>
<p>要求：将 ip 地址配置的静态的，比如: ip 地址为 192.168.200.130</p>
</li>
</ul>
<p>ifcfg-ens33 文件说明</p>
<p>DEVICE&#x3D;eth0 #接口名（设备,网卡） HWADDR&#x3D;00:0C:2x:6x:0x:xx #MAC 地址</p>
<p>TYPE&#x3D;Ethernet #网络类型（通常是 Ethemet） UUID&#x3D;926a57ba-92c6-4231-bacb-f27e5e6a9f44 #随机 id</p>
<p>#系统启动的时候网络接口是否有效（yes&#x2F;no） ONBOOT&#x3D;yes</p>
<p># IP 的配置方法[none|static|bootp|dhcp]（引导时不使用协议|静态分配 IP|BOOTP 协议|DHCP 协议）</p>
<p><strong>BOOTPROTO&#x3D;static #IP 地址</strong></p>
<p><strong>IPADDR&#x3D;192.168.200.130</strong></p>
<p><strong>#网关 GATEWAY&#x3D;192.168.200.2</strong></p>
<p><strong>#域名解析器 DNS1&#x3D;192.168.200.2</strong></p>
<ul>
<li><p>重启网络服务或者重启系统生效</p>
<p>service network restart 、reboot</p>
</li>
</ul>
<h2 id="设置主机名和hosts-映射"><a href="#设置主机名和hosts-映射" class="headerlink" title="设置主机名和hosts 映射"></a>设置主机名和hosts 映射</h2><h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><ol>
<li>为了方便记忆，可以给 <strong>linux 系统设置主机名</strong>, 也可以根据需要修改主机名</li>
<li>指令 hostname ： 查看主机名</li>
<li>修改文件在 <strong>&#x2F;etc&#x2F;hostname</strong> 指定</li>
<li>修改后，<strong>重启</strong>生效</li>
</ol>
<h3 id="设置hosts-映射"><a href="#设置hosts-映射" class="headerlink" title="设置hosts 映射"></a>设置hosts 映射</h3><p>思考：如何通过 主机名能够找到(比如 ping) 某个 linux 系统?</p>
<ul>
<li><p>windows</p>
<p>在 <strong>C:\Windows\System32\drivers\etc\hosts</strong> 文件指定即可案例: 192.168.200.130 hspedu100</p>
</li>
<li><p>linux</p>
<p>在 <strong>&#x2F;etc&#x2F;hosts</strong> 文件 指定</p>
</li>
</ul>
<p>案例: 192.168.200.1 ThinkPad-PC</p>
<h2 id="主机名解析过程分析-Hosts、DNS"><a href="#主机名解析过程分析-Hosts、DNS" class="headerlink" title="主机名解析过程分析(Hosts、DNS)"></a>主机名解析过程分析(Hosts、DNS)</h2><h3 id="Hosts-是什么"><a href="#Hosts-是什么" class="headerlink" title="Hosts 是什么"></a>Hosts 是什么</h3><p>一个文本文件，用来**记录 IP 和 Hostname(主机名)**的映射关系</p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><strong>DNS</strong>，就是 <strong>Domain Name System</strong> 的缩写，翻译过来就是域名系统是互联网上作为域名和 IP 地址相互映射的一个<strong>分布式数据</strong>库</p>
<h3 id="应用实例-用户在浏览器输入了www-baidu-com"><a href="#应用实例-用户在浏览器输入了www-baidu-com" class="headerlink" title="应用实例: 用户在浏览器输入了www.baidu.com"></a>应用实例: 用户在浏览器输入了<a href="http://www.baidu.com/">www.baidu.com</a></h3><ol>
<li><p>浏览器先检查浏览器缓存中有没有该域名解析 IP 地址，有就先调用这个 IP 完成解析；如果没有，就检查 DNS 解析器缓存，如果有直接返回 IP 完成解析。这两个缓存，可以理解为 本地解析器缓存</p>
</li>
<li><p>一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存他的 IP 地址（DNS 解析记录）.如 在 cmd 窗口中输入</p>
<p>ipconfig &#x2F;displaydns &#x2F;&#x2F;DNS 域名解析缓存</p>
<p>ipconfig &#x2F;flushdns &#x2F;&#x2F;手动清理 dns 缓存</p>
</li>
<li><p>如果本地解析器缓存没有找到对应映射，检查系统中 hosts 文件中有没有配置对应的域名 IP 映射，如果有，则完成解析并返回。</p>
</li>
<li><p>如果 本地 DNS 解析器缓存 和 hosts 文件 中均没有找到对应的 IP，则到域名服务 DNS 进行解析域</p>
</li>
<li><p>示意图</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621648.jpeg"></p>
<h1 id="第-14-章Linux-实操篇-进程管理-重点"><a href="#第-14-章Linux-实操篇-进程管理-重点" class="headerlink" title="第 14 章Linux 实操篇-进程管理(重点)"></a>第 14 章Linux 实操篇-进程管理(重点)</h1><h2 id="基本介绍-8"><a href="#基本介绍-8" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol>
<li>在 LINUX 中，每个执行的程序都称为一个进程。每一个进程都分配一个 ID 号(pid,进程号)。&#x3D;&gt;windows &#x3D;&gt; linux</li>
<li>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</li>
<li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621649.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621650.jpeg"></p>
<h2 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h2><h3 id="基本介绍-9"><a href="#基本介绍-9" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>ps 命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数.</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621651.jpeg"></p>
<h3 id="ps-详解"><a href="#ps-详解" class="headerlink" title="ps 详解"></a>ps 详解</h3><ol>
<li>指令：ps –aux|grep xxx ，比如我看看有没有 sshd 服务</li>
<li>指令说明<ul>
<li><p>System V 展示风格</p>
</li>
<li><p>USER：用户名称</p>
</li>
<li><p>PID：进程号</p>
</li>
<li><p>%CPU：进程占用 CPU 的百分比</p>
</li>
<li><p>%MEM：进程占用物理内存的百分比</p>
</li>
<li><p>VSZ：进程占用的虚拟内存大小（单位：KB）</p>
</li>
<li><p>RSS：进程占用的物理内存大小（单位：KB）</p>
</li>
<li><p>TT：终端名称,缩写 .</p>
</li>
<li><p>STAT：进程状态，其中 S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-</p>
<p>正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</p>
</li>
<li><p>STARTED：进程的启动时间</p>
</li>
<li><p>TIME：CPU 时间，即进程使用 CPU 的总时间</p>
</li>
<li><p>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</p>
</li>
</ul>
</li>
</ol>
<h3 id="应用实例-10"><a href="#应用实例-10" class="headerlink" title="应用实例"></a>应用实例</h3><ul>
<li><p>要求：以全格式显示当前所有的进程，查看进程的父进程。 查看 sshd 的父进程信息</p>
<p>ps -ef 是以全格式显示当前所有的进程</p>
<p>-e 显示所有进程。-f 全格式</p>
<p>ps -ef|grep sshd</p>
<ul>
<li><p>是 BSD 风格 UID：用户 ID PID：进程 ID PPID：父进程 ID</p>
<p>C：CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I&#x2F;O 密集型运算，执行优先级会提高</p>
<p>STIME：进程启动的时间 TTY：完整的终端名称 TIME：CPU 时间</p>
<p>CMD：启动进程所用的命令和参数</p>
</li>
</ul>
</li>
</ul>
<h2 id="终止进程kill-和-killall"><a href="#终止进程kill-和-killall" class="headerlink" title="终止进程kill 和 killall"></a>终止进程kill 和 killall</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍:"></a>介绍:</h3><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用 kill 命令来完成此项任务。</p>
<h3 id="基本语法-8"><a href="#基本语法-8" class="headerlink" title="基本语法"></a>基本语法</h3><p>kill [选项] 进程号（功能描述：通过进程号杀死&#x2F;终止进程）</p>
<p>killall 进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p>
<h3 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h3><p>-9 :表示强迫进程立即停止</p>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol>
<li><p>案例 1：踢掉某个非法登录用户 kill 进程号 , 比如 kill 11421</p>
</li>
<li><p>案例 2: 终止远程登录服务 sshd, 在适当时候再次重启 sshd 服务</p>
<p>kill sshd 对应的进程号; &#x2F;bin&#x2F;systemctl start sshd.service</p>
</li>
<li><p>案例 3: 终止多个 gedit , 演示 killall gedit</p>
</li>
<li><p>案例 4：强制杀掉一个终端, 指令 kill -9 bash 对应的进程号</p>
</li>
</ol>
<h2 id="查看进程树-pstree"><a href="#查看进程树-pstree" class="headerlink" title="查看进程树 pstree"></a>查看进程树 pstree</h2><h3 id="基本语法-9"><a href="#基本语法-9" class="headerlink" title="基本语法"></a>基本语法</h3><p>pstree [选项] ,可以更加直观的来看进程信息</p>
<h3 id="常用选项-2"><a href="#常用选项-2" class="headerlink" title="常用选项"></a>常用选项</h3><p>-p :显示进程的 PID</p>
<p>-u :显示进程的所属用户</p>
<h3 id="应用实例："><a href="#应用实例：" class="headerlink" title="应用实例："></a>应用实例：</h3><ul>
<li>案例 1：请你树状的形式显示进程的 pid pstree -p</li>
<li>案例 2：请你树状的形式进程的用户 pstree -u</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621652.jpeg"></p>
<h2 id="服务-service-管理"><a href="#服务-service-管理" class="headerlink" title="服务(service)管理"></a>服务(service)管理</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍:"></a>介绍:</h3><p>服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysqld , sshd</p>
<p>防火墙等)，因此我们又称为守护进程，是 Linux 中非常重要的知识点。【原理图】</p>
<h3 id="service-管理指令"><a href="#service-管理指令" class="headerlink" title="service 管理指令"></a>service 管理指令</h3><ol>
<li>service 服务名 [start | stop | restart | reload | status]</li>
<li>在 CentOS7.0 后 很多服务不再使用 service ,而是 systemctl (后面专门讲)</li>
<li>service 指令管理的服务在 &#x2F;etc&#x2F;init.d 查看</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621653.jpeg"></p>
<h3 id="service-管理指令案例"><a href="#service-管理指令案例" class="headerlink" title="service 管理指令案例"></a>service 管理指令案例</h3><p>请使用 service 指令，查看，关闭，启动 network [注意：在虚拟系统演示，因为网络连接会关闭]</p>
<p>指令:</p>
<p>service network status service network stop service network start</p>
<h3 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名:"></a>查看服务名:</h3><ul>
<li><p>方式 1：使用 setup -&gt; 系统服务 就可以看到全部。</p>
<p>setup</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621654.jpeg"></p>
<ul>
<li><p>方式 2: &#x2F;etc&#x2F;init.d 看到 service 指令管理的服务</p>
<p>ls -l &#x2F;etc&#x2F;init.d</p>
</li>
</ul>
<h3 id="服务的运行级别-runlevel"><a href="#服务的运行级别-runlevel" class="headerlink" title="服务的运行级别(runlevel):"></a>服务的运行级别(runlevel):</h3><ul>
<li><p>Linux 系统有 7 种运行级别(runlevel)：常用的是<strong>级别 3 和 5</strong></p>
<p>运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆</p>
<p>运行级别 2：多用户状态(没有 NFS)，不支持网络</p>
<p>运行级别 3：完全的多用户状态(有 NFS)，无界面，登陆后进入控制台命令行模式运行级别 4：系统未使用，保留</p>
<p>运行级别 5：X11 控制台，登陆后进入图形 GUI 模式</p>
<p>运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动</p>
</li>
<li><p>开机的流程说明：</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621655.jpeg"></p>
<h3 id="CentOS7-后运行级别说明-1"><a href="#CentOS7-后运行级别说明-1" class="headerlink" title="CentOS7 后运行级别说明"></a>CentOS7 后运行级别说明</h3><p>在 &#x2F;etc&#x2F;initab</p>
<p>进行了简化 ，如下:</p>
<p><strong>multi-user.target: analogous to runlevel 3</strong> graphical.target: analogous to runlevel 5 init 0</p>
<p># To view current default target, run:</p>
<p>systemctl get-default</p>
<p># To set a default target, run:</p>
<p>systemctl set-default TARGET.target</p>
<h3 id="chkconfig-指令"><a href="#chkconfig-指令" class="headerlink" title="chkconfig 指令"></a>chkconfig 指令</h3><ul>
<li><p>介绍</p>
<p>通过 chkconfig 命令可以给服务的各个运行级别设置自 启动&#x2F;关闭</p>
<p>chkconfig 指令管理的服务在 &#x2F;etc&#x2F;init.d 查看</p>
<p>注意: Centos7.0 后，很多服务使用 systemctl 管理 (后面马上讲)</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621656.jpeg"></p>
<ul>
<li>chkconfig 基本语法</li>
</ul>
<ol>
<li>查看服务 chkconfig –list [| grep xxx]</li>
<li>chkconfig 服务名 –list</li>
<li>chkconfig –level 5 服务名 on&#x2F;off</li>
</ol>
<ul>
<li><p>案例演示 : 对 network 服务 进行各种操作, 把 network 在 3 运行级别,关闭自启动</p>
<p>chkconfig –level 3 network off chkconfig –level 3 network on</p>
<ul>
<li><p>使用细节</p>
<p>chkconfig 重新设置服务后自启动或关闭，需要重启机器 reboot 生效.</p>
</li>
</ul>
</li>
</ul>
<h3 id="systemctl-管理指令"><a href="#systemctl-管理指令" class="headerlink" title="systemctl 管理指令"></a>systemctl 管理指令</h3><p>基本语法： systemctl [start | stop | restart | status] 服务名</p>
<p>systemctl 指令管理的服务在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 查看</p>
<h3 id="systemctl-设置服务的自启动状态"><a href="#systemctl-设置服务的自启动状态" class="headerlink" title="systemctl 设置服务的自启动状态"></a>systemctl 设置服务的自启动状态</h3><p>systemctl list-unit-files [ | grep 服务名] (查看服务开机启动状态, grep 可以进行过滤) systemctl enable 服务名 (设置服务开机启动)</p>
<p>systemctl disable 服务名 (关闭服务开机启动)</p>
<p>systemctl is-enabled 服务名 (查询某个服务是否是自启动的)</p>
<h3 id="应用案例："><a href="#应用案例：" class="headerlink" title="应用案例："></a>应用案例：</h3><p>查看当前防火墙的状况，关闭防火墙和重启防火墙。&#x3D;&gt; firewalld.service systemctl status firewalld; systemctl stop firewalld; systemctl start firewalld</p>
<h3 id="细节讨论："><a href="#细节讨论：" class="headerlink" title="细节讨论："></a>细节讨论：</h3><p>关闭或者启用防火墙后，立即生效。[telnet 测试 某个端口即可]</p>
<p>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</p>
<p>如果希望设置某个服务自启动或关闭永久生效，要使用 systemctl [enable|disable] 服务名 . [演示]</p>
<h3 id="打开或者关闭指定端口"><a href="#打开或者关闭指定端口" class="headerlink" title="打开或者关闭指定端口"></a>打开或者关闭指定端口</h3><p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这时，需要打开指定的端口。比如 80、22、8080 等，这个又怎么做呢？老韩给给大家讲一讲。[示意图]</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621657.jpeg"></p>
<h3 id="firewall-指令"><a href="#firewall-指令" class="headerlink" title="firewall 指令"></a>firewall 指令</h3><ol>
<li>打开端口: firewall-cmd –permanent –add-port&#x3D;端口号&#x2F;协议</li>
<li>关闭端口: firewall-cmd –permanent –remove-port&#x3D;端口号&#x2F;协议</li>
<li>重新载入,才能生效 : firewall-cmd –reload</li>
<li>查询端口是否开放: firewall-cmd –query-port&#x3D;端口&#x2F;协议</li>
</ol>
<h3 id="应用案例：-1"><a href="#应用案例：-1" class="headerlink" title="应用案例："></a>应用案例：</h3><ol>
<li><p>启用防火墙， 测试 111 端口是否能 telnet , 不行</p>
</li>
<li><p>开放 111 端口</p>
<p>firewall-cmd –permanent –add-port&#x3D;111&#x2F;tcp ; 需要 firewall-cmd –reload</p>
</li>
<li><p>再次关闭 111 端口</p>
</li>
</ol>
<p>firewall-cmd –permanent –remove-port&#x3D;111&#x2F;tcp ; 需要 firewall-cmd –reload</p>
<h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>top 与 ps 命令很相似。它们都用来显示正在执行的进程。Top 与 ps 最大的不同之处，在于 top 在执行一段时间可以更新正在运行的的进程。</p>
<h3 id="基本语法-10"><a href="#基本语法-10" class="headerlink" title="基本语法"></a>基本语法</h3><p>top [选项]</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621658.jpeg"></p>
<h3 id="选项说明："><a href="#选项说明：" class="headerlink" title="选项说明："></a>选项说明：</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621659.jpeg"></p>
<h3 id="交互操作说明："><a href="#交互操作说明：" class="headerlink" title="交互操作说明："></a>交互操作说明：</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621660.jpeg"></p>
<h3 id="应用实例-11"><a href="#应用实例-11" class="headerlink" title="应用实例"></a>应用实例</h3><ul>
<li><p>案例 1.监视特定用户, 比如我们监控 tom 用户 top：输入此命令，按回车键，查看执行的进程。 u：然后输入“u”回车，再输入用户名，即可,</p>
</li>
<li><p>案例 2：终止指定的进程, 比如我们要结束 tom 登录 top：输入此命令，按回车键，查看执行的进程。 k：然后输入“k”回车，再输入要结束的进程 ID 号</p>
</li>
<li><p>案例 3:指定系统状态更新的时间(每隔 10 秒自动更新), 默认是 3 秒</p>
<p>top -d 10</p>
</li>
</ul>
<h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><h3 id="查看系统网络情况netstat"><a href="#查看系统网络情况netstat" class="headerlink" title="查看系统网络情况netstat"></a>查看系统网络情况netstat</h3><ul>
<li><p>基本语法</p>
<p>netstat [选项]</p>
</li>
<li><p>选项说明</p>
<p>-an 按一定顺序排列输出</p>
<p>-p 显示哪个进程在调用</p>
</li>
<li><p>应用案例</p>
<p>请查看服务名为 sshd 的服务的信息。</p>
<p>netstat -anp | grep sshd</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621661.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621662.jpeg"></p>
<h3 id="检测主机连接命令ping："><a href="#检测主机连接命令ping：" class="headerlink" title="检测主机连接命令ping："></a>检测主机连接命令ping：</h3><p>是一种网络检测工具，它主要是用检测远程主机是否正常，或是两部主机间的网线或网卡故障。如: ping 对方 ip 地址</p>
<h1 id="第-15-章Linux-实操篇-RPM-与-YUM"><a href="#第-15-章Linux-实操篇-RPM-与-YUM" class="headerlink" title="第 15 章Linux 实操篇-RPM 与 YUM"></a>第 15 章Linux 实操篇-RPM 与 YUM</h1><h2 id="rpm-包的管理"><a href="#rpm-包的管理" class="headerlink" title="rpm 包的管理"></a>rpm 包的管理</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM 扩展名的文件。RPM是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 windows 的 setup.exe，这一文件格式名称虽然打上了 RedHat 的标志，但理念是通用的。</p>
<p>Linux 的分发版本都有采用（suse,redhat, centos 等等），可以算是公认的行业标准了。</p>
<h3 id="rpm-包的简单查询指令"><a href="#rpm-包的简单查询指令" class="headerlink" title="rpm 包的简单查询指令"></a>rpm 包的简单查询指令</h3><p>查询已安装的 rpm 列表 rpm –qa|grep xx举例： 看看当前系统，是否安装了 firefox指令: rpm -qa | grep firefox</p>
<h3 id="rpm-包名基本格式"><a href="#rpm-包名基本格式" class="headerlink" title="rpm 包名基本格式"></a>rpm 包名基本格式</h3><p>一个 rpm 包名：firefox-60.2.2-1.el7.centos.x86_64名称:firefox</p>
<p>版本号：60.2.2-1</p>
<p>适用操作系统: el7.centos.x86_64</p>
<p>表示 centos7.x 的 64 位系统</p>
<p>如果是 i686、i386 表示 32 位系统，noarch 表示通用</p>
<h3 id="rpm-包的其它查询指令："><a href="#rpm-包的其它查询指令：" class="headerlink" title="rpm 包的其它查询指令："></a>rpm 包的其它查询指令：</h3><p>rpm -qa :查询所安装的所有 rpm 软件包</p>
<p>rpm -qa | more</p>
<p>rpm -qa | grep X [rpm -qa | grep firefox ]</p>
<p>rpm -q 软件包名 :查询软件包是否安装案例：rpm -q firefox</p>
<p>rpm -qi 软件包名 ：查询软件包信息案例: rpm -qi firefox</p>
<p>rpm -ql 软件包名 :查询软件包中的文件比如： rpm -ql firefox</p>
<p>rpm -qf 文件全路径名 查询文件所属的软件包</p>
<p>rpm -qf &#x2F;etc&#x2F;passwd rpm -qf &#x2F;root&#x2F;install.log</p>
<h3 id="卸载rpm-包："><a href="#卸载rpm-包：" class="headerlink" title="卸载rpm 包："></a>卸载rpm 包：</h3><ul>
<li><p>基本语法</p>
<p>rpm -e RPM 包的名称 &#x2F;&#x2F;erase</p>
</li>
<li><p>应用案例</p>
<p>删除 firefox 软件包</p>
<p>rpm -e firefox</p>
</li>
<li><p>细节讨论</p>
</li>
</ul>
<ol>
<li><p>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。如： $ rpm -e foo</p>
<p>removing these packages would break dependencies:foo is needed by bar-1.0-1</p>
</li>
<li><p>如果我们就是要删除 foo 这个 rpm 包，可以增加参数 –nodeps ,就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行</p>
<p>如：$ rpm -e –nodeps foo</p>
</li>
</ol>
<h3 id="安装rpm-包"><a href="#安装rpm-包" class="headerlink" title="安装rpm 包"></a>安装rpm 包</h3><ul>
<li><p>基本语法</p>
<p>rpm -ivh RPM 包全路径名称</p>
</li>
<li><p>参数说明</p>
<p>i&#x3D;install 安装 v&#x3D;verbose 提示 h&#x3D;hash 进度条</p>
</li>
<li><p>应用实例</p>
<p>演示卸载和安装 firefox 浏览器</p>
<p>rpm -e firefox rpm -ivh firefox</p>
</li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621663.jpeg">Yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动 下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。示意图</p>
<h3 id="yum-的基本指令"><a href="#yum-的基本指令" class="headerlink" title="yum 的基本指令"></a>yum 的基本指令</h3><p>查询 yum 服务器是否有需要安装的软件</p>
<p>yum list|grep xx 软件列表</p>
<h3 id="安装指定的yum-包"><a href="#安装指定的yum-包" class="headerlink" title="安装指定的yum 包"></a>安装指定的yum 包</h3><p>yum install xxx 下载安装</p>
<h3 id="yum-应用实例："><a href="#yum-应用实例：" class="headerlink" title="yum 应用实例："></a>yum 应用实例：</h3><p>案例：请使用 yum 的方式来安装 firefox rpm -e firefox</p>
<p>yum list | grep firefox yum install firefox</p>
<h1 id="第-16-章Linux-之-JavaEE-定制篇-搭建-JavaEE-环境"><a href="#第-16-章Linux-之-JavaEE-定制篇-搭建-JavaEE-环境" class="headerlink" title="第 16 章Linux 之 JavaEE 定制篇-搭建 JavaEE 环境"></a>第 16 章Linux 之 JavaEE 定制篇-搭建 JavaEE 环境</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>如果需要在 Linux 下进行 JavaEE 的开发，我们需要安装如下软件</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621664.jpeg"></p>
<h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol>
<li>mkdir &#x2F;opt&#x2F;jdk</li>
<li>通过 xftp6 上传到 &#x2F;opt&#x2F;jdk 下</li>
<li>cd &#x2F;opt&#x2F;jdk</li>
<li>解压 tar -zxvf jdk-8u261-linux-x64.tar.gz</li>
<li>mkdir &#x2F;usr&#x2F;local&#x2F;java</li>
<li>mv &#x2F;opt&#x2F;jdk&#x2F;jdk1.8.0_261 &#x2F;usr&#x2F;local&#x2F;java</li>
<li>配置环境变量的配置文件 vim &#x2F;etc&#x2F;profile</li>
<li>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_261</li>
<li>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</li>
<li>source &#x2F;etc&#x2F;profile [让新的环境变量生效]</li>
</ol>
<h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><p>编写一个简单的 Hello.java 输出”hello,world!”</p>
<h2 id="tomcat-的安装"><a href="#tomcat-的安装" class="headerlink" title="tomcat 的安装"></a>tomcat 的安装</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤 :"></a>步骤 :</h3><ol>
<li>上传安装文件，并解压缩到&#x2F;opt&#x2F;tomcat</li>
<li>进入解压目录&#x2F;bin , 启动 tomcat .&#x2F;startup.sh</li>
<li>开放端口 8080 , 回顾 firewall-cmd</li>
</ol>
<h3 id="测试是否安装成功："><a href="#测试是否安装成功：" class="headerlink" title="测试是否安装成功："></a>测试是否安装成功：</h3><p>在 windows、Linux 下 访问 <a href="http://linuxip:8080/">http://linuxip:8080</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621665.jpeg"></p>
<h2 id="idea2020-的安装"><a href="#idea2020-的安装" class="headerlink" title="idea2020 的安装"></a>idea2020 的安装</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>下载地址: https:&#x2F;&#x2F;<a href="http://www.jetbrains.com/idea/download/#section%3Dwindows">www.jetbrains.com/idea/download/#section&#x3D;windows</a></li>
<li>解压缩到&#x2F;opt&#x2F;idea</li>
<li>启动 idea bin 目录下 .&#x2F;idea.sh，配置 jdk</li>
<li>编写 Hello world 程序并测试成功！</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621666.jpeg"></p>
<h2 id="mysql5-7-的安装"><a href="#mysql5-7-的安装" class="headerlink" title="mysql5.7 的安装(!!)"></a>mysql5.7 的安装(!!)</h2><ol>
<li>安装的步骤和文档</li>
<li>相关的安装软件, 已经准备好了</li>
<li>安装看老师演示-文档</li>
</ol>
<h1 id="第-17-章大数据定制篇-Shell-编程"><a href="#第-17-章大数据定制篇-Shell-编程" class="headerlink" title="第 17 章大数据定制篇-Shell 编程"></a>第 17 章大数据定制篇-Shell 编程</h1><h2 id="为什么要学习Shell-编程"><a href="#为什么要学习Shell-编程" class="headerlink" title="为什么要学习Shell 编程"></a>为什么要学习Shell 编程</h2><ol>
<li>Linux 运维工程师在进行服务器集群管理时，需要编写 Shell 程序来进行服务器管理。</li>
<li>对于 JavaEE 和 Python 程序员来说，工作的需要，你的老大会要求你编写一些 Shell 脚本进行程序或者是服务器的维护，比如编写一个定时备份数据库的脚本。</li>
<li>对于大数据程序员来说，需要编写 Shell 程序来管理集群</li>
</ol>
<h2 id="Shell-是什么"><a href="#Shell-是什么" class="headerlink" title="Shell 是什么"></a>Shell 是什么</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621667.jpeg">Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。看一个示意图</p>
<h2 id="Shell-脚本的执行方式"><a href="#Shell-脚本的执行方式" class="headerlink" title="Shell 脚本的执行方式"></a>Shell 脚本的执行方式</h2><h3 id="脚本格式要求"><a href="#脚本格式要求" class="headerlink" title="脚本格式要求"></a>脚本格式要求</h3><ol>
<li>脚本以#!&#x2F;bin&#x2F;bash 开头</li>
<li>脚本需要有可执行权限</li>
</ol>
<h3 id="编写第一个Shell-脚本"><a href="#编写第一个Shell-脚本" class="headerlink" title="编写第一个Shell 脚本"></a>编写第一个Shell 脚本</h3><ul>
<li><p>需求说明：创建一个 Shell 脚本，输出 hello world! vim hello.sh</p>
<p>#!&#x2F;bin&#x2F;bash</p>
<p>echo “hello,world~“</p>
</li>
</ul>
<h3 id="脚本的常用执行方式"><a href="#脚本的常用执行方式" class="headerlink" title="脚本的常用执行方式"></a>脚本的常用执行方式</h3><ul>
<li><p>方式 1(输入脚本的绝对路径或相对路径)</p>
<p>说明：首先要赋予 helloworld.sh 脚本的+x 权限， 再执行脚本比如 .&#x2F;hello.sh 或者使用绝对路径 &#x2F;root&#x2F;shcode&#x2F;hello.sh</p>
</li>
<li><p>方式 2(sh+脚本)</p>
<p>说明：不用赋予脚本+x 权限，直接执行即可。比如 sh hello.sh , 也可以使用绝对路径</p>
</li>
</ul>
<h2 id="Shell-的变量"><a href="#Shell-的变量" class="headerlink" title="Shell 的变量"></a>Shell 的变量</h2><h3 id="Shell-变量介绍"><a href="#Shell-变量介绍" class="headerlink" title="Shell 变量介绍"></a>Shell 变量介绍</h3><ol>
<li>Linux Shell 中的变量分为，系统变量和用户自定义变量。</li>
<li>系统变量：$HOME、$PWD、$SHELL、$USER 等等，比如： echo $HOME 等等..</li>
<li>显示当前 shell 中所有变量：set</li>
</ol>
<h3 id="shell-变量的定义"><a href="#shell-变量的定义" class="headerlink" title="shell 变量的定义"></a>shell 变量的定义</h3><ul>
<li>基本语法</li>
</ul>
<ol>
<li>定义变量：变量名&#x3D;值</li>
<li>撤销变量：unset 变量</li>
<li>声明静态变量：readonly 变量，注意：不能 unset</li>
</ol>
<ul>
<li>快速入门</li>
</ul>
<ol>
<li>案例 1：定义变量 A</li>
<li>案例 2：撤销变量 A</li>
<li>案例 3：声明静态的变量 B&#x3D;2，不能 unset</li>
<li>案例 4：可把变量提升为全局环境变量，可供其他 shell 程序使用[该案例后面讲]</li>
</ol>
<h3 id="shell-变量的定义-1"><a href="#shell-变量的定义-1" class="headerlink" title="shell 变量的定义"></a>shell 变量的定义</h3><ul>
<li>定义变量的规则</li>
</ul>
<ol>
<li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。5A&#x3D;200(×)</li>
<li>等号两侧不能有空格</li>
<li>变量名称一般习惯为大写， 这是一个规范，我们遵守即可</li>
</ol>
<ul>
<li>将命令的返回值赋给变量</li>
</ul>
<ol>
<li>A&#x3D;`date`反引号，运行里面的命令，并把结果返回给变量 A</li>
<li>A&#x3D;$(date) 等价于反引号</li>
</ol>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><h3 id="基本语法-11"><a href="#基本语法-11" class="headerlink" title="基本语法"></a>基本语法</h3><ol>
<li>export 变量名&#x3D;变量值 （功能描述：将 shell 变量输出为环境变量&#x2F;全局变量）</li>
<li>source 配置文件 （功能描述：让修改后的配置信息立即生效）</li>
<li>echo $变量名 （功能描述：查询环境变量的值）</li>
<li>示意</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621668.jpeg"></p>
<h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ol>
<li><p>在&#x2F;etc&#x2F;profile 文件中定义 TOMCAT_HOME 环境变量</p>
</li>
<li><p>查看环境变量 TOMCAT_HOME 的值</p>
</li>
<li><p>在另外一个 shell 程序中使用 TOMCAT_HOME</p>
<p>注意：在输出 TOMCAT_HOME 环境变量前，需要让其生效</p>
<p>source &#x2F;etc&#x2F;profile</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621669.jpeg"></p>
<p>shell 脚本的多行注释</p>
<p>:&lt;&lt;! 内容 !</p>
<h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量</p>
<p>比如 ： .&#x2F;myshell.sh 100 200 , 这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息</p>
<h3 id="基本语法-12"><a href="#基本语法-12" class="headerlink" title="基本语法"></a>基本语法</h3><p>$n （功能描述：n 为数字，$0 代表命令本身，$1-$9 代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p>
<p>$* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p>
<p>$@（功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p>
<p>$#（功能描述：这个变量代表命令行中所有参数的个数）</p>
<h3 id="位置参数变量-1"><a href="#位置参数变量-1" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><p>案例：编写一个 shell 脚本 position.sh ， 在脚本中获取到命令行的各个参数信息。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621670.jpeg"></p>
<h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><h3 id="基本介绍-10"><a href="#基本介绍-10" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>就是 shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用</p>
<h3 id="基本语法-13"><a href="#基本语法-13" class="headerlink" title="基本语法"></a>基本语法</h3><ol>
<li>$$ （功能描述：当前进程的进程号（PID））</li>
<li>$! （功能描述：后台运行的最后一个进程的进程号（PID））</li>
<li>$？（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</li>
</ol>
<h3 id="应用实例-12"><a href="#应用实例-12" class="headerlink" title="应用实例"></a>应用实例</h3><p>在一个 shell 脚本中简单使用一下预定义变量</p>
<p>preVar.sh</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="基本介绍-11"><a href="#基本介绍-11" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>学习如何在 shell 中进行各种运算操作。</p>
<h3 id="基本语法-14"><a href="#基本语法-14" class="headerlink" title="基本语法"></a>基本语法</h3><ol>
<li>“$((运算式))”或“$[运算式]”或者 expr m + n &#x2F;&#x2F;expression 表达式</li>
<li>注意 expr 运算符间要有空格, 如果希望将 expr 的结果赋给某个变量，使用 ``</li>
<li>expr m - n</li>
<li>expr \*, &#x2F;, % 乘，除，取余</li>
</ol>
<h3 id="应用实例-oper-sh"><a href="#应用实例-oper-sh" class="headerlink" title="应用实例 oper.sh"></a>应用实例 oper.sh</h3><p>案例 1：计算（2+3）X4 的值</p>
<p>案例 2：请求出命令行的两个参数[整数]的和 20 50</p>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><ul>
<li><p>基本语法</p>
<p>[ condition ]（注意 condition 前后要有空格）</p>
<p>#非空返回 true，可使用$?验证（0 为 true，&gt;1 为 false）</p>
</li>
<li><p>应用实例</p>
<p>[ hspEdu ] 返回 true [ ] 返回 false</p>
<p>[ condition ] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句</p>
</li>
<li><p>判断语句</p>
<p>常用判断条件</p>
<ol>
<li>&#x3D; 字符串比较</li>
</ol>
</li>
</ul>
<ol>
<li><p>两个整数的比较</p>
<p>-lt 小于</p>
<p>-le 小于等于 little equal</p>
<p>-eq 等于</p>
<p>-gt 大于</p>
<p>-ge 大于等于</p>
<p>-ne 不等于</p>
</li>
<li><p>按照文件权限进行判断</p>
<p>-r 有读的权限</p>
<p>-w 有写的权限</p>
<p>-x 有执行的权限</p>
</li>
<li><p>按照文件类型进行判断</p>
<p>-f 文件存在并且是一个常规的文件</p>
<p>-e 文件存在</p>
<p>-d 文件存在并是一个目录</p>
</li>
</ol>
<ul>
<li><p>应用实例</p>
<p>案例 1：”ok”是否等于”ok”</p>
<p>判断语句：使用 &#x3D;</p>
<p>案例 2：23 是否大于等于 22</p>
<p>判断语句：使用 -ge</p>
<p>案例 3：&#x2F;root&#x2F;shcode&#x2F;aaa.txt 目录中的文件是否存在判断语句： 使用 -f</p>
<p>代码如下:</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621671.jpeg"></p>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h3><ul>
<li><p>基本语法</p>
<p>if [ 条件判断式 ] then</p>
<p>代码</p>
<p>fi</p>
<p>或者 , 多分支</p>
</li>
</ul>
<p>if [ 条件判断式 ] then</p>
<p>代码</p>
<p>elif [条件判断式] then</p>
<p>代码</p>
<p>fi</p>
<ul>
<li><p>注意事项：[ 条件判断式 ]，中括号和条件判断式之间必须有空格</p>
</li>
<li><p>应用实例 ifCase.sh</p>
<p>案例：请编写一个 shell 程序，如果输入的参数，大于等于 60，则输出 “及格了”，如果小于 60,则输出 “不及格”</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621672.jpeg"></p>
<h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><ul>
<li><p>基本语法</p>
<p>case $变量名 in “值 1”）</p>
<p>如果变量的值等于值 1，则执行程序 1</p>
<p>;;</p>
<p>“值 2”）</p>
<p>如果变量的值等于值 2，则执行程序 2</p>
<p>;;</p>
<p>…省略其他分支…</p>
</li>
</ul>
<p>*）</p>
<p>如果变量的值都不是以上的值，则执行此程序</p>
<p>;;</p>
<p>esac</p>
<ul>
<li><p>应用实例 testCase.sh</p>
<p>案例 1 ：当命令行参数是 1 时，输出 “周一”, 是 2 时，就输出”周二”， 其它情况输出 “other”</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621673.jpeg"></p>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><ul>
<li><p>基本语法 1</p>
<p>for 变量 in 值 1 值 2 值 3… do</p>
<p>程序&#x2F;代码</p>
<p>done</p>
<p>应用实例 testFor1.sh</p>
<p>案例 1 ：打印命令行输入的参数 [这里可以看出$* 和 $@ 的区别]</p>
</li>
<li><p>基本语法 2</p>
<p>for (( 初始值;循环控制条件;变量变化 ))</p>
</li>
</ul>
<p>do</p>
<p>程序&#x2F;代码</p>
<p>done</p>
<ul>
<li><p>应用实例 testFor2.sh</p>
<p>案例 1 ：从 1 加到 100 的值输出显示</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621674.jpeg"></p>
<h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621675.jpeg">while 循环</h3><ul>
<li><p>基本语法 1</p>
<p>while [ 条件判断式 ]</p>
</li>
</ul>
<p>do</p>
<p>程序 &#x2F;代码 done</p>
<p>注意：while 和 [有空格，条件判断式和 [也有空格</p>
<ul>
<li><p>应用实例 testWhile.sh</p>
<p>案例 1 ：从命令行输入一个数 n，统计从 1+..+ n 的值是多少？</p>
</li>
</ul>
<h2 id="read-读取控制台输入"><a href="#read-读取控制台输入" class="headerlink" title="read 读取控制台输入"></a>read 读取控制台输入</h2><ol>
<li><p>基本语法 read(选项)(参数) 选项：</p>
<p>-p：指定读取值时的提示符；</p>
<p>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。。参数</p>
<p>变量：指定读取值的变量名</p>
</li>
</ol>
<h3 id="应用实例-testRead-sh"><a href="#应用实例-testRead-sh" class="headerlink" title="应用实例 testRead.sh"></a>应用实例 testRead.sh</h3><p>案例 1：读取控制台输入一个 NUM1 值</p>
<p>案例 2：读取控制台输入一个 NUM2 值，在 10 秒内输入。代码:</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h3><p>shell 编程和其它编程语言一样，有系统函数，也可以自定义函数。系统函数中，我们这里就介绍两个。</p>
<h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul>
<li><p>basename 基本语法</p>
<p>功能：返回完整路径最后 &#x2F; 的部分，常用于获取文件名</p>
<p>basename [pathname] [suffix]</p>
<p>basename [string] [suffix] （功能描述：basename 命令会删掉所有的前缀包括最后一个（‘&#x2F;’）字符，然后将字符串显示出来。</p>
<p>选项：</p>
<p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉。</p>
</li>
<li><p>应用实例</p>
<p>案例 1：请返回 &#x2F;home&#x2F;aaa&#x2F;test.txt 的 “test.txt” 部分</p>
<p>basename &#x2F;home&#x2F;aaa&#x2F;test.txt</p>
</li>
<li><p>dirname 基本语法</p>
<p>功能：返回完整路径最后 &#x2F; 的前面的部分，常用于返回路径部分</p>
<p>dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p>
</li>
<li><p>应用实例</p>
<p>案例 1：请返回 &#x2F;home&#x2F;aaa&#x2F;test.txt 的 &#x2F;home&#x2F;aaa dirname &#x2F;home&#x2F;aaa&#x2F;test.txt</p>
</li>
</ul>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><ul>
<li><p>基本语法</p>
<p>[ function ] funname[()]</p>
<p>{</p>
<p>Action; [return int;]</p>
<p>}</p>
</li>
</ul>
<p>调用直接写函数名：funname [值]</p>
<ul>
<li><p>应用实例</p>
<p>案例 1：计算输入两个参数的和(动态的获取)， getSum</p>
<p>代码</p>
</li>
</ul>
<h2 id="Shell-编程综合案例"><a href="#Shell-编程综合案例" class="headerlink" title="Shell 编程综合案例"></a>Shell 编程综合案例</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol>
<li>每天凌晨 2:30 备份 数据库 hspedu 到 &#x2F;data&#x2F;backup&#x2F;db</li>
<li>备份开始和备份结束能够给出相应的提示信息</li>
<li>备份后的文件要求以备份时间为文件名，并打包成 .tar.gz 的形式，比如：2021-03-12_230201.tar.gz</li>
<li>在备份的同时，检查是否有 10 天前备份的数据库文件，如果有就将其删除。</li>
<li>画一个思路分析图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621676.jpeg"></p>
<h3 id="代码-usr-sbin-mysql-db-backup-sh"><a href="#代码-usr-sbin-mysql-db-backup-sh" class="headerlink" title="代码 &#x2F;usr&#x2F;sbin&#x2F;mysql_db.backup.sh"></a>代码 &#x2F;usr&#x2F;sbin&#x2F;mysql_db.backup.sh</h3><h1 id="第-18-章Linux-之-Python-定制篇-Python-开发平台-Ubuntu"><a href="#第-18-章Linux-之-Python-定制篇-Python-开发平台-Ubuntu" class="headerlink" title="第 18 章Linux 之 Python 定制篇-Python 开发平台 Ubuntu"></a>第 18 章Linux 之 Python 定制篇-Python 开发平台 Ubuntu</h1><h2 id="Ubuntu-介绍"><a href="#Ubuntu-介绍" class="headerlink" title="Ubuntu 介绍"></a>Ubuntu 介绍</h2><p>Ubuntu（友帮拓、优般图、乌班图）是一个以桌面应用为主的开源 GNU&#x2F;Linux 操作系统，Ubuntu 是基于 GNU&#x2F;Linux，支持 x86、amd64（即 x64）和 ppc 架构，由全球化的专业开发团队（Canonical Ltd）打造的。</p>
<p>专业的 Python 开发者一般会选择 Ubuntu 这款 Linux 系统作为生产平台.温馨提示：</p>
<p>Ubuntu 和 Centos 都是基于 GNU&#x2F;Linux 内核的，因此基本使用和 Centos 是几乎一样的，它们的各种指令可以通用，同学们在学习和使用 Ubuntu 的过程中，会发现各种操作指令在前面学习 CentOS 都使用过。只是界面和预安装的软件有所差别。</p>
<p>Ubuntu 下载地址：<a href="http://cn.ubuntu.com/download/">http://cn.ubuntu.com/download/</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621677.jpeg"></p>
<h2 id="安装的步骤"><a href="#安装的步骤" class="headerlink" title="安装的步骤"></a>安装的步骤</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621678.jpeg"></p>
<ul>
<li>看老师笔记即可.</li>
</ul>
<h2 id="设置-Ubuntu-支持中文"><a href="#设置-Ubuntu-支持中文" class="headerlink" title="设置 Ubuntu 支持中文"></a>设置 Ubuntu 支持中文</h2><p>默认安装的 ubuntu 中只有英文语言，因此是不能显示汉字的。要正确显示汉字，需要安装中文语言包。安装中文支持步骤：</p>
<ol>
<li>单击左侧图标栏打开 Language Support 菜单，点击打开 Language Support（语言支持）选项卡。</li>
<li>点击 Install &#x2F; Remove Languages，在弹出的选项卡中下拉找到 Chinese(Simplified)，即中文简体，在后面的选项框中打勾。然后点击 Apply Changes 提交，系统会自动联网下载中文语言包。（保证 ubuntu 是联网的）。</li>
<li>这时“汉语（中国）”在最后一位因为当前第一位是”English”，所以默认显示都是英文。我们如果希望默认显示用中文，则应该将“汉语（中国）”设置为第一位。设置方法是拖动，鼠标单击“汉语（中国）”，当底色变化（表示选中了）后，按住鼠标左键不松手，向上拖动放置到第一位。</li>
<li>设置后不会即刻生效，需要下一次登录时才会生效</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621679.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621680.jpeg"></p>
<h2 id="Ubuntu-的-root-用户"><a href="#Ubuntu-的-root-用户" class="headerlink" title="Ubuntu 的 root 用户"></a>Ubuntu 的 root 用户</h2><h3 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h3><p>安装 ubuntu 成功后，都是普通用户权限，并没有最高 root 权限，如果需要使用 root 权限的时候，通常都会在命令前面加上 sudo 。有的时候感觉很麻烦。(演示)</p>
<p>我们一般使用 su 命令来直接切换到 root 用户的，但是如果没有给 root 设置初始密码，就会抛出 su : Authentication failure 这样的问题。所以，我们只要给 root 用户设置一个初始密码就好了。</p>
<h3 id="给root-用户设置密码并使用"><a href="#给root-用户设置密码并使用" class="headerlink" title="给root 用户设置密码并使用"></a>给root 用户设置密码并使用</h3><ol>
<li>输入 sudo passwd 命令，设定 root 用户密码。</li>
<li>设定 root 密码成功后，输入 su 命令，并输入刚才设定的 root 密码，就可以切换成 root 了。提示符$代表一般用户，提示符#代表 root 用户。</li>
<li>以后就可以使用 root 用户了</li>
<li>输入 exit 命令，退出 root 并返回一般用户</li>
</ol>
<h2 id="Ubuntu-下开发Python"><a href="#Ubuntu-下开发Python" class="headerlink" title="Ubuntu 下开发Python"></a>Ubuntu 下开发Python</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>安装好 Ubuntu 后，默认就已经安装好 Python 的开发环境。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621681.jpeg"></p>
<h3 id="在Ubuntu-下开发一个-Python-程序"><a href="#在Ubuntu-下开发一个-Python-程序" class="headerlink" title="在Ubuntu 下开发一个 Python 程序"></a>在Ubuntu 下开发一个 Python 程序</h3><p>vi hello.py [编写 hello.py] python3 hello.py [运行 hello.py]</p>
<h1 id="第-19-章Linux-之-Python-定制篇-APT-软件管理和远程登录"><a href="#第-19-章Linux-之-Python-定制篇-APT-软件管理和远程登录" class="headerlink" title="第 19 章Linux 之 Python 定制篇-APT 软件管理和远程登录"></a>第 19 章Linux 之 Python 定制篇-APT 软件管理和远程登录</h1><h2 id="apt-介绍"><a href="#apt-介绍" class="headerlink" title="apt 介绍"></a>apt 介绍</h2><p>apt 是 Advanced Packaging Tool 的简称，是一款安装包管理工具。在 Ubuntu 下，我们可以使用 apt 命令进行软件包的安装、删除、清理等，类似于 Windows 中的软件管理工具。</p>
<p>unbuntu 软件管理的原理示意图：</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621682.jpeg"></p>
<h2 id="Ubuntu-软件操作的相关命令"><a href="#Ubuntu-软件操作的相关命令" class="headerlink" title="Ubuntu 软件操作的相关命令"></a>Ubuntu 软件操作的相关命令</h2><p>sudo apt-get update 更新源</p>
<p>sudo apt-get install package 安装包</p>
<p>sudo apt-get remove package 删除包</p>
<p>sudo apt-cache search package 搜索软件包</p>
<p>sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等</p>
<p>sudo apt-get install package –reinstall 重新安装包</p>
<p>sudo apt-get -f install 修复安装</p>
<p>sudo apt-get remove package –purge 删除包，包括配置文件等</p>
<p>sudo apt-get build-dep package 安装相关的编译环境</p>
<p>sudo apt-get upgrade 更新已安装的包</p>
<p>sudo apt-get dist-upgrade 升级系统</p>
<p>sudo apt-cache depends package 了解使用该包依赖那些包</p>
<p>sudo apt-cache rdepends package 查看该包被哪些包依赖</p>
<p>sudo apt-getsource package下载该包的源代码</p>
<h2 id="更新-Ubuntu-软件下载地址"><a href="#更新-Ubuntu-软件下载地址" class="headerlink" title="更新 Ubuntu 软件下载地址"></a>更新 Ubuntu 软件下载地址</h2><h3 id="原理介绍-1"><a href="#原理介绍-1" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>(画出示意图)</p>
<h3 id="寻找国内镜像源"><a href="#寻找国内镜像源" class="headerlink" title="寻找国内镜像源"></a>寻找国内镜像源</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621683.jpeg">所谓的镜像源：可以理解为提供下载软件的地方，比如 Android 手机上可以下载软件的安卓市场；iOS 手机上可以下载软件的 AppStore</p>
<h3 id="寻找国内镜像源-1"><a href="#寻找国内镜像源-1" class="headerlink" title="寻找国内镜像源"></a>寻找国内镜像源</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621684.jpeg"></p>
<h3 id="备份Ubuntu-默认的源地址"><a href="#备份Ubuntu-默认的源地址" class="headerlink" title="备份Ubuntu 默认的源地址"></a>备份Ubuntu 默认的源地址</h3><p>sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.backup</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621685.jpeg"></p>
<h3 id="更新源服务器列表"><a href="#更新源服务器列表" class="headerlink" title="更新源服务器列表"></a>更新源服务器列表</h3><p>先清空 sources.list 文件复制镜像网站的地址</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621686.jpeg"></p>
<p>复制镜像网站的地址， 拷贝到 sources.list 文件</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621687.jpeg"></p>
<h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><p>更新源地址：sudo apt-get update</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621688.jpeg"></p>
<h2 id="Ubuntu-软件安装，卸载的最佳实践"><a href="#Ubuntu-软件安装，卸载的最佳实践" class="headerlink" title="Ubuntu 软件安装，卸载的最佳实践"></a>Ubuntu 软件安装，卸载的最佳实践</h2><p>案例说明：使用 apt 完成安装和卸载 vim 软件，并查询 vim 软件的信息：（因为使用了镜像网站， 速度很快）</p>
<p>sudo apt-get remove vim &#x2F;&#x2F;删除 sudo apt-get install vim &#x2F;&#x2F;安装</p>
<p>sudo apt-cache show vim &#x2F;&#x2F;获取软件信息</p>
<h2 id="远程登录Ubuntu"><a href="#远程登录Ubuntu" class="headerlink" title="远程登录Ubuntu"></a>远程登录Ubuntu</h2><h3 id="ssh-介绍"><a href="#ssh-介绍" class="headerlink" title="ssh 介绍"></a>ssh 介绍</h3><p>SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。</p>
<p>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。常用于远程登录。几乎所有 UNIX&#x2F;LInux</p>
<p>平台都可运行 SSH。</p>
<p>使用 SSH 服务，需要安装相应的服务器和客户端。客户端和服务器的关系：如果，A 机器想被 B 机器远程控制，那么，A 机器需要安装 SSH 服务器，B 机器需要安装 SSH 客户端。</p>
<p>和 CentOS 不一样，Ubuntu 默认没有安装 SSHD 服务(使用 netstat 指令查看: apt install net-tools)，因此，我们不能进</p>
<p>行远程登录。</p>
<h3 id="原理示意图"><a href="#原理示意图" class="headerlink" title="原理示意图"></a>原理示意图</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621689.jpeg"></p>
<h3 id="安装SSH-和启用"><a href="#安装SSH-和启用" class="headerlink" title="安装SSH 和启用"></a>安装SSH 和启用</h3><p>sudo apt-get install openssh-server</p>
<p>执行上面指令后，在当前这台 Linux 上就安装了 SSH 服务端和客户端。</p>
<p>service sshd restart</p>
<p>执行上面的指令，就启动了 sshd 服务。会监听端口 22</p>
<h3 id="在Windows-使用XShell6-XFTP6-登录-Ubuntu"><a href="#在Windows-使用XShell6-XFTP6-登录-Ubuntu" class="headerlink" title="在Windows 使用XShell6&#x2F;XFTP6 登录 Ubuntu"></a>在Windows 使用XShell6&#x2F;XFTP6 登录 Ubuntu</h3><p>前面我们已经安装了 XShell6，直接使用即可。</p>
<p>注意：使用 hspEdu 用户登录，需要的时候再 su - 切换成 root 用户</p>
<h3 id="从一台linux-系统远程登陆另外一台linux-系统"><a href="#从一台linux-系统远程登陆另外一台linux-系统" class="headerlink" title="从一台linux 系统远程登陆另外一台linux 系统"></a>从一台linux 系统远程登陆另外一台linux 系统</h3><p>在创建服务器集群时，会使用到该技术</p>
<ul>
<li><p>基本语法：</p>
<p>ssh 用户名@IP</p>
<p>例如：ssh <a href="mailto:hspedu@192.168.200.130">hspedu@192.168.200.130</a></p>
<p>使用 ssh 访问，如访问出现错误。可查看是否有该文件 ～&#x2F;.ssh&#x2F;known_ssh 尝试删除该文件解决，一般不会有问题</p>
</li>
<li><p>登出</p>
<p>登出命令：exit 或者 logout</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621690.jpeg"></p>
<h1 id="第-20-章CentOS8-1-的使用"><a href="#第-20-章CentOS8-1-的使用" class="headerlink" title="第 20 章CentOS8.1 的使用"></a>第 20 章CentOS8.1 的使用</h1><h2 id="安装-Centos8-1-8-2"><a href="#安装-Centos8-1-8-2" class="headerlink" title="安装 Centos8.1&#x2F;8.2"></a>安装 Centos8.1&#x2F;8.2</h2><h3 id="Centos-下载地址-1"><a href="#Centos-下载地址-1" class="headerlink" title="Centos 下载地址"></a>Centos 下载地址</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621691.jpeg">CentOS-8.1.1911-x86_64-dvd1.iso CentOS 8.1&#x2F;8.2 DVD 版 8G (未来的主流.) <a href="https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/">https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/</a></p>
<h3 id="CentOS8-1-安装的步骤"><a href="#CentOS8-1-安装的步骤" class="headerlink" title="CentOS8.1 安装的步骤"></a>CentOS8.1 安装的步骤</h3><p>创建虚拟机 [演示]</p>
<p>开始安装系统(CentOS8.1)的步骤 [演示]</p>
<p>具体看老师演示和文档即可</p>
<h2 id="CentOS8-0-VS-CentOS7-0-比较-了解"><a href="#CentOS8-0-VS-CentOS7-0-比较-了解" class="headerlink" title="CentOS8.0 VS CentOS7.0 比较 (了解)"></a>CentOS8.0 VS CentOS7.0 比较 (了解)</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621692.jpeg"></p>
<h1 id="第-21-章Linux-高级篇-日志管理"><a href="#第-21-章Linux-高级篇-日志管理" class="headerlink" title="第 21 章Linux 高级篇-日志管理"></a>第 21 章Linux 高级篇-日志管理</h1><h2 id="基本介绍-12"><a href="#基本介绍-12" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol>
<li>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。</li>
<li>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。</li>
<li>可以这样理解 <strong>日志是用来记录重大事件的工</strong>具</li>
</ol>
<h2 id="系统常用的日志"><a href="#系统常用的日志" class="headerlink" title="系统常用的日志"></a>系统常用的日志</h2><ul>
<li>&#x2F;var&#x2F;log&#x2F; 目录就是系统日志文件的保存位置，看张图</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621693.jpeg"></p>
<ul>
<li>系统常用的日志</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621694.jpeg"></p>
<ul>
<li><p>应用案例</p>
<p>使用 root 用户通过 xshell6 登陆, 第一次使用错误的密码，第二次使用正确的密码登录成功看看在日志文件&#x2F;var&#x2F;log&#x2F;secure 里有没有记录相关信息</p>
</li>
</ul>
<h2 id="日志管理服务-rsyslogd"><a href="#日志管理服务-rsyslogd" class="headerlink" title="日志管理服务 rsyslogd"></a>日志管理服务 rsyslogd</h2><p>CentOS7.6 日志服务是 rsyslogd ， CentOS6.x 日志服务是 syslogd 。rsyslogd 功能更强大。rsyslogd 的使用、日志文件的格式，和 syslogd 服务兼容的。原理示意图</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621695.jpeg"></p>
<ul>
<li><p>查询 Linux 中的 rsyslogd 服务是否启动</p>
<p>ps aux | grep “rsyslog” | grep -v “grep”</p>
</li>
<li><p>查询 rsyslogd 服务的自启动状态</p>
<p>systemctl list-unit-files | grep rsyslog</p>
</li>
<li><p>配置文件：&#x2F;etc&#x2F;rsyslog.conf</p>
</li>
</ul>
<p>编辑文件时的格式为： *.* 存放日志文件其中第一个*代表日志类型，第二个*代表日志级别</p>
<ol>
<li><p>日志类型分为：</p>
<p>auth ##pam 产生的日志</p>
</li>
</ol>
<p>authpriv ##ssh、ftp 等登录信息的验证信息</p>
<p>corn ##时间任务相关</p>
<p>kern ##内核</p>
<p>lpr ##打印</p>
<p>mail ##邮件</p>
<p>mark(syslog)-rsyslog##服务内部的信息，时间标识</p>
<table>
<thead>
<tr>
<th>news</th>
<th></th>
<th>##新闻组</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td></td>
<td>##用户程序产生的相关信息</td>
</tr>
<tr>
<td>uucp</td>
<td></td>
<td>##unix to nuix copy 主机之间相关的通信</td>
</tr>
<tr>
<td>local</td>
<td>1-7</td>
<td>##自定义的日志设备</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>日志级别分为：</p>
<p>debug ##有调试信息的，日志通信最多 info ##一般信息日志，最常用 notice ##最具有重要性的普通条件的信息 warning ##警告级别</p>
<p>err ##错误级别，阻止某个功能或者模块不能正常工作的信息</p>
<p>crit ##严重级别，阻止整个系统或者整个软件不能正常工作的信息 alert ##需要立刻修改的信息</p>
<p>emerg ##内核崩溃等重要信息 none ##什么都不记录</p>
<p>注意：从上到下，级别从低到高，记录信息越来越少</p>
<ul>
<li>由日志服务 rsyslogd 记录的日志文件，日志文件的格式包含以下 4 列：</li>
</ul>
</li>
<li><p>事件产生的时间</p>
</li>
<li><p>产生事件的服务器的主机名</p>
</li>
<li><p>产生事件的服务名或程序名</p>
</li>
<li><p>事件的具体信息</p>
</li>
</ol>
<ul>
<li><p>日志如何查看实例</p>
<p>查看一下 &#x2F;var&#x2F;log&#x2F;secure 日志，这个日志中记录的是用户验证和授权方面的信息 来分析如何查看</p>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621696.jpeg"></p>
<ul>
<li><p>日志管理服务应用实例</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621697.jpeg">在&#x2F;etc&#x2F;rsyslog.conf 中添加一个日志文件&#x2F;var&#x2F;log&#x2F;hsp.log,当有事件发送时(比如 sshd 服务相关事件)，该文件会接收到信息并保存. 给小伙伴演示 重启，登录 的情况，看看是否有日志保存</p>
</li>
</ul>
<h2 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h2><h3 id="基本介绍-13"><a href="#基本介绍-13" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>日志轮替就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围之后，就会进行删除</p>
<h3 id="日志轮替文件命名"><a href="#日志轮替文件命名" class="headerlink" title="日志轮替文件命名"></a>日志轮替文件命名</h3><ol>
<li>centos7 使用 logrotate 进行日志轮替管理，要想改变日志轮替文件名字，通过 &#x2F;etc&#x2F;logrotate.conf 配置文件中“dateext”参数：</li>
<li>如果配置文件中有“dateext”参数，那么日志会用日期来作为日志文件的后缀，例如 “secure-20201010”。这样日志文件名不会重叠，也就不需要日志文件的改名， 只需要指定保存日志个数，删除多余的日志文件即可。</li>
<li>如果配置文件中没有“dateext”参数，日志文件就需要进行改名了。当第一次进行日志轮替时，当前的“secure”日志会自动改名为“secure.1”，然后新建“secure”日志， 用来保存新的日志。当第二次进行日志轮替时，“secure.1”会自动改名为“secure.2”， 当前的“secure”日志会自动改名为“secure.1”，然后也会新建“secure”日志，用来保存新的日志，以此类推。</li>
</ol>
<h3 id="logrotate-配置文件"><a href="#logrotate-配置文件" class="headerlink" title="logrotate 配置文件"></a>logrotate 配置文件</h3><ul>
<li><p>&#x2F;etc&#x2F;logrotate.conf 为 logrotate 的全局配置文件</p>
<p># rotate log files weekly, 每周对日志文件进行一次轮替</p>
<p>weekly</p>
<p># keep 4 weeks worth of backlogs, 共保存 4 份日志文件，当建立新的日志文件时，旧的将会被删除</p>
<p>rotate 4</p>
<p># create new (empty) log files after rotating old ones, 创建新的空的日志文件，在日志轮替后</p>
<p>create</p>
<p># use date as a suffix of the rotated file, 使用日期作为日志轮替文件的后缀</p>
<p>dateext</p>
<p># uncomment this if you want your log files compressed, 日志文件是否压缩。如果取消注释，则日志会在转储的同时进行压缩</p>
<p>#compress</p>
<p>#RPM packages drop log rotation information into this directory include &#x2F;etc&#x2F;logrotate.d</p>
<p># 包含 &#x2F;etc&#x2F;logrotate.d&#x2F; 目录中所有的子配置文件。也就 是说会把这个目录中所有子配置文件读取进来，</p>
<p>#下面是单独设置，优先级更高。</p>
<p># no packages own wtmp and btmp – we’ll rotate them here</p>
<p>&#x2F;var&#x2F;log&#x2F;wtmp {</p>
<p>monthly # 每月对日志文件进行一次轮替</p>
</li>
</ul>
<p>create 0664 root utmp # 建立的新日志文件，权限是 0664 ，所有者是 root ，所属组是 utmp 组</p>
<p>minsize 1M # 日志文件最小轮替大小是 1MB 。也就是日志一定要超过 1MB 才会轮替，否则就算时间达到一个月，也不进行日志转储</p>
<p>rotate 1 # 仅保留一个日志备份。也就是只有 wtmp 和 wtmp.1 日志保留而已</p>
<p>}</p>
<p>&#x2F;var&#x2F;log&#x2F;btmp {</p>
<p>missingok # 如果日志不存在，则忽略该日志的警告信息</p>
<p>monthly</p>
<p>create 0600 root utmp rotate 1</p>
<p>}</p>
<ul>
<li><p>参数说明</p>
<p>参 数 参 数 说 明</p>
<p>daily 日志的轮替周期是每天</p>
<p>weekly 日志的轮替周期是每周</p>
<p>monthly 日志的轮替周期是每月</p>
<p>rotate 数字 保留的日志文件的个数。0 指没有备份</p>
<p>compress 日志轮替时，旧的日志进行压缩</p>
<p>create mode owner group 建立新日志，同时指定新日志的权限与所有者和所属组。 mail address 当日志轮替时，输出内容通过邮件发送到指定的邮件地址。 missingok 如果日志不存在，则忽略该日志的警告信息</p>
<p>notifempty 如果日志为空文件，则不进行日志轮替</p>
<p>minsize 大小 日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替，否则就算时间达到也不轮替</p>
<p>size 大小 日志只有大于指定大小才进行日志轮替，而不是按照时间轮替。</p>
<p>dateext 使用日期作为日志轮替文件的后缀。</p>
</li>
</ul>
<p>sharedscripts 在此关键字之后的脚本只执行一次。 prerotate&#x2F;endscript 在日志轮替之前执行脚本命令。 postrotate&#x2F;endscript 在日志轮替之后执行脚本命令。</p>
<h3 id="把自己的日志加入日志轮替"><a href="#把自己的日志加入日志轮替" class="headerlink" title="把自己的日志加入日志轮替"></a>把自己的日志加入日志轮替</h3><ol>
<li>第一种方法是直接在&#x2F;etc&#x2F;logrotate.conf 配置文件中写入该日志的轮替策略</li>
<li>第二种方法是在&#x2F;etc&#x2F;logrotate.d&#x2F;目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被“include”到主配置文件中，所以也可以把日志加入轮替。</li>
<li><strong>推荐使用第二种方法</strong>，因为系统中需要轮替的日志非常多，如果全都直接写 入&#x2F;etc&#x2F;logrotate.conf 配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护。</li>
<li>在&#x2F;etc&#x2F;logrotate.d&#x2F; 配置轮替文件一览</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621698.jpeg"></p>
<h3 id="应用实例-13"><a href="#应用实例-13" class="headerlink" title="应用实例"></a>应用实例</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621699.jpeg">看一个案例, 在&#x2F;etc&#x2F;logrotate.conf 进行配置, 或者直接在 &#x2F;etc&#x2F;logrotate.d&#x2F; 下创建文件 hsplog 编写如下内容, 具体轮替的效果 可以参考 &#x2F;var&#x2F;log 下的 boot.log 情况.</p>
<h2 id="日志轮替机制原理"><a href="#日志轮替机制原理" class="headerlink" title="日志轮替机制原理"></a>日志轮替机制原理</h2><p>日志轮替之所以可以在指定的时间备份日志，是依赖系统定时任务。在 &#x2F;etc&#x2F;cron.daily&#x2F;目录，就会发现这个目录中是</p>
<p>有 logrotate 文件(可执行)，logrotate 通过这个文件依赖定时任务执行的。</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621700.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621701.jpeg"></p>
<h2 id="查看内存日志"><a href="#查看内存日志" class="headerlink" title="查看内存日志"></a>查看内存日志</h2><p>journalctl 可以查看内存日志, 这里我们看看常用的指令</p>
<p>journalctl ##查看全部 journalctl -n 3 ##查看最新 3 条</p>
<p>journalctl –since 19:00 –until 19:10:10 #查看起始时间到结束时间的日志可加日期 journalctl -p err ##报错日志</p>
<p>journalctl -o verbose ##日志详细内容</p>
<p>journalctl _PID&#x3D;1245 _COMM&#x3D;sshd ##查看包含这些参数的日志（在详细日志查看）或者 journalctl | grep sshd</p>
<p>注意: journalctl 查看的是内存日志, 重启清空演示案例:</p>
<p>使用 journalctl | grep sshd 来看看用户登录清空, 重启系统，再次查询，看看日志有什么变化没有</p>
<h1 id="第-22-章Linux-高级篇-定制自己的-Linux-系统"><a href="#第-22-章Linux-高级篇-定制自己的-Linux-系统" class="headerlink" title="第 22 章Linux 高级篇-定制自己的 Linux 系统"></a>第 22 章Linux 高级篇-定制自己的 Linux 系统</h1><h2 id="基本介绍-14"><a href="#基本介绍-14" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>通过裁剪现有 Linux 系统(CentOS7.6)，创建属于自己的 min Linux 小系统，可以加深我们对 linux 的理解。老韩利用 centos7.6，搭建一个小小 linux 系统, 很有趣。</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>启动流程介绍：</p>
<p>制作 Linux 小系统之前，再了解一下 Linux 的启动流程：</p>
<p>1、首先 Linux 要通过自检，检查硬件设备有没有故障</p>
<p>2、如果有多块启动盘的话，需要在 BIOS 中选择启动磁盘</p>
<p>3、启动 MBR 中的 bootloader 引导程序</p>
<p>4、加载内核文件</p>
<p>5、执行所有进程的父进程、老祖宗 systemd 6、欢迎界面</p>
<p>在 Linux 的启动流程中，加载内核文件时关键文件： 1）kernel 文件: vmlinuz-3.10.0-957.el7.x86_64 2）initrd 文件: initramfs-3.10.0-957.el7.x86_64.img</p>
<h2 id="制作-min-linux-思路分析"><a href="#制作-min-linux-思路分析" class="headerlink" title="制作 min linux 思路分析"></a>制作 min linux 思路分析</h2><ol>
<li>在现有的 Linux 系统(centos7.6)上加一块硬盘&#x2F;dev&#x2F;sdb，在硬盘上分两个分区，一个是&#x2F;boot，一个是&#x2F;，并将其格式化。需要明确的是，现在加的这个硬盘在现有的 Linux 系统中是&#x2F;dev&#x2F;sdb，但是，当我们把东西全部设置好时，要把这个硬盘拔除，放在新系统上，此时，就是&#x2F;dev&#x2F;sda</li>
<li>在&#x2F;dev&#x2F;sdb 硬盘上，将其打造成独立的 Linux 系统，里面的所有文件是需要拷贝进去的</li>
<li>作为能独立运行的 Linux 系统，内核是一定不能少，要把内核文件和 initramfs 文件也一起拷到&#x2F;dev&#x2F;sdb 上</li>
<li>以上步骤完成，我们的自制 Linux 就完成, 创建一个新的 linux 虚拟机，将其硬盘指向我们创建的硬盘，启动即可</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621702.jpeg"></p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>操作步骤</p>
<p>具体看文档+老师演示</p>
<h1 id="第-23-章Linux-内核源码介绍-内核升级"><a href="#第-23-章Linux-内核源码介绍-内核升级" class="headerlink" title="第 23 章Linux 内核源码介绍&amp;内核升级"></a>第 23 章Linux 内核源码介绍&amp;内核升级</h1><h2 id="为什么要阅读linux-内核"><a href="#为什么要阅读linux-内核" class="headerlink" title="为什么要阅读linux 内核?"></a>为什么要阅读linux 内核?</h2><ol>
<li>爱好，就是喜欢 linux(黑客精神)</li>
<li>想深入理解 linux 底层运行机制，对操作系统有深入理解</li>
<li>阅读 Linux 内核，你会对整个计算机体系有一个更深刻的认识。作为开发者，不管你从事的是驱动开发，应用开发还是后台开发，你都需要了解操作系统内核的运行机制，这样才能写出更好的代码。</li>
<li>作为开发人员不应该只局限在自己的领域，你设计的模块看起来小，但是你不了解进程的调用机制，你不知道进程为什么会阻塞、就绪、执行几个状态。那么很难写出优质的代码。</li>
<li>找工作面试的需要<ul>
<li>老韩忠告，作为有追求的程序员，还是应该深入的了解一个操作系统的底层机制,(比如 linux&#x2F;unix) 最好是源码级别的，这样你写多线程高并发程序，包括架构，优化，算法等，高度不一样的，当然老韩也不是要求小伙伴儿把一个非常庞大的 Linux 内核每一行都读懂。我觉得。你至少能看几个核心的模块。</li>
</ul>
</li>
</ol>
<h2 id="linux0-01-内核源码"><a href="#linux0-01-内核源码" class="headerlink" title="linux0.01 内核源码"></a>linux0.01 内核源码</h2><h3 id="基本介绍-15"><a href="#基本介绍-15" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Linux 的内核源代码可以从网上下载, 解压缩后文件一般也都位于 linux 目录下。内核源代码有很多版本，可以从</p>
<p>linux0.01 内核入手，总共的代码 1w 行左右， 最新版本 5.9.8 总共代码超过 700w 行，非常庞大.内核地址：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621703.jpeg"></p>
<p>很多人害怕读 Linux 内核，Linux 内核这样大而复杂的系统代码，阅读起来确实有很多困难，但是也不象想象的那么高不可攀。老韩建议可以从 linux0.01 入手。</p>
<h3 id="linux0-01-内核源码目录-阅读"><a href="#linux0-01-内核源码目录-阅读" class="headerlink" title="linux0.01 内核源码目录&amp;阅读"></a>linux0.01 内核源码目录&amp;阅读</h3><ul>
<li>老韩提示阅读内核源码技巧</li>
</ul>
<ol>
<li>linux0.01 的阅读需要懂 c 语言</li>
<li>阅读源码前，应知道 Linux 内核源码的整体分布情况。现代的操作系统一般由进程管理、内存管理、文件系统、驱动程序和网络等组成。Linux 内核源码的各个目录大致与此相对应.</li>
<li>在阅读方法或顺序上，有纵向与横向之分。所谓纵向就是顺着程序的执行顺序逐步进行；所谓横向，就是按模块进行。它们经常结合在一起进行。</li>
<li>对于 Linux 启动的代码可顺着 Linux 的启动顺序一步步来阅读；对于像内存管理部分，可以单独拿出来进行阅读分析。实际上这是一个反复的过程，不可能读一遍就理解<ul>
<li>linux 内核源码阅读&amp;目录介绍&amp;main.c 说明</li>
</ul>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621704.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621705.jpeg"></p>
<h2 id="linux-内核最新版和内核升级"><a href="#linux-内核最新版和内核升级" class="headerlink" title="linux 内核最新版和内核升级"></a>linux 内核最新版和内核升级</h2><h3 id="内核地址：https-www-kernel-org-查看"><a href="#内核地址：https-www-kernel-org-查看" class="headerlink" title="内核地址：https://www.kernel.org/ 查看"></a>内核地址：<a href="https://www.kernel.org/">https://www.kernel.org/</a> 查看</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621703.jpeg"></p>
<h3 id="下载-解压最新版"><a href="#下载-解压最新版" class="headerlink" title="下载&amp;解压最新版"></a>下载&amp;解压最新版</h3><p>wget <a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.16.tar.gz">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.16.tar.gz</a> tar -zxvf linux-5.8.16.tar.gz</p>
<h3 id="linux-内核升级应用实例"><a href="#linux-内核升级应用实例" class="headerlink" title="linux 内核升级应用实例"></a>linux 内核升级应用实例</h3><p>将 Centos 系统从 7.6 内核升级到 7.8 版本内核(兼容性问题)</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621706.jpeg"></p>
<h3 id="具体步骤，看老师演示"><a href="#具体步骤，看老师演示" class="headerlink" title="具体步骤，看老师演示"></a>具体步骤，看老师演示</h3><p>uname -a &#x2F;&#x2F; 查看当前的内核版本</p>
<p>yum info kernel -q &#x2F;&#x2F;检测内核版本，显示可以升级的内核 yum update kernel &#x2F;&#x2F;升级内核</p>
<p>yum list kernel -q &#x2F;&#x2F;查看已经安装的内核</p>
<h1 id="第-24-章linux-系统-备份与恢复"><a href="#第-24-章linux-系统-备份与恢复" class="headerlink" title="第 24 章linux 系统-备份与恢复"></a>第 24 章linux 系统-备份与恢复</h1><h2 id="基本介绍-16"><a href="#基本介绍-16" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>实体机无法做快照，如果系统出现异常或者数据损坏，后果严重， 要重做系统，还会造成数据丢失。所以我们可以使用备份和恢复技术</p>
<p>linux 的备份和恢复很简单 ， 有两种方式：</p>
<ol>
<li>把需要的文件(或者分区)用 TAR 打包就行，下次需要恢复的时候，再解压开覆盖即可</li>
<li>使用 dump 和 restore 命令</li>
<li>示意图</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621707.jpeg"></p>
<h2 id="安装-dump-和-restore"><a href="#安装-dump-和-restore" class="headerlink" title="安装 dump 和 restore"></a>安装 dump 和 restore</h2><p>如果 linux 上没有 dump 和 restore 指令，需要先按照</p>
<p>yum -y install dump yum -y install restore</p>
<h2 id="使用-dump-完成备份"><a href="#使用-dump-完成备份" class="headerlink" title="使用 dump 完成备份"></a>使用 dump 完成备份</h2><h3 id="基本介绍-17"><a href="#基本介绍-17" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>dump 支持分卷和增量备份（所谓增量备份是指备份上次备份后 修改&#x2F;增加过的文件，也称差异备份）。</p>
<h3 id="dump-语法说明"><a href="#dump-语法说明" class="headerlink" title="dump 语法说明"></a>dump 语法说明</h3><table>
<thead>
<tr>
<th>dump</th>
<th>[ -cu] [-123456789] [ -f &lt;备份后文件名&gt;]</th>
<th>[-T &lt;日期&gt;]</th>
<th>[ 目录或文件系统]</th>
</tr>
</thead>
<tbody><tr>
<td>dump</td>
<td>[]-wW</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>-c ： 创建新的归档文件，并将由一个或多个文件参数所指定的内容写入归档文件的开头。</p>
<p>-0123456789： 备份的层级。0 为最完整备份，会备份所有文件。若指定 0 以上的层级，则备份至上一次备份以来修改或新增的文件, 到 9 后，可以再次轮替.</p>
<p>-f &lt;备份后文件名&gt;： 指定备份后文件名</p>
<p>-j : 调用 bzlib 库压缩备份文件，也就是将备份后的文件压缩成 bz2 格式，让文件更小</p>
<p>-T &lt;日期&gt;： 指定开始备份的时间与日期</p>
<p>-u ： 备份完毕后，在&#x2F;etc&#x2F;dumpdares 中记录备份的文件系统，层级，日期与时间等。</p>
<p>-t ： 指定文件名，若该文件已存在备份文件中，则列出名称</p>
<p>-W ：显示需要备份的文件及其最后一次备份的层级，时间 ，日期。</p>
<p>-w ：与-W 类似，但仅显示需要备份的文件。</p>
<h3 id="dump-应用案例-1"><a href="#dump-应用案例-1" class="headerlink" title="dump 应用案例 1"></a>dump 应用案例 1</h3><p>将&#x2F;boot 分区所有内容备份到&#x2F;opt&#x2F;boot.bak0.bz2 文件中，备份层级为“0”</p>
<p>dump -0uj -f &#x2F;opt&#x2F;boot.bak0.bz2 &#x2F;boot</p>
<h3 id="dump-应用案例-2"><a href="#dump-应用案例-2" class="headerlink" title="dump 应用案例 2"></a>dump 应用案例 2</h3><p>在&#x2F;boot 目录下增加新文件，备份层级为“1”(只备份上次使用层次“0”备份后发生过改变的数据), 注意比较看看这次生成的备份文件 boot1.bak 有多大</p>
<p>dump -1uj -f &#x2F;opt&#x2F;boot.bak1.bz2 &#x2F;boot</p>
<p>老韩提醒: 通过 dump 命令在配合 crontab 可以实现无人值守备份</p>
<h3 id="dump-W"><a href="#dump-W" class="headerlink" title="dump -W"></a>dump -W</h3><p>显示需要备份的文件及其最后一次备份的层级，时间 ，日期</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621708.jpeg"></p>
<h3 id="查看备份时间文件"><a href="#查看备份时间文件" class="headerlink" title="查看备份时间文件"></a>查看备份时间文件</h3><p>cat &#x2F;etc&#x2F;dumpdates</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621709.jpeg"></p>
<h3 id="dump-备份文件或者目录"><a href="#dump-备份文件或者目录" class="headerlink" title="dump 备份文件或者目录"></a>dump 备份文件或者目录</h3><p>前面我们在备份分区时，是可以支持增量备份的，如果备份文件或者目录，不再支持增量备份, 即只能使用 0 级别备份</p>
<p>案例， 使用 dump 备份 &#x2F;etc 整个目录</p>
<p>dump -0j -f &#x2F;opt&#x2F;etc.bak.bz2 &#x2F;etc&#x2F;</p>
<p>#下面这条语句会报错，提示 DUMP: Only level 0 dumps are allowed on a subdirectory dump -1j -f &#x2F;opt&#x2F;etc.bak.bz2 &#x2F;etc&#x2F;</p>
<h3 id="老韩提醒"><a href="#老韩提醒" class="headerlink" title="老韩提醒"></a>老韩提醒</h3><p>如果是重要的备份文件， 比如数据区，建议将文件上传到其它服务器保存，<strong>不要将鸡蛋放在同一个篮子</strong>.</p>
<h2 id="使用-restore-完成恢复"><a href="#使用-restore-完成恢复" class="headerlink" title="使用 restore 完成恢复"></a>使用 restore 完成恢复</h2><h3 id="基本介绍-18"><a href="#基本介绍-18" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>restore 命令用来恢复已备份的文件，可以从 dump 生成的备份文件中恢复原文件</p>
<h3 id="restore-基本语法"><a href="#restore-基本语法" class="headerlink" title="restore 基本语法"></a>restore 基本语法</h3><p>restore [模式选项] [选项]</p>
<p>说明下面四个模式， 不能混用，在一次命令中， 只能指定一种。</p>
<p>-C ：使用对比模式，将备份的文件与已存在的文件相互对比。</p>
<p>-i：使用交互模式，在进行还原操作时，restors 指令将依序询问用户</p>
<p>-r：进行还原模式</p>
<p>-t : 查看模式，看备份文件有哪些文件</p>
<p>选项</p>
<p>-f &lt;备份设备&gt;：从指定的文件中读取备份数据，进行还原操作</p>
<h3 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例 1"></a>应用案例 1</h3><p>restore 命令比较模式，比较备份文件和原文件的区别测试</p>
<p>mv &#x2F;boot&#x2F;hello.java &#x2F;boot&#x2F;hello100.java</p>
<p>restore -C -f boot.bak1.bz2 &#x2F;&#x2F;注意和 最新的文件比较</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621710.jpeg"></p>
<p>mv &#x2F;boot&#x2F;hello100.java &#x2F;boot&#x2F;hello.java restore -C -f boot.bak1.bz2</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621711.jpeg"></p>
<h3 id="应用案例-2"><a href="#应用案例-2" class="headerlink" title="应用案例 2"></a>应用案例 2</h3><p>restore 命令查看模式，看备份文件有哪些数据&#x2F;文件</p>
<p>测试</p>
<p>restore -t -f boot.bak0.bz2</p>
<h3 id="应用案例-3"><a href="#应用案例-3" class="headerlink" title="应用案例 3"></a>应用案例 3</h3><p>restore 命令还原模式, 注意细节： 如果你有增量备份，需要把增量备份文件也进行恢复， 有几个增量备份文件，就要恢复几个，按顺序来恢复即可。</p>
<p>测试</p>
<p>mkdir &#x2F;opt&#x2F;boottmp cd &#x2F;opt&#x2F;boottmp</p>
<p>restore -r -f &#x2F;opt&#x2F;boot.bak0.bz2 &#x2F;&#x2F;恢复到第 1 次完全备份状态</p>
<p>restore -r -f &#x2F;opt&#x2F;boot.bak1.bz2 &#x2F;&#x2F;恢复到第 2 次增量备份状态</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621712.jpeg"></p>
<h3 id="应用案例-4"><a href="#应用案例-4" class="headerlink" title="应用案例 4"></a>应用案例 4</h3><p>restore 命令恢复备份的文件，或者整个目录的文件基本语法： restore -r -f 备份好的文件</p>
<p>测试</p>
<p>[root@hspedu100 opt]# mkdir etctmp [root@hspedu100 opt]# cd etctmp&#x2F;</p>
<p>[root@hspedu100 etctmp]# restore -r -f &#x2F;opt&#x2F;etc.bak0.bz2</p>
<h1 id="第-25-章Linux-可视化管理-webmin-和-bt-运维工具"><a href="#第-25-章Linux-可视化管理-webmin-和-bt-运维工具" class="headerlink" title="第 25 章Linux 可视化管理-webmin 和 bt 运维工具"></a>第 25 章Linux 可视化管理-webmin 和 bt 运维工具</h1><h2 id="webmin"><a href="#webmin" class="headerlink" title="webmin"></a>webmin</h2><h3 id="基本介绍-19"><a href="#基本介绍-19" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621713.jpeg">Webmin 是功能强大的基于 Web 的 Unix&#x2F;linux 系统管理工具。管理员通过浏览器访问 Webmin 的各种管理功能并完成相应的管理操作。除了各版本的 linux 以外还可用于：AIX、HPUX、Solaris、Unixware、Irix 和 FreeBSD 等系统</p>
<h3 id="安装webmin-配置"><a href="#安装webmin-配置" class="headerlink" title="安装webmin&amp;配置"></a>安装webmin&amp;配置</h3><ol>
<li>下载地址 : <a href="http://download.webmin.com/download/yum/">http://download.webmin.com/download/yum/</a> , 用下载工具下载即可</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621714.jpeg"></p>
<p>也可以使用 wget <a href="http://download.webmin.com/download/yum/webmin-1.700-1.noarch.rpm">http://download.webmin.com/download/yum/webmin-1.700-1.noarch.rpm</a></p>
<ol start="2">
<li><p>安装： rpm -ivh webmin-1.700-1.noarch.rpm</p>
</li>
<li><p>重置密码 &#x2F;usr&#x2F;libexec&#x2F;webmin&#x2F;changepass.pl &#x2F;etc&#x2F;webmin root test</p>
<p>root 是 webmin 的用户名，不是 OS 的 , 这里就是把 webmin 的 root 用户密码改成了 test</p>
</li>
<li><p>修改 webmin 服务的端口号（默认是 10000 出于安全目的）</p>
<p>vim &#x2F;etc&#x2F;webmin&#x2F;miniserv.conf # 修改端口</p>
</li>
<li><p>将 port&#x3D;10000 修改为其他端口号，如 port&#x3D;6666</p>
</li>
<li><p>重启 webmin</p>
<p>&#x2F;etc&#x2F;webmin&#x2F;restart # 重启</p>
<p>&#x2F;etc&#x2F;webmin&#x2F;start # 启动</p>
<p>&#x2F;etc&#x2F;webmin&#x2F;stop # 停止</p>
</li>
<li><p>防火墙放开 6666 端口</p>
<p>firewall-cmd –zone&#x3D;public –add-port&#x3D;6666&#x2F;tcp –permanent # 配置防火墙开放 6666 端口</p>
<p>firewall-cmd –reload # 更新防火墙配置</p>
<p>firewall-cmd –zone&#x3D;public –list-ports # 查看已经开放的端口号</p>
</li>
<li><p>登录 webmin <a href="http://ip:6666/">http://ip:6666</a> 可以访问了</p>
<p>用 root 账号和重置的新密码 test</p>
</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621715.jpeg"></p>
<h3 id="简单使用演示"><a href="#简单使用演示" class="headerlink" title="简单使用演示"></a>简单使用演示</h3><p>比如修改 语言设置，IP 访问控制，查看进程, 修改密码， 任务调度，mysql 等.</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621716.jpeg"></p>
<h2 id="bt-宝塔"><a href="#bt-宝塔" class="headerlink" title="bt(宝塔)"></a>bt(宝塔)</h2><h3 id="基本介绍-20"><a href="#基本介绍-20" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>bt 宝塔 Linux 面板是提升运维效率的服务器管理软件，支持一键 LAMP&#x2F;LNMP&#x2F;集群&#x2F;监控&#x2F;网站&#x2F;FTP&#x2F;数据库&#x2F;JAVA 等多项服务器管理功能。</p>
<h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><ol>
<li>安装 : yum install -y wget &amp;&amp; wget -O install.sh <a href="http://download.bt.cn/install/install_6.0.sh">http://download.bt.cn/install/install_6.0.sh</a> &amp;&amp; sh install.sh</li>
<li>安装成功后控制台会显示登录地址，账户密码，复制浏览器打开登录，</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621717.jpeg"></p>
<h3 id="使用介绍，-比如可以登录终端-配置，快捷安装运行环境和系统工具-添加计划任务脚本"><a href="#使用介绍，-比如可以登录终端-配置，快捷安装运行环境和系统工具-添加计划任务脚本" class="headerlink" title="使用介绍， 比如可以登录终端, 配置，快捷安装运行环境和系统工具, 添加计划任务脚本"></a>使用介绍， 比如可以登录终端, 配置，快捷安装运行环境和系统工具, 添加计划任务脚本</h3><p><a href="http://192.168.200.130:8888/2e673418/">http://192.168.200.130:8888/2e673418/</a></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621718.jpeg"></p>
<h3 id="如果bt-的用户名，密码忘记了，使用-bt-default-可以查看"><a href="#如果bt-的用户名，密码忘记了，使用-bt-default-可以查看" class="headerlink" title="如果bt 的用户名，密码忘记了，使用 bt default 可以查看"></a>如果bt 的用户名，密码忘记了，使用 bt default 可以查看</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621719.jpeg"></p>
<h1 id="第-26-章Linux-面试题-腾讯-百度-美团-滴滴"><a href="#第-26-章Linux-面试题-腾讯-百度-美团-滴滴" class="headerlink" title="第 26 章Linux 面试题-(腾讯,百度,美团,滴滴)"></a>第 26 章Linux 面试题-(腾讯,百度,美团,滴滴)</h1><h2 id="分析日志t-log-访问量-，将各个ip-地址截取，并统计出现次数-并按从大到小排序-腾讯"><a href="#分析日志t-log-访问量-，将各个ip-地址截取，并统计出现次数-并按从大到小排序-腾讯" class="headerlink" title="分析日志t.log(访问量)，将各个ip 地址截取，并统计出现次数,并按从大到小排序(腾讯)"></a>分析日志t.log(访问量)，将各个ip 地址截取，并统计出现次数,并按从大到小排序(腾讯)</h2><p><a href="http://192.168.200.10/index1.html">http://192.168.200.10/index1.html</a> <a href="http://192.168.200.10/index2.html">http://192.168.200.10/index2.html</a> <a href="http://192.168.200.20/index1.html">http://192.168.200.20/index1.html</a> <a href="http://192.168.200.30/index1.html">http://192.168.200.30/index1.html</a> <a href="http://192.168.200.40/index1.html">http://192.168.200.40/index1.html</a> <a href="http://192.168.200.30/order.html">http://192.168.200.30/order.html</a> <a href="http://192.168.200.10/order.html">http://192.168.200.10/order.html</a></p>
<p>答案: cat t.txt | cut -d ‘&#x2F;‘ -f 3 | sort | uniq -c | sort -nr</p>
<h2 id="统计连接到服务器的各个-ip-情况，并按连接数从大到小排序-腾讯"><a href="#统计连接到服务器的各个-ip-情况，并按连接数从大到小排序-腾讯" class="headerlink" title="统计连接到服务器的各个 ip 情况，并按连接数从大到小排序 (腾讯)"></a>统计连接到服务器的各个 ip 情况，并按连接数从大到小排序 (腾讯)</h2><p>netstat -an | grep ESTABLISHED | awk -F “ “ ‘{print $5}’ | cut -d “:” -f 1 | sort | uniq -c| sort -nr</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621720.jpeg"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621721.jpeg"></p>
<h2 id="问题：如忘记了mysql5-7-数据库的-ROOT-用户的密码，如何找回-滴滴"><a href="#问题：如忘记了mysql5-7-数据库的-ROOT-用户的密码，如何找回-滴滴" class="headerlink" title="问题：如忘记了mysql5.7 数据库的 ROOT 用户的密码，如何找回? (滴滴)"></a>问题：如忘记了mysql5.7 数据库的 ROOT 用户的密码，如何找回? (滴滴)</h2><h2 id="写出指令：统计-ip-访问情况，要求分析nginx-访问日志-access-log-，找出访问页面数量在前-2-位的-ip-美团"><a href="#写出指令：统计-ip-访问情况，要求分析nginx-访问日志-access-log-，找出访问页面数量在前-2-位的-ip-美团" class="headerlink" title="写出指令：统计 ip 访问情况，要求分析nginx 访问日志(access.log)，找出访问页面数量在前 2 位的 ip(美团)"></a>写出指令：统计 ip 访问情况，要求分析nginx 访问日志(access.log)，找出访问页面数量在前 2 位的 ip(美团)</h2><p>cat access.log | awk -F “ “ ‘{print $1}’ | sort | uniq -c | sort -nr | head -2</p>
<h2 id="使用-tcpdump-监听本机-将来自ip-192-168-200-1，tcp-端口为-22-的数据，保存输出到"><a href="#使用-tcpdump-监听本机-将来自ip-192-168-200-1，tcp-端口为-22-的数据，保存输出到" class="headerlink" title="使用 tcpdump 监听本机, 将来自ip 192.168.200.1，tcp 端口为 22 的数据，保存输出到"></a>使用 tcpdump 监听本机, 将来自ip 192.168.200.1，tcp 端口为 22 的数据，保存输出到</h2><p>tcpdump.log , 用做将来数据分析(美团) &gt;&gt;</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621722.jpeg"></p>
<p>tcpdump -i ens33 host 192.168.200.1 and port 22 &gt;&gt; &#x2F;home&#x2F;tcpdump.log</p>
<h2 id="常用的Nginx-模块，用来做什么-头条"><a href="#常用的Nginx-模块，用来做什么-头条" class="headerlink" title="常用的Nginx 模块，用来做什么(头条)"></a>常用的Nginx 模块，用来做什么(头条)</h2><p>rewrite 模块，实现重写功能</p>
<p>access 模块：来源控制</p>
<p>ssl 模块：安全加密</p>
<p>ngx_http_gzip_module：网络传输压缩模块 ngx_http_proxy_module 模块实现代理 ngx_http_upstream_module 模块实现定义后端服务器列表 ngx_cache_purge 实现缓存清除功能</p>
<h2 id="如果你是系统管理员，在进行Linux-系统权限划分时-应考虑哪些因素-（腾讯）"><a href="#如果你是系统管理员，在进行Linux-系统权限划分时-应考虑哪些因素-（腾讯）" class="headerlink" title="如果你是系统管理员，在进行Linux 系统权限划分时,应考虑哪些因素?（腾讯）"></a>如果你是系统管理员，在进行Linux 系统权限划分时,应考虑哪些因素?（腾讯）</h2><ol>
<li>首先阐述 Linux 权限的主要对象</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621723.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621724.jpeg"></p>
<ol start="2">
<li>根据自己实际经验谈考虑因素</li>
</ol>
<ul>
<li><p>注意权限分离，比如: 工作中，Linux 系统权限和数据库权限不要在同一个部门</p>
<ul>
<li><p>权限最小原则(即:在满足使用的情况下最少优先)</p>
</li>
<li><p>减少使用 root 用户，尽量用普通用户+sudo 提权进行日常操作。</p>
</li>
<li><p>重要的系统文件，比如&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow etc&#x2F;fstab，&#x2F;etc&#x2F;sudoers 等,日常建议使用 chattr(change attribute)锁定,</p>
<p>需要操作时再打开。【演示 比如: 锁定 &#x2F;etc&#x2F;passwd 让任何用户都不能随意 useradd,除非解除锁定】</p>
</li>
</ul>
</li>
<li><p>使用 SUID, SGID, Sticky 设置特殊权限。</p>
<ul>
<li>可以利用工具，比如 chkrootkit&#x2F;rootkit hunter 检测 rootkit 脚本（rootkit 是入侵者使用工具,在不察觉的建立了入侵系统途径） [演示使用 wget <a href="ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz">ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</a> ]</li>
<li>利用工具 Tripwire 检测文件系统完整性</li>
</ul>
</li>
</ul>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621725.jpeg"><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621726.jpeg"></p>
<h2 id="权限操作思考题"><a href="#权限操作思考题" class="headerlink" title="权限操作思考题"></a>权限操作思考题</h2><ol>
<li><p>用户 tom 对目录 &#x2F;home&#x2F;test 有执行 x 和读 r 写 w 权限，&#x2F;home&#x2F;test&#x2F;hello.java 是只读文件，问 tom 对 hello.java 文件能读吗(ok)? 能修改吗(no)？能删除吗?(ok)</p>
</li>
<li><p>用户tom 对目录 &#x2F;home&#x2F;test 只有读写权限，&#x2F;home&#x2F;test&#x2F;hello.java 是只读文件，问tom 对 hello.java 文件能读吗(no)? 能修改吗(no)？能删除吗(no)?</p>
</li>
<li><p>用户 tom 对目录 &#x2F;home&#x2F;test 只有执行权限 x，&#x2F;home&#x2F;test&#x2F;hello.java 是只读文件，问 tom 对 hello.java 文件能读吗(ok)?能修改吗(no)？能删除吗(no)?</p>
</li>
<li><p>用户 tom 对目录 &#x2F;home&#x2F;test 只有执行和写权限，&#x2F;home&#x2F;test&#x2F;hello.java 是只读文件，问 tom 对 hello.java 文件能读吗</p>
<p>(ok)? 能修改吗(no)？能删除吗(ok)?</p>
</li>
</ol>
<h2 id="说明-Centos7-启动流程，并说明和CentOS6-相同和不同的地方-腾讯"><a href="#说明-Centos7-启动流程，并说明和CentOS6-相同和不同的地方-腾讯" class="headerlink" title="说明 Centos7 启动流程，并说明和CentOS6 相同和不同的地方(腾讯)"></a>说明 Centos7 启动流程，并说明和CentOS6 相同和不同的地方(腾讯)</h2><h2 id="问题：列举-Linux-高级命令，至少-6-个-百度"><a href="#问题：列举-Linux-高级命令，至少-6-个-百度" class="headerlink" title="问题：列举 Linux 高级命令，至少 6 个(百度)"></a>问题：列举 Linux 高级命令，至少 6 个(百度)</h2><p>netstat &#x2F;&#x2F;网络状态监控 top &#x2F;&#x2F;系统运行状态 lsblk &#x2F;&#x2F;查看硬盘分区 find</p>
<p>ps -aux &#x2F;&#x2F;查看运行进程 chkconfig &#x2F;&#x2F;查看服务启动状态 systemctl &#x2F;&#x2F;管理系统服务器</p>
<h2 id="问题：Linux-查看内存、io-读写、磁盘存储、端口占用、进程查看命令是什么-瓜子"><a href="#问题：Linux-查看内存、io-读写、磁盘存储、端口占用、进程查看命令是什么-瓜子" class="headerlink" title="问题：Linux 查看内存、io 读写、磁盘存储、端口占用、进程查看命令是什么?(瓜子)"></a>问题：Linux 查看内存、io 读写、磁盘存储、端口占用、进程查看命令是什么?(瓜子)</h2><p>top, iotop, df -lh , netstat -tunlp , ps -aux | grep 关心的进程</p>
<h2 id="使用-Linux-命令计算-t2-txt-第二列的和并输出-美团"><a href="#使用-Linux-命令计算-t2-txt-第二列的和并输出-美团" class="headerlink" title="使用 Linux 命令计算 t2.txt 第二列的和并输出 (美团)"></a>使用 Linux 命令计算 t2.txt 第二列的和并输出 (美团)</h2><p>张三 40</p>
<p>李四 50</p>
<p>王五 60</p>
<p>cat t2.txt | awk -F “ “ ‘{sum+&#x3D;$2} END {print sum}’</p>
<h2 id="Shell-脚本里如何检查一个文件是否存在？并给出提示-百度"><a href="#Shell-脚本里如何检查一个文件是否存在？并给出提示-百度" class="headerlink" title="Shell 脚本里如何检查一个文件是否存在？并给出提示(百度)"></a>Shell 脚本里如何检查一个文件是否存在？并给出提示(百度)</h2><p>if [ -f 文件名 ] then echo “存在” else echo “不存在” fi</p>
<h2 id="用shell-写一个脚本，对文本-t3-txt-中无序的一列数字排序-并将总和输出-百度"><a href="#用shell-写一个脚本，对文本-t3-txt-中无序的一列数字排序-并将总和输出-百度" class="headerlink" title="用shell 写一个脚本，对文本 t3.txt 中无序的一列数字排序, 并将总和输出(百度)"></a>用shell 写一个脚本，对文本 t3.txt 中无序的一列数字排序, 并将总和输出(百度)</h2><p>9</p>
<p>8</p>
<p>7</p>
<p>6</p>
<p>5</p>
<p>4</p>
<p>3</p>
<p>2</p>
<p>10</p>
<p>sort -nr t3.txt | awk ‘{sum+&#x3D;$0; print $0} END {print “和&#x3D;”sum}</p>
<h2 id="请用指令写出查找当前文件夹（-home）下所有的文本文件内容中包含有字符-“cat”的文件名称-金山"><a href="#请用指令写出查找当前文件夹（-home）下所有的文本文件内容中包含有字符-“cat”的文件名称-金山" class="headerlink" title="请用指令写出查找当前文件夹（&#x2F;home）下所有的文本文件内容中包含有字符 “cat”的文件名称(金山)"></a>请用指令写出查找当前文件夹（&#x2F;home）下所有的文本文件内容中包含有字符 “cat”的文件名称(金山)</h2><p>grep -r “cat” &#x2F;home |cut -d “:” -f 1</p>
<h2 id="请写出统计-home-目录下所有文件个数和所有文件总行数的指令-在金山面试题扩展"><a href="#请写出统计-home-目录下所有文件个数和所有文件总行数的指令-在金山面试题扩展" class="headerlink" title="请写出统计&#x2F;home 目录下所有文件个数和所有文件总行数的指令(在金山面试题扩展)"></a>请写出统计&#x2F;home 目录下所有文件个数和所有文件总行数的指令(在金山面试题扩展)</h2><p>find &#x2F;home&#x2F;test -name “*.*“ | wc -l</p>
<p>find &#x2F;home&#x2F;test -name “*.*“ | xargs wc -l</p>
<h2 id="列出你了解的web-服务器负载架构-滴滴"><a href="#列出你了解的web-服务器负载架构-滴滴" class="headerlink" title="列出你了解的web 服务器负载架构(滴滴)"></a>列出你了解的web 服务器负载架构(滴滴)</h2><p>Nginx Haproxy Keepalived LVS</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621727.jpeg"></p>
<h2 id="每天晚上-10-点-30-分，打包站点目录-var-spool-mail-备份到-home-目录下（每次备份按时间生成不同的备份包-比如按照-年月日时分秒）-滴滴"><a href="#每天晚上-10-点-30-分，打包站点目录-var-spool-mail-备份到-home-目录下（每次备份按时间生成不同的备份包-比如按照-年月日时分秒）-滴滴" class="headerlink" title="每天晚上 10 点 30 分，打包站点目录&#x2F;var&#x2F;spool&#x2F;mail 备份到&#x2F;home 目录下（每次备份按时间生成不同的备份包 比如按照 年月日时分秒）(滴滴)"></a>每天晚上 10 点 30 分，打包站点目录&#x2F;var&#x2F;spool&#x2F;mail 备份到&#x2F;home 目录下（每次备份按时间生成不同的备份包 比如按照 年月日时分秒）(滴滴)</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621728.jpeg"></p>
<h2 id="如何优化Linux-系统，-说出你的方法-瓜子"><a href="#如何优化Linux-系统，-说出你的方法-瓜子" class="headerlink" title="如何优化Linux 系统， 说出你的方法 (瓜子)"></a>如何优化Linux 系统， 说出你的方法 (瓜子)</h2><ol>
<li>对 Linux 的架构的优化，和原则分析(示意图)</li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502271621729.jpeg"></p>
<ol start="2">
<li>对 linux 系统本身的优化-规则</li>
<li>不用 root ,使用 sudo 提示权限</li>
<li>定时的自动更新服务时间,使用 nptdate npt1.aliyun.com , 让 croud 定时更新</li>
<li>配置 yum 源，指向国内镜像(清华，163)</li>
<li>配置合理的防火墙策略,打开必要的端口，关闭不必要的端口</li>
<li>打开最大文件数(调整文件的描述的数量) vim &#x2F;etc&#x2F;profile ulimit -SHn 65535</li>
<li>配置合理的监控策略</li>
<li>配置合理的系统重要文件的备份策略</li>
<li>对安装的软件进行优化，比如 nginx ,apache</li>
<li>内核参数进行优化 &#x2F;etc&#x2F;sysctl.conf</li>
<li>锁定一些重要的系统文件 chattr &#x2F;etc&#x2F;passwd &#x2F;ect&#x2F;shadow &#x2F;etc&#x2F;inittab</li>
<li>禁用不必要的服务 setup , ntsysv</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python算法学习笔记</title>
    <url>/2025/03/01/Python%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据的两种结构<strong>逻辑结构</strong>和<strong>存储结构（物理结构）</strong></p>
<ul>
<li>逻辑结构<ul>
<li>线性结构<ul>
<li>线性表</li>
<li>队列</li>
<li>栈</li>
</ul>
</li>
<li>非线性结构<ul>
<li>树形结构</li>
<li>图状结构</li>
<li>集合结构</li>
</ul>
</li>
</ul>
</li>
<li>存储结构<ul>
<li>顺序存储结构</li>
<li>链式存储结构</li>
</ul>
</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法是<strong>解决某一特定问题的指定描述</strong></p>
<h3 id="算法的特征"><a href="#算法的特征" class="headerlink" title="算法的特征"></a>算法的特征</h3><ul>
<li>有穷性</li>
<li>确定性（唯一性）</li>
<li>可行性</li>
<li>输入</li>
<li>输出</li>
</ul>
<h3 id="算法的评价"><a href="#算法的评价" class="headerlink" title="算法的评价"></a>算法的评价</h3><ul>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>效率和低存储</li>
</ul>
<h4 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747290.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747318.png" style="zoom:80%;" />



<h4 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h4><p>和时间复杂度相比不那么重要，一般算法采取的措施为用空间换时间，即用一部分的空间消耗来缩短计算时间。</p>
<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="汉诺塔问题（递归调用）"><a href="#汉诺塔问题（递归调用）" class="headerlink" title="汉诺塔问题（递归调用）"></a>汉诺塔问题（递归调用）</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747239.png" style="zoom:60%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 汉诺塔算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HanNoTa</span>(<span class="params">n, a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        HanNoTa(n - <span class="number">1</span>, a, c, b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;moving form <span class="subst">&#123;a&#125;</span> to <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">        HanNoTa(n - <span class="number">1</span>, b, a, c)</span><br><span class="line"></span><br><span class="line">HanNoTa(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>







<h1 id="查找排序"><a href="#查找排序" class="headerlink" title="查找排序"></a>查找排序</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二分查找</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li, val, key=<span class="number">1</span></span>):</span><br><span class="line">    list_li = <span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(li))), li))</span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">1</span>:</span><br><span class="line">        list_li = <span class="built_in">sorted</span>(list_li, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(list_li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> list_li[mid][<span class="number">1</span>] == val:</span><br><span class="line">            <span class="keyword">return</span> list_li[mid][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> list_li[mid][<span class="number">1</span>] &gt; val:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">ind = binary_search(a, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br><span class="line">ind = binary_search(b, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br></pre></td></tr></table></figure>







<h2 id="检查排序是否完成"><a href="#检查排序是否完成" class="headerlink" title="检查排序是否完成"></a>检查排序是否完成</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">li, reverse=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> reverse == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[i] &gt; li[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> reverse == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[i] &lt; li[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j + <span class="number">1</span>]:</span><br><span class="line">                li[j], li[j + <span class="number">1</span>] = li[j + <span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">bubble_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>



<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        <span class="keyword">if</span> min_loc != i:</span><br><span class="line">            li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">select_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>



<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">            li[j + <span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j + <span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">insert_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>



<h2 id="希尔排序（高级版插入排序）"><a href="#希尔排序（高级版插入排序）" class="headerlink" title="希尔排序（高级版插入排序）"></a>希尔排序（高级版插入排序）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort_gap</span>(<span class="params">li, gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">            li[j + gap] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j + gap] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10000</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line">li1 = copy.deepcopy(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(li1)</span><br><span class="line">start = time.time()</span><br><span class="line">shell_sort(li)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br><span class="line"><span class="built_in">print</span>(li1)</span><br><span class="line">start = time.time()</span><br><span class="line">insert_sort_gap(li1, <span class="number">1</span>)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(li1)</span><br></pre></td></tr></table></figure>



<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># sys.setrecursionlimit(100000)     # 设置递归最大深度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    tmp = li[left]  <span class="comment"># 记录下最左边的数</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:  <span class="comment"># 找到记录下的数的最合适的位置</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:  <span class="comment"># 从右边找比tmp小的数的位置</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        li[left] = li[right]  <span class="comment"># 把右边较大的值写到左边的位置上</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:  <span class="comment"># 从左边找比tmp大的数的位置</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]  <span class="comment"># 把左边较小的值写到右边的位置上</span></span><br><span class="line">    li[left] = tmp  <span class="comment"># 把记录下的数写到合适的位置</span></span><br><span class="line">    <span class="keyword">return</span> left  <span class="comment"># 返回找到的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_quick_sort</span>(<span class="params">li, left, right</span>):  <span class="comment"># 递归调用</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:  <span class="comment"># 至少两个元素才进行递归调用</span></span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        _quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">        _quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li</span>):</span><br><span class="line">    _quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">start = time.time()</span><br><span class="line">quick_sort(li)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure>





<h2 id="堆排序（二叉树）"><a href="#堆排序（二叉树）" class="headerlink" title="堆排序（二叉树）"></a>堆排序（二叉树）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param li:列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点的位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># 最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j为根节点的左孩子</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 把堆顶元素存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:	<span class="comment"># 建立大根堆</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j + <span class="number">1</span>] &gt; li[j]:  <span class="comment"># 如果右孩子存在并且比左孩子大</span></span><br><span class="line">            j = j + <span class="number">1</span>  <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:  <span class="comment"># 如果孩子节点大于父亲节点</span></span><br><span class="line">            li[i] = li[j]  <span class="comment"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class="line">            i = j  <span class="comment"># 指针下移</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 因为tmp比孩子节点更大，找到合适的位置</span></span><br><span class="line">            li[i] = tmp  <span class="comment"># 找到根节点合适的位置并放入</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp  <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n - <span class="number">2</span>) // <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class="line">        sift(li, i, n - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 建堆完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]  <span class="comment"># 将最后一个元素与堆顶元素交换位置</span></span><br><span class="line">        sift(li, <span class="number">0</span>, i - <span class="number">1</span>)  <span class="comment"># i-1是新的high</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">start = time.time()</span><br><span class="line">heap_sort(li)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure>

<h4 id="python中内置好的堆排序函数"><a href="#python中内置好的堆排序函数" class="headerlink" title="python中内置好的堆排序函数"></a>python中内置好的堆排序函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中内置好的堆排序</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">random.shuffle(li)      <span class="comment"># 打乱列表</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">heapq.heapify(li)       <span class="comment"># 建堆</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">    <span class="built_in">print</span>(heapq.heappop(li), end=<span class="string">&quot;,&quot;</span>)       <span class="comment"># 弹出一个堆中最小的元素</span></span><br></pre></td></tr></table></figure>



<h4 id="利用堆排序解决topk问题"><a href="#利用堆排序解决topk问题" class="headerlink" title="利用堆排序解决topk问题"></a>利用堆排序解决topk问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用堆排序解决topk问题</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param li:列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点的位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># 最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j为根节点的左孩子</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 把堆顶元素存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment"># 建立小根堆</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j + <span class="number">1</span>] &lt; li[j]:  <span class="comment"># 如果右孩子存在并且比左孩子小</span></span><br><span class="line">            j = j + <span class="number">1</span>  <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &lt; tmp:  <span class="comment"># 如果孩子节点小于父亲节点</span></span><br><span class="line">            li[i] = li[j]  <span class="comment"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class="line">            i = j  <span class="comment"># 指针下移</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 因为tmp比孩子节点更小，找到合适的位置</span></span><br><span class="line">            li[i] = tmp  <span class="comment"># 找到根节点合适的位置并放入</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp  <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topk</span>(<span class="params">li, k</span>):</span><br><span class="line">    heap = li[<span class="number">0</span>:k]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((k - <span class="number">2</span>) // <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 建立小根堆</span></span><br><span class="line">        sift(heap, i, k - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(li) - <span class="number">1</span>):  <span class="comment"># 遍历</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &gt; heap[<span class="number">0</span>]:</span><br><span class="line">            heap[<span class="number">0</span>] = li[i]</span><br><span class="line">            sift(heap, <span class="number">0</span>, k - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 对结果排序</span></span><br><span class="line">        heap[<span class="number">0</span>], heap[i] = heap[i], heap[<span class="number">0</span>]</span><br><span class="line">        sift(heap, <span class="number">0</span>, i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> heap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(topk(li, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>





<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):  <span class="comment"># 对列表中mid左右两边的子列表进行排序</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:  <span class="comment"># 左右两个子列表都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high + <span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有两个元素，递归</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        _merge_sort(li, low, mid)</span><br><span class="line">        _merge_sort(li, mid + <span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li</span>):</span><br><span class="line">    _merge_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">merge_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>







<h2 id="六种排序方法的总结"><a href="#六种排序方法的总结" class="headerlink" title="六种排序方法的总结"></a>六种排序方法的总结</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747392.png" style="zoom:80%;" />





<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(li), <span class="built_in">max</span>(li) + <span class="number">1</span>)]</span><br><span class="line">    min_num = <span class="built_in">min</span>(li)</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val - min_num] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(ind + min_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">9</span>, <span class="number">21</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">count_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>





<h2 id="桶排序（高级版计数排序）"><a href="#桶排序（高级版计数排序）" class="headerlink" title="桶排序（高级版计数排序）"></a>桶排序（高级版计数排序）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 桶排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(li)</span><br><span class="line">    n = max_num // <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        buckets = [[]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var // (max_num // n), n - <span class="number">1</span>)       <span class="comment"># i表示var放到几号桶里</span></span><br><span class="line">        buckets[i].append(var)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i]) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):     <span class="comment"># 保持桶内的顺序</span></span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j - <span class="number">1</span>]:</span><br><span class="line">                buckets[i][j], buckets[i][j - <span class="number">1</span>] = buckets[i][j - <span class="number">1</span>], buckets[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        li.extend(buc)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">200</span>))</span><br><span class="line">li1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">200</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li == li1)</span><br><span class="line">bucket_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(li == li1)</span><br></pre></td></tr></table></figure>





<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">li: <span class="built_in">list</span></span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(li)</span><br><span class="line">    it = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">10</span> ** it &lt;= max_num:  <span class="comment"># 求最大数的位数</span></span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 创建桶</span></span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:  <span class="comment"># 把数放入桶中</span></span><br><span class="line">            digit = (var // <span class="number">10</span> ** it) % <span class="number">10</span>  <span class="comment"># 依次取每个数的位数</span></span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line"></span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">radix_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(check(li))</span><br></pre></td></tr></table></figure>





<h1 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><ul>
<li><strong><a href="#%E5%88%97%E8%A1%A8%EF%BC%88%E5%8D%B3%E9%A1%BA%E5%BA%8F%E8%A1%A8%EF%BC%89">顺序表</a></strong></li>
<li><strong><a href="#%E9%93%BE%E8%A1%A8">链表</a></strong></li>
</ul>
<h2 id="列表（即顺序表）"><a href="#列表（即顺序表）" class="headerlink" title="列表（即顺序表）"></a>列表（即顺序表）</h2><ol>
<li>列表内的每个节点储存的元素为地址，所以列表内部可以时任意数据类型</li>
<li>列表是动态分配存储空间，列表长度不够的时候，python底层会为列表重新开辟一个更大的空间，并把原先列表中存储的地址复制到新开辟的空间中</li>
</ol>
<h2 id="栈（后进先出）"><a href="#栈（后进先出）" class="headerlink" title="栈（后进先出）"></a>栈（后进先出）</h2><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>列表（li）结构可以实现栈</p>
<ul>
<li>进栈：li.append</li>
<li>出栈：li.pop</li>
<li>取栈顶：li[-1]</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack = Stack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br><span class="line"><span class="built_in">print</span>(stack.is_empty())</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br><span class="line"><span class="built_in">print</span>(stack.is_empty())</span><br><span class="line"><span class="built_in">print</span>(stack.pop())</span><br></pre></td></tr></table></figure>



<h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stack_linked</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Node=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = Node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = ListNode(val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = ListNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        val = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack = stack_linked()</span><br><span class="line">stack.push(<span class="number">5</span>)</span><br><span class="line">stack.push(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.pop().val)</span><br><span class="line"><span class="built_in">print</span>(stack.head.val)</span><br></pre></td></tr></table></figure>



<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><h4 id="迷宫问题（找的不一定是最短路径）"><a href="#迷宫问题（找的不一定是最短路径）" class="headerlink" title="迷宫问题（找的不一定是最短路径）"></a>迷宫问题（找的不一定是最短路径）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x + <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y + <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x - <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y - <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_path</span>(<span class="params">x1, y1, x2, y2</span>):</span><br><span class="line">    stack = []</span><br><span class="line">    stack.append((x1, y1))</span><br><span class="line">    <span class="built_in">map</span>[x1][y1]=<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                stack.append(nextNode)</span><br><span class="line">                <span class="built_in">map</span>[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">map</span>[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">            stack.pop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有路&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map_path(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>



<h4 id="十进制转化为其他进制"><a href="#十进制转化为其他进制" class="headerlink" title="十进制转化为其他进制"></a>十进制转化为其他进制</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制转化为其他进制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base_conversion</span>(<span class="params">val, base</span>):</span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">while</span> val != <span class="number">0</span>:</span><br><span class="line">        li.append(val % base)</span><br><span class="line">        val = val // base</span><br><span class="line"></span><br><span class="line">    li.reverse()</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,li))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base_conversion(<span class="number">120</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>



<h2 id="队列（先进先出）"><a href="#队列（先进先出）" class="headerlink" title="队列（先进先出）"></a>队列（先进先出）</h2><p>列表（li）可以实现队列</p>
<ul>
<li>入队：li.append</li>
<li>出队：li.pop(0)</li>
<li>取队头：li[0]</li>
</ul>
<h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><h4 id="基础队列类"><a href="#基础队列类" class="headerlink" title="基础队列类"></a>基础队列类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.queue) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue = Queue()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.is_empty())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.get_top())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.is_empty())</span><br></pre></td></tr></table></figure>



<h4 id="循环队列类"><a href="#循环队列类" class="headerlink" title="循环队列类"></a>循环队列类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">100</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        <span class="variable language_">self</span>.size = size</span><br><span class="line">        <span class="variable language_">self</span>.rear = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.front = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_filled():</span><br><span class="line">            <span class="variable language_">self</span>.rear = (<span class="variable language_">self</span>.rear + <span class="number">1</span>) % <span class="variable language_">self</span>.size</span><br><span class="line">            <span class="variable language_">self</span>.queue[<span class="variable language_">self</span>.rear] = element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is filled&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>.front = (<span class="variable language_">self</span>.front + <span class="number">1</span>) % <span class="variable language_">self</span>.size</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="variable language_">self</span>.front]</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="variable language_">self</span>.rear]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.rear == <span class="variable language_">self</span>.front</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_filled</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.rear + <span class="number">1</span>) % <span class="variable language_">self</span>.size == <span class="variable language_">self</span>.front</span><br><span class="line"></span><br><span class="line">queue=Queue(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.is_empty())</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line">queue.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.is_filled())</span><br><span class="line"><span class="built_in">print</span>(queue.get_top())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br><span class="line"><span class="built_in">print</span>(queue.pop())</span><br></pre></td></tr></table></figure>



<h4 id="内置队列"><a href="#内置队列" class="headerlink" title="内置队列"></a>内置队列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque  <span class="comment"># 双向队列</span></span><br><span class="line"></span><br><span class="line">q = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">4</span>)</span><br><span class="line">q.append(<span class="number">5</span>)  <span class="comment"># 队尾进</span></span><br><span class="line"><span class="built_in">print</span>(q.popleft())  <span class="comment"># 队首出</span></span><br><span class="line"></span><br><span class="line">q.clear()</span><br><span class="line">q.appendleft(<span class="number">1</span>)  <span class="comment"># 队首进</span></span><br><span class="line">q.appendleft(<span class="number">2</span>)</span><br><span class="line">q.appendleft(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.pop())  <span class="comment"># 队尾出</span></span><br><span class="line"><span class="built_in">print</span>(q.pop())</span><br><span class="line"><span class="built_in">print</span>(q.pop())</span><br></pre></td></tr></table></figure>



<h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">queue_linked</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.front = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.rear = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val</span>):</span><br><span class="line">        node = Node(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.front <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.front = node</span><br><span class="line">            <span class="variable language_">self</span>.rear = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.rear.<span class="built_in">next</span> = node</span><br><span class="line">            <span class="variable language_">self</span>.rear = <span class="variable language_">self</span>.rear.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.front == <span class="variable language_">self</span>.rear <span class="keyword">and</span> <span class="variable language_">self</span>.front:</span><br><span class="line">            node = <span class="variable language_">self</span>.front</span><br><span class="line">            <span class="variable language_">self</span>.front = <span class="variable language_">self</span>.rear = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.front:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            node = <span class="variable language_">self</span>.front</span><br><span class="line">            <span class="variable language_">self</span>.front = <span class="variable language_">self</span>.front.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.front.val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.front <span class="keyword">and</span> <span class="variable language_">self</span>.rear:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.front</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            <span class="built_in">print</span>(p.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue = queue_linked()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.pop().val)</span><br><span class="line"><span class="built_in">print</span>(queue.pop().val)</span><br><span class="line"><span class="built_in">print</span>(queue.pop().val)</span><br><span class="line"><span class="comment"># print(queue.peek())</span></span><br><span class="line">queue.show()</span><br></pre></td></tr></table></figure>



<h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><h4 id="迷宫问题（求的是最短路径）"><a href="#迷宫问题（求的是最短路径）" class="headerlink" title="迷宫问题（求的是最短路径）"></a>迷宫问题（求的是最短路径）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x + <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y + <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x - <span class="number">1</span>, y),</span><br><span class="line">    <span class="keyword">lambda</span> x, y: (x, y - <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_path</span>(<span class="params">path, <span class="built_in">map</span></span>):</span><br><span class="line">    curNode = path[-<span class="number">1</span>]</span><br><span class="line">    realpath = []</span><br><span class="line">    <span class="keyword">while</span> curNode[<span class="number">2</span>] != -<span class="number">1</span>:</span><br><span class="line">        realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">map</span>[curNode[<span class="number">0</span>]][curNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">        curNode = path[curNode[<span class="number">2</span>]]</span><br><span class="line">    realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">map</span>[curNode[<span class="number">0</span>]][curNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">    realpath.reverse()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> realpath:</span><br><span class="line">        <span class="built_in">print</span>(node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_path_shortest</span>(<span class="params">x1, y1, x2, y2, <span class="built_in">map</span></span>):</span><br><span class="line">    map1 = copy.deepcopy(<span class="built_in">map</span>)</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append((x1, y1, -<span class="number">1</span>))</span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = queue.popleft()</span><br><span class="line">        path.append(curNode)</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            print_path(path, <span class="built_in">map</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> di <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = di(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> map1[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                queue.append((nextNode[<span class="number">0</span>], nextNode[<span class="number">1</span>], <span class="built_in">len</span>(path) - <span class="number">1</span>))</span><br><span class="line">                map1[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有路&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">map_path_shortest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="built_in">map</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>







<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="单链表的创建"><a href="#单链表的创建" class="headerlink" title="单链表的创建"></a>单链表的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LinkListIterator</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, node</span>):</span><br><span class="line">            <span class="variable language_">self</span>.node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.node:</span><br><span class="line">                cur_node = <span class="variable language_">self</span>.node</span><br><span class="line">                <span class="variable language_">self</span>.node = cur_node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> cur_node.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> iterable:</span><br><span class="line">            <span class="variable language_">self</span>.extend(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        s = ListNode(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = s</span><br><span class="line">            <span class="variable language_">self</span>.tail = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.tail.<span class="built_in">next</span> = s</span><br><span class="line">            <span class="variable language_">self</span>.tail = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> iterable:</span><br><span class="line">            <span class="variable language_">self</span>.append(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="keyword">if</span> n == obj:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, li: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = ListNode(li[<span class="number">0</span>])</span><br><span class="line">        <span class="variable language_">self</span>.tail = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">            node = ListNode(element)</span><br><span class="line">            <span class="variable language_">self</span>.tail.<span class="built_in">next</span> = node</span><br><span class="line">            <span class="variable language_">self</span>.tail = node</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_head</span>(<span class="params">self, li: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = ListNode(li[<span class="number">0</span>])</span><br><span class="line">        <span class="variable language_">self</span>.tail = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">            node = ListNode(element)</span><br><span class="line">            node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">            <span class="variable language_">self</span>.head = node</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        Node = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> Node != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(Node.val, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            Node = Node.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        node = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> node != <span class="variable language_">self</span>.tail:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.get_length():</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> index:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cur.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_index</span>(<span class="params">self, value</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.val == value:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt;= <span class="number">0</span>:</span><br><span class="line">            node = ListNode(val)</span><br><span class="line">            node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">            <span class="variable language_">self</span>.head = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt;= <span class="variable language_">self</span>.get_length():</span><br><span class="line">            <span class="variable language_">self</span>.tail.<span class="built_in">next</span> = ListNode(val)</span><br><span class="line">            <span class="variable language_">self</span>.tail = <span class="variable language_">self</span>.tail.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> index:</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        node.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.get_length():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pre = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">1</span>:</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        pre.<span class="built_in">next</span> = pre.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtValue</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head.val == value:</span><br><span class="line">            <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == value:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.LinkListIterator(<span class="variable language_">self</span>.head)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;&lt;&quot;</span> + <span class="string">&quot;,&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="variable language_">self</span>)) + <span class="string">&quot;&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = LinkedList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>])</span><br><span class="line">li.show()</span><br><span class="line"><span class="built_in">print</span>(li.get_length())</span><br><span class="line"><span class="built_in">print</span>(li.get_index(<span class="number">6</span>))</span><br><span class="line">li.addAtIndex(<span class="number">7</span>, <span class="number">4</span>)</span><br><span class="line">li.show()</span><br><span class="line">li.deleteAtValue(<span class="number">3</span>)</span><br><span class="line">li.show()</span><br><span class="line"><span class="built_in">print</span>(li.get_index(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = ListNode()</span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">0</span>  <span class="comment"># 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        cur = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> (index):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cur.val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtHead</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_node = ListNode(val)</span><br><span class="line">        new_node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>.head.<span class="built_in">next</span> = new_node</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtTail</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_node = ListNode(val)</span><br><span class="line">        cur = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> (cur.<span class="built_in">next</span>):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = new_node</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.addAtHead(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index == <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="variable language_">self</span>.addAtTail(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt; <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        node = ListNode(val)</span><br><span class="line">        pre = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> (index):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        node.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type index: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="variable language_">self</span>.size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pre = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> (index):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        pre.<span class="built_in">next</span> = pre.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>.size -= <span class="number">1</span></span><br></pre></td></tr></table></figure>





<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747258.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747386.png" style="zoom:80%;" />





<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747979.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747960.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747023.png" style="zoom:80%;" />

<h4 id="双链表的创建"><a href="#双链表的创建" class="headerlink" title="双链表的创建"></a>双链表的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.prev = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedListDouble</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._head, <span class="variable language_">self</span>._tail = Node(<span class="number">0</span>), Node(<span class="number">0</span>)  <span class="comment"># 虚拟节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head.<span class="built_in">next</span>, <span class="variable language_">self</span>._tail.prev = <span class="variable language_">self</span>._tail, <span class="variable language_">self</span>._head</span><br><span class="line">        <span class="variable language_">self</span>._count = <span class="number">0</span>  <span class="comment"># 添加的节点数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_node</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; Node:</span><br><span class="line">        <span class="comment"># 当index小于_count//2时, 使用_head查找更快, 反之_tail更快</span></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="variable language_">self</span>._count // <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 使用prev往前找</span></span><br><span class="line">            node = <span class="variable language_">self</span>._tail</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._count - index):</span><br><span class="line">                node = node.prev</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 使用next往后找</span></span><br><span class="line">            node = <span class="variable language_">self</span>._head</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>):</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the value of the index-th node in the linked list. If the index is invalid, return -1.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="variable language_">self</span>._count:</span><br><span class="line">            node = <span class="variable language_">self</span>._get_node(index)</span><br><span class="line">            <span class="keyword">return</span> node.val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtHead</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the first element of the linked list.</span></span><br><span class="line"><span class="string">         After the insertion, the new node will be the first node of the linked list.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._update(<span class="variable language_">self</span>._head, <span class="variable language_">self</span>._head.<span class="built_in">next</span>, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtTail</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Append a node of value val to the last element of the linked list.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._update(<span class="variable language_">self</span>._tail.prev, <span class="variable language_">self</span>._tail, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a node of value val before the index-th node in the linked list.</span></span><br><span class="line"><span class="string">        If index equals to the length of linked list, the node will be appended to the end of linked list.</span></span><br><span class="line"><span class="string">        If index is greater than the length, the node will not be inserted.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> index &gt; <span class="variable language_">self</span>._count:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = <span class="variable language_">self</span>._get_node(index)</span><br><span class="line">        <span class="variable language_">self</span>._update(node.prev, node, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update</span>(<span class="params">self, prev: Node, <span class="built_in">next</span>: Node, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            更新节点</span></span><br><span class="line"><span class="string">            :param prev: 相对于更新的前一个节点</span></span><br><span class="line"><span class="string">            :param next: 相对于更新的后一个节点</span></span><br><span class="line"><span class="string">            :param val:  要添加的节点值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 计数累加</span></span><br><span class="line">        <span class="variable language_">self</span>._count += <span class="number">1</span></span><br><span class="line">        node = Node(val)</span><br><span class="line">        prev.<span class="built_in">next</span>, <span class="built_in">next</span>.prev = node, node</span><br><span class="line">        node.prev, node.<span class="built_in">next</span> = prev, <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Delete the index-th node in the linked list, if the index is valid.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="variable language_">self</span>._count:</span><br><span class="line">            node = <span class="variable language_">self</span>._get_node(index)</span><br><span class="line">            <span class="comment"># 计数-1</span></span><br><span class="line">            <span class="variable language_">self</span>._count -= <span class="number">1</span></span><br><span class="line">            node.prev.<span class="built_in">next</span>, node.<span class="built_in">next</span>.prev = node.<span class="built_in">next</span>, node.prev</span><br></pre></td></tr></table></figure>





<h3 id="链表与数组的差别"><a href="#链表与数组的差别" class="headerlink" title="链表与数组的差别"></a>链表与数组的差别</h3><ul>
<li>链表<ul>
<li>优点：插入删除操作较快，内存可以动态分配</li>
<li>缺点：查找操作较慢</li>
</ul>
</li>
<li>数组<ul>
<li>优点：结构简单，查找操作快</li>
<li>缺点：插入删除操作较慢，内存不能动态分配</li>
</ul>
</li>
</ul>
<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>python中的<strong>集合</strong>，<strong>字典</strong>结构在底层都是用的哈希表来实现的</p>
<h2 id="哈希表（开辟的一系列连续的地址即数组）"><a href="#哈希表（开辟的一系列连续的地址即数组）" class="headerlink" title="哈希表（开辟的一系列连续的地址即数组）"></a>哈希表（开辟的一系列连续的地址即数组）</h2><h2 id="哈希函数（计算输入的值在哈希表中对应下标的函数）"><a href="#哈希函数（计算输入的值在哈希表中对应下标的函数）" class="headerlink" title="哈希函数（计算输入的值在哈希表中对应下标的函数）"></a>哈希函数（计算输入的值在哈希表中对应下标的函数）</h2><h2 id="哈希冲突（对于不同的输入哈希函数输出的结果可能相同）"><a href="#哈希冲突（对于不同的输入哈希函数输出的结果可能相同）" class="headerlink" title="哈希冲突（对于不同的输入哈希函数输出的结果可能相同）"></a>哈希冲突（对于不同的输入哈希函数输出的结果可能相同）</h2><ul>
<li>解决哈希冲突的方法<ul>
<li>线性探测法：如果地址冲突，那么它所存放的位置在哈希表中加一</li>
<li>二次探测法：利用二次函数，计算冲突时，应该存储的位置</li>
<li>拉链存储法：哈希表的每个节点存储的是链表<ul>
<li><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747082.png" style="zoom:80%;" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>根节点</li>
<li>叶子节点</li>
<li>树的深度</li>
<li>节点的度</li>
<li>树的度</li>
<li>父亲节点</li>
<li>孩子节点（左孩子&#x2F;右孩子）</li>
<li>子树</li>
</ul>
<h2 id="二叉树（度为2的树）"><a href="#二叉树（度为2的树）" class="headerlink" title="二叉树（度为2的树）"></a>二叉树（度为2的树）</h2><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol>
<li><p><strong>对于非空二叉树，如果叶子节点树为n<del>0</del>，度为2的节点数为n<del>2</del>，则有n<del>0</del>&#x3D;n<del>2</del>+1</strong></p>
</li>
<li><p><strong>对于非空二叉树的第i层上最多有2^i-1^个节点（满二叉树）</strong></p>
</li>
<li><p><strong>一颗深度为k的二叉树中，最多有2^k^-1个节点（满二叉树）</strong></p>
</li>
<li><p><strong>具有n个节点的完全二叉树的深度为：$\lfloor log_2n \rfloor+1$</strong></p>
</li>
<li><p><strong>如果对于一颗有n个节点的完全二叉树的节点按层序编号，则对任意节点i（1&lt;&#x3D;i&lt;&#x3D;n）</strong></p>
<ol>
<li><p><strong>如果i&#x3D;1，则节点i时二叉树的根节点，如果i&gt;1,则其父亲节点为$\lfloor i&#x2F;2 \rfloor$</strong></p>
</li>
<li><p><strong>如果$2i\leq n$，则其左孩子是节点2i，否则i无左孩子，为叶子节点</strong></p>
</li>
<li><p><strong>如果$2i+1\leq n$，其右孩子是节点2i+1，否则节点i无右孩子</strong></p>
</li>
</ol>
</li>
</ol>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747261.png" alt="Snipaste_2023-01-26_11-05-11" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747182.png" alt="Snipaste_2023-01-26_11-08-01" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747775.png" alt="Snipaste_2023-01-26_11-08-32" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747806.png" alt="Snipaste_2023-01-26_11-09-15" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747915.png" style="zoom:80%;" />



<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul>
<li><p>顺序存储（用列表或者数组储存）（一般适用于完全二叉树）</p>
</li>
<li><p>链式存储</p>
</li>
<li><p>列表存储</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747865.png" style="zoom:80%;" /></li>
</ul>
<h3 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h3><h4 id="层次按序创建"><a href="#层次按序创建" class="headerlink" title="层次按序创建"></a>层次按序创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = left</span><br><span class="line">        <span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, li=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.lt = []</span><br><span class="line">        <span class="keyword">if</span> li:</span><br><span class="line">            <span class="variable language_">self</span>.extend(li)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, li: <span class="built_in">list</span></span>):  <span class="comment"># 层次添加创建</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">            <span class="variable language_">self</span>.add(i)</span><br><span class="line">        <span class="variable language_">self</span>.clear()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, number</span>):</span><br><span class="line">        <span class="comment"># if number is None:</span></span><br><span class="line">        <span class="comment">#     self.lt.pop(0)</span></span><br><span class="line">        <span class="comment">#     return</span></span><br><span class="line">        node = TreeNode(number)  <span class="comment"># 将输入的数字节点化，使其具有左右孩子的属性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.root == <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.root = node</span><br><span class="line">            <span class="variable language_">self</span>.lt.append(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="variable language_">self</span>.lt:</span><br><span class="line">                point = <span class="variable language_">self</span>.lt[<span class="number">0</span>]  <span class="comment"># 依次对左右孩子未满的节点分配孩子</span></span><br><span class="line">                <span class="keyword">if</span> point.val == <span class="literal">None</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.lt.pop(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> point.left == <span class="literal">None</span>:</span><br><span class="line">                    point.left = node</span><br><span class="line">                    <span class="variable language_">self</span>.lt.append(point.left)  <span class="comment"># 该节点后面作为父节点也是未满的，也要加入到列表中。</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> point.right == <span class="literal">None</span>:</span><br><span class="line">                    point.right = node</span><br><span class="line">                    <span class="variable language_">self</span>.lt.append(point.right)  <span class="comment"># 与左孩子同理</span></span><br><span class="line">                    <span class="variable language_">self</span>.lt.pop(<span class="number">0</span>)  <span class="comment"># 表示该节点已拥有左右孩子，从未满列表中去除</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):  <span class="comment"># 清除值为None的节点</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">level_order_traversal</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">            queue = deque()</span><br><span class="line">            queue.append(root)</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.val == <span class="literal">None</span>:</span><br><span class="line">                    node.left = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right <span class="keyword">and</span> node.right.val == <span class="literal">None</span>:</span><br><span class="line">                    node.right = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line"></span><br><span class="line">        level_order_traversal(<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):  <span class="comment"># 前序遍历输出</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(root.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            dfs(root.left)</span><br><span class="line">            dfs(root.right)</span><br><span class="line"></span><br><span class="line">        dfs(<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, val</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">searchdata</span>(<span class="params">T, val</span>):</span><br><span class="line">            <span class="keyword">if</span> T == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> T.val == val:</span><br><span class="line">                <span class="keyword">return</span> T</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = searchdata(T.left, val)</span><br><span class="line">                <span class="keyword">if</span> p != <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> p</span><br><span class="line">                p = searchdata(T.right, val)</span><br><span class="line">                <span class="keyword">if</span> p != <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> searchdata(<span class="variable language_">self</span>.root, val)</span><br></pre></td></tr></table></figure>



<h4 id="函数前序创建"><a href="#函数前序创建" class="headerlink" title="函数前序创建"></a>函数前序创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">creat_binary_tree</span>(<span class="params">input_list=[]</span>):</span><br><span class="line">    <span class="comment"># 构建二叉树</span></span><br><span class="line">    <span class="comment"># param input_list:输入数列</span></span><br><span class="line">    <span class="comment"># 当我们在函数中传入的数列不存在或者传入的数列中元素的个数等于0时，表示是一棵空树</span></span><br><span class="line">    <span class="comment"># 此时不需要操作，直接返回None即可</span></span><br><span class="line">    <span class="keyword">if</span> input_list <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(input_list) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 结点中的数据等于列表中的第一个元素，每次pop出去一个元素，后面的元素会往前走一个位置</span></span><br><span class="line">    <span class="comment"># 这样可以保证元素的一次弹出</span></span><br><span class="line">    val = input_list.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 当弹出的元素是None时，表示该节点为空，直接返回None</span></span><br><span class="line">    <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 通过刚才定义的TreeNode类新建node</span></span><br><span class="line">    node = TreeNode(val)</span><br><span class="line">    <span class="comment"># node的左孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class="line">    node.left = creat_binary_tree(input_list)</span><br><span class="line">    <span class="comment"># node的右孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class="line">    node.right = creat_binary_tree(input_list)</span><br><span class="line">    <span class="comment"># 返回node结点</span></span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure>



<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ol>
<li>递归遍历</li>
<li>非递归遍历</li>
</ol>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层次遍历</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747890.png" style="zoom:80%;" />

<h4 id="递归遍历代码"><a href="#递归遍历代码" class="headerlink" title="递归遍历代码"></a>递归遍历代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order_traversal</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="comment"># param node:二叉树节点</span></span><br><span class="line">    <span class="comment"># 当node为空表示为一棵空树，不需要进行前序遍历直接返回即可</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 此时node不为空，直接打印node的val域</span></span><br><span class="line">    <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="comment"># 递归的先序遍历node的左孩子</span></span><br><span class="line">    pre_order_traversal(node.left)</span><br><span class="line">    <span class="comment"># 递归的先序遍历node的左孩子</span></span><br><span class="line">    pre_order_traversal(node.right)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">in_order_traversal</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="comment"># param node:二叉树节点</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 递归的中序遍历node的左孩子</span></span><br><span class="line">    in_order_traversal(node.left)</span><br><span class="line">    <span class="comment"># 打印节点的值</span></span><br><span class="line">    <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="comment"># 递归的中序遍历node的左孩子</span></span><br><span class="line">    in_order_traversal(node.right)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_order_traversal</span>(<span class="params">node</span>):</span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="comment"># param node:二叉树节点</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 递归的后序遍历node的左孩子</span></span><br><span class="line">    post_order_traversal(node.left)</span><br><span class="line">    <span class="comment"># 递归的后序遍历node的左孩子</span></span><br><span class="line">    post_order_traversal(node.right)</span><br><span class="line">    <span class="comment"># 打印节点的值</span></span><br><span class="line">    <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque, Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">level_order_traversal</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node.val, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            queue.append(node.right)</span><br></pre></td></tr></table></figure>



<h4 id="非递归遍历代码"><a href="#非递归遍历代码" class="headerlink" title="非递归遍历代码"></a>非递归遍历代码</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747079.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="comment"># 根结点为空则返回空列表</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack = [root]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="comment"># 中结点先处理</span></span><br><span class="line">        result.append(node.val)</span><br><span class="line">        <span class="comment"># 右孩子先入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        <span class="comment"># 左孩子后入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序遍历-迭代-LC94_二叉树的中序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack = []  <span class="comment"># 不能提前将root结点加入stack中</span></span><br><span class="line">    result = []</span><br><span class="line">    cur = root</span><br><span class="line">    <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">        <span class="comment"># 先迭代访问最底层的左子树结点</span></span><br><span class="line">        <span class="keyword">if</span> cur:</span><br><span class="line">            stack.append(cur)</span><br><span class="line">            cur = cur.left</span><br><span class="line">        <span class="comment"># 到达最左结点后处理栈顶结点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            result.append(cur.val)</span><br><span class="line">            <span class="comment"># 取栈顶元素右结点</span></span><br><span class="line">            cur = cur.right</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后序遍历-迭代-LC145_二叉树的后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postorderTraversal</span>(<span class="params">root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack = [root]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="comment"># 中结点先处理</span></span><br><span class="line">        result.append(node.val)</span><br><span class="line">        <span class="comment"># 左孩子先入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">        <span class="comment"># 右孩子后入栈</span></span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">    <span class="comment"># 将最终的数组翻转</span></span><br><span class="line">    <span class="keyword">return</span> result[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>





<h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747695.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747622.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747796.png" style="zoom:80%;" />

<p><img src="/"></p>
<h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, head=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = head</span><br><span class="line">        <span class="variable language_">self</span>.lst = []</span><br><span class="line">        <span class="variable language_">self</span>.huffman_code = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, li: <span class="built_in">list</span></span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">            res.append(HuffmanNode(i))</span><br><span class="line">        <span class="variable language_">self</span>.lst = res[:]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(res) &gt; <span class="number">1</span>:</span><br><span class="line">            res.sort(key=<span class="keyword">lambda</span> item: item.val)</span><br><span class="line">            node_left = res.pop(<span class="number">0</span>)</span><br><span class="line">            node_right = res.pop(<span class="number">0</span>)</span><br><span class="line">            node_father = HuffmanNode(node_left.val + node_right.val)</span><br><span class="line">            node_father.left = node_left</span><br><span class="line">            node_father.right = node_right</span><br><span class="line">            node_left.parent = node_father</span><br><span class="line">            node_right.parent = node_father</span><br><span class="line">            res.append(node_father)</span><br><span class="line"></span><br><span class="line">        res[<span class="number">0</span>].parent = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.head = res[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encoding</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        huffman_code = [<span class="string">&#x27;&#x27;</span>] * <span class="built_in">len</span>(<span class="variable language_">self</span>.lst)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.lst)):</span><br><span class="line">            node = <span class="variable language_">self</span>.lst[i]</span><br><span class="line">            <span class="keyword">while</span> node != <span class="variable language_">self</span>.head:</span><br><span class="line">                <span class="keyword">if</span> node.parent.left == node:</span><br><span class="line">                    huffman_code[i] = <span class="string">&quot;0&quot;</span> + huffman_code[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    huffman_code[i] = <span class="string">&quot;1&quot;</span> + huffman_code[i]</span><br><span class="line">                node = node.parent</span><br><span class="line">        <span class="variable language_">self</span>.huffman_code = huffman_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">huffmantree = HuffmanTree()</span><br><span class="line">huffmantree.create([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">level_order_traversal(huffmantree.head)</span><br><span class="line">huffmantree.encoding()</span><br><span class="line"><span class="built_in">print</span>(huffmantree.huffman_code)</span><br></pre></td></tr></table></figure>





<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747784.png" style="zoom:80%;" />



<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul>
<li>插入</li>
<li>查询</li>
<li>删除</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747720.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747917.png" style="zoom:80%;" />





<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747345.png" style="zoom:80%;" />





<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BiTreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = data</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="comment"># if self.root is None:</span></span><br><span class="line">            <span class="comment">#     self.root=BiTreeNode(data[0])</span></span><br><span class="line">            <span class="comment">#     data=data[1:]</span></span><br><span class="line">            <span class="comment"># for i in data:</span></span><br><span class="line">            <span class="comment">#     self.insert(self.root, i)</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">                <span class="variable language_">self</span>.insert_no_rec(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, node, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = BiTreeNode(val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt;= node.val:</span><br><span class="line">            node.left = <span class="variable language_">self</span>.insert(node.left, val)</span><br><span class="line">        <span class="keyword">elif</span> val &gt; node.val:</span><br><span class="line">            node.right = <span class="variable language_">self</span>.insert(node.right, val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_no_rec</span>(<span class="params">self, val</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="variable language_">self</span>.root = BiTreeNode(val)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> val &lt;= p.val:</span><br><span class="line">                <span class="keyword">if</span> p.left:</span><br><span class="line">                    p = p.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.left = BiTreeNode(val)</span><br><span class="line">                    p.left.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> val &gt; p.val:</span><br><span class="line">                <span class="keyword">if</span> p.right:</span><br><span class="line">                    p = p.right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    p.right = BiTreeNode(val)</span><br><span class="line">                    p.right.parent = p</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, node, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> node.val &lt; val:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.query(node.right, val)</span><br><span class="line">        <span class="keyword">elif</span> node.val &gt; val:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.query(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_no_rec</span>(<span class="params">self, val</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.root</span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            <span class="keyword">if</span> p.val &lt; val:</span><br><span class="line">                p = p.right</span><br><span class="line">            <span class="keyword">elif</span> p.val &gt; val:</span><br><span class="line">                p = p.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__remove_node_1</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> node == node.parent.left:</span><br><span class="line">            node.parent.left = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__remove_node_21</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            <span class="variable language_">self</span>.root = node.left</span><br><span class="line">            node.left.parent = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> node == node.parent.left:</span><br><span class="line">            node.parent.left = node.left</span><br><span class="line">            node.left.parent = node.parent</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.right = node.left</span><br><span class="line">            node.left.parent = node.parent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__remove_node_22</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">            <span class="variable language_">self</span>.root = node.right</span><br><span class="line">        <span class="keyword">elif</span> node == node.parent.left:</span><br><span class="line">            node.parent.left = node.right</span><br><span class="line">            node.right.parent = node.parent</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.parent.right = node.right</span><br><span class="line">            node.right.parent = node.parent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.root:</span><br><span class="line">            node = <span class="variable language_">self</span>.query_no_rec(val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="variable language_">self</span>.__remove_node_1(node)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="variable language_">self</span>.__remove_node_21(node)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> node.left:</span><br><span class="line">                <span class="variable language_">self</span>.__remove_node_22(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min_node = node.right</span><br><span class="line">                <span class="keyword">while</span> min_node.left:</span><br><span class="line">                    min_node = min_node.left</span><br><span class="line">                node.val = min_node.val</span><br><span class="line">                <span class="keyword">if</span> min_node.right:</span><br><span class="line">                    <span class="variable language_">self</span>.__remove_node_22(min_node)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.__remove_node_1(min_node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = BST([<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>])</span><br><span class="line">in_order_traversal(T.root)</span><br><span class="line">T.delete(<span class="number">1</span>)</span><br><span class="line">T.delete(<span class="number">1</span>)</span><br><span class="line">T.delete(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">in_order_traversal(T.root)</span><br></pre></td></tr></table></figure>





<h2 id="AVL树（平衡二叉搜索树）"><a href="#AVL树（平衡二叉搜索树）" class="headerlink" title="AVL树（平衡二叉搜索树）"></a>AVL树（平衡二叉搜索树）</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747284.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747463.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747715.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747578.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747731.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747889.png" style="zoom: 80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747292.png" style="zoom:80%;" />



<p>旋转操作过于复杂，可以先将列表元素排好序，然后使用二分递归的方法</p>
<p>代码如下：</p>
<h3 id="二分递归代码"><a href="#二分递归代码" class="headerlink" title="二分递归代码"></a>二分递归代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sortedArrayToBST</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; TreeNode:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">left, right</span>):</span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        root = TreeNode(nums[mid])</span><br><span class="line">        root.left = helper(left, mid - <span class="number">1</span>)</span><br><span class="line">        root.right = helper(mid + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">root = sortedArrayToBST(li)</span><br><span class="line">in_order_traversal(root)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">pre_order_traversal(root)</span><br></pre></td></tr></table></figure>



<h1 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747310.png" style="zoom:80%;" />



<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747327.png" alt="Snipaste_2023-01-29_12-34-45" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747448.png" alt="Snipaste_2023-01-29_12-35-01" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747817.png" alt="Snipaste_2023-01-29_12-35-20" style="zoom:80%;" />



<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747214.png" alt="Snipaste_2023-01-29_12-35-47" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747323.png" alt="Snipaste_2023-01-29_12-36-19" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747702.png" alt="Snipaste_2023-01-29_12-36-36" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747317.png" alt="Snipaste_2023-01-29_12-36-59" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747998.png" alt="Snipaste_2023-01-29_12-37-34" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747364.png" alt="Snipaste_2023-01-29_12-38-14" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747303.png" alt="Snipaste_2023-01-29_12-38-31" style="zoom:80%;" />



<h2 id="二叉树的转换"><a href="#二叉树的转换" class="headerlink" title="二叉树的转换"></a>二叉树的转换</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747982.png" alt="Snipaste_2023-01-29_12-42-06" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747522.png" alt="Snipaste_2023-01-29_12-42-19" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747214.png" alt="Snipaste_2023-01-29_12-42-43" style="zoom:80%;" />



<h2 id="树和森林的转换"><a href="#树和森林的转换" class="headerlink" title="树和森林的转换"></a>树和森林的转换</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747589.png" alt="Snipaste_2023-01-29_12-43-13" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747566.png" alt="Snipaste_2023-01-29_12-43-35" style="zoom:80%;" />



<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747364.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747303.png" alt="Snipaste_2023-01-29_12-38-31"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747982.png" alt="Snipaste_2023-01-29_12-42-06"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747522.png" alt="Snipaste_2023-01-29_12-42-19"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747214.png" alt="Snipaste_2023-01-29_12-42-43"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747589.png" alt="Snipaste_2023-01-29_12-43-13"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747566.png" alt="Snipaste_2023-01-29_12-43-35"></p>
<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747551.png" alt="Snipaste_2023-01-29_12-53-48" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747172.png" alt="Snipaste_2023-01-29_12-54-05" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747276.png" alt="Snipaste_2023-01-29_12-54-16" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747400.png" alt="Snipaste_2023-01-29_12-54-46" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747615.png" alt="Snipaste_2023-01-29_12-55-05" style="zoom:80%;" />



<h2 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747958.png" alt="Snipaste_2023-01-29_12-55-28" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747212.png" alt="Snipaste_2023-01-29_12-55-40" style="zoom:80%;" />





<h1 id="KMP匹配算法"><a href="#KMP匹配算法" class="headerlink" title="KMP匹配算法"></a>KMP匹配算法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;KMP模板&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">prefix_function</span>(<span class="params">s</span>):     </span><br><span class="line">            n = <span class="built_in">len</span>(s)</span><br><span class="line">            pi = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">while</span> j&gt;<span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:     <span class="comment"># 当前位置s[i]与s[j]不等</span></span><br><span class="line">                    j = pi[j-<span class="number">1</span>]                 <span class="comment"># j指向之前位置，s[i]与s[j]继续比较</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j]:                <span class="comment"># s[i]与s[j]相等，j+1，指向后一位</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                pi[i] = j</span><br><span class="line">            <span class="keyword">return</span> pi</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class="line">        n, m = <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)</span><br><span class="line">        pi = prefix_function(t)             <span class="comment"># 预处理得到t的前缀函数</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;再次基于KMP的思想在s中匹配t&#x27;&#x27;&#x27;</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> j&gt;<span class="number">0</span> <span class="keyword">and</span> s[i] != t[j]:</span><br><span class="line">                j = pi[j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s[i] == t[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> j == m:          <span class="comment"># 匹配到了t，直接返回</span></span><br><span class="line">                    <span class="keyword">return</span> i-m+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>



<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747525.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747573.png" alt="Snipaste_2023-01-30_21-23-39" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747460.png" alt="Snipaste_2023-01-30_21-23-51" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747177.png" alt="Snipaste_2023-01-30_21-24-05" style="zoom:80%;" />



<h3 id="图的相关概念"><a href="#图的相关概念" class="headerlink" title="图的相关概念"></a>图的相关概念</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747074.png" alt="Snipaste_2023-01-30_21-24-39" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747784.png" alt="Snipaste_2023-01-30_21-27-08" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747172.png" alt="Snipaste_2023-01-30_21-27-21" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747446.png" alt="Snipaste_2023-01-30_21-28-02" style="zoom:80%;" />



<h3 id="图的相关性质"><a href="#图的相关性质" class="headerlink" title="图的相关性质"></a>图的相关性质</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747680.png" alt="Snipaste_2023-01-30_21-28-23" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747802.png" alt="Snipaste_2023-01-30_21-28-57" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747904.png" alt="Snipaste_2023-01-30_21-29-56" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747939.png" alt="Snipaste_2023-01-30_21-30-30" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747044.png" alt="Snipaste_2023-01-30_21-30-56" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747428.png" alt="Snipaste_2023-01-30_21-32-43" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747408.png" alt="Snipaste_2023-01-30_21-32-49" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747230.png" alt="Snipaste_2023-01-30_21-35-23" style="zoom:80%;" />



<h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747026.png" alt="Snipaste_2023-01-30_21-37-04" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747293.png" alt="Snipaste_2023-01-30_21-38-14" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747267.png" alt="Snipaste_2023-01-30_21-38-52" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747650.png" alt="Snipaste_2023-01-30_21-40-54" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747614.png" alt="Snipaste_2023-01-30_21-41-09" style="zoom:80%;" />



<h3 id="邻接矩阵的实现"><a href="#邻接矩阵的实现" class="headerlink" title="邻接矩阵的实现"></a>邻接矩阵的实现</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747052.png" alt="Snipaste_2023-01-30_21-44-14" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747121.png" alt="Snipaste_2023-01-30_21-44-57" style="zoom:80%;" />

<h3 id="邻接矩阵的优劣"><a href="#邻接矩阵的优劣" class="headerlink" title="邻接矩阵的优劣"></a>邻接矩阵的优劣</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747292.png" alt="Snipaste_2023-01-30_21-45-11" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747714.png" alt="Snipaste_2023-01-30_21-45-28" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747803.png" alt="Snipaste_2023-01-30_21-46-00" style="zoom:80%;" />



<h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747789.png" alt="Snipaste_2023-01-30_21-47-17" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747091.png" alt="Snipaste_2023-01-30_21-48-11" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747713.png" alt="Snipaste_2023-01-30_21-49-30" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747308.png" alt="Snipaste_2023-01-30_21-51-13" style="zoom:80%;" />





<h3 id="邻接表的实现"><a href="#邻接表的实现" class="headerlink" title="邻接表的实现"></a>邻接表的实现</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747472.png" alt="Snipaste_2023-01-30_21-52-09" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747687.png" alt="Snipaste_2023-01-30_21-52-42" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747980.png" alt="Snipaste_2023-01-30_22-01-57" style="zoom:80%;" />



<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747597.png" alt="Snipaste_2023-01-30_22-02-13" style="zoom:80%;" />



<h2 id="库的调用"><a href="#库的调用" class="headerlink" title="库的调用"></a>库的调用</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747684.png" alt="Snipaste_2023-01-30_22-02-38" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747655.png" alt="Snipaste_2023-01-30_22-04-03" style="zoom:80%;" />



<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747318.png" alt="Snipaste_2023-01-30_22-04-28" style="zoom:80%;" />

<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747657.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747118.png" alt="Snipaste_2023-02-28_16-08-42"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747493.png" alt="Snipaste_2023-02-28_16-13-13"></p>
<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747677.png" alt="Snipaste_2023-02-28_16-19-30"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747560.png" alt="Snipaste_2023-02-28_16-21-29"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747461.png" alt="Snipaste_2023-02-28_16-23-46"></p>
<h3 id="BFS与DFS算法比较"><a href="#BFS与DFS算法比较" class="headerlink" title="BFS与DFS算法比较"></a>BFS与DFS算法比较</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747569.png" alt="Snipaste_2023-02-28_16-24-06"></p>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747380.png" alt="Snipaste_2023-02-28_16-26-09"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747406.png" alt="Snipaste_2023-02-28_16-30-23"></p>
<h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747354.png" alt="Snipaste_2023-02-28_16-44-11"></p>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747425.png" alt="Snipaste_2023-02-28_16-44-51"></p>
<h3 id="算法比较"><a href="#算法比较" class="headerlink" title="算法比较"></a>算法比较</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747208.png" alt="Snipaste_2023-02-28_16-45-00"></p>
<h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><h3 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747564.png" alt="Snipaste_2023-02-28_17-03-13"></p>
<h3 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747456.png" alt="Snipaste_2023-02-28_17-10-57"></p>
<h2 id="AOV网"><a href="#AOV网" class="headerlink" title="AOV网"></a>AOV网</h2><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747811.png" alt="Snipaste_2023-02-28_19-06-17"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747740.png" alt="Snipaste_2023-02-28_19-53-17"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747013.png" alt="Snipaste_2023-02-28_19-06-41"></p>
<h2 id="AOE网"><a href="#AOE网" class="headerlink" title="AOE网"></a>AOE网</h2><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747883.png" alt="Snipaste_2023-02-28_19-54-05"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747985.png" alt="Snipaste_2023-02-28_19-53-51"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747661.png" alt="Snipaste_2023-02-28_19-54-39"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747139.png" alt="Snipaste_2023-02-28_19-55-12"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747628.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747603.png" alt="Snipaste_2023-02-28_19-50-40"></p>
<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747781.png" style="zoom:80%;" />



<h2 id="找零问题"><a href="#找零问题" class="headerlink" title="找零问题"></a>找零问题</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747176.png" style="zoom:80%;" />

<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = [<span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">t, n</span>):</span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line">    <span class="keyword">for</span> i, money <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">        m[i] = n // money</span><br><span class="line">        n = n % money</span><br><span class="line">    <span class="keyword">return</span> m, n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(change(t, <span class="number">376</span>))</span><br></pre></td></tr></table></figure>







<h2 id="分数背包问题"><a href="#分数背包问题" class="headerlink" title="分数背包问题"></a>分数背包问题</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747648.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747728.png" style="zoom:80%;" />

<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods=[(<span class="number">60</span>,<span class="number">10</span>),(<span class="number">100</span>,<span class="number">20</span>),(<span class="number">120</span>,<span class="number">30</span>)]</span><br><span class="line">goods.sort(key=<span class="keyword">lambda</span>  x:x[<span class="number">0</span>]/x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fractional_backpack</span>(<span class="params">goods,w</span>):</span><br><span class="line">    m=[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(goods))]</span><br><span class="line">    total_v=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,(prize,weight) <span class="keyword">in</span> <span class="built_in">enumerate</span>(goods):</span><br><span class="line">        <span class="keyword">if</span> w&gt;=weight:</span><br><span class="line">            m[i]=<span class="number">1</span></span><br><span class="line">            total_v+=prize</span><br><span class="line">            w-=weight</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[i]=w/weight</span><br><span class="line">            total_v+=m[i]*prize</span><br><span class="line">            w=<span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> total_v,m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fractional_backpack(goods,<span class="number">50</span>))</span><br></pre></td></tr></table></figure>





<h2 id="拼接最大数字问题"><a href="#拼接最大数字问题" class="headerlink" title="拼接最大数字问题"></a>拼接最大数字问题</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747075.png" style="zoom:80%;" />



<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line">li = [<span class="number">32</span>, <span class="number">94</span>, <span class="number">128</span>, <span class="number">1286</span>, <span class="number">6</span>, <span class="number">71</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xy_cmp</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x + y &lt; y + x:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x + y &gt; y + x:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number_join</span>(<span class="params">li</span>):</span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    li.sort(key=cmp_to_key(xy_cmp))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number_join(li))</span><br></pre></td></tr></table></figure>





<h2 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747904.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747250.png" style="zoom:80%;" />



<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">activities = [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">7</span>), (<span class="number">5</span>, <span class="number">9</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">6</span>, <span class="number">10</span>), (<span class="number">8</span>, <span class="number">11</span>), (<span class="number">8</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">14</span>), (<span class="number">12</span>, <span class="number">16</span>)]</span><br><span class="line">activities.sort(key=itemgetter(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(activities)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">activity_selection</span>(<span class="params">a</span>):</span><br><span class="line">    res = [a[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> a[i][<span class="number">0</span>] &gt;= res[-<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">            res.append(a[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(activity_selection(activities))</span><br></pre></td></tr></table></figure>











<h1 id="动态规划（DP算法）"><a href="#动态规划（DP算法）" class="headerlink" title="动态规划（DP算法）"></a>动态规划（DP算法）</h1><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747302.png" style="zoom:80%;" />



<h2 id="钢管切割问题"><a href="#钢管切割问题" class="headerlink" title="钢管切割问题"></a>钢管切割问题</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747465.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747518.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747659.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747045.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747115.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747091.png" style="zoom:80%;" />





<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rot_dp</span>(<span class="params">p, n</span>):</span><br><span class="line">    r = p.copy()</span><br><span class="line">    length = <span class="built_in">len</span>(p)</span><br><span class="line">    solution_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">        res = r[i]</span><br><span class="line">        solution = (i, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, (i + <span class="number">1</span>) // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, r[j] + r[i - j])</span><br><span class="line">            <span class="keyword">if</span> res == r[j] + r[i - j]:</span><br><span class="line">                solution = (j, i - j)</span><br><span class="line"></span><br><span class="line">        solution_list.append(solution)</span><br><span class="line">        r[i] = res</span><br><span class="line">    <span class="keyword">while</span> n &gt;= length:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        solution = <span class="built_in">tuple</span>()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, (length + <span class="number">1</span>) // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, r[j] + r[length - j])</span><br><span class="line">            <span class="keyword">if</span> res == r[j] + r[length - j]:</span><br><span class="line">                solution = (j, length - j)</span><br><span class="line">        solution_list.append(solution)</span><br><span class="line">        r.append(res)</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">    solution_list.insert(<span class="number">0</span>, <span class="built_in">tuple</span>())</span><br><span class="line">    <span class="keyword">return</span> r[-<span class="number">1</span>], solution_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">li</span>):</span><br><span class="line">    queue = [li[-<span class="number">1</span>]]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        tmp = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> tmp[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">            res.append(tmp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queue.append(li[tmp[<span class="number">0</span>]])</span><br><span class="line">            queue.append(li[tmp[<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rot</span>(<span class="params">p, n</span>):</span><br><span class="line">    r, solution_list = cut_rot_dp(p, n)</span><br><span class="line">    res = find(solution_list)</span><br><span class="line">    <span class="keyword">return</span> r, res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(cut_rot(p,<span class="number">49</span>))</span><br></pre></td></tr></table></figure>









<h2 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747470.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747530.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747288.png" style="zoom:80%;" />



<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lcs</span>(<span class="params">x, y</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    b = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i - <span class="number">1</span>] == y[j - <span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                b[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> c[i - <span class="number">1</span>][j] &gt; c[i][j - <span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j]</span><br><span class="line">                b[i][j] = <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = c[i][j - <span class="number">1</span>]</span><br><span class="line">                b[i][j] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> c[m][n], b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcs_trackback</span>(<span class="params">x, y</span>):</span><br><span class="line">    c, b = lcs(x, y)</span><br><span class="line">    i = <span class="built_in">len</span>(x)</span><br><span class="line">    j = <span class="built_in">len</span>(y)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b[i][j] == <span class="number">1</span>:</span><br><span class="line">            res.append(x[i - <span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b[i][j] == <span class="number">2</span>:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcs_trackback(<span class="string">&quot;ABCBDAB&quot;</span>,<span class="string">&quot;BDCABA&quot;</span>))</span><br></pre></td></tr></table></figure>





<h1 id="欧几里得算法（求最大公约数）"><a href="#欧几里得算法（求最大公约数）" class="headerlink" title="欧几里得算法（求最大公约数）"></a>欧几里得算法（求最大公约数）</h1><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747742.png" style="zoom:80%;" />



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">        r = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = r</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gcd(<span class="number">12</span>, <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(gcd2(<span class="number">12</span>, <span class="number">16</span>))</span><br></pre></td></tr></table></figure>



<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747781.png" style="zoom:80%;" />



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fraction</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="variable language_">self</span>.molecule=a</span><br><span class="line">        <span class="variable language_">self</span>.denominator=b</span><br><span class="line">        x=<span class="variable language_">self</span>.gcd(a,b)</span><br><span class="line">        <span class="variable language_">self</span>.molecule/=x</span><br><span class="line">        <span class="variable language_">self</span>.denominator/=x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">            r = a % b</span><br><span class="line">            a = b</span><br><span class="line">            b = r</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        denominator=<span class="variable language_">self</span>.zgs(<span class="variable language_">self</span>.denominator,other.denominator)</span><br><span class="line">        molecule=<span class="variable language_">self</span>.molecule*denominator/<span class="variable language_">self</span>.denominator+other.molecule*denominator/other.denominator</span><br><span class="line">        <span class="keyword">return</span> Fraction(molecule,denominator)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zgs</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        x=<span class="variable language_">self</span>.gcd(a,b)</span><br><span class="line">        <span class="keyword">return</span> a*b/x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d/%d&quot;</span>%(<span class="variable language_">self</span>.molecule,<span class="variable language_">self</span>.denominator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1=Fraction(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line">num2=Fraction(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(num1+num2)</span><br></pre></td></tr></table></figure>







<h1 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h1><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747896.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747055.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747085.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747066.png" style="zoom:80%;" />

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747255.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747411.png" style="zoom:80%;" />





<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747587.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747628.png" style="zoom:80%;" />





<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747776.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747920.png" style="zoom:80%;" />



<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747949.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747109.png" style="zoom:80%;" />





<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747284.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747331.png" style="zoom:80%;" />



<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747543.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747506.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747532.png" style="zoom:80%;" />

<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747716.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747826.png" style="zoom:80%;" />

<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747056.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747030.png" style="zoom:80%;" />

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747141.png" style="zoom:80%;" />



<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747183.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747275.png" style="zoom:80%;" />



<h3 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747393.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747560.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747565.png" style="zoom:80%;" />



<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747752.png" style="zoom:80%;" />



<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747835.png"></p>
<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747844.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747903.png" style="zoom:80%;" />



<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747090.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747121.png" style="zoom:80%;" />



<h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747302.png" alt="Snipaste_2023-01-11_10-40-01" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747434.png" alt="Snipaste_2023-01-11_10-44-09" style="zoom:80%;" />



<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747452.png" alt="Snipaste_2023-01-11_10-44-47" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747667.png" alt="Snipaste_2023-01-11_11-05-36" style="zoom:80%;" />



<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747733.png" alt="Snipaste_2023-01-11_11-12-14" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747711.png" style="zoom:80%;" />



<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747888.png" alt="Snipaste_2023-01-11_11-06-47" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011747007.png" alt="Snipaste_2023-01-11_11-11-40" style="zoom:80%;" />





]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Xtimer定时微服务</title>
    <url>/2025/03/01/Xtimer%E5%AE%9A%E6%97%B6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Xtimer定时微服务"><a href="#Xtimer定时微服务" class="headerlink" title="Xtimer定时微服务"></a>Xtimer定时微服务</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>在学校社团中，有给社团成员发送活动通知的任务需求</p>
<p>有定期执行某项任务的需求，比如每周末举办一次线下活动，每个月举行一次团建</p>
<p>再比如，我有一个任务需要设置定时发布</p>
<h2 id="定时微服务调研对比"><a href="#定时微服务调研对比" class="headerlink" title="定时微服务调研对比"></a>定时微服务调研对比</h2><table>
<thead>
<tr>
<th>方案</th>
<th>不足点</th>
</tr>
</thead>
<tbody><tr>
<td>JavaTimer</td>
<td>单线程，任务堆积</td>
</tr>
<tr>
<td>RocketMq</td>
<td>可以作为本项目的优化</td>
</tr>
<tr>
<td>xxl-job</td>
<td>对于简单的定时任务需求过于复杂、可能需要额外开发和维护成本</td>
</tr>
<tr>
<td>Quartz</td>
<td>对于简单的定时任务需求过于复杂、资源消耗较大，特别是在大规模任务调度时。</td>
</tr>
</tbody></table>
<p><strong>本项目特点：</strong>功能聚焦，接入轻量，维护成本低</p>
<h2 id="架构设计方法论"><a href="#架构设计方法论" class="headerlink" title="架构设计方法论"></a>架构设计方法论</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/架构设计方法.PNG" alt="架构设计方法" style="zoom:50%;" />



<h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="存储优化"><a href="#存储优化" class="headerlink" title="存储优化"></a>存储优化</h3><ol>
<li>全表扫描</li>
<li>基于redis中ZSET排序扫描，时间复杂度O(n)-&gt;O(log n)</li>
<li>横向分治，<strong>通过时间范围分片，减少查询涉及的任务数量</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/%E6%A8%AA%E5%90%91%E5%88%86%E6%B2%BB.png" alt="横向分治"></p>
<ol start="4">
<li>纵向分治，<strong>通过定时任务分桶，提高并发度</strong></li>
</ol>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/%E7%BA%B5%E5%90%91%E5%88%86%E6%B2%BB.png" alt="纵向分治"></p>
<h3 id="定时任务调度流程"><a href="#定时任务调度流程" class="headerlink" title="定时任务调度流程"></a>定时任务调度流程</h3><p><strong>一句话总结：服务架构: 3 个模块 + 2 个协程池</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/流程中线程池作用关系.png" alt="流程中线程池作用关系" style="zoom: 80%;" />

<h3 id="定时任务生成流程"><a href="#定时任务生成流程" class="headerlink" title="定时任务生成流程"></a>定时任务生成流程</h3><p><strong>一句话总结：定时任务创建与 webServer 和 migrator 2 个模块有关</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/迁移模块执行流程.png" alt="迁移模块执行流程" style="zoom:50%;" />



]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>vi和vim快捷键</title>
    <url>/2025/03/01/vi%E5%92%8Cvim%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>模式切换</strong></td>
<td><code>i</code></td>
<td>进入插入模式（在光标前插入文本）。</td>
</tr>
<tr>
<td></td>
<td><code>a</code></td>
<td>进入插入模式（在光标后插入文本）。</td>
</tr>
<tr>
<td></td>
<td><code>o</code></td>
<td>在当前行下方插入新行并进入插入模式。</td>
</tr>
<tr>
<td></td>
<td><code>O</code></td>
<td>在当前行上方插入新行并进入插入模式。</td>
</tr>
<tr>
<td></td>
<td><code>Esc</code></td>
<td>退出插入模式，返回命令模式。</td>
</tr>
<tr>
<td></td>
<td><code>:</code></td>
<td>进入命令模式（用于输入命令，如保存、退出等）。</td>
</tr>
<tr>
<td><strong>光标移动</strong></td>
<td><code>h</code></td>
<td>向左移动光标。</td>
</tr>
<tr>
<td></td>
<td><code>j</code></td>
<td>向下移动光标。</td>
</tr>
<tr>
<td></td>
<td><code>k</code></td>
<td>向上移动光标。</td>
</tr>
<tr>
<td></td>
<td><code>l</code></td>
<td>向右移动光标。</td>
</tr>
<tr>
<td></td>
<td><code>0</code></td>
<td>移动到行首。</td>
</tr>
<tr>
<td></td>
<td><code>$ </code></td>
<td>移动到行尾。</td>
</tr>
<tr>
<td></td>
<td><code>gg</code></td>
<td>移动到文件开头。</td>
</tr>
<tr>
<td></td>
<td><code>G</code></td>
<td>移动到文件末尾。</td>
</tr>
<tr>
<td></td>
<td><code>&lt;n&gt;G</code></td>
<td>移动到第 <code>n</code> 行（例如 <code>5G</code> 移动到第 5 行）。</td>
</tr>
<tr>
<td></td>
<td><code>Ctrl + f</code></td>
<td>向下翻页。</td>
</tr>
<tr>
<td></td>
<td><code>Ctrl + b</code></td>
<td>向上翻页。</td>
</tr>
<tr>
<td><strong>文本编辑</strong></td>
<td><code>x</code></td>
<td>删除光标处的字符。</td>
</tr>
<tr>
<td></td>
<td><code>dd</code></td>
<td>删除当前行。</td>
</tr>
<tr>
<td></td>
<td><code>&lt;n&gt;dd</code></td>
<td>删除从当前行开始的 <code>n</code> 行（例如 <code>3dd</code> 删除 3 行）。</td>
</tr>
<tr>
<td></td>
<td><code>yy</code></td>
<td>复制当前行。</td>
</tr>
<tr>
<td></td>
<td><code>&lt;n&gt;yy</code></td>
<td>复制从当前行开始的 <code>n</code> 行（例如 <code>3yy</code> 复制 3 行）。</td>
</tr>
<tr>
<td></td>
<td><code>p</code></td>
<td>粘贴到光标后。</td>
</tr>
<tr>
<td></td>
<td><code>P</code></td>
<td>粘贴到光标前。</td>
</tr>
<tr>
<td></td>
<td><code>u</code></td>
<td>撤销上一次操作。</td>
</tr>
<tr>
<td></td>
<td><code>Ctrl + r</code></td>
<td>重做上一次撤销的操作。</td>
</tr>
<tr>
<td></td>
<td><code>r</code></td>
<td>替换光标处的字符。</td>
</tr>
<tr>
<td></td>
<td><code>cw</code></td>
<td>删除从光标处到单词结尾的内容并进入插入模式。</td>
</tr>
<tr>
<td></td>
<td><code>cc</code></td>
<td>删除当前行并进入插入模式。</td>
</tr>
<tr>
<td><strong>查找与替换</strong></td>
<td><code>/&lt;pattern&gt;</code></td>
<td>向下查找指定模式（例如 <code>/hello</code> 查找 <code>hello</code>）。</td>
</tr>
<tr>
<td></td>
<td><code>?&lt;pattern&gt;</code></td>
<td>向上查找指定模式。</td>
</tr>
<tr>
<td></td>
<td><code>n</code></td>
<td>跳转到下一个匹配项。</td>
</tr>
<tr>
<td></td>
<td><code>N</code></td>
<td>跳转到上一个匹配项。</td>
</tr>
<tr>
<td></td>
<td><code>:%s/&lt;old&gt;/&lt;new&gt;/g</code></td>
<td>全局替换（将文件中所有的 <code>old</code> 替换为 <code>new</code>）。</td>
</tr>
<tr>
<td></td>
<td><code>:%s/&lt;old&gt;/&lt;new&gt;/gc</code></td>
<td>全局替换，每次替换前确认。</td>
</tr>
<tr>
<td><strong>保存与退出</strong></td>
<td><code>:w</code></td>
<td>保存文件。</td>
</tr>
<tr>
<td></td>
<td><code>:w &lt;filename&gt;</code></td>
<td>另存为指定文件名。</td>
</tr>
<tr>
<td></td>
<td><code>:q</code></td>
<td>退出编辑器（如果没有修改）。</td>
</tr>
<tr>
<td></td>
<td><code>:q!</code></td>
<td>强制退出，不保存修改。</td>
</tr>
<tr>
<td></td>
<td><code>:wq</code> 或 <code>:x</code></td>
<td>保存并退出。</td>
</tr>
<tr>
<td></td>
<td><code>ZZ</code></td>
<td>保存并退出（命令模式下直接输入）。</td>
</tr>
<tr>
<td><strong>分屏操作</strong></td>
<td><code>:sp &lt;filename&gt;</code></td>
<td>水平分屏打开文件。</td>
</tr>
<tr>
<td></td>
<td><code>:vsp &lt;filename&gt;</code></td>
<td>垂直分屏打开文件。</td>
</tr>
<tr>
<td></td>
<td><code>Ctrl + w + w</code></td>
<td>在分屏窗口间切换。</td>
</tr>
<tr>
<td></td>
<td><code>Ctrl + w + q</code></td>
<td>关闭当前分屏窗口。</td>
</tr>
<tr>
<td><strong>其他操作</strong></td>
<td><code>.</code></td>
<td>重复上一次操作。</td>
</tr>
<tr>
<td></td>
<td><code>J</code></td>
<td>将当前行与下一行合并。</td>
</tr>
<tr>
<td></td>
<td><code>&gt;&gt;</code></td>
<td>缩进当前行。</td>
</tr>
<tr>
<td></td>
<td><code>&lt;&lt;</code></td>
<td>取消当前行缩进。</td>
</tr>
<tr>
<td></td>
<td><code>:set number</code></td>
<td>显示行号。</td>
</tr>
<tr>
<td></td>
<td><code>:set nonumber</code></td>
<td>隐藏行号。</td>
</tr>
<tr>
<td></td>
<td><code>:set paste</code></td>
<td>进入粘贴模式（避免自动缩进）。</td>
</tr>
<tr>
<td></td>
<td><code>:set nopaste</code></td>
<td>退出粘贴模式。</td>
</tr>
<tr>
<td><strong>Vim 特有</strong></td>
<td><code>Ctrl + n</code></td>
<td>自动补全（在插入模式下使用）。</td>
</tr>
<tr>
<td></td>
<td><code>:e &lt;filename&gt;</code></td>
<td>打开另一个文件。</td>
</tr>
<tr>
<td></td>
<td><code>:bn</code></td>
<td>切换到下一个缓冲区。</td>
</tr>
<tr>
<td></td>
<td><code>:bp</code></td>
<td>切换到上一个缓冲区。</td>
</tr>
<tr>
<td></td>
<td><code>:bd</code></td>
<td>关闭当前缓冲区。</td>
</tr>
<tr>
<td></td>
<td><code>:help &lt;command&gt;</code></td>
<td>查看帮助文档（例如 <code>:help :w</code>）。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Java八股学习</title>
    <url>/2025/03/01/Java%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h2><h4 id="JDK-JVM-JRE三者的关系"><a href="#JDK-JVM-JRE三者的关系" class="headerlink" title="JDK,JVM,JRE三者的关系"></a>JDK,JVM,JRE三者的关系</h4><p><img src="https://cdn.xiaolincoding.com//picgo/image-20240725230247664.png" alt="img"></p>
<ul>
<li>JVM是程序运行的环境，将Java字节码解释或编译成机器码，并执行程序。JVM提供了内存管理，gc，安全性等功能，使Java程序具备跨平台性。</li>
<li>JDK是开发Java程序所需的工具集合，包含jvm，编译器(javac)，调试器(jdb)等开发工具，以及一系列的类库。JDK提供了开发，编译，调试和运行程序所需的工具和环境</li>
<li>JRE是Java程序运行所需的最小环境。包含了JVM和一组JAVA类库，用于支持Java程序的执行。JRE不包含开发工具，只提供运行所需环境。</li>
</ul>
<h4 id="为什么使用bigDecimal而不用double"><a href="#为什么使用bigDecimal而不用double" class="headerlink" title="为什么使用bigDecimal而不用double"></a>为什么使用bigDecimal而不用double</h4><p>double会出现精度丢失的问题，double执行的是二进制浮点运算，二进制有些情况下不能准确的表示一个小数，就像十进制不能准确的表示1&#x2F;3(1&#x2F;3&#x3D;0.3333…)，也就是说二进制表示小数的时候只能够表示能够用1&#x2F;(2^n)的和的任意组合，但是0.1不能够精确表示，因为它不能够表示成为1&#x2F;(2^n)的和的形式。</p>
<p>如果在进行商品价格计算的时候，就会出现问题。很有可能造成我们手中有0.06元，却无法购买一个0.05元和一个0.01元的商品。因为如上所示，他们两个的总和为0.060000000000000005。这无疑是一个很严重的问题，尤其是当电商网站的并发量上去的时候，出现的问题将是巨大的。可能会导致无法下单，或者对账出现问题。</p>
<p>而Decimal是精确计算，一般牵扯到金钱计算，都使用Decimal（java.math.BigDecimal）</p>
<h4 id="装箱和拆箱是什么"><a href="#装箱和拆箱是什么" class="headerlink" title="装箱和拆箱是什么"></a>装箱和拆箱是什么</h4><p>装箱和拆箱是将基本数据类型和对应的包装类之间进行转换的过程，自动装箱主要发生在两种情况，一种是赋值时，一种是在方法调用时。</p>
<p>自动装箱有一个问题，那就是在一个循环中进行自动装箱操作的情况，会创建多余的对象，影响程序性能。</p>
<h4 id="为什么需要Integer"><a href="#为什么需要Integer" class="headerlink" title="为什么需要Integer"></a>为什么需要Integer</h4><p>Integer对应是int类型的包装类，就是把int类型包装成Object对象，对象封装有很多好处，可以把属性也就是数据跟处理这些数据的方法结合在一起，比如Integer就有parseInt()等方法来专门处理int型相关的数据。</p>
<p>另一个非常重要的原因就是在Java中绝大部分方法或类都是用来处理类类型对象的，如ArrayList集合类就只能以类作为他的存储对象，而这时如果想把一个int型的数据存入list是不可能的，必须把它包装成类，也就是Integer才能被List所接受。所以Integer的存在是很必要的。</p>
<h4 id="面向对象的六大设计原则"><a href="#面向对象的六大设计原则" class="headerlink" title="面向对象的六大设计原则"></a>面向对象的六大设计原则</h4><ul>
<li>单一职责原则（SRP)：一个类应该只有一个引起它变化的原因，即一个类应该只负责一项职责。例子：考虑一个员工类，它应该只负责管理员工信息，而不应负责其他无关工作。</li>
<li>开放封闭原则（OCP）：软件实体应该对扩展开放，对修改封闭。例子：通过制定接口来实现这一原则，比如定义一个图形类，然后让不同类型的图形继承这个类，而不需要修改图形类本身。</li>
<li>里氏替换原则（LSP）：子类对象应该能够替换掉所有父类对象。例子：一个正方形是一个矩形，但如果修改一个矩形的高度和宽度时，正方形的行为应该如何改变就是一个违反里氏替换原则的例子。</li>
<li>接口隔离原则（ISP）：客户端不应该依赖那些它不需要的接口，即接口应该小而专。例子：通过接口抽象层来实现底层和高层模块之间的解耦，比如使用依赖注入。</li>
<li>依赖倒置原则（DIP）：高层模块不应该依赖低层模块，二者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖于抽象。例子：如果一个公司类包含部门类，应该考虑使用合成&#x2F;聚合关系，而不是将公司类继承自部门类。</li>
<li>最少知识原则（Law of Demeter）：一个对象应当对其他对象有最少的了解，只与其直接的朋友交互。</li>
</ul>
<h4 id="非静态内部类和静态内部类的区别"><a href="#非静态内部类和静态内部类的区别" class="headerlink" title="非静态内部类和静态内部类的区别"></a>非静态内部类和静态内部类的区别</h4><ul>
<li>非静态内部类依赖于外部类的实例，而静态内部类不依赖于外部类的实例。</li>
<li>非静态内部类可以访问外部类的实例变量和方法，而静态内部类只能访问外部类的静态成员。</li>
<li>非静态内部类不能定义静态成员，而静态内部类可以定义静态成员。</li>
<li>非静态内部类在外部类实例化后才能实例化，而静态内部类可以独立实例化。</li>
<li>非静态内部类可以访问外部类的私有成员，而静态内部类不能直接访问外部类的私有成员，需要通过实例化外部类来访问。</li>
</ul>
<h4 id="有一个父类和子类-都有静态的成员变量、静态构造方法和静态方法-在我new一个子类对象的时候-加载顺序是怎么样的"><a href="#有一个父类和子类-都有静态的成员变量、静态构造方法和静态方法-在我new一个子类对象的时候-加载顺序是怎么样的" class="headerlink" title="有一个父类和子类-都有静态的成员变量、静态构造方法和静态方法-在我new一个子类对象的时候-加载顺序是怎么样的"></a>有一个父类和子类-都有静态的成员变量、静态构造方法和静态方法-在我new一个子类对象的时候-加载顺序是怎么样的</h4><ul>
<li>在创建子类对象之前，首先会加载父类的静态成员变量和静态代码块（构造方法无法被 static 修饰，因此这里是静态代码块）。这个加载是在类首次被加载时进行的，且只会发生一次。</li>
<li>接下来，加载子类的静态成员变量和静态代码块。这一过程也只发生一次，即当首次使用子类的相关代码时。</li>
<li>之后，执行实例化子类对象的过程。这时会呼叫父类构造方法，然后是子类的构造方法。</li>
</ul>
<h4 id="实现深拷贝的三种方式"><a href="#实现深拷贝的三种方式" class="headerlink" title="实现深拷贝的三种方式"></a>实现深拷贝的三种方式</h4><ul>
<li><p>实现Cloneable接口并重写clone()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深拷贝的实现方式I</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String field1;</span><br><span class="line">    <span class="keyword">private</span> NestedClass nestedClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">MyTest1</span> <span class="variable">cloned</span> <span class="operator">=</span> (MyTest1)<span class="built_in">super</span>.clone();</span><br><span class="line">        cloned.nestedClass = (NestedClass) nestedClass.clone();</span><br><span class="line">        <span class="keyword">return</span> cloned;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NestedClass</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> nestedField;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用序列化和反序列化</p>
</li>
<li><p>手动递归复制</p>
</li>
</ul>
<h4 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h4><ul>
<li><p>使用new关键字</p>
</li>
<li><p>通过反射机制的newInstance()创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Bean</span> <span class="variable">bean</span> <span class="operator">=</span> (Bean) Class.forName(<span class="string">&quot;com.jermaine.Bean&quot;</span>).newInstance();</span><br></pre></td></tr></table></figure>

<p>测试发现这种创建方式调用了构造器</p>
</li>
<li><p>通过反射机制，使用Constructor类的newInstance方式创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;Bean&gt; constructor = Bean.class.getConstructor();</span><br><span class="line"><span class="type">Bean</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用clone()方法复制对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyTest1</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTest1</span>();</span><br><span class="line"><span class="type">MyTest1</span> <span class="variable">obj2</span> <span class="operator">=</span> (MyTest1) obj1.clone();</span><br></pre></td></tr></table></figure>
</li>
<li><p>将对象序列化到文件或者流中，然后再反序列化创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>));</span><br><span class="line">out.writeObject(obj);</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>));</span><br><span class="line"><span class="type">Bean</span> <span class="variable">bean2</span> <span class="operator">=</span> (Bean) in.readObject();</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="通过new创建的对象何时回收"><a href="#通过new创建的对象何时回收" class="headerlink" title="通过new创建的对象何时回收"></a>通过new创建的对象何时回收</h4><p>由GC自动回收，它会周期性地检测不再被引用的对象，并将其回收释放内存，对象的回收主要有几种情况：</p>
<ol>
<li>引用计数法：某个对象的引用计数为0时，表示该对象不再被引用，可以被回收。</li>
<li>可达性分析算法：从根对象（如方法区中的类静态属性、方法中的局部变量等）出发，通过对象之间的引用链进行遍历，如果存在一条引用链到达某个对象，则说明该对象是可达的，反之不可达，不可达的对象将被回收。</li>
<li>终结器（Finalizer）：如果对象重写了finalize()方法，垃圾回收器会在回收该对象之前调用finalize()方法，对象可以在finalize()方法中进行一些清理操作。然而，终结器机制的使用不被推荐，因为它的执行时间是不确定的，可能会导致不可预测的性能问题。</li>
</ol>
<h4 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h4><p>反射机制是在运行状态中，可以获取类的所有属性和方法，对于任意一个对象，可以调用它的任意一个方法和属性。</p>
<p>反射特性：</p>
<ul>
<li>运行时类信息访问</li>
<li>动态对象创建：可以使用反射API动态地创建对象实例，在前面创建对象的地方可以体现</li>
<li>动态方法调用：可以在运行时动态地调用对象的方法，包括私有方法。</li>
<li>访问和修改字段值：还允许在运行时访问和修改对象的字段值，即使是私有的。</li>
</ul>
<h4 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h4><p>Spring IOC，可以通过配置文件或者配置类装载bean，在配置文件中只需要填写对应实体类的相关属性信息，使用反射机制获取到这个类的Class实例。</p>
<p>反射示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInvoke</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am TestInvoke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\java开发学习\\Java基础知识\\application.properties&quot;</span>);</span><br><span class="line">        properties.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> properties.getProperty(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//使用反射机制获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(getName(<span class="string">&quot;className&quot;</span>));</span><br><span class="line">        System.out.println(c.getSimpleName());</span><br><span class="line">        <span class="comment">//使用反射机制获取方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getDeclaredMethod(getName(<span class="string">&quot;methodName&quot;</span>));</span><br><span class="line">        <span class="comment">//绕过安全检查</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建实例对象</span></span><br><span class="line">        <span class="type">TestInvoke</span> <span class="variable">testInvoke</span> <span class="operator">=</span> (TestInvoke)c.newInstance();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        method.invoke(testInvoke);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span> = <span class="string">com.jermaine.reflectDemo.TestInvoke</span></span><br><span class="line"><span class="attr">methodName</span> = <span class="string">printInstance</span></span><br></pre></td></tr></table></figure>

<h4 id="注解的原理"><a href="#注解的原理" class="headerlink" title="注解的原理"></a>注解的原理</h4><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。</p>
<p>我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p>
<h4 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h4><p>Java异常主要为Error和Exception这两个大类，均继承了Throwable。</p>
<p>Error：表示运行时环境的错误。错误是程序无法处理的严重问题，如系统崩溃、虚拟机错误、动态链接失败等。通常，程序不应该尝试捕获这类错误。例如，OutOfMemoryError、StackOverflowError等。</p>
<p>Exception：分为两类</p>
<ul>
<li>非运行时异常：：这类异常在编译时期就必须被捕获或者声明抛出。它们通常是外部错误，如文件不存在（FileNotFoundException）、类未找到（ClassNotFoundException）等。非运行时异常强制程序员处理这些可能出现的问题，增强了程序的健壮性。</li>
<li>运行时异常：：这类异常包括运行时异常（RuntimeException）和错误（Error）。运行时异常由程序错误导致，如空指针访问（NullPointerException）、数组越界（ArrayIndexOutOfBoundsException）等。运行时异常是不需要在编译时强制捕获或声明的。</li>
</ul>
<p>抛出异常的方式：</p>
<ul>
<li>try catch：用于捕获并处理特定的异常，可以有多个catch块来处理不同类型的异常，finally用于定义无论是否发生异常都会执行的代码块</li>
<li>throw：手动抛出异常</li>
<li>throws：一个方法可能抛出异常，但不想在方法内部处理，将异常传递给调用者处理</li>
</ul>
<h4 id="与equals的区别"><a href="#与equals的区别" class="headerlink" title="&#x3D;&#x3D;与equals的区别"></a>&#x3D;&#x3D;与equals的区别</h4><ul>
<li>‘&#x3D;&#x3D;’：比较的是两个字符串内存地址（堆内存）的数值是否相同</li>
<li>‘equals’：比较的是字符串内的内容是否相同</li>
</ul>
<h4 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h4><ul>
<li>String类是final class，不可变字符串，因此在拼接时会产生许多无用中间对象，对性能产生影响</li>
<li>StringBuffer()是为了解决字符串拼接的问题，本质是一个线程安全的可修改字符序列。</li>
<li>StringBuilder()本质上与buffer没有区别，只是线程不安全，减少了开销。</li>
</ul>
<h3 id="Java-8-1-8新特性"><a href="#Java-8-1-8新特性" class="headerlink" title="Java 8&#x2F;1.8新特性"></a>Java 8&#x2F;1.8新特性</h3><h4 id="stream-API"><a href="#stream-API" class="headerlink" title="stream API"></a>stream API</h4><p>它提供了一种高效且易于使用的数据处理方式，特别适合集合对象的操作，如过滤、映射、排序等。Stream API不仅可以提高代码的可读性和简洁性，还能利用多核处理器的优势进行并行处理。</p>
<h4 id="stream流的并行API是什么"><a href="#stream流的并行API是什么" class="headerlink" title="stream流的并行API是什么"></a>stream流的并行API是什么</h4><p>并行流（ParallelStream）就是将源数据分为多个子流对象进行多线程操作，然后将处理的结果再汇总为一个流对象，底层是使用通用的 fork&#x2F;join 池来实现，即将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合并成总的计算结果</p>
<p>CPU密集型（涉及大量计算，循环和逻辑操作等任务）任务适合使用并行流来解决，而任务如果是IO密集型（涉及频繁的输入输出，例如频繁的文件读写，网络通信等任务）的，并且相对线程数较大，直接使用并行流并不合适</p>
<h4 id="completableFutrue怎么用的"><a href="#completableFutrue怎么用的" class="headerlink" title="completableFutrue怎么用的"></a>completableFutrue怎么用的</h4><p>CompletableFuture是由Java 8引入的，在Java8之前我们一般通过Future实现异步。</p>
<ul>
<li>Future用于表示异步计算的结果，只能通过阻塞或者轮询的方式获取结果，而且不支持设置回调方法，Java 8之前若要设置回调一般会使用guava的ListenableFuture，回调的引入又会导致臭名昭著的回调地狱（下面的例子会通过ListenableFuture的使用来具体进行展示）。</li>
<li>CompletableFuture对Future进行了扩展，可以通过设置回调的方式处理计算结果，同时也支持组合操作，支持进一步的编排，同时一定程度解决了回调地狱的问题。</li>
</ul>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="怎么把一个对象从一个jvm转移到另一个jvm"><a href="#怎么把一个对象从一个jvm转移到另一个jvm" class="headerlink" title="怎么把一个对象从一个jvm转移到另一个jvm"></a>怎么把一个对象从一个jvm转移到另一个jvm</h4><ul>
<li>使用序列化和反序列化：将对象序列化为字节流，并将其发送到另一个 JVM，然后在另一个 JVM 中反序列化字节流恢复对象。这可以通过 Java 的 ObjectOutputStream 和 ObjectInputStream 来实现。</li>
<li>使用消息传递机制：利用消息传递机制，比如使用消息队列（如 RabbitMQ、Kafka）或者通过网络套接字进行通信，将对象从一个 JVM 发送到另一个。这需要自定义协议来序列化对象并在另一个 JVM 中反序列化。</li>
<li>使用远程方法调用（RPC）：可以使用远程方法调用框架，如  gRPC，来实现对象在不同 JVM 之间的传输。远程方法调用可以让你在分布式系统中调用远程 JVM 上的对象的方法。</li>
<li>使用共享数据库或缓存：：将对象存储在共享数据库（如 MySQL、PostgreSQL）或共享缓存（如 Redis）中，让不同的 JVM 可以访问这些共享数据。这种方法适用于需要共享数据但不需要直接传输对象的场景。</li>
</ul>
<h4 id="如何自己实现序列化和反序列化"><a href="#如何自己实现序列化和反序列化" class="headerlink" title="如何自己实现序列化和反序列化"></a>如何自己实现序列化和反序列化</h4><p>Java 默认的序列化虽然实现方便，但却存在安全漏洞、不跨语言以及性能差等缺陷。</p>
<ul>
<li>无法跨语言： Java 序列化目前只适用基于 Java 语言实现的框架，其它语言大部分都没有使用 Java 的序列化框架，也没有实现 Java 序列化这套协议。因此，如果是两个基于不同语言编写的应用程序相互通信，则无法实现两个应用服务之间传输对象的序列化与反序列化。</li>
<li>容易被攻击：Java 序列化是不安全的，我们知道对象是通过在 ObjectInputStream 上调用 readObject() 方法进行反序列化的，这个方法其实是一个神奇的构造器，它可以将类路径上几乎所有实现了 Serializable 接口的对象都实例化。这也就意味着，在反序列化字节流的过程中，该方法可以执行任意类型的代码，这是非常危险的。</li>
<li>序列化后的流太大：序列化后的二进制流大小能体现序列化的性能。序列化后的二进制数组越大，占用的存储空间就越多，存储硬件的成本就越高。如果我们是进行网络传输，则占用的带宽就更多，这时就会影响到系统的吞吐量。</li>
</ul>
<p>我会考虑用主流序列化框架，比如FastJson、Protobuf来替代Java 序列化。</p>
<p>如果追求性能的话，Protobuf 序列化框架会比较合适，Protobuf 的这种数据存储格式，不仅压缩存储数据的效果好， 在编码和解码的性能方面也很高效。Protobuf 的编码和解码过程结合.proto 文件格式，加上 Protocol Buffer 独特的编码格式，只需要简单的数据运算以及位移等操作就可以完成编码与解码。可以说 Protobuf 的整体性能非常优秀。</p>
<h4 id="将对象转为二进制字节流如何实现"><a href="#将对象转为二进制字节流如何实现" class="headerlink" title="将对象转为二进制字节流如何实现"></a>将对象转为二进制字节流如何实现</h4><p>其实，像序列化和反序列化，无论这些可逆操作是什么机制，都会有对应的处理和解析协议，例如加密和解密，TCP的粘包和拆包，序列化机制是通过序列化协议来进行处理的，和 class 文件类似，它其实是定义了序列化后的字节流格式，然后对此格式进行操作，生成符合格式的字节流或者将字节流解析成对象。</p>
<p>在Java中通过序列化对象流来完成序列化和反序列化：</p>
<ul>
<li>ObjectOutputStream：通过writeObject(）方法做序列化操作。</li>
<li>ObjectInputStrean：通过readObject()方法做反序列化操作。</li>
</ul>
<p>只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常！</p>
<p>实现序列化步骤：</p>
<ul>
<li><p>让类实现Serializable接口</p>
</li>
<li><p>创建输出流并写入对象</p>
</li>
<li><p>创建输入流并读取对象</p>
</li>
</ul>
<p>通过以上步骤，对象obj会被序列化并写入到文件”object.ser”中，然后通过反序列化操作，从文件中读取字节流并恢复为对象newObj。这种方式可以方便地将对象转换为字节流用于持久化存储、网络传输等操作。需要注意的是，要确保类实现了Serializable接口，并且所有成员变量都是Serializable的才能被正确序列化。</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="代理模式和适配器模式的区别"><a href="#代理模式和适配器模式的区别" class="headerlink" title="代理模式和适配器模式的区别"></a>代理模式和适配器模式的区别</h4><ul>
<li>目的不同：代理模式主要关注控制对对象的访问，而适配器模式则用于接口转换，使不兼容的类能够一起工作。</li>
<li>结构不同：代理模式一般包含抽象主题、真实主题和代理三个角色，适配器模式包含目标接口、适配器和被适配者三个角色。</li>
<li>应用场景不同：代理模式常用于添加额外功能或控制对对象的访问，适配器模式常用于让不兼容的接口协同工作。</li>
</ul>
<h3 id="I-O"><a href="#I-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h3><h4 id="BIO、NIO、AIO"><a href="#BIO、NIO、AIO" class="headerlink" title="BIO、NIO、AIO"></a>BIO、NIO、AIO</h4><ul>
<li>BIO（blocking IO）：就是传统的 java.io 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。优点是代码比较简单、直观；缺点是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。</li>
<li>NIO（non-blocking IO） ：Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。</li>
<li>AIO（Asynchronous IO） ：是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</li>
</ul>
<h3 id="有一个学生类-想按照分数排序-再按学号排序-应该怎么做"><a href="#有一个学生类-想按照分数排序-再按学号排序-应该怎么做" class="headerlink" title="有一个学生类-想按照分数排序-再按学号排序-应该怎么做"></a>有一个学生类-想按照分数排序-再按学号排序-应该怎么做</h3><p>可以使用Comparable接口来实现按照分数排序，再按照学号排序。首先在学生类中实现Comparable接口，并重写compareTo方法，然后在compareTo方法中实现按照分数排序和按照学号排序的逻辑。</p>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/968cdf361bab740824736982041b01e6.png#pic_center" alt="img"></p>
<p>B树就是一颗多路平衡查找树，适合高效的存储和查找大量数据，在定义B树时，需要指定它的阶数(每个节点最多有阶数-1个孩子节点)，当阶数为3时，就是一颗AVL。</p>
<p>一颗m阶B树的定义如下：</p>
<ul>
<li>每个结点最多有m-1个关键字。</li>
<li>根结点最少可以只有1个关键字。</li>
<li>非根结点至少有Math.ceil(m&#x2F;2)-1个关键字。</li>
<li>每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</li>
<li>所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同。</li>
</ul>
<p>B树的插入操作（以5阶为例）</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e63b1543c2460849262281e31ea4fd78.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9ae5339cf9f2b86cae8e11559f65f847.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/de2c22e777d56573ccab81c884ee51b0.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/492a5aef02e8df5347851cdbc43e7fd8.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/28a03b3312fd829c82333a5020983ade.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e5620e2841d978dc65e57310d1c783a4.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b064776f2ecf598994b9bcf6a8b85b30.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/c04128d62355e164540b3ef782f049a0.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/6a1dba65cbb52cb707465ee4154b0183.png" alt="img"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/a8fd9d5c8d11a725021a3e181659e89a.png" alt="img"></p>
<p>B树的删除操作：</p>
<p>删除操作是指，根据key删除记录，如果B树中的记录中不存对应key的记录，则删除失败。</p>
<ol>
<li>如果当前需要删除的key位于非叶子结点上，则用后继key（这里的后继key均指后继记录的意思）覆盖要删除的key，然后在后继key所在的子支中删除该后继key。此时后继key一定位于叶子结点上，这个过程和二叉搜索树删除结点的方式类似。删除这个记录后执行第2步</li>
<li>该结点key个数大于等于Math.ceil(m&#x2F;2)-1，结束删除操作，否则执行第3步。</li>
<li>如果兄弟结点key个数大于Math.ceil(m&#x2F;2)-1，则父结点中的key下移到该结点，兄弟结点中的一个key上移，删除操作结束。</li>
<li>否则，将父结点中的key下移与当前结点及它的兄弟结点中的key合并，形成一个新的结点。原父结点中的key的两个孩子指针就变成了一个孩子指针，指向这个新结点。然后当前结点的指针指向父结点，重复上第2步。<br>有些结点它可能即有左兄弟，又有右兄弟，那么我们任意选择一个兄弟结点进行操作即可。</li>
</ol>
<h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><p>关键字个数比孩子结点个数小1，这种方式是和B树基本等价的。下图就是一颗阶数为4的B+树：</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/a4996655171469c6bd54a67b08179d4e.png#pic_center" alt="在这里插入图片描述"></p>
<p>除此之外B+树还有以下的要求：</p>
<ol>
<li>B+树包含2种类型的结点：内部结点（也称索引结点）和叶子结点。根结点本身即可以是内部结点，也可以是叶子结点。根结点的关键字个数最少可以只有1个。</li>
<li>B+树与B树最大的不同是内部结点不保存数据，只用于索引，所有数据（或者说记录）都保存在叶子结点中。<br>m阶B+树表示了内部结点最多有m-1个关键字（或者说内部结点最多有m个子树），阶数m同时限制了叶子结点最多存储m-1个记录。</li>
<li>内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的记录也按照key的大小排列。</li>
<li>每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。</li>
</ol>
<p>B+树与B树的区别：</p>
<ul>
<li>由于B+树在内部节点上不包含数据信息，因此在内存页中能够存放更多的key。数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率</li>
<li>B+树的叶子节点都是相连的，因此对整棵树的遍历只需要一次线性遍历叶子节点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</li>
<li>B+树的数据只存储在叶子节点中，因此插入和删除操作只需要修改叶子节点和对应的索引节点，不需要进行节点的分裂和合并，因此B+树的插入和删除操作更加高效。而B树的每个节点都可以存储数据，因此在进行插入和删除操作时需要进行节点分裂和合并。</li>
</ul>
<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="介绍一下Java中的集合"><a href="#介绍一下Java中的集合" class="headerlink" title="介绍一下Java中的集合"></a>介绍一下Java中的集合</h4><p>List是有序的Collection，可以通过下标访问元素，插入元素，常用的实现List类的有LinkedList，ArrayList，Stack，Vector</p>
<ul>
<li>LinkedList（双向链表）：插入与删除元素速度比ArrayList更快，但访问速度慢</li>
<li>ArrayList：容量可变的线程不安全列表，使用数组实现，扩容通过创建新数组，将原数组复制到新数组中，访问速度更快，但插入与删除较慢</li>
</ul>
<p>Set不允许存在重复的元素，并且元素是无序的</p>
<ul>
<li>HashSet：使用HashMap实现，HashMap的key就是HashSet存储的元素，value均为一个名为PRESENT的object常量，HashSet线程不安全</li>
<li>LinkedHashSet：继承自HashSet，使用双向链表维护元素插入顺序</li>
<li>TreeSet：通过TreeMap实现，按照比较规则将元素插入到合适的位置，插入后保证集合仍然有序</li>
</ul>
<p>Map是一个键值对集合，存储键，值和之间的映射，key唯一，但无序，value可以重复，且不要求有序</p>
<ul>
<li>HashMap：JDK1.8之前由数组+链表组成，数组是HashMap的主体，链表通过拉链法解决哈希冲突，JDK1.8后当链表长度大于阈值（默认为8）时，将链表转换为红黑树，减少检索时间。</li>
<li>TreeMap：红黑树（自平衡的排序二叉树）</li>
<li>LinkedHashMap：继承自HashMap，底层结构与HashMap相同，同时增加了一条双向链表，控制键值对的插入顺序。</li>
<li>HashTable：数组+链表组成，数组是HashTable的主体，链表解决哈希冲突</li>
<li>ConcurrentHashMap：Node+链表+红黑树实现，线程安全的（jdk1.8之前Segment锁，1.8之后volatile+CAS或者synchronized）</li>
</ul>
<h4 id="线程安全的集合有哪些"><a href="#线程安全的集合有哪些" class="headerlink" title="线程安全的集合有哪些"></a>线程安全的集合有哪些</h4><p>java.util包下的线程安全类主要有两个：</p>
<ul>
<li>Vector：线程安全的动态数组，其内部方法均使用了synchronized修饰</li>
<li>HashTable：线程安全的哈希表，给每个方法加上了synchronized关键字</li>
</ul>
<p>JUC提供的都是线程安全的集合</p>
<p>并发Map</p>
<ul>
<li>ConcurrentHashMap： 它取消了Segment字段，直接在table元素上加锁，实现对每一行进行加锁，进一步减小了并发冲突的概率。对于put操作，如果Key对应的数组元素为null，则通过CAS操作（Compare and Swap）将其设置为当前值。如果Key对应的数组元素（也即链表表头或者树的根元素）不为null，则对该元素使用 synchronized 关键字申请锁，然后进行操作。如果该 put 操作使得当前链表长度超过一定阈值，则将该链表转换为红黑树，从而提高寻址效率。</li>
<li>ConcurrentSkipListMap：实现了一个基于SkipList（跳表）算法的可排序的并发集合，SkipList是一种可以在对数预期时间内完成搜索、插入、删除等操作的数据结构，通过维护多个指向其他元素的“跳跃”链接来实现高效查找。</li>
</ul>
<p>并发Set</p>
<ul>
<li>ConcurrentSkipListSet：底层使用ConcurrentSkipListMap实现</li>
<li>CopyOnWriteArraySet：是线程安全的Set实现，它是线程安全的无序的集合，可以将它理解成线程安全的HashSet。有意思的是，CopyOnWriteArraySet和HashSet虽然都继承于共同的父类AbstractSet；但是，HashSet是通过“散列表”实现的，而CopyOnWriteArraySet则是通过“动态数组(CopyOnWriteArrayList)”实现的，并不是散列表。</li>
</ul>
<p>并发List</p>
<ul>
<li>CopyOnWriteArrayList：它是 ArrayList 的线程安全的变体，其中所有写操作（add，set等）都通过对底层数组进行全新复制来实现，允许存储 null 元素。即当对象进行写操作时，使用了Lock锁做同步处理，内部拷贝了原数组，并在新数组上进行添加操作，最后将新数组替换掉旧数组；若进行的读操作，则直接返回结果，操作过程中不需要进行同步。</li>
</ul>
<p>并发Queue</p>
<ul>
<li>ConcurrentLinkedQueue：是一个适用于高并发场景下的队列，它通过无锁的方式(CAS)，实现了高并发状态下的高性能。通常，ConcurrentLinkedQueue 的性能要好于 BlockingQueue 。</li>
<li>BlockingQueue：与 ConcurrentLinkedQueue 的使用场景不同，BlockingQueue 的主要功能并不是在于提升高并发时的队列性能，而在于简化多线程间的数据共享。BlockingQueue 提供一种读写阻塞等待的机制，即如果消费者速度较快，则 BlockingQueue 则可能被清空，此时消费线程再试图从 BlockingQueue 读取数据时就会被阻塞。反之，如果生产线程较快，则 BlockingQueue 可能会被装满，此时，生产线程再试图向 BlockingQueue 队列装入数据时，便会被阻塞等待。</li>
</ul>
<p>并发Deque</p>
<ul>
<li>LinkedBlockingDeque：是一个线程安全的双端队列实现。它的内部使用链表结构，每一个节点都维护了一个前驱节点和一个后驱节点。LinkedBlockingDeque 没有进行读写锁的分离，因此同一时间只能有一个线程对其进行操作。</li>
<li>ConcurrentLinkedDeque：ConcurrentLinkedDeque是一种基于链接节点的无限并发链表。可以安全地并发执行插入、删除和访问操作。当许多线程同时访问一个公共集合时，ConcurrentLinkedDeque是一个合适的选择。</li>
</ul>
<h4 id="Collections和Collection的区别"><a href="#Collections和Collection的区别" class="headerlink" title="Collections和Collection的区别"></a>Collections和Collection的区别</h4><ul>
<li>Collection是所有集合类的基础接口，定义了一组通用的操作方法：如插入，删除，查找等</li>
<li>Collections是java提供的一个工具类，提供了一系列静态方法，对集合进行操作和算法。包括排序，查找，替换，反转，随机化等。</li>
</ul>
<h4 id="集合遍历的方法有哪些"><a href="#集合遍历的方法有哪些" class="headerlink" title="集合遍历的方法有哪些"></a>集合遍历的方法有哪些</h4><ul>
<li><p>for循环索引遍历</p>
</li>
<li><p>for-each</p>
</li>
<li><p>Iterator迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    list.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ListIterator迭代器：可以双向访问列表并在迭代过程中修改元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    list.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    ListIterator&lt;Character&gt; listIterator = list.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (listIterator.hasNext())&#123;</span><br><span class="line">    System.out.println(listIterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用forEach：Java8新特性，使用forEach方法并结合lamda表达式对集合快速遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    list.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>stream API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    list.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    list.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    list.stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="把ArrayList变成线程安全的方法有哪些"><a href="#把ArrayList变成线程安全的方法有哪些" class="headerlink" title="把ArrayList变成线程安全的方法有哪些"></a>把ArrayList变成线程安全的方法有哪些</h4><ul>
<li><p>使用Collections类的synchronizedList()方法将其包装成线程安全的List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Character&gt; list = Collections.synchronizedList(TestList.list);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用CopyOnWriteArrayList替代（JUC）</p>
</li>
<li><p>使用Vector类替代</p>
</li>
</ul>
<h4 id="ArrayList为何线程不安全，体现在哪些方面？"><a href="#ArrayList为何线程不安全，体现在哪些方面？" class="headerlink" title="ArrayList为何线程不安全，体现在哪些方面？"></a>ArrayList为何线程不安全，体现在哪些方面？</h4><p>在高并发量的数据下，ArrayList可能会出现这些问题：</p>
<ul>
<li>add的值为null（我们并没有添加null）</li>
<li>索引越界异常</li>
<li>size与add的数量不符合</li>
</ul>
<h4 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h4><p>在添加元素时，如果当前元素个数已经到达内部数组的容量上限时，就会触发扩容操作。</p>
<p>主要包括以下步骤：</p>
<ul>
<li>计算新的容量：一般情况下，将新的容量扩大到原容量的1.5倍，然后检查是否超过最大容量限制</li>
<li>创建新的数组</li>
<li>将元素从原来数组逐个复制到新数组中</li>
<li>更新引用：将ArrayList的引用指向新的数组</li>
</ul>
<h4 id="JUC中的CopyOnWriteArrayList如何实现线程安全"><a href="#JUC中的CopyOnWriteArrayList如何实现线程安全" class="headerlink" title="JUC中的CopyOnWriteArrayList如何实现线程安全"></a>JUC中的CopyOnWriteArrayList如何实现线程安全</h4><ul>
<li>使用volatile关键字修饰数组，这使得对数组进行修改时对其他线程是可见的</li>
<li>在写入操作时，使用ReentrantLock以保证线程安全</li>
</ul>
<p>注意：读操作并不加锁</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="HashMap实现原理是怎样的"><a href="#HashMap实现原理是怎样的" class="headerlink" title="HashMap实现原理是怎样的"></a>HashMap实现原理是怎样的</h4><p>JDK1.7版本之前，HashMap通过哈希函数将元素的键映射到数组上，如果多个键映射到同一个位置上（哈希碰撞&#x2F;哈希冲突），就会以链表的形式存储到同一个位置上（拉链法），但是链表的查询效率为O(n)，链表长度太长就不利于查询。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719565480532-57a14329-c36b-4514-8e7d-2f2f1df88a82.webp" alt="img"></p>
<p>JDK1.8实现方式：当链表长度超过8时，就会替换成红黑树，而红黑树的查询效率为O(logn)，提高了查询性能，但当数量小于6时，又会替换成链表。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719565481289-0c2164f4-f755-46e3-bb39-b5f28621bb6b.webp" alt="img"></p>
<h4 id="哈希冲突的解决方式有哪些"><a href="#哈希冲突的解决方式有哪些" class="headerlink" title="哈希冲突的解决方式有哪些"></a>哈希冲突的解决方式有哪些</h4><ul>
<li>链接法：使用链表或其他数据结构来存储冲突的键值对，将它们链接在同一个哈希桶中。</li>
<li>开放寻址法：在哈希表中找到另一个可用的位置来存储冲突的键值对，而不是存储在链表中。常见的开放寻址方法包括线性探测、二次探测和双重散列。</li>
<li>再哈希法（Rehashing）：当发生冲突时，使用另一个哈希函数再次计算键的哈希值，直到找到一个空槽来存储键值对。</li>
<li>哈希桶扩容：当哈希冲突过多时，可以动态地扩大哈希桶的数量，重新分配键值对，以减少冲突的概率。</li>
</ul>
<h4 id="HashMap为什么线程不安全"><a href="#HashMap为什么线程不安全" class="headerlink" title="HashMap为什么线程不安全"></a>HashMap为什么线程不安全</h4><ul>
<li>JDK 1.7 HashMap 采用数组 + 链表的数据结构，多线程背景下，在数组扩容的时候，存在 Entry 链死循环和数据丢失问题。</li>
<li>JDK 1.8 HashMap 采用数组 + 链表 + 红黑二叉树的数据结构，优化了 1.7 中数组扩容的方案，解决了 Entry 链死循环和数据丢失问题。但是多线程背景下，put 方法存在数据覆盖的问题。</li>
</ul>
<h4 id="那么如何解决线程不安全"><a href="#那么如何解决线程不安全" class="headerlink" title="那么如何解决线程不安全"></a>那么如何解决线程不安全</h4><p>多线程环境可以使用Collections.synchronizedMap同步加锁的方式，还可以使用HashTable，但是同步的方式显然性能不达标，而ConurrentHashMap更适合高并发场景使用。ConurrentHashMap在JDK1.8中使用CAS+synchronized+Node实现，同样也加入了红黑树，避免链表过度增长。</p>
<h4 id="HashMap的put操作"><a href="#HashMap的put操作" class="headerlink" title="HashMap的put操作"></a>HashMap的put操作</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1720684054342-1e3cb2a9-532e-40b8-b5cf-0043811391dc.png" alt="img"></p>
<h4 id="HashMap的get方法一定安全吗？"><a href="#HashMap的get方法一定安全吗？" class="headerlink" title="HashMap的get方法一定安全吗？"></a>HashMap的get方法一定安全吗？</h4><p>不一定，可能会遇到如下问题</p>
<ul>
<li>空指针异常：当HashMap没有初始化时，key为null会抛出空指针异常</li>
<li>线程不安全</li>
</ul>
<h4 id="HashMap为什么适合使用String做key"><a href="#HashMap为什么适合使用String做key" class="headerlink" title="HashMap为什么适合使用String做key"></a>HashMap为什么适合使用String做key</h4><p>因为String对象是不可变的，确保了key的稳定性，如果key可变，可能导致hashcode不一致，影响HashMap的正确性</p>
<h4 id="HashMap的扩容机制是怎样的"><a href="#HashMap的扩容机制是怎样的" class="headerlink" title="HashMap的扩容机制是怎样的"></a>HashMap的扩容机制是怎样的</h4><p>HashMap默认的负载因子是0.75，如果HashMap中的元素量超过了总容量的75%，就会触发扩容，扩容分为两个步骤：</p>
<ul>
<li>创建一个容量为原来两倍的新哈希表</li>
<li>将旧哈希表中的数据放到新的哈希表中</li>
</ul>
<h4 id="往HashMap中存入20个元素，会扩容几次"><a href="#往HashMap中存入20个元素，会扩容几次" class="headerlink" title="往HashMap中存入20个元素，会扩容几次"></a>往HashMap中存入20个元素，会扩容几次</h4><p>HashMap的初始容量是16，当填入到第13个元素时，超过了总容量的75%，扩容一次到32，足够插入到第二十个元素，因此只需要扩容一次。</p>
<h4 id="HashMap与HashTable的区别"><a href="#HashMap与HashTable的区别" class="headerlink" title="HashMap与HashTable的区别"></a>HashMap与HashTable的区别</h4><ul>
<li>HashMap是线程不安全的，HashTable是线程安全的</li>
<li>HashMap效率更高，因为HashTable内部方法基本都有synchronized修饰，有额外的内存开销</li>
<li>HashMap可以有为null的key和value，但HashTable不可以</li>
<li>HashMap的默认容量为16，若给定了初始容量，会扩充为2的幂次方，而HashTable默认容量为11，若给定了初始容量，直接使用该初始容量，并且HashTable的每次扩容是变为原来的2n+1，HashTable基本上被淘汰了，保证线程安全可以使用ConcurrentHashMap</li>
</ul>
<h4 id="ConcurrentHashMap是怎么实现的"><a href="#ConcurrentHashMap是怎么实现的" class="headerlink" title="ConcurrentHashMap是怎么实现的"></a>ConcurrentHashMap是怎么实现的</h4><p> JDK 1.8 ConcurrentHashMap使用了数组+链表&#x2F;红黑树实现，主要通过 volatile + CAS 或者 synchronized 来实现的线程安全的。添加元素时首先会判断容器是否为空：</p>
<ul>
<li>若为空则使用volatile加CAS来初始化</li>
<li>如果容器不为空，则根据存储的元素计算该位置是否为空<ul>
<li>如果根据存储的元素计算结果为空，则利用CAS设置该节点</li>
<li>如果存储的元素计算结果不为空，则使用synchronized，然后遍历桶中的数据，并替换或新增节点到桶中，最后再判断是否转为红黑树，这样就能保证并发访问时的线程安全了</li>
</ul>
</li>
</ul>
<h4 id="已经用了synchronized，为什么还要用CAS"><a href="#已经用了synchronized，为什么还要用CAS" class="headerlink" title="已经用了synchronized，为什么还要用CAS?"></a>已经用了synchronized，为什么还要用CAS?</h4><p>使用synchronized还是CAS主要看线程竞争锁的激烈程度</p>
<p>比如：在putVal中，如果计算出来的hash槽没有存放元素，那么就可以直接使用CAS来进行设置值，这是因为在设置元素的时候，因为hash值经过了各种扰动后，造成hash碰撞的几率较低，那么我们可以预测使用较少的自旋来完成具体的hash落槽操作。</p>
<p>当发生了hash碰撞的时候说明容量不够用了或者已经有大量线程访问了，因此这时候使用synchronized来处理hash碰撞比CAS效率要高，因为发生了hash碰撞大概率来说是线程竞争比较强烈。</p>
<h4 id="ConcurrentHashMap用了悲观锁还是乐观锁"><a href="#ConcurrentHashMap用了悲观锁还是乐观锁" class="headerlink" title="ConcurrentHashMap用了悲观锁还是乐观锁"></a>ConcurrentHashMap用了悲观锁还是乐观锁</h4><p>都有用到，添加元素时首先会判断容器是否为空：</p>
<ul>
<li>如果为空，就会使用volatile和乐观锁（CAS）来初始化</li>
<li>如果不为空，则根据存储的元素计算该位置是否为空</li>
<li>如果根据存储的元素计算结果为空，使用CAS设置该节点</li>
<li>如果不为空，则使用悲观锁（synchronized） ，然后，遍历桶中的数据，并替换或新增节点到桶中，最后再判断是否需要转为红黑树，这样就能保证并发访问时的线程安全了。</li>
</ul>
<h4 id="HashTable底层实现原理是什么"><a href="#HashTable底层实现原理是什么" class="headerlink" title="HashTable底层实现原理是什么"></a>HashTable底层实现原理是什么</h4><ul>
<li>HashTable的底层数据结构主要是数组加上链表</li>
<li>HashTable使用synchronized关键字修饰所有公共方法，当一个线程持有锁的时候，另一个线程也访问的时候，就会陷入阻塞或者轮询状态。</li>
</ul>
<h4 id="HashTable如何保证线程安全"><a href="#HashTable如何保证线程安全" class="headerlink" title="HashTable如何保证线程安全"></a>HashTable如何保证线程安全</h4><p>将put，get做成了同步方法，但因为synchronized不释放锁的情况下其他线程会陷入阻塞状态，在高并发场景下效率并不高，还可能会遇到死锁的情况。</p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="有序的set是什么，记录插入顺序的集合是什么"><a href="#有序的set是什么，记录插入顺序的集合是什么" class="headerlink" title="有序的set是什么，记录插入顺序的集合是什么"></a>有序的set是什么，记录插入顺序的集合是什么</h4><ul>
<li>有序的set是TreeSet和LinkedHashSet：TreeSet基于红黑树实现，保证元素的自然顺序。LinkedHashSet基于双向链表和哈希表的结合来实现元素的有序存储</li>
<li>记录插入顺序的是LinkedHashSet：它不仅保证元素的唯一性，还可以保持元素的插入顺序。</li>
</ul>
<h2 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="使用多线程需要注意哪些问题"><a href="#使用多线程需要注意哪些问题" class="headerlink" title="使用多线程需要注意哪些问题"></a>使用多线程需要注意哪些问题</h4><p>要保证多线程的线程安全，不要造成线程之间竞争导致出现数据不一致的情况</p>
<p>线程安全主要需要保证以下方面：</p>
<ul>
<li>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，在Java中使用atomic和synchronized关键字来保证原子性</li>
<li>可见性：一个线程对主内存的修改可以及时被其他线程看到，在java中使用volatile和synchronized关键字来保证可见性</li>
<li>有序性：一个线程观察其他线程中的指令执行顺序，因为指令重排，观察结果一般是杂乱无序的，在java中使用happens-before原则来保证有序性</li>
</ul>
<h4 id="保证数据一致性的方案有哪些"><a href="#保证数据一致性的方案有哪些" class="headerlink" title="保证数据一致性的方案有哪些"></a>保证数据一致性的方案有哪些</h4><ul>
<li>事务管理：使用数据库事务来确保一组数据库操作要么全部成功，要么全部失败回滚，通过ACID特性，数据库事务可以保证数据的一致性</li>
<li>锁机制：使用锁来实现对线程共享资源的互斥访问，在java中，可以使用synchronized关键字，ReentrantLock或其他锁机制来控制并发访问</li>
<li>版本控制：通过乐观锁的机制，在更新数据时记录数据的版本信息，从而避免同时对同一数据进行修改，进而保证数据的一致性</li>
</ul>
<h4 id="线程创建的方式有哪些"><a href="#线程创建的方式有哪些" class="headerlink" title="线程创建的方式有哪些"></a>线程创建的方式有哪些</h4><ul>
<li><p>继承Thread类</p>
<p>继承Thread类并重写run方法，run方法体内编写线程具体要执行的任务，创建给类的实例后，通过start方法来启动线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程池的创建方式1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是线程&quot;</span>+<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现Runnable接口</p>
<p>因为一个类如果已经继承了其他类的情况下，不能再通过继承Thread类的方式来创建线程，这时候就可以通过Runnable接口来创建线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是线程&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableThread</span>());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用Runnable创建线程的优缺点：</p>
<ul>
<li>优点：线程类只是实现了Runnable接口，还可以继承其他类。在这种方式下，多个线程共享同一目标对象，非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU代码和数据分开，形成清晰的模型，较好的体现了面向对象思想</li>
<li>缺点：编程稍微复杂，如果需要访问当前线程，必须使用Thread.currentThread()方法</li>
</ul>
</li>
<li><p>实现Callable接口和FutureTask</p>
<p>JUC下的callable接口类似于Runnable，但Callable的call()方法可以有返回值并且可以抛出异常，要执行Callable任务，需要先将其包装成一个FutureTask。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是Callable创建的线程&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCallable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CallableThread</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableThread</span>();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(task);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">res</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;Res:&quot;</span>+res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用线程池（Executor框架）</p>
<p>使用JUC的ExecutorService和相关类，这是一种更高效的线程管理方式，避免了频繁创建和销毁线程的开销，可以通过Executors类的静态方法创建不同类型的线程池。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是线程&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestExecutor</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">excutor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            excutor.submit(<span class="keyword">new</span> <span class="title class_">Task</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        excutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>采用线程池的方式增加了程序的复杂度，特别是当涉及线程池参数调整和故障排查的时候，错误的配置可能导致死锁，资源耗尽等问题，这些问题的诊断和修复比较复杂。但线程池可以重用预先创建的线程，避免了频繁的创建与销毁线程，减少了内存的开销，性能较好，对于需要快速响应的并发请求，线程池可以迅速提供线程来处理任务，减少等待时间。并且，线程池能够有效控制运行的线程数量，防止因创建过多线程导致的资源耗尽（如内存溢出）。通过合理配置线程池大小，可以最大化CPU利用率和系统吞吐量。</p>
</li>
</ul>
<h4 id="如何停止一个线程的运行"><a href="#如何停止一个线程的运行" class="headerlink" title="如何停止一个线程的运行"></a>如何停止一个线程的运行</h4><ul>
<li>异常法停止：线程调用interrupt方法后，在线程run方法中判断当前对象的interrupt状态，如果是中断状态则抛出异常，达到中断线程的效果</li>
<li>在沉睡中停止：先将线程sleep，然后调用interrupt标记中断状态，interrupt会将阻塞状态的线程中断。会抛出中断异常，达到停止线程的效果</li>
<li>stop()暴力停止：线程调用stop方法会被暴力停止，该方法已经弃用，因为强制让线程停止有可能使一些清理性的工作得不到完成。</li>
<li>使用return停止线程：调用interrupt标记为中断状态之后，在run方法中判断当前线程状态，如果为中断状态则return，能达到停止线程的效果。</li>
</ul>
<h4 id="调用interrupt是如何让线程抛出异常的"><a href="#调用interrupt是如何让线程抛出异常的" class="headerlink" title="调用interrupt是如何让线程抛出异常的"></a>调用interrupt是如何让线程抛出异常的</h4><p>每个线程都有一个与之关联的boolean属性来表示其中断状态，中断状态的初始值为false，当一个线程被其他线程调用Thread.interrupt方法中断时，会根据实际情况做出响应。</p>
<ul>
<li>如果该线程正在执行低级别的可中断方法（如Thread.sleep()、Thread.join()或Object.wait()），则会解除阻塞并抛出InterruptedException异常</li>
<li>否则Thread.interrupt仅设置线程的中断状态，在该被中断的线程中稍后可通过轮询中断状态来决定是否要停止当前正在执行的任务。</li>
</ul>
<h4 id="线程的状态有哪些"><a href="#线程的状态有哪些" class="headerlink" title="线程的状态有哪些"></a>线程的状态有哪些</h4><ul>
<li>NEW：创建了线程但线程尚未启动</li>
<li>RUNNABLE：就绪状态（调用start，等待调度）+正在运行</li>
<li>BLOCKED：等待监视器锁时，陷入阻塞状态</li>
<li>WAITING：线程正在等待另一个正在执行的线程执行特定的操作(如notify)</li>
<li>TIMED_WAITING：具有指定等待时间的等待状态</li>
<li>TERMINATED：线程完成执行，终止状态</li>
</ul>
<h4 id="阻塞和等待状态有何不同"><a href="#阻塞和等待状态有何不同" class="headerlink" title="阻塞和等待状态有何不同"></a>阻塞和等待状态有何不同</h4><ul>
<li>触发条件：阻塞状态一般是因为试图获取一个对象的锁时，该锁已经被另一个线程占用，这通常发生在synchronized块或方法中，如果锁被占用，则需要一直维持阻塞状态直到锁被释放。而等待状态是因为该线程在等待另一个线程执行某些操作，例如调用Object.wait()，Thread.join()。在这种状态下，线程将不会消耗CPU资源，并且不会参与锁的竞争</li>
<li>唤醒方式：当一个线程阻塞时，一旦锁被释放，线程将有机会获取该锁，如果锁此时未被其他线程获取，那么线程就可以从阻塞状态变为RUNNABLE状态。线程在等待状态时需要被显式唤醒。例如，一个线程调用了Object.wait()方法，那么就必须等待另一个线程调用同一个对象上的Object.notify()方法或Object.notifyAll()方法才能被唤醒。</li>
</ul>
<h4 id="notify选择那个线程唤醒"><a href="#notify选择那个线程唤醒" class="headerlink" title="notify选择那个线程唤醒"></a>notify选择那个线程唤醒</h4><p>notify唤醒的线程是任意的，但依赖于具体实现的jvm。而JVM有很多实现，比较流行的就是hotspot，hotspot的实现是“先进先出”的顺序唤醒</p>
<h4 id="如何保证多线程安全"><a href="#如何保证多线程安全" class="headerlink" title="如何保证多线程安全"></a>如何保证多线程安全</h4><ul>
<li>synchronized关键字：使用synchronized来同步代码块或方法，确保同一时刻只有一个线程能访问这些代码，对象锁是通过synchronized关键字锁定对象的监视器来实现的</li>
<li>volatile：确保所有线程看到的是该变量的最新值，而不是可能存储在本地寄存器的副本</li>
<li>ReentrantLock：java.util.concurrent.locks.Lock接口提供了比synchronized更强大的锁定机制，ReentrantLock是一个实现该接口的例子，提供了更灵活的锁管理和更高的性能</li>
<li>原子类：JUC提供了一些原子类，如AtomicInteger，AtomicLong等，这些类提供了原子性操作，可以用于更新基本类型的变量而无需额外的同步</li>
<li>线程局部变量：ThreadLocal类可以为每个线程提供独立的变量副本，这样每个线程都拥有自己的变量，消除了竞争条件。</li>
<li>并发集合：juc提供的一些线程安全集合例如ConcurrentHashMap，ConcurrentLinkedQueue</li>
<li>JUC工具类：使用juc提供的一些工具类可以控制线程之间的同步和协作，例如Semaphore，CyclicBarrier等</li>
</ul>
<h4 id="Java中有哪些常用的锁，在什么场景下使用"><a href="#Java中有哪些常用的锁，在什么场景下使用" class="headerlink" title="Java中有哪些常用的锁，在什么场景下使用"></a>Java中有哪些常用的锁，在什么场景下使用</h4><ul>
<li>synchronized：syncronized加锁时有无锁、偏向锁、轻量级锁和重量级锁几个级别。偏向锁用于当一个线程进入同步块时，如果没有任何其他线程竞争，就会使用偏向锁，以减少锁的开销。轻量级锁使用线程栈上的数据结构，避免了操作系统级别的锁。重量级锁则涉及操作系统级的互斥锁。</li>
<li>ReentrantLock：公平锁按照线程请求锁的顺序来分配锁，保证了锁分配的公平性，但可能增加锁的等待时间。非公平锁不保证锁分配的顺序，可以减少锁的竞争，提高性能，但可能造成某些线程的饥饿。</li>
<li>读写锁：允许多个读取者同时访问共享资源，但只允许有一个写入者，通常用于读远多于写的场景，提高并发性</li>
<li>乐观锁和悲观锁：悲观锁通常在访问资源前就会锁定，假设数据已经被其他线程修改了，synchronized和ReentrantLock都是悲观锁。而乐观锁并不会锁定资源，而是在更新数据时检查数据是否已经被修改，乐观锁通常使用版本号或时间戳来实现。</li>
<li>自旋锁：是一种锁机制，线程会在等待锁的时候持续循环检查锁是否可用，而不是放弃CPU并阻塞，通常可以使用CAS实现。适用于锁等待时间很短的情况，可以提高性能，但过度自旋会浪费CPU资源。</li>
</ul>
<h4 id="synchronized和ReentrantLock的工作原理"><a href="#synchronized和ReentrantLock的工作原理" class="headerlink" title="synchronized和ReentrantLock的工作原理"></a>synchronized和ReentrantLock的工作原理</h4><ul>
<li><p>synchronized：</p>
<p>synchronized是Java提供的原子性内置锁，这种内置的并且使用者看不到的锁也被称为监视器锁。</p>
<p>使用synchronized之后，会在编译之后在同步的代码块前后加上monitorenter和monitorexit字节码指令，它依赖操作系统底层互斥锁实现。它的作用主要就是实现原子性操作和解决共享变量的内存可见性问题。</p>
<p>执行monitorenter指令时会尝试获取对象锁，如果对象没有被锁定或者已经获得了锁，锁的计数器+1。此时其他竞争锁的线程则会进入等待队列中。执行monitorexit指令时则会把计数器-1，当计数器值为0时，则锁释放，处于等待队列中的线程再继续竞争锁。</p>
<p>synchronized是排它锁，当一个线程获得锁之后，其他线程必须等待该线程释放锁后才能获得锁，而且由于Java中的线程和操作系统原生线程是一 一对应的，线程被阻塞或者唤醒时时会从用户态切换到内核态，这种转换非常消耗性能。</p>
<p>从内存语义来说，加锁的过程会清除工作内存中的共享变量，再从主内存读取，而释放锁的过程则是将工作内存中的共享变量写回主内存。</p>
</li>
<li><p>ReentrantLock：</p>
<p>ReentrantLock 的底层实现主要依赖于 AbstractQueuedSynchronizer（AQS）这个抽象类。AQS 是一个提供了基本同步机制的框架，其中包括了队列、状态值等。</p>
<p>ReentrantLock 在 AQS 的基础上通过内部类 Sync 来实现具体的锁操作。不同的 Sync 子类实现了公平锁和非公平锁的不同逻辑：</p>
<ul>
<li>可中断性： ReentrantLock 实现了可中断性，这意味着线程在等待锁的过程中，可以被其他线程中断而提前结束等待。在底层，ReentrantLock 使用了与 LockSupport.park() 和 LockSupport.unpark() 相关的机制来实现可中断性。</li>
<li>设置超时时间： ReentrantLock 支持在尝试获取锁时设置超时时间，即等待一定时间后如果还未获得锁，则放弃锁的获取。这是通过内部的 tryAcquireNanos 方法来实现的。</li>
<li>公平锁和非公平锁： 在直接创建 ReentrantLock 对象时，默认情况下是非公平锁。公平锁是按照线程等待的顺序来获取锁，而非公平锁则允许多个线程在同一时刻竞争锁，不考虑它们申请锁的顺序。公平锁可以通过在创建 ReentrantLock 时传入 true 来设置。</li>
</ul>
<p>多个条件变量： ReentrantLock 支持多个条件变量，每个条件变量可以与一个 ReentrantLock 关联。这使得线程可以更灵活地进行等待和唤醒操作，而不仅仅是基于对象监视器的 wait() 和 notify()。多个条件变量的实现依赖于 Condition 接口。</p>
<p>可重入性： ReentrantLock 支持可重入性，即同一个线程可以多次获得同一把锁，而不会造成死锁。这是通过内部的 holdCount 计数来实现的。当一个线程多次获取锁时，holdCount 递增，释放锁时递减，只有当 holdCount 为零时，其他线程才有机会获取锁。</p>
</li>
</ul>
<h4 id="什么是可重入锁"><a href="#什么是可重入锁" class="headerlink" title="什么是可重入锁"></a>什么是可重入锁</h4><p>可重入锁是指同一个线程在获取了锁之后，可以再次重复获取该锁而不会造成死锁或其他问题。当一个线程持有锁的时候，如果再次尝试会成功获取而不会被阻塞</p>
<p>ReentrantLock实现可重入锁的机制是基于线程持有锁的计数器。</p>
<ul>
<li>当一个线程第一次获取锁时，计数器会加一，表示该线程持有锁。之后如果这个线程又获取到了锁，计数器会再次加一。每次线程成功获取到锁，都会将计数器加一。</li>
<li>当线程释放锁的时候，计数器会减一，只有当计数器减少到0时，锁才会完全释放，其他线程才有机会获取锁。</li>
</ul>
<h4 id="synchronized支持重入吗？如何实现？"><a href="#synchronized支持重入吗？如何实现？" class="headerlink" title="synchronized支持重入吗？如何实现？"></a>synchronized支持重入吗？如何实现？</h4><p>synchronized是基于原子性的内部锁机制，是可重入的，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁是被允许的，这就是synchronized可重入性</p>
<p>synchronized底层是利用计算机系统的mutex Lock实现的，每一个可重入锁都会关联一个线程ID和一个锁状态status</p>
<p>当一个线程请求方法时，会检查锁的状态</p>
<ol>
<li>如果锁的状态是0，代表该锁没有被占用，使用CAS操作获取锁，将线程ID换成自己的线程ID</li>
<li>如果锁状态不是0，代表有线程在访问该方法。此时如果线程ID是自己的线程ID且是可重入锁，那么status会自增1，然后获取到该锁 ，进而执行相应的方法；如果是非重入锁，就会进入阻塞队列等待</li>
</ol>
<p>在释放锁的时候</p>
<ul>
<li>如果是可重入锁，每一次退出方法，status就会减一，直至为0，最后释放该锁</li>
<li>如果是非重入锁，线程退出方法就会直接释放锁。</li>
</ul>
<h4 id="synchronized锁升级的过程是怎样的"><a href="#synchronized锁升级的过程是怎样的" class="headerlink" title="synchronized锁升级的过程是怎样的"></a>synchronized锁升级的过程是怎样的</h4><p>具体过程是：无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</p>
<ul>
<li>无锁：这是没有开启偏向锁时候的状态，在jdk1.6之后偏向锁是默认开启的，但有一个偏向延迟，即：在JVM启动后的多少秒之后才能开启，可以通过jvm的参数设置，同时是否开启偏向锁也可以通过jvm参数设置</li>
<li>偏向锁：这个是在偏向锁开启之后锁的状态，如果此时没有一个线程获取到该锁，这个状态叫做匿名偏向，当一个线程拿到偏向锁的时候，下次想要竞争锁只需要拿线程ID和MarkWord当中存储的线程ID进行比较，如果线程ID相同则直接获取锁（相当于锁偏向于这个线程），不需要进行CAS操作和将线程挂起的操作。</li>
<li>轻量级锁：在这个状态下线程主要是通过CAS操作实现的，将对象的MarkWord存储到线程的虚拟机栈上，然后通过CAS将对象的MarkWord的内容设置为指向Displaced Mark Word的指针，如果设置成功则获取锁。在线程出临界区的时候，也需要使用CAS，如果使用CAS替换成功则同步成功，如果失败表示有其他线程在获取锁，那么就需要在释放锁之后将被挂起的线程唤醒。</li>
<li>重量级锁：当有两个以上的线程获取锁的时候轻量级锁就会升级为重量级锁，因为CAS如果没成功的话始终在自旋，进行while循环操作，这是非常消耗cpu资源的，但是在升级为重量级锁之后，线程会被操作系统调度然后挂起，这可以节省cpu资源。</li>
</ul>
<p>那么升级过程就是：线程进入synchronized开始竞争锁，JVM会判断当前是否是偏向锁的状态，如果是就会根据Mark Word中存储的线程ID来判断，当前线程是否为持有偏向锁的状态，如果是，则忽略check，线程直接执行临界区内的代码。</p>
<p>但如果MarkWord里不是该线程，就会通过自旋重新尝试获取锁，如果获取到了，就将MarkWord中的线程ID改为自己的。如果竞争失败，就会立马撤销偏向锁，升级为轻量级锁</p>
<p>后续的竞争线程都会通过自旋锁来尝试获取锁，如果自旋成功那么锁的状态仍为轻量级锁。如果竞争仍然失败，就会膨胀为重量级锁，后续等待的竞争线程都会被阻塞。</p>
<h4 id="JVM对synchronized的优化"><a href="#JVM对synchronized的优化" class="headerlink" title="JVM对synchronized的优化"></a>JVM对synchronized的优化</h4><ul>
<li>锁升级</li>
<li>锁消除：jvm如果检测不到某段代码被共享和竞争的可能，就会将这段代码的同步锁给消除掉，提高程序性能</li>
<li>锁粗化：将多个连续加锁，解锁的操作连接到一起，扩展成一个范围更大的锁。</li>
<li>自适应自旋锁：通过自身循环，尝试获取锁的一种方式，优点在于它避免了一些线程的挂起和恢复操作，因为挂起和恢复线程都需要从用户态转化为内核态，这个过程较慢，所以通过自旋的方式可以在一定程度上避免线程挂起和恢复所造成的性能开销。</li>
</ul>
<h4 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h4><p>AQS全称为AbstractQueuedSynchronizer，是Java中的一个抽象类。 AQS是一个用于构建锁、同步器、协作工具类的工具类（框架）。</p>
<p>AQS的核心思想是，如果被请求的共享资源空闲，那么就将当前请求资源的线程设置为有效的工作线程，将共享资源锁定，如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁的分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中。</p>
<p>CLH：Craig、Landin and Hagersten队列，是单向链表，AQS中的队列是CLH变体的虚拟双向队列（FIFO），AQS是通过将每条请求共享资源的线程封装成一个节点来实现锁的分配。</p>
<p>AQS通过使用一个volatile的int类型成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作，通过CAS完成对state值的修改</p>
<p>AQS主要完成的任务：</p>
<ul>
<li>同步状态（比如说计数器）的原子性管理</li>
<li>线程的阻塞和解除阻塞</li>
<li>队列的管理</li>
</ul>
<blockquote>
<p>AQS的原理</p>
</blockquote>
<p>AQS最核心的就是三大部分</p>
<ul>
<li>状态state<ul>
<li>这里state的具体含义，会根据具体实现类的不同而不同：例如在Semaphore中，它表示剩余许可证的数量；在CountDownLatch中，它表示还需要倒数的数量；在ReentrantLock中，state用来表示锁的占有情况，包括可重入计数，当state为0时，标识该lock不被任何线程所占有。</li>
<li>state是volatile修饰的，并被并发修改，所以修改state的方法都需要保证线程安全，例如getState方法和setState方法以及compareAndSetState操作来读取和更新这个状态，这些方法都依赖于Unsafe类</li>
</ul>
</li>
<li>控制线程竞争锁和配合的FIFO队列<ul>
<li>FIFO队列用来存放等待的线程，AQS就是”排队管理器“，当多个线程竞争同一把锁的时候，必须要有排队机制将那些没能拿到锁的线程串到一起。当锁释放的时候，锁管理器就会挑选一个适合的线程来持有这把锁。</li>
<li>AQS会维护这个等待的线程队列，把线程都放到这个队列里，这个队列的形式是双向链表。</li>
</ul>
</li>
<li>期望协作工具类去实现的获取&#x2F;释放等重要方法（重写）<ul>
<li>获取和释放方法是利用AQS的协作工具类里最重要的方法，是由协作类自己去实现的，并且含义各不相同</li>
<li>获取方法：获取操作会以state为变量，经常会阻塞。在semaphore中，获取就是acquire方法，作用是获取一个许可证。在CountDownLatch中，获取就是await方法，作用是等待直至倒数结束</li>
<li>释放方法：在semaphore中，使用release释放一个许可证，在countdownlatch中，使用countDown方法实现倒数的减一</li>
<li>需要每个实现类重写tryAcquire和tryRelease方法</li>
</ul>
</li>
</ul>
<h4 id="ThreadLocal作用，原理，里面的key，value具体存的什么，会有什么问题，如何解决？"><a href="#ThreadLocal作用，原理，里面的key，value具体存的什么，会有什么问题，如何解决？" class="headerlink" title="ThreadLocal作用，原理，里面的key，value具体存的什么，会有什么问题，如何解决？"></a>ThreadLocal作用，原理，里面的key，value具体存的什么，会有什么问题，如何解决？</h4><p>ThreadLocal是java中解决线程安全问题的一种机制，它允许创建线程局部变量，即每个线程都有自己独立的变量副本，从而避免了线程间的资源共享和同步问题</p>
<ul>
<li>Thread类中，有个ThreadLocal.ThreadLocalMap的成员变量</li>
<li>ThreadLocalMap内部维护了Entry数组，每个Entry代表一个完整的对象，key是ThreadLocal本身，value是ThreadLocal的泛型对象值</li>
</ul>
<blockquote>
<p>ThreadLocal的作用</p>
</blockquote>
<ul>
<li>线程隔离：ThreadLocal为每个线程提供了独立的变量副本，这意味着线程之间不会相互影响，可以安全地在多线程环境中使用这些变量而不必担心数据竞争或同步问题。</li>
<li>降低耦合度：在同一个线程内的多个函数或组件之间，使用ThreadLocal可以减少参数的传递，降低代码之间的耦合度，使代码更加清晰和模块化。</li>
<li>性能优势：由于ThreadLocal避免了线程间的同步开销，所以在大量线程并发执行时，相比传统的锁机制，它可以提供更好的性能。</li>
</ul>
<blockquote>
<p>ThreaLocal的原理</p>
</blockquote>
<p>ThreadLocal的实现依赖于Thread类中的一个ThreadLocalMap字段，这是一个存储ThreadLocal变量本身和对应值的映射。每个线程都有自己的ThreadLocalMap实例，用于存储该线程所持有的所有ThreadLocal变量的值。</p>
<p>当创建一个ThreadLocal变量时，它实际上就是一个ThreadLocal对象的实例。每个ThreadLocal对象都可以存储任意类型的值，这个值对每个线程来说是独立的。</p>
<ul>
<li>当调用ThreadLocal的get()方法时，ThreadLocal会检查当前线程的ThreadLocalMap中是否有与之关联的值。</li>
<li>如果有，返回该值；</li>
<li>如果没有，会调用initialValue()方法（如果重写了的话）来初始化该值，然后将其放入ThreadLocalMap中并返回。</li>
<li>当调用set()方法时，ThreadLocal会将给定的值与当前线程关联起来，即在当前线程的ThreadLocalMap中存储一个键值对，键是ThreadLocal对象自身，值是传入的值。</li>
<li>当调用remove()方法时，会从当前线程的ThreadLocalMap中移除与该ThreadLocal对象关联的条目。</li>
</ul>
<blockquote>
<p>可能存在的问题</p>
</blockquote>
<p>当一个线程结束时，其ThreadLocalMap会随之销毁，但是ThreadLocal对象本身不会被垃圾回收，直到没有其他引用指向它为止。</p>
<p>因此在使用ThreadLocal变量时需要注意，如果不显式地调用remove方法，或者线程结束时为正确清理ThreadLocal变量，可能会导致内存泄漏，因为ThreadLocalMap会持续持有ThreadLocal变量的引用，即使这些变量不再被其他地方引用。</p>
<p>因此在使用完ThreadLocal后需要调用remove方法释放资源</p>
<h4 id="CAS有什么缺点"><a href="#CAS有什么缺点" class="headerlink" title="CAS有什么缺点"></a>CAS有什么缺点</h4><ul>
<li>ABA问题：ABA的问题指的是在CAS更新的过程中，当读取到的值是A，然后准备赋值的时候仍然是A，但是实际上有可能A的值被改成了B，然后又被改回了A，这个CAS更新的漏洞就叫做ABA。只是ABA的问题大部分场景下都不影响并发的最终效果。Java中有AtomicStampedReference来解决这个问题，他加入了预期标志和更新后标志两个字段，更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。</li>
<li>循环时间长开销大：自旋CAS的操作如果长时间不成功，会给CPU带来很大的开销</li>
<li>只能保证一个共享变量的原子性操作：只对一个共享变量操作可以保证原子性，但是多个则不行，多个可以通过AtomicReference来处理或者使用锁synchronized实现。</li>
</ul>
<h4 id="指令重排的原理"><a href="#指令重排的原理" class="headerlink" title="指令重排的原理"></a>指令重排的原理</h4><p>在执行程序时，为了提高性能，处理器和编译器通常会对指令进行重排序，但是重排序必须遵循以下两个条件才能执行</p>
<ul>
<li>在单线程情况下不能改变程序的运行结果</li>
<li>存在数据依赖关系的不允许重排序</li>
</ul>
<p>所以重排不会对单线程造成影响，只会破坏多线程的执行语义</p>
<h4 id="volatile可以保证线程安全吗"><a href="#volatile可以保证线程安全吗" class="headerlink" title="volatile可以保证线程安全吗"></a>volatile可以保证线程安全吗</h4><p>不能完全保证，因为volatile只能保证可见性，不能保证原子性。如果遇到多线程并发下的复合操作问题，比如i++这种操作并不是原子性操作，如果多线程同时进行这个操作，volatile不能保证线程安全，需要使用synchronized或Lock类来保证原子性和线程安全。</p>
<h4 id="非公平锁的吞吐量为什么比公平锁大"><a href="#非公平锁的吞吐量为什么比公平锁大" class="headerlink" title="非公平锁的吞吐量为什么比公平锁大"></a>非公平锁的吞吐量为什么比公平锁大</h4><ul>
<li>公平锁执行流程：获取锁时，先将线程自己添加到队尾并且休眠，当某个线程用完锁后，会去唤醒等待队列队首的线程尝试去获取锁，使用顺序也就是队列顺序，在整个过程中，线程会从运行状态切换到休眠状态，再从休眠状态切换到运行状态，但每次休眠与唤醒都需呀从用户态转换到内核态，而这个过程比较慢。</li>
<li>非公平锁执行流程：当线程获取锁时，会先通过CAS获取锁，如果成功就直接拥有锁，如果失败才会进入等待队列，等待下次尝试获取锁。这样在获取锁时不用遵循先到先得的规则，从而避免了从休眠状态与运行状态的切换，加速了执行效率。</li>
</ul>
<h4 id="ReentrantLock是如何实现公平锁的"><a href="#ReentrantLock是如何实现公平锁的" class="headerlink" title="ReentrantLock是如何实现公平锁的"></a>ReentrantLock是如何实现公平锁的</h4><p>从源码中得出，公平锁与非公平锁最大的区别在于，一个线程尝试去获取锁的时候，会先看一下等待队列是否已经有线程在排队了，如果有，那就不会去尝试获取锁了，而是直接进入队列排队，而非公平锁在获取锁时不会先看是否有线程在排队，而是直接尝试获取锁，如果获取失败了，才会进入队列排队。</p>
<p>而如果有线程执行tryLock方法的时候，一旦有线程释放了锁，那么这个正在trylock的线程就会去尝试获取锁，即使设置的是公平锁的模式，简单来说就是tryLock可以插队。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="线程池的工作原理是怎样的"><a href="#线程池的工作原理是怎样的" class="headerlink" title="线程池的工作原理是怎样的"></a>线程池的工作原理是怎样的</h4><p>线程池是为了减少频繁创建和销毁线程所带来的性能损耗，线程池的工作原理如图：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719389039034-0de42388-4ec6-44a6-9583-5d018e5cb4f3.png" alt="img"></p>
<p>线程池分为核心线程池，线程池的最大容量，还有等待任务的队列，提交一个任务，如果核心线程没有满，就创建一个线程，如果满了，就是会加入等待队列，如果等待队列满了，就会增加线程数，如果增加后的线程数大于最大的线程数，就会按照一些丢弃的策略进行处理。</p>
<h4 id="线程池的七大参数"><a href="#线程池的七大参数" class="headerlink" title="线程池的七大参数"></a>线程池的七大参数</h4><ul>
<li>corePoolSize：核心线程池大小，默认情况下，如果线程池中的线程数量&lt;&#x3D;corePoolSize，那么即使这些线程处于空闲状态也不会被销毁</li>
<li>maximumPoolSize：线程池中可容纳的最大线程数，当一个新任务交给线程池时，如果此时线程池中有空闲的线程，就会直接执行，如果没有空闲的线程且当前线程池的线程数量小于corePoolSize，就会创建新的线程来执行任务，否则就会放入阻塞队列中，如果阻塞队列满了，就会创建一个新的线程，从阻塞队列头部取出一个任务来执行，并将新任务添加到队尾，如果当前线程池中的线程数已经等于maximumPoolSize，就不会执行该任务，而是执行拒绝策略。</li>
<li>keepAliveTime：当线程池中线程的数量大于核心线程池大小，并且某个线程的空闲时间超过了keepAliveTime，就会被销毁</li>
<li>unit：就是keepAliveTime的时间单位</li>
<li>workQueue：工作队列，当没有空闲的线程执行新任务时，该线程就会被放到工作队列中，等待执行</li>
<li>threadFactory：线程工厂，可以用来给线程起名字</li>
<li>handler：拒绝策略</li>
</ul>
<h4 id="线程池的拒绝策略有哪些"><a href="#线程池的拒绝策略有哪些" class="headerlink" title="线程池的拒绝策略有哪些"></a>线程池的拒绝策略有哪些</h4><ul>
<li>AbortPolicy（默认拒绝策略）：直接抛出一个任务被线程池拒绝的异常</li>
<li>CallerRunsPolicy：使用线程池的调用者所在的线程去执行被拒绝的任务，除非线程池被停止或者线程池的任务队列已经有空缺。</li>
<li>DiscardPolicy：不做任何处理，静默拒绝提交的任务</li>
<li>DiscardOldestPolicy：抛弃最老的任务，然后执行该任务</li>
</ul>
<p>此外，也可以通过实现接口自定义拒绝策略</p>
<h4 id="线程池参数如何设置呢"><a href="#线程池参数如何设置呢" class="headerlink" title="线程池参数如何设置呢"></a>线程池参数如何设置呢</h4><ul>
<li>cpu密集型：corePoolSize &#x3D; cpu核数 + 1</li>
<li>IO密集型：corePoolSize &#x3D; cpu核数*2</li>
</ul>
<h4 id="核心线程数可以设置为0吗"><a href="#核心线程数可以设置为0吗" class="headerlink" title="核心线程数可以设置为0吗"></a>核心线程数可以设置为0吗</h4><p>可以，即使核心线程数设置为0，在一个任务提交到线程池中时，先会添加到任务队列，同时判断当前工作的线程数是否为0，如果为0，就会创建线程来执行线程池的任务。</p>
<h4 id="线程池的种类有哪些"><a href="#线程池的种类有哪些" class="headerlink" title="线程池的种类有哪些"></a>线程池的种类有哪些</h4><ul>
<li>ScheduledThreadPool：可以设置定期的执行任务，比如每隔10s执行一次任务，可以通过这个实现类设置定期执行任务的策略。</li>
<li>FixedThreadPool：核心线程数和最大线程数是相等的，因此可以看成是固定大小的线程池，它的特点是线程池中的线程数除了初始阶段需要从0开始增加外，之后的线程数量就是固定的，就算任务数超过线程数，线程池也不会创建更多的线程来执行任务，而是会把超出线程能力的任务放到任务队列中等待，而且就算任务队列满了，到了本该增加线程的时候，但是核心线程数和最大线程数是相同的，也无法增加新的线程</li>
<li>CachedThreadPool：可以称作可缓存线程池，它的特点在于线程数是几乎可以无限增加的（实际最大可以达到 Integer.MAX_VALUE，为 2^31-1，这个数非常大，所以基本不可能达到），而当线程闲置时还可以对线程进行回收。也就是说该线程池的线程数量不是固定不变的，当然它也有一个用于存储提交任务的队列，但这个队列是 SynchronousQueue，队列的容量为0，实际不存储任何任务，它只负责对任务进行中转和传递，所以效率比较高。</li>
<li>SingleThreadExecutor：它会使用唯一的线程去执行任务，原理和 FixedThreadPool 是一样的，只不过这里线程只有一个，如果线程在执行任务的过程中发生异常，线程池也会重新创建一个线程来执行后续的任务。这种线程池由于只有一个线程，所以非常适合用于所有任务都需要按被提交的顺序依次执行的场景，而前几种线程池不一定能够保障任务的执行顺序等于被提交的顺序，因为它们是多线程并行执行的。</li>
<li>SingleThreadScheduledExecutor：它实际和 ScheduledThreadPool 线程池非常相似，它只是 ScheduledThreadPool 的一个特例，内部只有一个线程。</li>
</ul>
<h4 id="线程池一般是怎么用的"><a href="#线程池一般是怎么用的" class="headerlink" title="线程池一般是怎么用的"></a>线程池一般是怎么用的</h4><p>Java中Executor类定义了一些快捷的工具方法，帮助我们快速创建线程池，但在《阿里巴巴Java开发手册中》提到，禁止用这些方法创建线程池，而是应该手动new ThreadPoolExecutor来创建线程池。因为会产生生产事故，最典型的就是newFixedThreadPool和newCacheThreadPool，可能因为资源耗尽导致OOM问题</p>
<p>因此需要手动创建线程池：</p>
<ul>
<li>根据自己的场景，并发情况来评估线程池的核心参数，确保线程池的工作行为符合需求，一般都需要设置有界的工作队列和可控的线程数</li>
<li>任何时候，都应该为自定义线程池指定有意义的名称，以方便排查问题。当线程池出现线程数量暴增，线程死锁，线程占用大量CPU，线程执行出现异常等问题时，往往会抓取线程栈。此时有意义的名称就可以方便我们定位问题。</li>
</ul>
<p>除了建议手动声明线程池以外，我还建议用一些监控手段来观察线程池的状态。线程池这个组件往往会表现得任劳任怨、默默无闻，除非是出现了拒绝策略，否则压力再大都不会抛出一个异常。如果我们能提前观察到线程池队列的积压，或者线程数量的快速膨胀，往往可以提早发现并解决问题。</p>
<h4 id="线程池中shutdown和shutdownNow方法有什么作用"><a href="#线程池中shutdown和shutdownNow方法有什么作用" class="headerlink" title="线程池中shutdown和shutdownNow方法有什么作用"></a>线程池中shutdown和shutdownNow方法有什么作用</h4><ul>
<li>shutdown使用了以后会置状态为SHUTDOWN，正在执行的任务会继续执行下去，没有被执行的则中断。此时，则不能再往线程池中添加任何任务，否则将会抛出 RejectedExecutionException 异常</li>
<li>而 shutdownNow 为STOP，并试图停止所有正在执行的线程，不再处理还在池队列中等待的任务，当然，它会返回那些未执行的任务。 它试图终止线程的方法是通过调用 Thread.interrupt() 方法来实现的，但是这种方法的作用有限，如果线程中没有sleep 、wait、Condition、定时锁等应用, interrupt()方法是无法中断当前的线程的。所以，ShutdownNow()并不代表线程池就一定立即就能退出，它可能必须要等待所有正在执行的任务都执行完成了才能退出。</li>
</ul>
<h4 id="提交给线程池中的任务可以被撤回吗"><a href="#提交给线程池中的任务可以被撤回吗" class="headerlink" title="提交给线程池中的任务可以被撤回吗"></a>提交给线程池中的任务可以被撤回吗</h4><p>可以，当向线程池提交任务时，会得到一个Future对象。这个Future对象提供了几种方法来管理任务的执行，包括取消任务。取消任务的主要方法是Future接口中的cancel(boolean mayInterruptIfRunning)方法。这个方法尝试取消执行的任务。参数mayInterruptIfRunning指示是否允许中断正在执行的任务。如果设置为true，则表示如果任务已经开始执行，那么允许中断任务；如果设置为false，任务已经开始执行则不会被中断。</p>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><h4 id="介绍一下JVM的内存模型"><a href="#介绍一下JVM的内存模型" class="headerlink" title="介绍一下JVM的内存模型"></a>介绍一下JVM的内存模型</h4><p>JVM运行时内存共分为虚拟机、堆、栈、元空间、程序计数器、本地方法栈五个部分。还有一部分内存叫直接内存，属于操作系统的本地内存，也是可以直接操作的</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1713516291293-ce6ee4e7-c5a6-4395-9ee7-4ec1c014b206.webp" alt="img"></p>
<ul>
<li>元空间：元空间的本质和永久代（JDK7之前，方法区被称为永久代，是堆的一部分，用于存储类信息，方法信息，常量池信息等静态信息）类似，但元空间与永久代的最大区别在于：元空间并不在虚拟机中，而是使用本地内存。</li>
<li>Java虚拟机栈：每个线程有一个私有的栈，随着线程的创建而创建。栈里面存着的是一种叫“栈帧”的东西，每个线程会创建一个栈帧，栈帧中存放了局部变量表（基本数据类型和对象引用）、操作数栈、方法出口等信息。栈的大小可以固定也可以动态扩展。</li>
<li>本地方法栈：与虚拟机栈类似，区别是虚拟机栈执行java方法，本地方法执行native方法。在虚拟机规范中对本地方法栈中方法使用的语言、使用方法与数据结构没有强制规定，因此虚拟机可以自由实现它。</li>
<li>程序计数器：程序计数器可以看成是当前线程所执行的字节码的行号指示器。在任一确定的时刻，一个处理器（对于多内核来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，我们称这类内存区域为“线程私有”内存。</li>
<li>堆内存：堆内存是JVM所有线程共享的部分，在虚拟机启动的时候就已经创建。所有的对象和数组都在堆上进行分配。这部分空间可以通过GC进行回收</li>
<li>直接内存：直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。在JDK1.4中新加入了NIO（New Input&#x2F;Output）类，引入了一种基于通道（Channel）与缓冲区(Buffer)的I&#x2F;O方式，它可以使用native函数库直接分配堆外内存，然后通过存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</li>
</ul>
<h4 id="JVM内存模型里的堆和栈的区别？"><a href="#JVM内存模型里的堆和栈的区别？" class="headerlink" title="JVM内存模型里的堆和栈的区别？"></a>JVM内存模型里的堆和栈的区别？</h4><ul>
<li>用途：栈主要用于存储局部变量、方法调用的参数、方法返回地址以及一些临时数据。每当一个方法被调用，一个栈帧就会在栈中创建，用于存储该方法的信息，当方法执行完毕，栈帧也会被移除。堆用于存储对象的实例（包括类的实例和数组）。当使用new关键字创建一个对象时，对象的实例就会在堆上分配空间。</li>
<li>生命周期：栈中的数据具有确定的生命周期，当一个方法调用结束时，其对应的栈帧就会被销毁，栈中存储的局部变量也会随之消失。堆中的对象生命周期不确定，对象会在GC检测对象不再被引用时才被回收。</li>
<li>存取速度：栈的存取速度通常比堆快，因为栈遵循先进后出的原则，操作简单快速。堆的存取速度相对较慢，因为对象在堆上的分配和回收需要更多的时间，而且垃圾回收机制的运行也会影响性能。</li>
<li>存储空间：栈的空间相对较小，且固定，由操作系统管理。当栈溢出时，通常是因为递归过深或局部变量过大。堆的空间较大，动态扩展，由JVM管理。堆溢出通常是由于创建了太多的大对象或未能及时回收不再使用的对象。</li>
<li>可见性：栈中的数据对线程是私有的，每个线程有自己的栈空间。堆中的数据对线程是共享的，所有线程都可以访问堆上的数据。</li>
</ul>
<p>回答：</p>
<ol>
<li>堆的物理地址分配是不连续的，性能较慢；栈的物理地址分配是连续的，性能相对较快</li>
<li>堆存放的对象是实例和数组；栈存放的是局部变量，操作数栈，返回结果等</li>
<li>堆是线程共享的，栈是线程私有的。</li>
</ol>
<h4 id="栈中存的到底是指针还是对象"><a href="#栈中存的到底是指针还是对象" class="headerlink" title="栈中存的到底是指针还是对象"></a>栈中存的到底是指针还是对象</h4><p>在JVM内存模型中，栈主要用于管理线程的局部变量和方法调用的上下文，而堆则是用于存储所有类的实例和数组。</p>
<p>当我们在栈中讨论“存储”时，实际上指的是存储基本类型和对象的引用，而不是对象的本身。</p>
<p>栈中存储的不是对象，而是对象的引用。也就是说，当在方法中声明一个对象，例如：MyObject obj &#x3D; new MyObject();这里的obj实际上是一个存储在栈上的引用，指向堆中实际的对象实例。这个引用是一个固定大小的数据，它指向堆中分配给对象的内存区域。</p>
<h4 id="堆分为哪些部分？"><a href="#堆分为哪些部分？" class="headerlink" title="堆分为哪些部分？"></a>堆分为哪些部分？</h4><p>堆主要用于存放对象实例和数组，随着JVM的发展和不同垃圾收集器的实现，堆的具体划分可能会不同，但通常为以下几部分：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719974471041-14f6ed7f-358b-426a-b614-2501ceae0035.png" alt="img"></p>
<ul>
<li>新生代(young generation)：新生代分为Eden Space和Survivor Space。在Eden Space中，大多数新创建的对象首先存放在这里。Eden区相对较小，当Eden区满时，会触发一次Minor GC（新生代垃圾回收）。在Survivor Space中，通常分为两个大小相等的区域，称为S0（Survivor0）和S1（Survivor1）。在每次新生代垃圾回收之后，存活下来的对象会被移动到其中一个Survivor空间，以继续它们的生命周期。这两个区域轮流充当对象的中转站，帮助区分短暂存活的对象和长期存活的对象。</li>
<li>老年代(old generation &#x2F; Thread generation)：存放过一次或多次Minor GC仍存活的对象会被移动到老年代。老年代中的对象生命周期较长，因此Minor GC（也称为Full GC，涉及老年代的垃圾回收）发生的频率相对较低，但其执行时间通常比Minor GC长。老年代的空间通常比新生代大，以存储更多的长期存活对象。</li>
</ul>
<h4 id="程序计数器的作用，为什么是私有的"><a href="#程序计数器的作用，为什么是私有的" class="headerlink" title="程序计数器的作用，为什么是私有的"></a>程序计数器的作用，为什么是私有的</h4><p>Java程序是支持多线程一起运行的，多个线程一起运行的时候CPU会有一个调动器组件给它们分配时间片，比如说会分给线程1 一个时间片，它在时间片内如果它的代码没有执行完，它就会把线程1的状态执行一个暂存，切换到线程2去，执行线程2的代码，等线程2的代码执行到了一定程度，线程2的时间片用完了，再切换回来，再执行线程1剩余部分的代码。</p>
<p>如果在线程切换的过程中，下一条指令执行到哪里了，还是需要用到程序计数器，因此每个线程都需要有自己的程序计数器，因为它们各自执行代码的指令地址是不一样的。</p>
<h4 id="方法区中方法的执行过程"><a href="#方法区中方法的执行过程" class="headerlink" title="方法区中方法的执行过程"></a>方法区中方法的执行过程</h4><ul>
<li>解析方法调用：JVM会根据方法的符号引用找到实际的方法地址（如果之前没有解析过的话）。</li>
<li>栈帧创建：在调用一个方法前，JVM会在当前线程的Java虚拟机栈中为该方法分配一个新的栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</li>
<li>执行方法：执行方法内的字节码指令，涉及的操作可能包括局部变量的读写、操作数栈的操作、跳转控制、对象创建、方法调用等。</li>
<li>返回处理：方法执行完毕后，可能会返回一个结果给调用者，并清理当前栈帧，恢复调用者的执行环境。</li>
</ul>
<h4 id="方法区中还有哪些东西"><a href="#方法区中还有哪些东西" class="headerlink" title="方法区中还有哪些东西"></a>方法区中还有哪些东西</h4><ul>
<li>类信息：包括类的结构信息，类的访问修饰符，父类与接口等信息</li>
<li>常量池：存储类和接口中的常量，包括字面值常量，符号引用，以及运行时常量池</li>
<li>静态变量：存储类的静态变量，这些变量在类初始化的时候被复制</li>
<li>方法字节码：存储类的方法字节码，即编译后的代码</li>
<li>符号引用：存储类和方法的符号引用，是一种直接引用不同于直接引用的引用类型。</li>
<li>运行时常量池：存储着在类文件中的常量池数据，在类加载后在方法区生成该运行时常量池</li>
<li>常量池缓存：用于提升类加载的效率，将常用的常量缓存起来方便使用</li>
</ul>
<h4 id="引用类型有哪些？有什么区别"><a href="#引用类型有哪些？有什么区别" class="headerlink" title="引用类型有哪些？有什么区别"></a>引用类型有哪些？有什么区别</h4><p>主要分为强软弱虚</p>
<ul>
<li>强引用类型：指的就是代码中普遍存在的赋值方式，例如A a &#x3D; new A();这种，强引用关联的对象，永远不会被gc回收</li>
<li>软引用：可以用softReference来描述，指的是那些有用但是不是必要的对象，会在发生内存溢出前进行回收。</li>
<li>弱引用：WeakReference，强度比软引用更低一点，弱引用的对象在下一次GC中一定会被回收，而不管内存是否足够</li>
<li>虚引用：也称作幻影引用，是最弱的引用关系，即PhantomReference，必须和ReferenceQueue一起使用，同样当GC发生的时候，虚引用也会被回收。可以用虚引用管理堆外内存。</li>
</ul>
<h4 id="弱引用了解吗？举例说明可以用在哪里？"><a href="#弱引用了解吗？举例说明可以用在哪里？" class="headerlink" title="弱引用了解吗？举例说明可以用在哪里？"></a>弱引用了解吗？举例说明可以用在哪里？</h4><p>弱引用是一种引用类型，它不会阻止一个对象被垃圾回收</p>
<p>在Java中，弱引用是通过java.lang.ref.WeakReference类实现的。弱引用的一个主要用途是创建非强制性的对象引用，这些引用可以在内存压力大时被gc清理，从而避免内存泄漏。</p>
<p>弱引用的使用场景：</p>
<ul>
<li>缓存系统：弱引用常用于实现缓存，特别是当希望缓存项能够在内存压力下自动释放时。如果缓存的大小不受控制，可能会导致内存溢出。使用弱引用来维护缓存，可以让JVM在需要更多内存时自动清理这些缓存对象。</li>
<li>对象池：在对象池中，弱引用可以用来管理那些暂时不使用的对象。当对象不再被引用时，它们可以被垃圾回收，释放内存。</li>
<li>避免内存泄漏：当一个对象不应该被长期引用时，使用弱引用可以防止该对象被意外的保留，从而避免潜在的内存泄漏。</li>
</ul>
<p>假设有一个缓存系统，使用弱引用来维护缓存中的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, WeakReference&lt;MyHeavyObject&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyHeavyObject <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        WeakReference&lt;MyHeavyObject&gt; ref = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>) <span class="keyword">return</span> ref.get();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">MyHeavyObject</span> <span class="variable">heavyObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyHeavyObject</span>();</span><br><span class="line">            map.put(key,<span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(heavyObject));</span><br><span class="line">            <span class="keyword">return</span> heavyObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyHeavyObject</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">byte</span>[] largeData = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，使用WeakReference来存储MyHeavyObject实例，当内存压力增大时，垃圾回收器可以自由地回收这些对象，而不会影响缓存的正常运行。</p>
<p>如果一个对象被垃圾回收，下次尝试从缓存中获取时，get()方法会返回null，这时我们可以重新创建对象并将其放入缓存中。因此，使用弱引用时要注意，一旦对象被垃圾回收，通过弱引用获取的对象可能会变为null，因此在使用前通常需要检查这一点。</p>
<h4 id="内存泄漏和内存溢出的理解？"><a href="#内存泄漏和内存溢出的理解？" class="headerlink" title="内存泄漏和内存溢出的理解？"></a>内存泄漏和内存溢出的理解？</h4><p>内存泄漏：指的是在程序运行过程中不再使用的对象仍然被引用，而无法被垃圾收集器回收，从而导致可用内存逐渐减少。虽然在Java中，gc会自动回收不再使用的对象，但如果有对象仍被不再使用的引用持有，gc无法回收这些内存，最终导致程序的内存使用不断增加</p>
<p>内存泄漏的常见原因：</p>
<ul>
<li>静态集合：使用静态数据结构（如HashMap或ArrayList）存储对象，且未清理</li>
<li>事件监听：未取消对事件源的监听，导致对象持续被引用</li>
<li>线程：未停止的线程可能持有对象引用，无法被回收</li>
</ul>
<p>内存溢出：指的是JVM在申请内存时，无法找到足够的内存，最终引发OutOfMemoryError。这通常发生在堆内存不足以存放新创建的对象时。</p>
<p>内存溢出常见原因：</p>
<ul>
<li>大量对象创建：程序中不断创建大量对象，超出JVM堆的限制</li>
<li>持久引用：大型数据结构（如缓存，集合等）长时间持有对象引用，导致内存累积</li>
<li>递归调用：深度递归导致栈溢出</li>
</ul>
<h4 id="JVM内存结构有哪几种内存溢出的情况"><a href="#JVM内存结构有哪几种内存溢出的情况" class="headerlink" title="JVM内存结构有哪几种内存溢出的情况"></a>JVM内存结构有哪几种内存溢出的情况</h4><ul>
<li>堆内存溢出：当出现java.lang.OutOfMemoryError:Java heap space异常时，就是堆内存溢出了。原因是代码中可能存在大对象分配，或者发生了内存泄露，导致在多次GC之后，还是无法找到一块足够大的内存容纳当前对象。</li>
<li>栈溢出：如果我们写一段程序不断的进行递归调用，而且没有退出条件，就会导致不断地进行压栈。类似这种情况，JVM 实际会抛出 StackOverFlowError；当然，如果 JVM 试图去扩展栈空间的时候失败，则会抛出 OutOfMemoryError。</li>
<li>元空间溢出：元空间的溢出，系统会抛出java.lang.OutOfMemoryError: Metaspace。出现这个异常的问题的原因是系统的代码非常多或引用的第三方包非常多或者通过动态代码生成类加载等方法，导致元空间的内存占用很大。</li>
<li>直接内存溢出：在使用ByteBuffer中的allocateDirect()的时候会用到，很多javaNIO(像netty)的框架中被封装为其他的方法，出现该问题时会抛出java.lang.OutOfMemoryError: Direct buffer memory异常。</li>
</ul>
<h4 id="有具体的内存泄漏和内存溢出的例子么请举例以及解决方案"><a href="#有具体的内存泄漏和内存溢出的例子么请举例以及解决方案" class="headerlink" title="有具体的内存泄漏和内存溢出的例子么请举例以及解决方案"></a>有具体的内存泄漏和内存溢出的例子么请举例以及解决方案</h4><ol>
<li><p>静态属性导致内存泄漏</p>
<p>会导致内存泄露的一种情况就是大量使用static静态变量。在Java中，静态属性的生命周期通常伴随着应用整个生命周期（除非ClassLoader符合垃圾回收的条件）。下面来看一个具体的会导致内存泄露的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Double&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">populateList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            list.add(Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Debug point2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Debug point1&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">StaticTest</span>().populateList();</span><br><span class="line">        System.out.println(<span class="string">&quot;Debug point3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果监控内存堆内存的变化，会发现在打印Point1和Point2之间，堆内存会有一个明显的增长趋势图。但当执行完populateList方法之后，对堆内存并没有被垃圾回收器进行回收。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/image-20240820112907539.png" alt="img"></p>
<p>但针对上述程序，如果将定义list的变量前的static关键字去掉，再次执行程序，会发现内存发生了具体的变化。VisualVM监控信息如下图：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/image-20240820112851893.png" alt="img"></p>
<p>对比两个图可以看出，程序执行的前半部分内存使用情况都一样，但当执行完populateList方法之后，后者不再有引用指向对应的数据，垃圾回收器便进行了回收操作。因此，我们要十分留意static的变量，如果集合或大量的对象定义为static的，它们会停留在整个应用程序的生命周期当中。而它们所占用的内存空间，本可以用于其他地方。</p>
<p>那么如何优化？第一，减少静态变量，第二，如果使用单例，尽量采用懒加载。</p>
</li>
<li><p>未关闭的资源</p>
<p>无论什么时候当我们创建一个连接或打开一个流，JVM都会分配给内存这些资源。比如，数据库链接、输入流和session对象。</p>
<p>忘记关闭这些资源，会阻塞内存，从而导致GC无法进行清理。特别是当程序发生异常时，没有在finally中进行资源关闭的情况。这些未正常关闭的连接，如果不进行处理，轻则影响程序性能，重则导致OutOfMemoryError异常发生。</p>
<p>如果进行处理呢？第一，始终记得在finally中进行资源的关闭；第二，关闭连接的自身代码不能发生异常；第三，Java7以上版本可使用try-with-resources代码方式进行资源关闭。</p>
</li>
<li><p>使用ThreadLocal</p>
<p>ThreadLocal提供了线程本地变量，它可以保证访问到的变量属于当前线程，每个线程都保存有一个变量副本，每个线程的变量都不同。ThreadLocal相当于提供了一种线程隔离，将变量与线程相绑定，从而实现线程安全的特性。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/image-20240820112835783.png" alt="img"></p>
<p>ThreadLocal的实现中，每个Thread维护一个ThreadLocalMap映射表，key是ThreadLocal实例本身，value是真正需要存储的Object。</p>
<p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用来引用它，那么系统GC时，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value。</p>
<p>如果当前线程迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value永远无法回收，造成内存泄漏。</p>
<p>如何解决此问题？</p>
<ul>
<li><p>使用ThreadLocal提供的remove()方法，可对当前线程中的value值进行移除；</p>
</li>
<li><p>不要使用ThreadLocal.set(null)的方式清除value，它实际上并没有清除值，而是查找与当前线程关联的Map并将键值对分别设置为当前线程和null</p>
</li>
<li><p>最好将ThreadLocal视为finally块中关闭的资源，以确保即使在发生异常的情况下也是种关闭该资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	threadLocal.set(System.nanoTime());</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	threadLocal.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="类初始化和类加载"><a href="#类初始化和类加载" class="headerlink" title="类初始化和类加载"></a>类初始化和类加载</h3><h4 id="创建对象的过程"><a href="#创建对象的过程" class="headerlink" title="创建对象的过程"></a>创建对象的过程</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1713516384566-e820b967-73ce-49a4-a6e6-36af9a38ebc4.webp" alt="img"></p>
<p>在Java中创建对象的过程包括以下几个步骤：</p>
<ol>
<li>类加载检查：虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程</li>
<li>分配内存：在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从java堆中划分出来。</li>
<li>初始化零值：内存分配完成后，虚拟机需要将分配的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在java代码中可以不赋初始就直接使用，程序能访问到这些字段的数据类型所对应的零值。</li>
<li>进行必要设置，比如对象头：初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的gc分代年龄等信息。这些信息存放在对象头中。另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</li>
<li>执行init方法：在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从Java程序的视角看，对象创建才刚开始——构造函数，即class文件中的方法还没有执行，所有的字段都还为零，对象需要的其他资源和状态信息还没有按照预定的意图构造好。所以一般来说，执行new指令之后会接着执行方法，把对象按照程序员的意愿进行初始化，这样一个可用的对象才算完全被构建出来。</li>
</ol>
<h4 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h4><ul>
<li>创建：通过new关键字在堆内存中被实例化，构造函数被调用，对象的内存空间被分配</li>
<li>使用：对象被引用并执行相应的操作，可以通过引用访问对象的属性和方法，在程序运行过程中不断被使用。</li>
<li>销毁：当对象不再被使用时，通过gc自动回收对象所占用的内存空间。垃圾回收器会在适当的时候检测并回收不再被引用的对象，释放对象占用的内存空间，完成对象的销毁过程。</li>
</ul>
<h4 id="类加载器有哪些"><a href="#类加载器有哪些" class="headerlink" title="类加载器有哪些"></a>类加载器有哪些</h4><ul>
<li>启动类加载器：最顶层的类加载器，负责加载Java的核心库（如位于jre&#x2F;lib&#x2F;rt.jar中的类），是jvm的一部分，无法被Java程序直接调用</li>
<li>扩展类加载器：是Java语言实现的，继承自ClassLoader类，负责加载Java扩展目录(jre&#x2F;lib&#x2F;ext或由系统变量java.ext.dirs指定的目录)下的jar包和类库。扩展类加载器由启动类加载器加载，并且父加载器就是启动类加载器。</li>
<li>系统类加载器&#x2F;应用程序类加载器：也是java实现的，负责加载用户类路径(ClassPath)上的指定类库，是平时编写java程序时默认使用的类加载器。系统类加载器的父加载器是扩展类加载器。它可以通过ClassLoader.getSystemClassLoader()方法获取到。</li>
<li>自定义类加载器：开发者可以根据需求定制类的加载方式，比如从网络加载class文件、数据库、甚至是加密的文件中加载类等。自定义类加载器可以用来扩展Java应用程序的灵活性和安全性，是Java动态性的一个重要体现。</li>
</ul>
<p>这些类加载器之间的关系形成了双亲委派模型，其核心思想是当一个类加载器收到类加载的请求时，首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中。</p>
<p>只有父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>
<h4 id="双亲委派模型的作用"><a href="#双亲委派模型的作用" class="headerlink" title="双亲委派模型的作用"></a>双亲委派模型的作用</h4><ul>
<li>保证类的唯一性：通过委托机制，确保了所有加载请求都会传递到启动类加载器，避免了不同类加载器重复加载相同类的情况，保证了Java核心类库的统一性，也防止了用户自定义类覆盖核心类库的可能。</li>
<li>保证安全性：由于Java核心库被启动类加载器加载，而启动类加载器只加载信任的类路径中的类，这样可以防止不可信的类假冒核心类，增强了系统的安全性。例如，恶意代码无法自定义一个java.lang.System类并加载到JVM中，因为这个请求会被委托给启动类加载器，而启动类加载器只会加载标准的Java库中的类。</li>
<li>支持隔离和层次划分：双亲委派模型支持不同层次的类加载器服务于不同的类加载需求，如应用程序类加载器加载用户代码，扩展类加载器加载扩展框架，启动类加载器加载核心库。这种层次化的划分有助于实现沙箱安全机制，保证了各个层级类加载器的职责清晰，也便于维护和扩展。</li>
<li>简化了加载流程：通过委派，大部分类能够被正确的类加载器加载，减少了每个加载器需要处理的类的数量，简化了类的加载过程，提高了加载效率。</li>
</ul>
<h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1719491354969-a7c861d7-531e-45d3-a4aa-4696710ec297.webp" alt="img"></p>
<ul>
<li>加载：通过类的包名+类名获取到该类的.class文件的二进制字节流，将二进制字节流所代表的静态存储结构，转化为方法区运行时的数据结构，在内存中生成一个代表该类的java.lang.Class对象作为访问这个类的各种数据的入口。</li>
<li>连接：包括验证，准备，解析<ul>
<li>验证：确保class文件中的字节流包含的信息，符合当前虚拟机的要求，保证这个被加载的class类的正确性不会危害到虚拟机安全。验证阶段大致会完成四个阶段的校验动作：文件格式校验、元数据校验、字节码验证、符号引用验证。</li>
<li>准备：为类中的静态字段分配内存，并设置默认的初始值，比如int类型初始值为0。被final修饰的static字段不会设置，因为final在编译时就被分配了</li>
<li>解析：虚拟机将常量池的「符号引用」替换为「直接引用」的过程。符号引用是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用的时候可以无歧义地定位到目标即可。直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄，直接引用是和虚拟机实现的内存布局相关的。如果有了直接引用， 那引用的目标必定已经存在在内存中了。</li>
</ul>
</li>
<li>初始化：整个类加载过程的最后阶段，简单来说就是执行类的构造器方法。</li>
<li>使用：使用类或者创建对象</li>
<li>卸载：以下情况类会被卸载：<ol>
<li>该类所有实例都已被回收，堆中不存在任何该类的实例</li>
<li>加载该类的ClassLoader已被回收</li>
<li>类对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类方法</li>
</ol>
</li>
</ul>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><h4 id="什么是垃圾回收，如何触发？"><a href="#什么是垃圾回收，如何触发？" class="headerlink" title="什么是垃圾回收，如何触发？"></a>什么是垃圾回收，如何触发？</h4><p>GC是自动管理内存的一种机制，它负责自动释放不再被程序引用的对象所占用的内存，这种机制减少了内存泄漏和内存管理错误的可能性。垃圾回收可以通过多种方式触发，具体如下：</p>
<ul>
<li>内存不足：当检测到堆内存不足，无法为新的对象分配内存时，会自动触发垃圾回收。</li>
<li>手动请求：虽然gc是自动的，可以通过调用System.gc()或Runtime.getRuntime.gc()建议JVM进行垃圾回收</li>
<li>JVM参数：启动java应用时可以通过JVM参数来调整垃圾回收的行为，比如：-Xmx(最大堆大小)，-Xms(初始堆大小)等。</li>
<li>对象数量或内存使用达到阈值：垃圾收集器内部实现了一些策略，以监控对象的创建和内存使用，达到某个阈值时触发垃圾回收。</li>
</ul>
<h4 id="判断为垃圾的方法有哪些？"><a href="#判断为垃圾的方法有哪些？" class="headerlink" title="判断为垃圾的方法有哪些？"></a>判断为垃圾的方法有哪些？</h4><ul>
<li><p>引用计数法：</p>
<p>原理：为每个对象分配一个引用计数器，每当有一个地方引用它时，计数器加一；引用失效时，计数器减一。当计数器为0时，表示对象不再被任何变量引用，可以被回收。</p>
<p>缺点：不能解决循环引用的问题，如果两个对象相互引用，但不被其他对象引用，计数器始终不能为0，导致无法被回收。</p>
</li>
<li><p>可达性分析算法：</p>
<p>原理：从一组GC Roots，即垃圾收集根（虚拟机、本地方法栈、静态属性、方法区常量引用的对象）出发，向下追溯它们引用的对象，以及这些对象引用的其他对象，以此类推。如果一个对象到GC Roots没有任何引用链相连（即从GC Roots到这个对象不可达），那么这个对象就被认为是不可达的，可以被回收。GC Roots对象包括：虚拟机栈中引用的对象、方法区中类静态属性引用的对象、本地方法栈中JNI引用的对象、活跃的线程引用等。</p>
</li>
</ul>
<h4 id="垃圾回收算法是什么，是为了解决什么问题"><a href="#垃圾回收算法是什么，是为了解决什么问题" class="headerlink" title="垃圾回收算法是什么，是为了解决什么问题"></a>垃圾回收算法是什么，是为了解决什么问题</h4><p>JVM有gc的原因是为了解决内存管理的问题。例如c++，需要自己手动分配和释放内存，这可能导致内存泄漏、内存溢出等问题。而Java提供的gc可以自动管理内存，使开发过程更简单，更安全</p>
<p>gc的主要目标是自动检测和回收不再被使用的对象，从而释放它们所占用的内存空间。这样可以避免内存泄漏，同时，垃圾回收机制还可以防止内存溢出。</p>
<p>通过gc，jvm可以在程序运行时自动识别和清理不再使用的对象，使得开发人员无需手动管理内存。这样可以提高开发效率、减少错误，并且使程序更加可靠和稳定。</p>
<h4 id="垃圾回收算法有哪些"><a href="#垃圾回收算法有哪些" class="headerlink" title="垃圾回收算法有哪些"></a>垃圾回收算法有哪些</h4><ul>
<li>标记-清除算法：算法分为“标记”和“清除”两个阶段，首先通过可达性分析，标记出所有需要回收的对象，然后统一回收所有被标记的对象，但是这种算法有两个缺陷：一个是效率问题，标记和清除的过程效率都不高，另一个就是会造成大量的碎片空间，有可能会导致在申请大块内存的时候没有足够的连续内存空间而再次GC。</li>
<li>复制算法：为了解决碎片空间的问题，复制算法会将内存空间分为两块，每次申请内存都使用其中一块，当内存不够时，将这一块内存中所有存活的复制到另一块上。然后再把已使用的内存整个都清理掉。这种策略又有新的问题：每次申请内存时，都只能使用一般的空间，内存利用率严重不足</li>
<li>标记-整理算法：复制算法在gc之后存活对象较少的情况下效率较高，但如果存活对象比较多，会执行比较多的复制操作，效率就会下降。而老年代的对象在GC之后的存活率就比较高，所以就有了标记-整理算法，标记-整理算法的“标记”过程与“标记-清除算法”的标记过程一致，但标记之后不会直接清理。而是将所有存活对象都移动到内存的一端。移动结束后直接清理掉剩余部分。</li>
<li>分代回收算法：分代收集是将内存划分成了新生代和老年代。分配的依据是对象的生存周期，或者说经历过的 GC 次数。对象创建时，一般在新生代申请内存，当经历一次 GC 之后如果对象还存活，那么对象的年龄 +1。当年龄超过一定值(默认是 15，可以通过参数 -XX:MaxTenuringThreshold 来设定)后，如果对象还存活，那么该对象会进入老年代。</li>
</ul>
<h4 id="垃圾回收器有哪些？"><a href="#垃圾回收器有哪些？" class="headerlink" title="垃圾回收器有哪些？"></a>垃圾回收器有哪些？</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1712649527581-d6aee0bf-35ab-4406-8a26-270b35ae8771.png" alt="img"></p>
<h4 id="垃圾回收算法那些阶段会stop-the-world"><a href="#垃圾回收算法那些阶段会stop-the-world" class="headerlink" title="垃圾回收算法那些阶段会stop the world"></a>垃圾回收算法那些阶段会stop the world</h4><p>标记-复制算法应用在CMS新生代（ParNew是CMS默认的新生代垃圾回收器）和G1垃圾回收器中。标记-复制算法可以分为三个阶段：</p>
<ul>
<li>标记阶段，即从GC Roots集合开始，标记活跃对象；</li>
<li>转移阶段，即把活跃对象复制到新的内存地址上；</li>
<li>重定位阶段，因为转移导致对象的地址发生了变化，在重定位阶段，所有指向对象旧地址的指针都要调整到对象新的地址上。</li>
</ul>
<p><strong>标记阶段停顿分析：</strong></p>
<ul>
<li>初始标记阶段：是指从GC Roots出发标记全部直接子节点的过程，该阶段是STW的。由于GC Roots数量不多，通常该阶段耗时非常短。</li>
<li>并发标记阶段：从GC Roots开始对堆中对象进行可达性分析，找出存活对象。该阶段是并发的，即应用线程和GC线程可以同时活动。并发标记耗时相对长很多，但因为不是STW，所以我们不太关心该阶段耗时的长短。</li>
<li>再标记阶段：重新标记那些在并发标记阶段发生变化的对象。该阶段是STW的。</li>
</ul>
<p><strong>清理阶段停顿分析：</strong></p>
<ul>
<li>清理阶段清点出有存活对象的分区和没有存活对象的分区，该阶段不会清理垃圾对象，也不会执行存活对象的复制。该阶段是STW的。</li>
</ul>
<p><strong>复制阶段停顿分析：</strong></p>
<p>复制算法中的转移阶段需要分配新内存和复制对象的成员变量。转移阶段是STW的，其中内存分配通常耗时非常短，但对象成员变量的复制耗时有可能较长，这是因为复制耗时与存活对象数量与对象复杂度成正比。对象越复杂，复制耗时越长。</p>
<p>四个STW过程中，初始标记因为只标记GC Roots，耗时较短。再标记因为对象数少，耗时也较短。清理阶段因为内存分区数量少，耗时也较短。转移阶段要处理所有存活的对象，耗时会较长。</p>
<h4 id="MinorGC，majorGC，fullGC的区别，什么场景触发fullGc"><a href="#MinorGC，majorGC，fullGC的区别，什么场景触发fullGc" class="headerlink" title="MinorGC，majorGC，fullGC的区别，什么场景触发fullGc"></a>MinorGC，majorGC，fullGC的区别，什么场景触发fullGc</h4><ul>
<li><p>MinorGC(Young GC)</p>
<p>作用范围：只针对年轻代进行回收，包括Eden区和两个Survivor区（S0和S1）</p>
<p>触发条件：当Eden区不足时，JVM会触发一次MinorGC，将Eden区和一个Survivor区中的存活对象移动到另一个Survivor区或老年代</p>
<p>特点：通常发生的非常频繁，因为年轻代中对象的生命周期较短，回收效率高，暂停时间相对较短。</p>
</li>
<li><p>MajorGC</p>
<p>作用范围：主要针对老年代进行回收，但不一定只回收老年代</p>
<p>触发条件：当老年代空间不足时，或者系统检测到年轻代晋升到老年代的速度过快，可能会触发MajorGC</p>
<p>特点：相比MinorGC，MajorGC发生的频率相对较低，但每次回收可能需要更长的时间，因为老年代中的对象存活率较高。</p>
</li>
<li><p>FullGC</p>
<p>作用范围：对整个堆内存（包括新生代，老年代以及永久代&#x2F;元空间）进行回收</p>
<p>触发条件：</p>
<ol>
<li>直接调用System.gc()或Runtime.getRuntime().gc()方法时，虽然不能马上执行，但是JVM会尝试进行FullGC</li>
<li>MinorGC时，如果存活的对象无法全部放入老年代，或者老年代空间不足以容纳存活的对象，则会触发FullGC，对整个堆内存进行回收。</li>
<li>当永久代或元空间空间不足时</li>
</ol>
<p>特点：FullGC是最昂贵的操作，因为它需要停止所有的工作线程（stop the world），遍历整个堆内存来查找和回收不再使用的对象，因此尽量减少FullGC操作。</p>
</li>
</ul>
<h4 id="垃圾回收器CMS和G1的区别？"><a href="#垃圾回收器CMS和G1的区别？" class="headerlink" title="垃圾回收器CMS和G1的区别？"></a>垃圾回收器CMS和G1的区别？</h4><p>区别一：使用的范围不一样</p>
<ul>
<li>CMS收集器是老年代的收集器，可以配合新生代的Serial和ParNew收集器一起使用</li>
<li>G1收集器收集范围是老年代和新生代。不需要结合其他收集器使用</li>
</ul>
<p>区别二：STW的时间</p>
<ul>
<li>CMS收集器以最小的停顿时间为目标的收集器。</li>
<li>G1收集器可预测垃圾回收的停顿时间（建立可预测的停顿时间模型）</li>
</ul>
<p>区别三：垃圾碎片</p>
<ul>
<li>CMS收集器是使用“标记-清除”算法进行的垃圾回收，容易产生内存碎片</li>
<li>G1收集器使用的是“标记-整理”算法，进行了空间整合，没有内存空间碎片。</li>
</ul>
<p>区别四：垃圾回收的过程不一样</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1716015294690-efd71a12-f4b1-4356-9de2-5164393482a5.png" alt="img"></p>
<p>区别五：CMS会产生浮动垃圾</p>
<ul>
<li>CMS产生浮动垃圾过多时会退化为serial old，效率低，因为在上图的第四阶段，CMS清除垃圾时是并发清除的，这个时候，垃圾回收线程和用户线程同时工作会产生浮动垃圾，也就意味着CMS垃圾回收器必须预留一部分内存空间用于存放浮动垃圾</li>
<li>而G1没有浮动垃圾，G1的筛选回收是多个垃圾回收线程并行gc的，没有浮动垃圾的回收，在执行‘并发清理’步骤时，用户线程也会同时产生一部分可回收对象，但是这部分可回收对象只能在下次执行清理是才会被回收。如果在清理过程中预留给用户线程的内存不足就会出现‘Concurrent Mode Failure’,一旦出现此错误时便会切换到SerialOld收集方式。</li>
</ul>
<h4 id="什么情况下使用CMS，什么情况使用G1"><a href="#什么情况下使用CMS，什么情况使用G1" class="headerlink" title="什么情况下使用CMS，什么情况使用G1"></a>什么情况下使用CMS，什么情况使用G1</h4><p>CMS适用场景：</p>
<ul>
<li>低延迟需求：适用于对停顿时间要求敏感的应用程序</li>
<li>老生代收集：主要针对老年代的垃圾回收</li>
<li>碎片化管理：容易出现内存碎片，可能需要定期进行FullGC来压缩内存空间</li>
</ul>
<p>G1适用场景：</p>
<ul>
<li>大堆内存：适用于需要管理大内存堆的场景，能够有效处理数GB以上的堆内存。</li>
<li>对内存碎片敏感：G1通过紧凑整理来减少内存碎片，降低了碎片化对性能的影响。</li>
<li>比较平衡的性能：G1在提供较低停顿时间的同时，也保持了相对较高的吞吐量</li>
</ul>
<h4 id="G1回收器的特色是什么？"><a href="#G1回收器的特色是什么？" class="headerlink" title="G1回收器的特色是什么？"></a>G1回收器的特色是什么？</h4><p><strong>G1的特点：</strong></p>
<ul>
<li>G1最大的特点是引入分区的思路，弱化了分代的概念</li>
<li>合理利用垃圾收集各个周期的资源，解决了其他收集器、甚至CMS的众多缺陷</li>
</ul>
<p><strong>G1相比较CMS的改进：</strong></p>
<ul>
<li>算法：G1基于标记–整理算法，不会产生空间碎片，在分配大对象时，不会因无法得到连续的空间，而提前触发一次FullGC。</li>
<li>停顿时间可控：G1可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象。</li>
<li>并行与并发：G1更能充分的利用CPU多核环境下的硬件优势，来缩短STW的停顿时间。</li>
</ul>
<h4 id="GC只会对堆进行GC吗？"><a href="#GC只会对堆进行GC吗？" class="headerlink" title="GC只会对堆进行GC吗？"></a>GC只会对堆进行GC吗？</h4><p>JVM的垃圾回收器不仅仅会对堆进行垃圾回收，它还会对方法区进行垃圾回收</p>
<ol>
<li>堆：堆是用于存储对象实例的内存区域。大部分的垃圾回收工作都发生在堆上，因为大多数对象都会被分配在堆上，而GC的重点通常也是回收堆中不再被引用的对象，以释放内存空间。</li>
<li>方法区：方法区是用于存储类信息，常量，静态变量等数据的区域。虽然方法区中的垃圾回收与堆有所不同，但是同样存在对不再需要的常量、无用的类信息等进行清理的过程。</li>
</ol>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring与SpringMVC"><a href="#Spring与SpringMVC" class="headerlink" title="Spring与SpringMVC"></a>Spring与SpringMVC</h3><h4 id="介绍一下Spring"><a href="#介绍一下Spring" class="headerlink" title="介绍一下Spring"></a>介绍一下Spring</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1712650311366-b499469c-5afd-4be9-bad3-d787de86bf98.png" alt="img"></p>
<p>Spring框架核心特性包括：</p>
<ul>
<li>IoC容器：Spring通过控制反转实现了对象的创建和对象间的依赖关系管理。开发者只需要定义好Bean及其依赖关系，Spring容器负责创建和组装这些对象。</li>
<li>AOP：面向切面编程，允许开发者定义横切关注点，例如事务管理、安全控制等，独立于业务逻辑的代码。通过AOP，可以将这些关注点模块化，提高代码的可维护性和可重用性。</li>
<li>事务管理：Spring提供了一致性的事务管理接口，支持声明式和编程式事务。开发者可以轻松地进行事务管理，而无需关心具体的事务API。</li>
<li>MVC框架：SpringMVC是一个基于Servelet API构建的Web框架，采用了MVC架构。支持灵活的url到页面控制器的映射，以及多种试图技术。</li>
</ul>
<h4 id="介绍一下AOP"><a href="#介绍一下AOP" class="headerlink" title="介绍一下AOP"></a>介绍一下AOP</h4><p>AOP是一种编程范式，即面向切面编程，在AOP中最小的单位是“切面”，一个切面可以包含很多种类型和对象，对他们进行模块化管理，AOP能够将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，降低耦合度，例如：异常处理，记录日志，事务管理。AOP是基于动态代理实现的，如果被代理的对象实现了某个接口，那么就会使用JDK动态代理去创建代理对象，如果没有实现接口，会使用CGLIB生成一个被代理对象的子类来作为代理。</p>
<p>简单来说AOP就是将核心业务功能与周边功能进行分别独立开发，两者不是耦合的，然后将核心业务功能与周边功能编织在一起。</p>
<p>AOP中主要由以下几个概念组成：</p>
<ul>
<li>AspectJ：切面，是Join point，Advice，Pointcut的一个统称</li>
<li>Join point：连接点，指程序执行过程中的一个点，例如方法调用，异常处理等。</li>
<li>Advice：通知，由“Around，Before，After”三种。在很多AOP实现的框架中，Advice通常作为一个拦截器，也可以包含许多个拦截器作为一条链路围绕着join point进行处理</li>
<li>Pointcut：切点，用于匹配连接点，一个AspectJ中包含哪些Join point需要由Pointcut进行筛选。</li>
<li>Introduction：引介，让一个切面可以声明被通知的对象实现任何他们没有真正实现的额外的接口。例如可以让一个代理对象代理两个目标类。</li>
<li>Weaving：织入，在有了连接点、切点、通知以及切面，如何将它们应用到程序中呢？没错，就是织入，在切点的引导下，将通知逻辑插入到目标方法上，使得我们的通知逻辑在方法调用时得以执行。</li>
<li>AOP proxy：AOP 代理，指在 AOP 实现框架中实现切面协议的对象。在 Spring AOP 中有两种代理，分别是 JDK 动态代理和 CGLIB 动态代理。</li>
<li>Target object：目标对象，就是被代理的对象。</li>
</ul>
<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>静态代理模式：普通的代理模式需要一个接口，实体类与代理类都需要实现这个接口，代理模式的思想就是引入一个代理对象来控制对原对象的访问，在客户端和目标对象之间充当中介，将客户端的请求转发给原对象进行处理，同时在转发请求的前后可以进行额外的处理</p>
<ul>
<li><p>主要解决的问题：代理模式解决的是在直接访问某些对象时可能遇到的问题，例如对象创建成本高、需要安全控制或远程访问等。</p>
</li>
<li><p>优点：职责分离，将访问控制与业务逻辑清晰分离开。且可以灵活的添加额外的功能或控制以及可以智能地处理访问请求，如延迟加载，缓存等。</p>
</li>
<li><p>缺点：增加了代理层会造成额外的性能开销，可能会影响请求的处理响应速度，并且某些类型的代理模式实现起来较为复杂</p>
</li>
<li><p>实现：</p>
<p>创建接口，定义抽象主题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RealImage</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">        loadFromDisk(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFromDisk</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyImage</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage == <span class="literal">null</span>) realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line"></span><br><span class="line">        realImage.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyImage</span>(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line">        image.display();</span><br><span class="line">        System.out.println();</span><br><span class="line">        image.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代理实现模拟了一个简单的缓存机制，在实体类中间增加了一层缓存处理，在display()的请求发送给代理类时，代理类会先查看缓存中是否存在实体对象，不存在才会创建对象，从磁盘中读取。</p>
</li>
</ul>
<p>基于JDK的动态代理：</p>
<ul>
<li><p>动态代理与静态代理的主要区别在于，静态代理在进行代理时，每次都需要手动的创建代理类，且可能会存在多个代理引起“类爆炸”（指在实现一个功能时，类本来可以不用这么多，但是却设计成这么多，使得维护成本过高，明显高于设计的效用。），并且静态代理是在编译时就确定了代理的对象，而动态代理在创建代理对象上更加灵活，基于java的反射机制，在运行时期，动态地为目标对象创建代理对象，无需手动地创建代理类。</p>
</li>
<li><p>jdk动态代理的实现：</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">perform</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">perform</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;jdk代理实现类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jdk动态处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceInvocationHandler</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method invoke&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method invoke&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Service</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceImpl</span>();</span><br><span class="line">        <span class="type">Service</span> <span class="variable">proxy</span> <span class="operator">=</span> (Service) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServiceInvocationHandler</span>(target));</span><br><span class="line">        proxy.perform();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的动态代理实现在执行方法的前后都进行了输出，动态代理的灵活性就在于，不需要知道为哪些方法进行功能增强，只需要关注增强功能的实现以及增强位置。实现InvocationHandler接口得到一个切面类，利用proxy根据目标类的类加载器，接口和切面类获得一个代理类，代理类的逻辑就是把所有接口方法的调用转发到切面类的invoke()方法上，然后根据反射调用目标类的方法</p>
</li>
</ul>
<p>基于CGLIB的动态代理：</p>
<p>jdk动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能使用jdk的动态代理，而cglib基于ASM字节码生成工具，通过继承的方式来实现代理类，所以不需要接口，可以代理普通类，不能代理final类。</p>
<p>实现：</p>
<p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CgService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">perform</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;基于cglib的动态代理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建cglib动态代理处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method invoke&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method invoke&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CgProxyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(CgService.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">ServiceMethodInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">CgService</span> <span class="variable">service</span> <span class="operator">=</span> (CgService) enhancer.create();</span><br><span class="line">        service.perform();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用AOP时，因为AOP是基于jdk的动态代理和cglib的动态代理实现的，若要为某个业务织入aop，该类如果没有实现接口，会使用cglib进行动态代理，因此该类不能使用final修饰。</p>
<h4 id="依赖倒置，依赖注入，以及控制反转分别是什么"><a href="#依赖倒置，依赖注入，以及控制反转分别是什么" class="headerlink" title="依赖倒置，依赖注入，以及控制反转分别是什么"></a>依赖倒置，依赖注入，以及控制反转分别是什么</h4><ul>
<li>控制反转：控制指的是对程序执行流程的控制，而反转指的是在没有使用框架前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程通过框架来控制。</li>
<li>依赖注入：依赖注入是一种具体的编码技巧，不通过new的方式来创建对象，而是在外部创建对象，通过构造函数，函数参数等方式传递给类来使用</li>
<li>依赖倒置：与控制反转有点类似，主要用来指导框架层面的设计。高层模块不依赖低层模块，而是共同依赖一个抽象。抽象不要依赖具体实现细节，具体细节实现依赖抽象。</li>
</ul>
<h4 id="SpringAOP主要想解决什么问题？"><a href="#SpringAOP主要想解决什么问题？" class="headerlink" title="SpringAOP主要想解决什么问题？"></a>SpringAOP主要想解决什么问题？</h4><p>AOP编程范式其实像是对OOP编程的一种补充，在OOP编程中会遇到这样的问题：一些比较共性的功能例如异常处理，打印日志等。这些功能在类与类之间并不是对象的主要特征，并且这些操作都有具体实现，不能抽象出来。假如这类功能利用继承，会强行侵入到继承树中对对象与对象之间的共性造成干扰。</p>
<p>AOP就是一种无侵入式的一种思想，它会把这些共性的功能整理出来，通过切入点在方法粒度上进行织入。</p>
<h4 id="Spring如何解决循环依赖"><a href="#Spring如何解决循环依赖" class="headerlink" title="Spring如何解决循环依赖"></a>Spring如何解决循环依赖</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1720684589425-d06727ba-bf03-484a-b656-c225554b5b49.png" alt="img"></p>
<p>循环依赖主要有三种情况</p>
<ul>
<li>通过构造方法依赖注入时产生的循环依赖问题</li>
<li>通过setter注入且是在多例（原型）模式下注入</li>
<li>通过setter注入且是单例模式下注入</li>
</ul>
<p>只有第三种情况被Spring解决了，其他两种情况在遇到循环依赖问题时，都会发生异常</p>
<p>Spring解决循环依赖的问题主要是通过三级缓存来解决问题，三级缓存就是在bean的创建过程中，通过三级缓存来缓存正在创建的bean，以及已经创建的bean实例。</p>
<ul>
<li>实例化bean：实例化bean时，会先创建一个空的bean对象，放入缓存中</li>
<li>属性赋值：对bean进行属性赋值，如果发现循环依赖，会将当前bean对象提前暴露给后续需要依赖的bean</li>
<li>初始化bean：完成属性赋值后，spring将bean初始化放入二级缓存中</li>
<li>注入依赖：Spring 继续对 Bean 进行依赖注入，如果发现循环依赖，会从二级缓存中获取已经完成初始化的 Bean 实例。</li>
</ul>
<p>测试：</p>
<p>第三种情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个循环依赖的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Service2 service2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Service1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;loading...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setService2</span><span class="params">(Service2 service2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service2 = service2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am service1&quot;</span>+service2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setService1</span><span class="params">(Service1 service1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service1 = service1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Service1 service1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Service2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;loading...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am service2&quot;</span>+service1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试是否能够使用bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line">        <span class="type">Service1</span> <span class="variable">bean</span> <span class="operator">=</span> (Service1) context.getBean(<span class="string">&quot;service1&quot;</span>);</span><br><span class="line">        <span class="type">Service2</span> <span class="variable">bean1</span> <span class="operator">=</span> context.getBean(Service2.class);</span><br><span class="line">        bean.test();</span><br><span class="line">        bean1.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在单例模式下，两个循环依赖的bean能够正确创建且调用方法，但将bean改为非单例的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jermaine.service.Service1&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;service2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;service2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jermaine.service.Service2&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;service1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种情况下出现如下异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot resolve reference to bean &#x27;service2&#x27; while setting bean property &#x27;service2&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;service2&#x27; defined in class path resource [application.xml]: Cannot resolve reference to bean &#x27;service1&#x27; while setting bean property &#x27;service1&#x27;; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &#x27;service1&#x27;: Requested bean is currently in creation: Is there an unresolvable circular reference?</span><br></pre></td></tr></table></figure>

<p>Requested bean is currently in creation: Is there an unresolvable circular reference?这里提出了两个bean存在循环依赖的问题</p>
<h4 id="Spring三级缓存的数据结构是什么？"><a href="#Spring三级缓存的数据结构是什么？" class="headerlink" title="Spring三级缓存的数据结构是什么？"></a>Spring三级缓存的数据结构是什么？</h4><p>都是Map类型的缓存，比如Map{k:name;v:bean}。</p>
<ul>
<li>一级缓存：存储的是已经完全初始化好的bean，即完全准备好可以使用的bean实例。键是bean的名称，值是bean的实例。这个缓存在DefaultSingletonBeanRegistry类中的singletonObjects属性中。</li>
<li>二级缓存：存储的是早期的bean引用，即已经实例化但还未完全初始化的bean。这些bean已经被实例化，但是可能还没有进行属性注入等操作。这个缓存在DefaultSingletonBeanRegistry类中的earlySingletonObjects属性中。</li>
<li>三级缓存：存储的是ObjectFactory对象，这些对象可以生成早期的bean引用。当一个bean正在创建过程中，如果它被其他bean依赖，那么这个正在创建的bean就会通过这个ObjectFactory来创建一个早期引用，从而解决循环依赖的问题。这个缓存在DefaultSingletonBeanRegistry类中的singletonFactories属性中。</li>
</ul>
<h4 id="Spring都用到了哪些设计模式？"><a href="#Spring都用到了哪些设计模式？" class="headerlink" title="Spring都用到了哪些设计模式？"></a>Spring都用到了哪些设计模式？</h4><ul>
<li>工厂模式</li>
<li>代理模式</li>
<li>单例模式</li>
<li>模板方法模式：Spring中jdbcTemplate、hibernateTemplate等以Template结尾的对数据库操作的类，都使用了模板方法模式</li>
<li>包装器设计模式：项目通常需要连接多个数据库，不同的客户在每次访问中根据需要会去访问不同的数据库，这种模式可以根据需求动态切换不同的数据源</li>
<li>观察者模式：Spring事件驱动模型（一种发布订阅模型，发布者通过发布事件的方式进行通知，而订阅者通过订阅事件的方式接收通知。发布者和订阅者之间的关系是松散耦合的，发布者只需要发布事件，并由框架负责将事件传递给订阅者）就是观察者模式很经典的一个应用。</li>
<li>适配器模式：AOP的增强或通知，SpringMVC的Controller均使用到了适配器模式。</li>
</ul>
<h4 id="Spring的事务什么情况下会失效"><a href="#Spring的事务什么情况下会失效" class="headerlink" title="Spring的事务什么情况下会失效"></a>Spring的事务什么情况下会失效</h4><p>SpringBoot通常是通过@Transactional注解来支持事务操作，失效的情况一般包括：</p>
<ul>
<li>未捕获异常：如果一个事务方法中出现了未捕获的异常且未处理或传播到事务边界之外，那么事务就会失效，所有的操作都会回滚</li>
<li>非受检异常：Spring对非受检异常（RuntimeException或其子类）进行回滚处理，这意味着当事务方法中抛出这些异常时，事务会回滚。</li>
<li>事务传播属性设置不当：如果多个事务之间存在着事务嵌套并且事务传播属性配置不正确，可能导致事务失效。特别是在方法内部调用由@Transactional注解的方法时要特别注意。</li>
<li>多数据源的事务管理：如果在使用多数据源时，事务管理没有正确配置或存在多个@Transactional注解时，可能会导致事务失效</li>
<li>跨方法调用事务问题：如果一个事务方法内部调用另一个方法，而这个被调用的方法没有@Transactional注解，这种情况下外层事务可能会失效。</li>
<li>事务在非公开方法中失效：如果@Transactional注解标注在私有方法上或者非public方法上，事务也会失效。</li>
</ul>
<h4 id="Spring的事务调用this是否生效"><a href="#Spring的事务调用this是否生效" class="headerlink" title="Spring的事务调用this是否生效"></a>Spring的事务调用this是否生效</h4><p>不生效，因为Spring的事务是通过代理对象来控制的，只有代理对象的方法调用才会应用事务管理的相关规则。当使用this时，是绕过了Spring的代理机制，因此不会应用事务设置。</p>
<h4 id="Bean是否单例"><a href="#Bean是否单例" class="headerlink" title="Bean是否单例"></a>Bean是否单例</h4><p>spring默认为单例模式，但是也可以通过配置将Bean设置为多例模式，即每次请求都会创建一个新的实例。并且，单例模式的Bean是完全交给Spring容器管理的，包括完整的生命周期，但当设置为多例的情况下，在容器创建交给使用者后，就不再管理后续的生命周期了。</p>
<p>那么何时使用单例，何时使用多例呢？</p>
<p>适合交给容器管理的单例模式bean，是一些复用的对象，例如表现层，业务层，数据层以及一些工具类的对象，它们并没有封装一些成员变量的属性值，只负责完成一些业务操作。而如果是一些实体域对象，例如在使用mybatis查询时，查询结果通常会封装在一些pojo对象中，这种情况下并不适合将其交给容器进行管理，而且在使用这些对象时，需要考虑线程安全的问题。</p>
<h4 id="Bean的作用域？"><a href="#Bean的作用域？" class="headerlink" title="Bean的作用域？"></a>Bean的作用域？</h4><ul>
<li>singleton（单例）</li>
<li>prototype 原型（非单例）</li>
<li>Request（请求）：每个Http请求都会创建一个新的Bean实例。仅在SpringWeb应用程序中有效，适用于Web应用中需求局部性的Bean</li>
<li>Session（会话）：Session范围内只会创建一个Bean实例，在用户会话范围内共享，仅在SpringWeb应用程序中有效，适用于与用户会话相关的Bean</li>
<li>Application：当前ServletContext中只存在一个Bean实例。仅在SpringWeb应用程序中有效，在整个ServletContext范围内共享，适用于应用程序范围内共享的bean</li>
<li>WebSocket（web套接字）：当前WebSocket中只存在一个Bean实例。仅在SpringWeb应用程序中有效，在整个WebSocket范围内共享，适用于WebSocket会话范围内共享的bean</li>
<li>Custom scopes（自定义作用域）：开发者可以通过实现Scope接口来创建新的作用域</li>
</ul>
<h4 id="Spring提供了很多扩展点，有了解吗"><a href="#Spring提供了很多扩展点，有了解吗" class="headerlink" title="Spring提供了很多扩展点，有了解吗"></a>Spring提供了很多扩展点，有了解吗</h4><p>Spring提供了许多扩展点，使得开发者可以根据需求定制和扩展Spring功能。以下是一些常用的扩展点：</p>
<ol>
<li>BeanFactoryPostProcessor：允许在spring容器实例化bean之前修改bean的定义，常用于修改bean属性或改变bean的作用域</li>
<li>BeanPostProcessor：可以在bean实例化、配置以及初始化后对其进行额外的处理。常用于代理bean，修改bean属性等</li>
<li>PropertySource：用于定义不同的数据源，如文件，数据库等，以便在Spring应用中使用。</li>
<li>ImportSelector和ImportBeanDefinationRegister：用于根据条件动态注册bean定义，实现配置类的模块化。</li>
<li>SpringMVC中的HandlerInterceptor：用于拦截处理请求，可以在请求处理前、处理中和处理后执行特定逻辑</li>
<li>SpringMVC中的ControllerAdvice：用于全局处理控制器的异常、数据绑定和数据校验</li>
<li>SpringBoot的自动配置：通过创建自定义的自动配置类，可以实现对框架和第三方库的自动配置。</li>
<li>自定义注解：创建自定义注解，用于实现特定功能或约定，如权限控制，日志记录等。</li>
</ol>
<h4 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1716791047520-ac0d9673-be0a-4005-8732-30bdedc8f1af.webp" alt="img"></p>
<h4 id="HandlerMapping和HandlerAdapter都是干嘛的"><a href="#HandlerMapping和HandlerAdapter都是干嘛的" class="headerlink" title="HandlerMapping和HandlerAdapter都是干嘛的"></a>HandlerMapping和HandlerAdapter都是干嘛的</h4><p>HandlerMapping：handlermapping会根据DispatcherServlet发送的url以及请求参数进行解析，将请求映射到控制器（controller），然后再根据映射关系以及拦截器串联成执行链返回给DispatcherServlet。</p>
<p>HandlerAdapter：HandlerAdapter是适配器模式的典型应用，在接收到DispatcherServlet的执行请求后，负责调用controller来处理请求，而controller可能有不同的接口类型（Controller接口，HttpRequestHandler接口等），HandlerAdapter根据controller的类型来选择合适的方法调用处理器，处理器完成处理业务后，将结果包装成ModelAndView对象或者JSON返回给HandlerAdapter，HandlerAdapter将结果提交给DispatcherServlet。</p>
<h4 id="讲一下拦截器和Filter的区别"><a href="#讲一下拦截器和Filter的区别" class="headerlink" title="讲一下拦截器和Filter的区别"></a>讲一下拦截器和Filter的区别</h4><ul>
<li>首先，拦截器Interceptor是在SpringMVC层级的，Filter则是Servlet容器控制的，而SpringMVC是运行在web容器上的一个框架，在处理请求时，是先交给Web容器做处理的，Web容器通过请求的URL模式才会将请求路由到已注册的DispatcherServlet上，SpringMVC开始处理请求。因此Filter是先于拦截器执行的，覆盖范围更广，而拦截器只在控制器处理的过程中执行</li>
<li>再说拦截范围，Filter可以拦截几乎所有类型的请求，包括Servlet，JSP页面，静态资源等，而Interceptor主要拦截的是Controller层的请求，不能直接拦截静态资源或非控制器请求。因此Filter适用于通用的请求处理，例如编码设置，权限检查以及日志记录等，而Interceptor主要用于应用业务逻辑层面的处理，比如用户身份校验，权限校验，请求参数校验等。</li>
<li>最后是二者的生命周期也不同，Filter由web容器控制，初始化和销毁都是随着应用启动和关闭而触发的，拦截器由Spring容器控制，通常是在Spring容器启动时初始化，关闭时销毁</li>
</ul>
<h4 id="那如何定义一个拦截器？"><a href="#那如何定义一个拦截器？" class="headerlink" title="那如何定义一个拦截器？"></a>那如何定义一个拦截器？</h4><ol>
<li>实现HandlerInterceptor接口</li>
<li>创建拦截方法</li>
<li>注册拦截器</li>
<li>配置拦截器的路径匹配</li>
<li>配置拦截器的排除路径</li>
<li>配置拦截器的顺序</li>
<li>启用MVC配置</li>
</ol>
<h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><h4 id="SpringBoot相比Spring有哪些优点？"><a href="#SpringBoot相比Spring有哪些优点？" class="headerlink" title="SpringBoot相比Spring有哪些优点？"></a>SpringBoot相比Spring有哪些优点？</h4><ul>
<li>SpringBoot提供了自动化配置，遵守约定大于配置原则，很多配置可以自动完成，开发可以专注于关注业务逻辑的实现</li>
<li>SpringBoot提供了很多的快速项目启动器，通过引入不同的starter，可以快速集成常用的框架和库，极大地提高了开发效率</li>
</ul>
<h4 id="SpringBoot的项目结构是怎样的"><a href="#SpringBoot的项目结构是怎样的" class="headerlink" title="SpringBoot的项目结构是怎样的"></a>SpringBoot的项目结构是怎样的</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1721712085278-f25ffdd1-26bc-4a7c-928a-42e48501b285.png" alt="img"></p>
<ul>
<li>开放接口层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。</li>
<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li>
<li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>
<li>Service 层：相对具体的业务逻辑服务层。</li>
<li>Manager 层：通用业务处理层，它有如下特征</li>
<li>1）对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。</li>
<li>2）对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</li>
<li>3）与 DAO 层交互，对多个 DAO 的组合复用。</li>
<li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OceanBase 等进行数据交互。</li>
<li>第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支付宝付款服务、高德地图服务等。</li>
<li>外部接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。</li>
</ul>
<h4 id="SpringBoot的自动配置原理？"><a href="#SpringBoot的自动配置原理？" class="headerlink" title="SpringBoot的自动配置原理？"></a>SpringBoot的自动配置原理？</h4><blockquote>
<p>什么是自动配置？</p>
</blockquote>
<p>SpringBoot自动配置是基于Spring的条件化配置和@EnableAutoConfiguration注解实现的，这种机制允许开发者在项目中引入相关依赖，SpringBoot将根据这些依赖自动配置到应用程序的上下文和功能中</p>
<blockquote>
<p>如何进行自动配置的？</p>
</blockquote>
<p>SpringBoot定义了一套接口规范，这套规范规定：SpringBoot在启动时会扫描外部引用的jar包中的META-INF&#x2F;Spring.factories文件，将文件中配置的类型信息加载到Spring容器中，并执行类中定义的各种操作。对于外部jar，只需要按照SpringBoot的标准就能把自己的功能装配到容器中。</p>
<p>SpringBoot启动类需要加上@SpringBootApplication注解，进入该注解，有一个@EnableAutoConfiguration注解，这个注解是SpringBoot自动配置的核心，能够根据项目的依赖和配置自动配置应用程序的上下文，在@EnableAutoConfiguration注解中，有@AutoConfigurationPackage以及@Import，@AutoConfigurationPackage负责将项目src中main包下的所有组件注册到容器中，而@Import通过分析项目的类路径和条件来决定应该导入哪些自动配置类，简单概括AutoConfigurationImportSelector的主要工作：</p>
<ul>
<li>扫描类路径：AutoConfigurationImportSelector在启动时会扫描外部引用的jar包中的META-INF&#x2F;Spring.factories文件，在这里，它会查找所有实现了AutoConfiguration的类，具体的实现方法为getCandidateConfiguration。</li>
<li>条件判断: 对于每一个发现的自动配置类，AutoConfigurationImportSelector 会使用条件判断机制（通常是通过 @ConditionalOnXxx注解）来确定是否满足导入条件。这些条件可以是配置属性、类是否存在、Bean是否存在等等。</li>
<li>根据条件导入自动配置类：满足条件的自动配置类将被导入到应用程序的上下文中。这意味着它们会被实例化并应用于应用程序的配置。</li>
</ul>
<h4 id="SpringBoot如何开启事务"><a href="#SpringBoot如何开启事务" class="headerlink" title="SpringBoot如何开启事务"></a>SpringBoot如何开启事务</h4><p>在SpringBoot开启事务非常简单，只需要在服务层的方法上添加@Transactional注解即可</p>
<p>假设有一个服务层的接口UserService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要在这个方法上开启事务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Transcational</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">		userRepository.save(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用saveUser方法时，Spring就会自动为该方法开启一个事务，如果方法执行成功，事务会自动提交，否则就会回滚。</p>
<h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h4 id="与传统的JDBC相比，Mybatis的优点"><a href="#与传统的JDBC相比，Mybatis的优点" class="headerlink" title="与传统的JDBC相比，Mybatis的优点"></a>与传统的JDBC相比，Mybatis的优点</h4><ul>
<li>基于 SQL 语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任 何影响，SQL 写在 XML 里，解除 sql 与程序代码的耦合，便于统一管理；提供 XML 标签，支持编写动态 SQL 语句，并可重用。</li>
<li>与 JDBC 相比，减少了 50%以上的代码量，消除了 JDBC 大量冗余的代码，不 需要手动开关连接；</li>
<li>很好的与各种数据库兼容，因为 MyBatis 使用 JDBC 来连接数据库，所以只要 JDBC 支持的数据库 MyBatis 都支持。</li>
<li>能够与 Spring 很好的集成，开发效率高</li>
<li>提供映射标签，支持对象与数据库的 ORM 字段关系映射；提供对象关系映射 标签，支持对象关系组件维护。</li>
</ul>
<h4 id="JDBC的连接步骤？"><a href="#JDBC的连接步骤？" class="headerlink" title="JDBC的连接步骤？"></a>JDBC的连接步骤？</h4><ul>
<li>加载数据库驱动：在使用JDBC连接数据库之前，需要加载相应的数据库驱动程序。可以通过 Class.forName(“com.mysql.jdbc.Driver”) 来加载MySQL数据库的驱动程序。不同数据库的驱动类名会有所不同。</li>
<li>建立数据库连接：使用 DriverManager 类的 getConnection(url, username, password) 方法来连接数据库，其中url是数据库的连接字符串（包括数据库类型、主机、端口等）、username是数据库用户名，password是密码。</li>
<li>创建statement对象：通过 Connection 对象的 createStatement() 方法创建一个 Statement 对象，用于执行 SQL 查询或更新操作。</li>
<li>执行SQL查询或更新操作：使用 Statement 对象的 executeQuery(sql) 方法来执行 SELECT 查询操作，或者使用 executeUpdate(sql) 方法来执行 INSERT、UPDATE 或 DELETE 操作。</li>
<li>处理查询结果：如果是 SELECT 查询操作，通过 ResultSet 对象来处理查询结果。可以使用 ResultSet 的 next() 方法遍历查询结果集，然后通过 getXXX() 方法获取各个字段的值。</li>
<li>关闭连接：在完成数据库操作后，需要逐级关闭数据库连接相关对象，即先关闭 ResultSet，再关闭 Statement，最后关闭 Connection。</li>
</ul>
<h4 id="Mybatis里的-和-有什么区别？"><a href="#Mybatis里的-和-有什么区别？" class="headerlink" title="Mybatis里的#和$有什么区别？"></a>Mybatis里的#和$有什么区别？</h4><ul>
<li>Mybatis在处理#{}时，会创建预编译的SQL语句，将SQL语句中的#{}替换为?号，在执行SQL时会为预编译SQL中的占位符(?)赋值，调用PreparedStatement的set方法来赋值，预编译的SQL语句执行效率高，并且可以防止SQL注入，提供更高的安全性，适合传递参数值。</li>
<li>Mybatis 在处理 ${} 时，只是创建普通的 SQL 语句，然后在执行 SQL 语句时 MyBatis 将参数直接拼入到 SQL 里，不能防止 SQL 注入，因为参数直接拼接到 SQL 语句中，如果参数未经过验证、过滤，可能会导致安全问题。</li>
<li>此外，防止sql注入的策略还有使用动态sql拼接进行查询</li>
</ul>
<p>例如：使用${}查询，语句为：</p>
<p>select * form user where id &#x3D; 1</p>
<p>使用#{}查询，语句为：</p>
<p>select * from user where id &#x3D; ?</p>
<p>parameters: 1(Long)</p>
<h4 id="Mybatis的缓存机制？"><a href="#Mybatis的缓存机制？" class="headerlink" title="Mybatis的缓存机制？"></a>Mybatis的缓存机制？</h4><p>Mybatis总共有两级缓存，即查询缓存，缓存分为一级缓存和二级缓存</p>
<ul>
<li><p>一级缓存：一级缓存的作用域在SqlSession上，在操作数据库时需要构建SqlSession对象，在对象中有一个数据结构（HashMap）用来存储缓存数据，不同的SqlSession之间的HashMap是不会相互影响的。在同一个sqlSession中两次执行相同的sql语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。当一个sqlSession结束后该sqlSession中的一级缓存也就不存在了。Mybatis默认开启一级缓存 。</p>
<p>一级缓存的生命周期：MyBatis在开启一个数据库会话时，会创建一个新的SqlSession对象，SqlSession对象中会有一个新的Executor对象。Executor对象中持有一个新的PerpetualCache对象；当会话结束时，SqlSession对象及其内部的Executor对象还有PerpetualCache对象也一并释放掉。如果SqlSession调用了close()方法，会释放掉一级缓存PerpetualCache对象，一级缓存将不可用。如果SqlSession调用了clearCache()，会清空PerpetualCache对象中的数据，但是该对象仍可使用。SqlSession中执行了任何一个update操作(update()、delete()、insert()) ，都会清空PerpetualCache对象的数据，但是该对象可以继续使用</p>
</li>
<li><p>二级缓存：二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，数据库得到数据会存在二级缓存区域，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。mybatis的二级缓存是需要自己手动去配置的，当开启二级缓存后，MyBatis要求返回的POJO必须是可序列化的， 也就是要求实现Serializable接口。</p>
<p>当开启二级缓存后：</p>
<ul>
<li>映射语句文件中的所有select语句将会被缓存。</li>
<li>映射语句文件中的所欲insert、update和delete语句会刷新缓存。</li>
<li>缓存会使用默认的Least Recently Used（LRU，最近最少使用的）算法来收回。</li>
<li>根据时间表，比如No Flush Interval,（CNFI没有刷新间隔），缓存不会以任何时间顺序来刷新。</li>
<li>缓存会存储列表集合或对象(无论查询方法返回什么)的1024个引用</li>
<li>缓存会被视为是read&#x2F;write(可读&#x2F;可写)的缓存，意味着对象检索不是共享的，而且可以安全的被调用者修改，不干扰其他调用者或线程所做的潜在修改。</li>
<li>如果缓存中有数据就不用从数据库中获取，大大提高系统性能。</li>
</ul>
</li>
</ul>
<h4 id="Mybatis的一对多与多对一问题了解吗"><a href="#Mybatis的一对多与多对一问题了解吗" class="headerlink" title="Mybatis的一对多与多对一问题了解吗"></a>Mybatis的一对多与多对一问题了解吗</h4><p>举个例子，一个班级有一个老师和多个学生，站在学生的角度来看，与老师的关系就是多对一的，站在老师的角度来看，与学生的关系就是一对多的</p>
<h4 id="MP和Mybatis的区别"><a href="#MP和Mybatis的区别" class="headerlink" title="MP和Mybatis的区别"></a>MP和Mybatis的区别</h4><p>MP是Mybatis的一个增强工具库，可以简化Mybatis的一些操作，提高开发效率</p>
<ul>
<li>CRUD操作：MybatisPlus通过继承BaseMapper接口，提供了一系列内置的快捷方法，使得CRUD操作更加简单，无需编写重复的SQL语句。</li>
<li>代码生成器：MybatisPlus提供了代码生成器功能，可以根据数据库表结构自动生成实体类、Mapper接口以及XML映射文件，减少了手动编写的工作量。</li>
<li>通用方法封装：MybatisPlus封装了许多常用的方法，如条件构造器、排序、分页查询等，简化了开发过程，提高了开发效率。</li>
<li>分页插件：MybatisPlus内置了分页插件，支持各种数据库的分页查询，开发者可以轻松实现分页功能，而在传统的MyBatis中，需要开发者自己手动实现分页逻辑。</li>
<li>多租户支持：MybatisPlus提供了多租户的支持，可以轻松实现多租户数据隔离的功能。</li>
<li>注解支持：MybatisPlus引入了更多的注解支持，使得开发者可以通过注解来配置实体与数据库表之间的映射关系，减少了XML配置文件的编写。</li>
</ul>
<h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><h4 id="SpringCloud与SpringBoot的关系"><a href="#SpringCloud与SpringBoot的关系" class="headerlink" title="SpringCloud与SpringBoot的关系"></a>SpringCloud与SpringBoot的关系</h4><p>SpringBoot是用于构建单个Spring应用的框架，SpringCloud是用于构建分布式系统中微服务架构的工具，SpringCloud提供了服务注册与发现，负载均衡，断路器，网关等功能。</p>
<p>两者可以结合使用，通过SpringBoot构建微服务应用，然后使用SpringCloud来实现微服务架构中的各种功能。</p>
<h4 id="用过哪些微服务组件？"><a href="#用过哪些微服务组件？" class="headerlink" title="用过哪些微服务组件？"></a>用过哪些微服务组件？</h4><ul>
<li>注册中心Eureka：SpringCloud中最核心的组件，负责服务的注册与发现，服务治理，微服务节点在启动时会将自己的服务名称、IP、端口等信息在注册中心登记，注册中心会通过心跳机制检查该节点的运行状态。</li>
<li>负载均衡Ribbon和Feign：解决了「如何发现服务及负载均衡如何实现的问题」，通常微服务在互相调用时，并不是直接通过IP、端口进行访问调用。而是先通过服务名在注册中心查询该服务拥有哪些节点，注册中心将该服务可用节点列表返回给服务调用者，这个过程叫服务发现，因服务高可用的要求，服务调用者会接收到多个节点，必须要从中进行选择。因此服务调用者一端必须内置负载均衡器，通过负载均衡策略选择合适的节点发起实质性的通信请求。</li>
<li>断路器Hystrix：防止服务链路依赖关系失效导致服务出现故障，Hystrix可以提供服务熔断，服务降级，服务限流等功能，避免系统崩溃。</li>
<li>路由网关Zuul：提供代理+路由+过滤三大功能，路由负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，过滤器功能负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。</li>
<li>分布式配置中心SpringCloud Config：由于微服务架构中将服务拆分成各个模块，为每个服务进行配置十分复杂，而SpringCloud Config为微服务提供集中化管理的外部配置支持，集中管理配置文件，且配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置。</li>
</ul>
<h4 id="负载均衡算法有哪些？"><a href="#负载均衡算法有哪些？" class="headerlink" title="负载均衡算法有哪些？"></a>负载均衡算法有哪些？</h4><p>RoundRobinRule 轮询（默认）：将请求按照顺序分发给服务器，不关心服务器的当前状态，使用CAS+自旋锁的方式来保证线程安全</p>
<p>加权轮询：根据服务器自身的性能给服务器设置不同的权重，将请求按顺序和权重分发给后端服务器，可以让性能高的机器处理更多的请求</p>
<p>RandomRule  随机：将请求随机分发给后端服务器，请求越多，各个服务器接收到的请求越平均。</p>
<p>加权随机：根据服务器自身的性能给服务器设置不同的权重，将请求按各个服务器的权重随机分发给后端服务器</p>
<p>一致性哈希：根据请求的客户端 ip、或请求参数通过哈希算法得到一个数值，利用该数值取模映射出对应的后端服务器，这样能保证同一个客户端或相同参数的请求每次都使用同一台服务器</p>
<p>最小活跃数：统计每台服务器上当前正在处理的请求数，也就是请求活跃数，将请求分发给活跃数最少的后台服务器</p>
<h4 id="什么是服务熔断和服务降级？"><a href="#什么是服务熔断和服务降级？" class="headerlink" title="什么是服务熔断和服务降级？"></a>什么是服务熔断和服务降级？</h4><p><strong>服务熔断：</strong></p>
<p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务不可用或者响应时间太长的时候，会熔断该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路，在SpringCloud中熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5s内20次调用失败就会启动熔断机制，熔断机制的注解@HystrixCommand。</p>
<p>服务熔断的原理是通过在服务调用的过程中设置一个熔断器，并监控服务的调用情况。当服务的错误率或失败次数超过设定的阈值时，熔断器会打开，将后续的请求快速失败，而不是继续调用具有高延迟或已经失效的服务。当熔断器打开后，可以选择返回一个预设的默认值或者执行降级逻辑，以保证系统的相应性能。</p>
<p><strong>服务降级：</strong></p>
<p>服务降级是一种应对系统负载过高或者服务不可用的策略，通过临时屏蔽某些非核心功能来保证系统的可用性。在Spring Cloud中，服务降级是通过在调用链路中使用备用方法或者返回默认值来处理异常情况的过程。</p>
<p>服务的资源是有限的，而请求是无限的。在用户使用并发高峰期，会影响整体的服务性能，严重的话甚至会宕机，因此在高并发期间，会对某些非核心功能进行降级处理，释放出服务器资源以保证核心业务的正常高效运行，可以理解为舍小保大。</p>
<h4 id="什么是CAP原则，Eureka遵循的哪种原则？"><a href="#什么是CAP原则，Eureka遵循的哪种原则？" class="headerlink" title="什么是CAP原则，Eureka遵循的哪种原则？"></a>什么是CAP原则，Eureka遵循的哪种原则？</h4><p>CAP原则是C（Consistency）强一致性，A（Availability）可用性，P（Partition tolerance）分区容错性的缩写，在设计分布式系统时CAP这三个要素最多只能同时实现两个，不可能三者兼顾</p>
<ul>
<li>强一致性：系统在执行过某项操作后，仍然处于一致的状态，适用于需要保持数据高一致性的场景</li>
<li>可用性：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求，即不管成功与否都能得到响应</li>
<li>分区容错性：保证系统中任意信息的丢失或失败不会影响系统的继续运作。</li>
</ul>
<p>分区容错性在分布式系统中是必须要保证的，只能在AC之间权衡，Eureka遵循的是AP原则，而Zookeeper遵循的是CP原则。</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h3><h4 id="SQL与NoSQL的区别"><a href="#SQL与NoSQL的区别" class="headerlink" title="SQL与NoSQL的区别"></a>SQL与NoSQL的区别</h4><p>SQL：即关系型数据库，存储结构化的数据，以行列二级的表结构存储数据，常用的关系型数据库有MySQL，Oracle，PostgreSQL，SQL支持ACID特性，即原子性，一致性，隔离性，持续性，适用于需要保证ACID的场景，例如银行系统。此外，关系型数据库的表结构在设计之初就被定义好了，且数据之间存在关联性，难以水平扩展，需要解决跨服务JSON，分布式事务等问题。</p>
<p>NoSQL：非关系型数据，存储形式有很多种，例如Redis的kv结构，MongoDB的JSON文档存储方式。NOSQL采用更宽松的模型BASE，即基本可用，软状态以及最终一致性。NoSQL适用于不要求高一致性的场景，例如社交软件更新一条状态，对于所有用户读取先后时间有数秒不同并不影响使用。NoSQL数据库数据之间无关系，容易进行扩展，比如Redis自带主从复制模式，哨兵模式，切片集群模式。</p>
<h4 id="数据库三大范式？"><a href="#数据库三大范式？" class="headerlink" title="数据库三大范式？"></a>数据库三大范式？</h4><ul>
<li><p>第一范式：数据表的每一列都是不可分割的原子数据项。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909201651535-1215699096.png" alt="img"></p>
<p>不满足第一范式</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909202243826-1032549277.png" alt="img"></p>
<p>满足第一范式</p>
</li>
<li><p>第二范式：在第一范式的基础上，非码属性必须完全依赖于候选码，即第二范式需要确保数据表中的每一列都和主键相关，而不能只与主键的一部分相关。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909204750951-639647799.png" alt="img"></p>
<p>在上图所示的情况中，同一个订单中可能包含不同的产品，因此主键必须是“订单号”和“产品号”联合组成，</p>
<p>但可以发现，产品数量、产品折扣、产品价格与“订单号”和“产品号”都相关，但是订单金额和订单时间仅与“订单号”相关，与“产品号”无关，这样就不满足第二范式的要求，调整如下，需分成两个表：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909210444227-1008056975.png" alt="img"></p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909210458847-2092897116.png" alt="img"></p>
<p>第三范式：在第二范式的基础上，任何非主属性不依赖于其他非主属性，第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909211311408-1364899740.png" alt="img"></p>
<p>上表中，所有属性都完全依赖于学号，所以满足第二范式，但是“班主任性别”和“班主任年龄”直接依赖的是“班主任姓名”，而不是主键“学号”，所以需做如下调整：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909211539242-1391100354.png" alt="img"></p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1218459-20180909211602202-1069383439.png" alt="img"></p>
</li>
</ul>
<h4 id="MySQL如何联表查询"><a href="#MySQL如何联表查询" class="headerlink" title="MySQL如何联表查询"></a>MySQL如何联表查询</h4><p>mysql有以下几种联表查询类型：</p>
<ol>
<li>内连接</li>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ol>
<p><img src="https://cdn.xiaolincoding.com//picgo/1721710415166-eff24e6c-555c-436c-b1b8-7c6dbb5850d7.webp" alt="img"></p>
<ol>
<li><p>内连接</p>
<p>内连接返回两个表中有匹配关系的行，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name,departments.name</span><br><span class="line"><span class="keyword">FROM</span> emoloyees</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.id</span><br></pre></td></tr></table></figure>



<p>查询返回每个员工及其所在的部门名称。</p>
</li>
<li><p>左外连接</p>
<p>左外连接返回左表中的所有行，即使在右表中没有匹配的行。未匹配的右表列会包含null，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name,departments.name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.id</span><br></pre></td></tr></table></figure>



<p>这个查询返回所有员工及其部门名称，包括那些没有被分配部门的员工。</p>
</li>
<li><p>右外连接</p>
<p>返回右表中所有行，即使左表中没有匹配的行。未匹配的左列表会包含null，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name,departments.name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.id</span><br></pre></td></tr></table></figure>



<p>这个查询返回所有部门及其员工，包括那些没有分配员工的部门。</p>
</li>
<li><p>全外连接</p>
<p>返回两个表中的所有行，包括非匹配行，在Mysql中，全外连接需要使用UNION来实现，因为MYSQL不支持直接使用全连接，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.name,departments.name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.id</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employees.name,departments.name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.id</span><br></pre></td></tr></table></figure>



<p>这个查询返回所有员工和所有部门，包括没有匹配行的记录。</p>
</li>
</ol>
<h4 id="如何避免重复插入数据？"><a href="#如何避免重复插入数据？" class="headerlink" title="如何避免重复插入数据？"></a>如何避免重复插入数据？</h4><ol>
<li><p>使用unique约束</p>
<p>在表的相关列上添加unique约束，确保每个值在该列中唯一，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> users(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<p>如果尝试插入重复的email，Mysql会返回错误。</p>
</li>
<li><p>使用INSERT … ON DUPLICATE KEY UPDATE</p>
<p>这种语句允许在插入时处理键重复的情况，如果插入的记录与现有记录冲突，可以选择更新现有记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> users (email,name) <span class="keyword">VALUES</span>(&quot;2671667099@qq.com&quot;,&quot;Andy&quot;) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> name <span class="operator">=</span> <span class="keyword">VALUES</span>(name);</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用INSERT IGNORE：该语句会在插入记录时忽略那些因重复键而导致的插入错误。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> users(email,name) <span class="keyword">VALUES</span>(&quot;2671667099@qq.com&quot;,&quot;Jermaine&quot;);</span><br></pre></td></tr></table></figure>



<p>如果email已经存在，这条插入语句将被忽略而不会返回错误。</p>
<p>选择哪种方法要看具体情况：</p>
<ul>
<li>如果保证全局唯一性，使用UNIQUE约束是最佳做法</li>
<li>如果需要插入和更新结合可以使用ON DUPLICATE KEY UPDATE name</li>
<li>对于快速忽略重复插入，INSERT IGNORE是最佳做法。</li>
</ul>
</li>
</ol>
<h4 id="char和varchar的区别？"><a href="#char和varchar的区别？" class="headerlink" title="char和varchar的区别？"></a>char和varchar的区别？</h4><ul>
<li>char是固定长度的字符串类型，定义时需要固定长度，存储时会在末尾补足空格。char适合存储例如固定长度的代码，状态等。</li>
<li>varchar是可变长度的字符串类型，定义的是最大长度，存储时按照字符串的实际长度存储，varchar适合存储长度可变的数据，例如用户输入的文本，备注等，节约存储空间。</li>
</ul>
<h4 id="Text数据类型可以无限大吗？"><a href="#Text数据类型可以无限大吗？" class="headerlink" title="Text数据类型可以无限大吗？"></a>Text数据类型可以无限大吗？</h4><p>MySQL中有三种类型的text：</p>
<ul>
<li>TEXT：65,535 bytes ~64kb</li>
<li>MEDIUMTEXT：16,777,215 bytes ~16Mb</li>
<li>LONGTEXT：4,294,967,295 bytes ~4Gb</li>
</ul>
<h4 id="什么是外键约束？"><a href="#什么是外键约束？" class="headerlink" title="什么是外键约束？"></a>什么是外键约束？</h4><p>外键约束的作用是维护表与表之间的关系，确保数据的完整性和一致性。让我们举一个简单的例子：</p>
<p>假设有两个表，一个是学生表，另一个是课程表，这两个表之间有一个关系，即一个学生可以选修多门课程，而一门课程也可以被多个学生选修。在这种情况下，我们可以在学生表中定义一个指向课程表的外键，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> students(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">course_id <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">FOREIGN KEY</span> (course_id) <span class="keyword">REFERENCES</span> courses(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>students表中的course_id是一个外键，指向courses表中的id，这个外键约束确保了每个学生所选的课程在courses表中都存在，从而维护了数据的完整性和一致性。</p>
<p>如果没有定义外键约束，那么就有可能出现学生选了不存在的课程或者删除了一个课程而忘记从学生表中删除选修该课程的学生的情况，这会破坏数据的完整性和一致性。因此，使用外键约束可以帮助我们避免这些问题。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> course_id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<p>这里插入不存在该课程的id，因为外键约束，这个操作是不允许的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> courses <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>



<p>同样，删除操作也不被允许，必须先删除选择了该课程的学生。</p>
<h4 id="关键字in和exist？"><a href="#关键字in和exist？" class="headerlink" title="关键字in和exist？"></a>关键字in和exist？</h4><p>IN和EXIST都是用来处理子查询的关键词，IN用于检查左边的表达式是否存在于右边的列表或子查询的结果集中，如果存在，则IN返回TRUE，否则false。EXIST用于判断子查询是否至少能返回一行数据。它不关心子查询返回什么数据，只关心是否有结果。如果有结果为TRUE，否则为FALSE</p>
<p>IN：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> another_table <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure>

<p>EXIST：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> another_table <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure>

<p>区别：</p>
<ul>
<li>性能：EXISTS的性能由于IN，因为EXISTS一旦到匹配项就会立即停止查询，而IN可能扫描整个子查询结果集</li>
<li>NULL值处理：IN能够正确处理子查询中包含NULL值的情况，而EXISTS不受子查询结果中NULL值的影响</li>
</ul>
<h4 id="mysql中的一些基本函数你知道哪些？"><a href="#mysql中的一些基本函数你知道哪些？" class="headerlink" title="mysql中的一些基本函数你知道哪些？"></a>mysql中的一些基本函数你知道哪些？</h4><blockquote>
<p>字符串函数</p>
</blockquote>
<p>CONCAT(str1,str2,….)：连接多个字符串，返回一个合并后的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(‘hello’,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;World&#x27;</span>)<span class="keyword">AS</span> Greeting</span><br></pre></td></tr></table></figure>

<p>LENGTH(str)：返回字符串长度</p>
<p>SUBSTRING(str,pos,len)：从指定位置开始，截取指定长度的字符串</p>
<p>REPLACE(str,from_str,to_str)：将字符串中的某部分替换为另一个字符串</p>
<blockquote>
<p>数值函数</p>
</blockquote>
<p>ABS(num)：绝对值</p>
<p>POWER(num,exponent)：返回指定数字的指定幂次方</p>
<blockquote>
<p>日期和时间函数</p>
</blockquote>
<p>NOW()：返回当前日期和时间</p>
<p>CURDATE()：返回当前日期</p>
<blockquote>
<p>聚合函数</p>
</blockquote>
<p>COUNT(column)：返回指定列中的非NULL值的个数</p>
<p>SUM(column)：返回指定列的总和</p>
<p>AVG(column)：返回指定列的平均值</p>
<p>MAX(column)：返回指定列的最大值</p>
<p>MIN(column)：返回指定列的最小值</p>
<h4 id="SQL查询语句的执行过程是怎样的？"><a href="#SQL查询语句的执行过程是怎样的？" class="headerlink" title="SQL查询语句的执行过程是怎样的？"></a>SQL查询语句的执行过程是怎样的？</h4><p><img src="https://cdn.xiaolincoding.com//picgo/image-20240820114027032.png" alt="img"></p>
<p>所有的查询语句都是从FROM开始执行，在执行过程中，每个步骤都会生成一个虚拟表，这个虚拟表将作为下一个执行步骤的输入，最后一个步骤产生的虚拟表即为输出结果。</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="执行一条SQL请求的过程？"><a href="#执行一条SQL请求的过程？" class="headerlink" title="执行一条SQL请求的过程？"></a>执行一条SQL请求的过程？</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1720155840218-b95c4217-6502-42b8-bcc5-384b297de75d.png" alt="img"></p>
<ul>
<li>连接器：建立连接，管理连接，校验用户身份</li>
<li>查询缓存：查询语句如果命中缓存则直接返回，否则继续向下执行，8.0版本已删除该模块</li>
<li>解析SQL：通过解析器对SQL查询语句进行词法分析，语法分析，然后构建语法树，方便后续模块读取表名，字段，语句类型。</li>
<li>执行SQL：<ul>
<li>预处理阶段：检查表或字段是否存在，将select *中的星号扩展为列表上的所有列</li>
<li>优化阶段：基于查询成本的考虑，选择查询成本最小的执行计划</li>
<li>执行阶段：根据执行计划执行SQL查询语句，从存储引擎读取记录，返回给客户端。</li>
</ul>
</li>
</ul>
<h4 id="MySQL的引擎有了解吗"><a href="#MySQL的引擎有了解吗" class="headerlink" title="MySQL的引擎有了解吗"></a>MySQL的引擎有了解吗</h4><p>InnoDB：InnoDB是MySQL的默认存储引擎，具有ACID事务支持、行级锁、外键约束等特性。它适用于高并发的读写操作，支持较好的数据完整性和并发控制。</p>
<p>MyISAM：MyISAM是MySQL的另一种常见的存储引擎，具有较低的存储空间和内存消耗，适用于大量读操作的场景。然而，MyISAM不支持事务、行级锁和外键约束，因此在并发写入和数据完整性方面有一定的限制。</p>
<p>Memory：Memory引擎将数据存储在内存中，适用于对性能要求较高的读操作，但是在服务器重启或崩溃时数据会丢失。它不支持事务、行级锁和外键约束。</p>
<h4 id="InnoDB与MyISAM的区别？"><a href="#InnoDB与MyISAM的区别？" class="headerlink" title="InnoDB与MyISAM的区别？"></a>InnoDB与MyISAM的区别？</h4><ul>
<li>事务</li>
<li>索引结构：InnoDB 是聚簇索引，MyISAM 是非聚簇索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚簇索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li>
<li>锁粒度：InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。</li>
<li>count的效率：InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快。</li>
</ul>
<h4 id="InnoDB为什么是默认引擎"><a href="#InnoDB为什么是默认引擎" class="headerlink" title="InnoDB为什么是默认引擎"></a>InnoDB为什么是默认引擎</h4><ul>
<li>事务支持：InnoDB引擎提供了对事务的支持，可以进行ACID（原子性、一致性、隔离性、持久性）属性的操作。Myisam存储引擎是不支持事务的。</li>
<li>并发性能：InnoDB引擎采用了行级锁定的机制，可以提供更好的并发性能，Myisam存储引擎只支持表锁，锁的粒度比较大。</li>
<li>崩溃恢复：InnoDB引引擎通过 redolog 日志实现了崩溃恢复，可以在数据库发生异常情况（如断电）时，通过日志文件进行恢复，保证数据的持久性和一致性。Myisam是不支持崩溃恢复的。</li>
</ul>
<h4 id="数据管理中，数据文件大体分成哪几种数据文件"><a href="#数据管理中，数据文件大体分成哪几种数据文件" class="headerlink" title="数据管理中，数据文件大体分成哪几种数据文件"></a>数据管理中，数据文件大体分成哪几种数据文件</h4><ul>
<li>db.opt：用来存储当前数据库的默认字符集和字符校验规则。</li>
<li>t_order.frm：t_order 的表结构会保存在这个文件。在 MySQL 中建立一张表都会生成一个.frm 文件，该文件是用来保存每个表的元数据信息的，主要包含表结构定义。</li>
<li>t_order.ibd：t_order 的表数据会保存在这个文件。表数据既可以存在共享表空间文件（文件名：ibdata1）里，也可以存放在独占表空间文件（文件名：表名字.ibd）。这个行为是由参数 innodb_file_per_table 控制的，若设置了参数 innodb_file_per_table 为 1，则会将存储的数据、索引等信息单独存储在一个独占表空间，从 MySQL 5.6.6 版本开始，它的默认值就是 1 了，因此从这个版本之后， MySQL 中每一张表的数据都存放在一个独立的 .ibd 文件。</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="索引是什么？有什么好处"><a href="#索引是什么？有什么好处" class="headerlink" title="索引是什么？有什么好处"></a>索引是什么？有什么好处</h4><p>索引类似于书籍目录，可以减少扫描的数据量，提高查询效率</p>
<ul>
<li>如果查询的时候，没有用到索引就会全表扫描，这时候查询的时间复杂度是On</li>
<li>如果用到了索引，那么查询的时候，可以基于二分查找算法，通过索引快速定位到目标数据， mysql 索引的数据结构一般是 b+树，其搜索复杂度为O(logdN)，其中 d 表示节点允许的最大子节点个数为 d 个。</li>
</ul>
<h4 id="索引的分类是什么？"><a href="#索引的分类是什么？" class="headerlink" title="索引的分类是什么？"></a>索引的分类是什么？</h4><ul>
<li><p>按「数据结构」分类：B+tree索引、Hash索引、Full-text索引</p>
<p>在创建表时，InnoDB存储引擎会根据不同场景选择不同的列作为索引键（key）：</p>
<ul>
<li>如果有主键，默认会使用主键作为聚簇索引的索引键（key）。</li>
<li>如果没有主键，就选择第一个不包含NULL值的唯一列作为聚簇索引的索引键（key）</li>
<li>在上面两个都没有的情况下，InnoDB将自动生成一个隐式自增id列作为聚簇索引的索引键（key）</li>
</ul>
<p>其他索引都属于辅助索引，也被称为二级索引或非聚簇索引。创建的主键索引和二级索引默认使用的是B+Tree索引。</p>
</li>
<li><p>按「物理存储」分类：聚簇索引（主键索引）、二级索引（辅助索引）</p>
<p>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</p>
<p>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</p>
<p>所以，在查询时使用了二级索引，如果查询的数据能在二级索引里查询的到，那么就不需要回表，这个过程就是覆盖索引。如果查询的数据不在二级索引里，就会先检索二级索引，找到对应的叶子节点，获取到主键值后，然后再检索主键索引，就能查询到数据了，这个过程就是回表。</p>
</li>
<li><p>按「字段特性」分类：主键索引、唯一索引、普通索引、前缀索引</p>
<p>主键索引（Primary key）</p>
<p>唯一索引（UNIQUE）</p>
<p>普通索引（就是建立在普通字段上的索引，既不要求字段为主键，也不要求为UNIQUE）</p>
<p>前缀索引：前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</p>
</li>
<li><p>按「字段个数」分类：单列索引、联合索引</p>
<p>建立在单列上的索引称为单列索引，比如主键索引；建立在多列上的索引（将多个字段组合成一个索引）称为联合索引。</p>
</li>
</ul>
<h4 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h4><ul>
<li>存储方式：聚簇索引按照键值的顺序存储，索引的叶子节点包含具体的值，而非聚簇索引的叶子节点是指向数据行的指针或者主键值，数据行本身存在聚簇索引中</li>
<li>唯一性：聚簇索引通常是基于主键构建的，因此一个表中只能有一个聚簇索引，因为数据只能有一种物理排序方式，可以有多个非聚簇索引</li>
<li>效率：对于范围和排序查询，聚簇索引更快，因为避免了额外的寻址开销（回表操作）。非聚簇索引在使用覆盖索引进行查询时速度更快，因为不需要读取完整的数据行</li>
</ul>
<h4 id="什么字段适合作为主键"><a href="#什么字段适合作为主键" class="headerlink" title="什么字段适合作为主键"></a>什么字段适合作为主键</h4><ul>
<li>具有唯一性，且不为空特性的字段</li>
<li>字段最好有递增的趋势，如果字段的值是无序的，可能会引发页分裂的问题，造成性能影响</li>
<li>业务数据不适合做主键，例如订单号，学生号等，因为无法预测未来会不会存在复用的情况。</li>
<li>分布式系统下，自增字段就不适合做主键了，如果每台机器产生的数据需要合并时，会存在主键重复的情况，这时候就要考虑分布式id的方案了。</li>
</ul>
<h4 id="性别字段能加索引吗？为什么？"><a href="#性别字段能加索引吗？为什么？" class="headerlink" title="性别字段能加索引吗？为什么？"></a>性别字段能加索引吗？为什么？</h4><p>不建议，假如有100w条数据，其中各50w分别为男和女，区分度几乎为0，不适合的原因是因为select *操作，得进行50w次回表操作，根据主键从聚簇索引中找打其他字段，开销十分大，索引的作用是为了加快查询，但这里并没有起到作用，相比于全表扫描来说，还因为创建索引增加了空间。</p>
<h4 id="B-树的叶子节点为什么使用双向链表？"><a href="#B-树的叶子节点为什么使用双向链表？" class="headerlink" title="B+树的叶子节点为什么使用双向链表？"></a>B+树的叶子节点为什么使用双向链表？</h4><p>使用双向链表连接，既能向右遍历，也能向左遍历，有利于范围查询，相比于B树，B树的叶子节点并没有链表连接，范围查询时可能会消耗大量的IO资源</p>
<h4 id="MySQL为什么使用B-树结构，相比于其他结构的优点？"><a href="#MySQL为什么使用B-树结构，相比于其他结构的优点？" class="headerlink" title="MySQL为什么使用B+树结构，相比于其他结构的优点？"></a>MySQL为什么使用B+树结构，相比于其他结构的优点？</h4><ul>
<li>B+ Tree vs B Tree：B+树相比于B树，高度会很小，且数据均存在叶子节点中，在进行查询时，B树在高度非常高的情况下，需要一直进行递归寻找符合的值为止，最坏的情况一直要查到叶子节点，而B+树所有的查询操作最终都会查询到叶子节点，性能也更加稳定。并且，B树在进行插入删除操作时，为了维护树的平衡，可能还需要重构树，而B+树有大量的冗余节点，基本不需要重构树的结构。</li>
<li>B+ Tree vs 红黑树：红黑树有良好的平衡性，查询效率很高，但红黑树每个节点只能存储一个关键字和一个数据，在数据量非常大的情况下，树的高度同样会非常高，而且在进行插入删除操作的时候，维护红黑树的平衡会涉及到节点的旋转操作，这些都需要大量的I&#x2F;O操作</li>
<li>B+ Tree vs Hash：Hash表的查询速度十分快，时间复杂度仅为O(1)，但Hash表不适合做范围查询，更适合做等值查询。</li>
<li>B+ Tree vs SkipList ：B+树高度在3层时，存储的数据可能已经达到千万级别，但对于跳表如果维护千万级别的数据会导致跳表层数过高而大大增加IO次数。</li>
</ul>
<h4 id="创建联合索引时需要注意什么？"><a href="#创建联合索引时需要注意什么？" class="headerlink" title="创建联合索引时需要注意什么？"></a>创建联合索引时需要注意什么？</h4><p>建立联合索引时的字段顺序，对索引效率也有很大影响。越靠前的字段被用于索引过滤的概率越高，即要把区分度（某个字段column不同值的个数&#x2F;表的总行数）大的字段排在前面，这样区分度大的字段越有可能被更多的 SQL 使用到。</p>
<h4 id="索引什么情况会失效"><a href="#索引什么情况会失效" class="headerlink" title="索引什么情况会失效"></a>索引什么情况会失效</h4><ul>
<li>使用左或者左右模糊匹配的时候，例如%xxx，%xxx%。</li>
<li>在查询条件中对索引列使用函数，就会导致索引失效</li>
<li>在查询条件中对索引列进行表达式计算，也会失效</li>
<li>字符串与数字比较时，会自动把字符串转化为数字进行比较，如果字符串为索引时，当查询条件输入为数字时，mysql会使用CAST函数进行隐式转换，对索引列使用函数，导致失效</li>
<li>联合索引要能遵循最左匹配原则，如果不满足也会失效</li>
<li>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</li>
</ul>
<h4 id="何为覆盖索引"><a href="#何为覆盖索引" class="headerlink" title="何为覆盖索引"></a>何为覆盖索引</h4><p>覆盖索引就是指一个索引包含了查询所需要的所有列，因此不需要访问表中的数据行就能完成查询，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age_salary <span class="keyword">ON</span> users(name,age,salary);</span><br></pre></td></tr></table></figure>

<p>创建了该索引后执行以下sql语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,age,salary <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Andy&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="索引的优缺点？"><a href="#索引的优缺点？" class="headerlink" title="索引的优缺点？"></a>索引的优缺点？</h4><p>优点就是加快查询速度，主要说下缺点：</p>
<ul>
<li>需要占用物理空间，数量越大，占的空间越大</li>
<li>创建索引和维护索引要耗费时间，这种时间随着数据量的增大而增大；</li>
<li>会降低表的增删改效率，每次增删改索引，B+树都需要进行维护。</li>
</ul>
<h4 id="那什么时候建立索引呢？"><a href="#那什么时候建立索引呢？" class="headerlink" title="那什么时候建立索引呢？"></a>那什么时候建立索引呢？</h4><ul>
<li>字段有唯一性限制，比如商品编码</li>
<li>经常用于where查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引</li>
<li>经常用于group by和order by的字段，这样在查询时就不需要另外做排序了。</li>
</ul>
<p>此外这些场景不适合建立索引</p>
<ul>
<li>字段中存在大量重复数据的，区分度不高，mysql在遇到这种索引时，用到查询优化器，不会通过索引去查询了，而是直接进行全表扫描</li>
<li>表数据太少的时候</li>
<li>经常更新的字段</li>
</ul>
<h4 id="如何进行索引优化？"><a href="#如何进行索引优化？" class="headerlink" title="如何进行索引优化？"></a>如何进行索引优化？</h4><p>常见的有以下方法：</p>
<ul>
<li>前缀索引优化：使用前缀索引是为了减小索引字段大小，可以增加一个索引页中存储的索引值，有效提高索引的查询速度。在一些大字符串的字段作为索引时，使用前缀索引可以帮助我们减小索引项的大小。</li>
<li>覆盖索引优化：覆盖索引是指 SQL 中 query 的所有字段，在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作。</li>
<li>主键索引最好是自增的：如果我们使用自增主键，那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为每次插入一条新记录，都是追加操作，不需要重新移动数据，因此这种插入数据的方法效率非常高。</li>
<li>防止索引失效</li>
</ul>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="事务的四大特性？如何实现"><a href="#事务的四大特性？如何实现" class="headerlink" title="事务的四大特性？如何实现"></a>事务的四大特性？如何实现</h4><ul>
<li>Atomic原子性：一个事务中的操作要么全部成功，要么全部失败回滚</li>
<li>Consistency一致性：在事务操作的前后，数据满足完整性约束，数据库保持一致性状态</li>
<li>Isolation隔离性：每个事务的操作细节对于其他事务是不可见的，多个事务并发执行时不会交叉执行导致数据一致性被破坏</li>
<li>Durability持久性：事务处理结束后，对数据的修改是永久性的，即便系统故障也不会丢失</li>
</ul>
<p>实现：</p>
<ul>
<li>持久性：redo log（重做日志）</li>
<li>原子性：undo log（回滚日志）</li>
<li>隔离性：MVCC（多版本并发控制）或锁机制</li>
<li>一致性：通过持久性+原子性+隔离性保证</li>
</ul>
<h4 id="MySQL事务可能出现什么并发问题？"><a href="#MySQL事务可能出现什么并发问题？" class="headerlink" title="MySQL事务可能出现什么并发问题？"></a>MySQL事务可能出现什么并发问题？</h4><ul>
<li>脏读：一个事务读取到了另一个事务修改但未提交的数据，加入事务A还未提交数据，发生了回滚操作，事务B读取到的数据就是过期数据。</li>
<li>幻读：在一个事务内多次进行了读取操作，如果前后两次查询到的记录数量不一样，就是幻读。假如有两个事务AB对余额这条数据进行操作，B第一次读取到余额大于100w的数据有五条，这时A事务添加了一条大于100w的余额数据并且提交了事务，B再次读取会发现大于100w的数据变成了6条。</li>
<li>不可重复读：在一个事务内多次读取同一条数据，如果出现前后两次读到的数据不一致，就是不可重复读。假如事务A第一次读取了自己的余额，这个时候事务B给他进行了一次转账并且提交了事务，事务A再次读取自己的余额发现余额值和之前不一样了。</li>
</ul>
<h4 id="哪些场景不适合脏读？"><a href="#哪些场景不适合脏读？" class="headerlink" title="哪些场景不适合脏读？"></a>哪些场景不适合脏读？</h4><ul>
<li>银行系统：在银行系统中，如果一个账户的余额正在被调整但尚未提交，另一个事务读取了这个临时的余额，可能会导致客户看到不正确的余额。</li>
<li>库存系统：在一个库存管理系统中，如果一个商品的数量正在被更新但尚未提交，另一个事务读取了这个临时的数量，可能会导致库存管理错误。</li>
<li>在线订单系统：在一个在线订单系统中，如果一个订单正在被修改但尚未提交，另一个事务读取了这个临时的订单状态，可能导致订单状态显示错误，客户收到不准确的信息。</li>
</ul>
<p>简单来说，这些场景需要严格保证数据库的高一致性，如果出现不一致的情况会造成严重的损失</p>
<h4 id="MySQL如何解决并发问题？"><a href="#MySQL如何解决并发问题？" class="headerlink" title="MySQL如何解决并发问题？"></a>MySQL如何解决并发问题？</h4><ul>
<li>锁机制：MySQL提供了多种锁机制包括行级锁，表级锁，页级锁的机制来保证数据一致性，可以在读写操作时对数据进行加锁</li>
<li>事务隔离：MySQL提供了四种隔离级别：读未提交，读已提交，可重复读和串行化来控制事务之间的隔离程度。</li>
<li>MVCC（多版本并发控制）：Mysql使用MVCC来管理并发访问，它通过在数据库中保存不同版本的数据来实现不同事务之间的隔离。在读取数据时，Mysql会根据事务的隔离级别来选择合适的数据版本，从而保证数据的一致性。</li>
</ul>
<h4 id="事务的隔离级别？"><a href="#事务的隔离级别？" class="headerlink" title="事务的隔离级别？"></a>事务的隔离级别？</h4><ul>
<li>读未提交：一个事务还没提交，另一个事务就能看到这个事务的变更。可能发生脏读，幻读，不可重复读的现象。</li>
<li>读已提交：一个事务提交之后，它的变更就能被其他事务看到。可能发生幻读，不可重复读的现象。</li>
<li>可重复读（默认隔离级别）：一个事务在执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的。可能发生幻读的现象。</li>
<li>串行化：会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；</li>
</ul>
<p>再说说这四种隔离级别的实现</p>
<ul>
<li>读未提交：直接读取最新的数据，即使事务未提交</li>
<li>串行化：加读写锁（读的操作是不互斥的；在写入操作时，其他事务不能读也不能写）</li>
<li>读已提交和可重复读：通过Read View实现的，区别在于创建ReadView的时机不同，读已提交是在每个语句执行之前都会重新生成一个ReadView，而可重复读是在事务开启的时候生成一个ReadView，然后整个事务期间都使用这个ReadView。</li>
</ul>
<h4 id="串行化隔离级别是怎么实现的"><a href="#串行化隔离级别是怎么实现的" class="headerlink" title="串行化隔离级别是怎么实现的"></a>串行化隔离级别是怎么实现的</h4><p>是通过行级锁实现的，序列化隔离级别下，普通的select查询是会对记录加S型的next-key锁，其他事务就没办法对这些已经加锁的记录进行增删改操作了，从而避免了脏读，幻读，不可重复读。</p>
<h4 id="MVCC实现原理？"><a href="#MVCC实现原理？" class="headerlink" title="MVCC实现原理？"></a>MVCC实现原理？</h4><p>MVCC允许多个事务同时读取同一行的数据，而不会彼此阻塞，每个事务看到的数据版本是该事务开始时的数据版本。</p>
<p>MVCC重点在于生成的ReadView，ReadView有四个字段：</p>
<ul>
<li>creator_trx_id：创建该ReadView的事务的事务id</li>
<li>m_ids：创建ReadView时，当前数据库中活跃且未提交的事务id列表</li>
<li>min_trx_ids：创建ReadView时当前数据库中活跃且未提交的事务中最小事务的事务id</li>
<li>max_trx_ids：创建ReadView时当前数据库中应该给下一个事务的id值</li>
</ul>
<p>创建ReadView之后，可以将记录中的trx_id划分为以下三种情况</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719905850875-89fa5b61-e48c-4171-9248-c966c8d474ce.webp" alt="img"></p>
<p>这种通过版本链来控制并发事务访问同一个记录时的行为就叫MVCC。</p>
<h4 id="一条update是不是原子性的？为什么？"><a href="#一条update是不是原子性的？为什么？" class="headerlink" title="一条update是不是原子性的？为什么？"></a>一条update是不是原子性的？为什么？</h4><p>是原子性的，主要通过锁+undolog日志保证原子性的</p>
<ul>
<li>执行update时，会加行级锁，保证一个事务更新一条记录时，不会被其他事务干扰。</li>
<li>事务执行过程中，会生成undolog，如果事务执行失败，可以通过undolog日志进行回滚。</li>
</ul>
<h4 id="滥用事务，或者一个事务里有特别多SQL的弊端"><a href="#滥用事务，或者一个事务里有特别多SQL的弊端" class="headerlink" title="滥用事务，或者一个事务里有特别多SQL的弊端"></a>滥用事务，或者一个事务里有特别多SQL的弊端</h4><p>事务的资源在事务提交之后才会释放，比如存储资源、锁</p>
<p>如果一个事务里有特别多的sql：</p>
<ul>
<li>锁定的数据太多，容易造成大量的锁超时和死锁</li>
<li>mysql在每条记录更新的时候都会同时记录一条回滚操作，回滚记录会占用大量的空间，事务回滚时间长。</li>
<li>执行时间长容易造成主从延迟，主库必须等事务执行完才会写入binlog，再传给备库。</li>
</ul>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="mysql有哪些锁？"><a href="#mysql有哪些锁？" class="headerlink" title="mysql有哪些锁？"></a>mysql有哪些锁？</h4><p><img src="https://cdn.xiaolincoding.com//picgo/1720433609532-38aec7fc-734e-4b35-a802-4e6ba3339ffa.png" alt="img"></p>
<ul>
<li>全局锁：通过flush tables with read lock 语句会将整个数据库就处于只读状态了，这时其他线程执行以下操作，增删改或者表结构修改都会阻塞。全局锁主要应用于做全库逻辑备份，这样在备份数据期间，不会因为数据或者表结构的更新，而出现备份文件的数据与预期的不一样。</li>
<li>表级锁：<ul>
<li>表锁：通过lock tables语句可以对表加锁，表锁除了会限制别的线程读写外，也会限制本线程接下来的读取操作。</li>
<li>元数据锁：当我们对数据库进行操作时，会自动给这个表加上MDL，对一张表进行CRUD操作时，加的是MDL读锁；对一张表做结构变更操作时，加的是MDL写锁；MDL是为了保证当用户对表进行CRUD操作时，防止其他线程对这个表结构做了变更。</li>
<li>意向锁：当执行插入、更新、删除操作，需要先对表加上意向独占锁，然后该记录加独占锁。意向锁的目的是为了快速判断表里是否有记录被加锁。</li>
</ul>
</li>
<li>行级锁：InnoDB支持，MyISAM不支持<ul>
<li>记录锁：锁住的是一条记录，而且记录锁是由S锁和X锁之分的，满足读写互斥，写写互斥。</li>
<li>间隙锁：只存在于可重复读隔离级别，目的是为了解决幻读问题</li>
<li>next-key-lock：是记录锁和间隙锁的组合，锁定一个范围并且锁定记录本身。</li>
</ul>
</li>
</ul>
<h4 id="数据库的表锁和行锁有什么作用"><a href="#数据库的表锁和行锁有什么作用" class="headerlink" title="数据库的表锁和行锁有什么作用"></a>数据库的表锁和行锁有什么作用</h4><p>表锁的作用：</p>
<ul>
<li>整体控制：表锁可以用来控制整张表的并发访问，当一个事务获取到了表锁时，其他事务无法对该表进行任何读写操作，从而确保数据的完整性和一致性。</li>
<li>粒度大：表锁的粒度比较大，在锁定表的情况下，可能会影响到整个表的其他操作，可能会引起锁竞争和性能问题</li>
<li>适用于大批量操作：表锁适用于需要大批量操作数据的场景，例如表的重建、大量数据的加载等。</li>
</ul>
<p>行锁的作用：</p>
<ul>
<li>细粒度控制：行锁可以精确控制对表中某行数据的访问，使得其他事务可以同时访问表中其他行的数据，在并发量大的系统中能够提高并发性能</li>
<li>减少锁冲突：行锁不会像表锁那样造成整个表的锁冲突，减少了锁竞争的可能性，提高了并发访问的效率</li>
<li>适用于频繁单行操作：适用于需要频繁对表中单独行进行操作的场景。</li>
</ul>
<h4 id="MySQL两个线程的update语句同时处理一条数据会不会阻塞？"><a href="#MySQL两个线程的update语句同时处理一条数据会不会阻塞？" class="headerlink" title="MySQL两个线程的update语句同时处理一条数据会不会阻塞？"></a>MySQL两个线程的update语句同时处理一条数据会不会阻塞？</h4><p>如果是两个事务同时进行修改会阻塞（这时候会加类型为X的记录锁），InnoDB实现了行级锁。</p>
<h4 id="如果两个范围不是主键或者索引，会阻塞吗？"><a href="#如果两个范围不是主键或者索引，会阻塞吗？" class="headerlink" title="如果两个范围不是主键或者索引，会阻塞吗？"></a>如果两个范围不是主键或者索引，会阻塞吗？</h4><p>会，如果两个范围查询的字段不是索引或者主键，会触发全表扫描，这时候会给全部索引加行级锁，相当于加了表锁，这时候第二条update执行的时候就会阻塞了。</p>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志文件分为哪几种？"><a href="#日志文件分为哪几种？" class="headerlink" title="日志文件分为哪几种？"></a>日志文件分为哪几种？</h4><ul>
<li>redo log：是InnoDB层生成的日志，实现了事务中的持久性，主要用于掉电恢复</li>
<li>undo log：InnoDB层生成的日志，实现了事务中的原子性，主要用于事务回滚和MVCC</li>
<li>bin log：二进制日志，是Server层生成的日志，用于数据备份和主从复制</li>
<li>ready log：中继日志，用于主从复制的场景，slave通过IO线程拷贝master的bin log后本地生成的日志</li>
<li>慢查询日志：用于记录执行时间过长的sql，需要设置阈值后手动开启。</li>
</ul>
<h4 id="讲一下binlog"><a href="#讲一下binlog" class="headerlink" title="讲一下binlog"></a>讲一下binlog</h4><p>MySQL 在完成一条更新操作后，Server 层还会生成一条 binlog，等之后事务提交的时候，会将该事物执行过程中产生的所有 binlog 统一写 入 binlog 文件，binlog 是 MySQL 的 Server 层实现的日志，所有存储引擎都可以使用。</p>
<p>binlog 是追加写，写满一个文件，就创建一个新的文件继续写，不会覆盖以前的日志，保存的是全量的日志，用于备份恢复、主从复制；</p>
<p>binlog 文件是记录了所有数据库表结构变更和表数据修改的日志，不会记录查询类的操作，比如 SELECT 和 SHOW 操作。</p>
<p>binlog 有 3 种格式类型，分别是 STATEMENT（默认格式）、ROW、 MIXED，区别如下：</p>
<ul>
<li>STATEMENT：每一条修改数据的 SQL 都会被记录到 binlog 中（相当于记录了逻辑操作，所以针对这种格式， binlog 可以称为逻辑日志），主从复制中 slave 端再根据 SQL 语句重现。但 STATEMENT 有动态函数的问题，比如你用了 uuid 或者 now 这些函数，你在主库上执行的结果并不是你在从库执行的结果，这种随时在变的函数会导致复制的数据不一致；</li>
<li>ROW：记录行数据最终被修改成什么样了（这种格式的日志，就不能称为逻辑日志了），不会出现 STATEMENT 下动态函数的问题。但 ROW 的缺点是每行数据的变化结果都会被记录，比如执行批量 update 语句，更新多少行数据就会产生多少条记录，使 binlog 文件过大，而在 STATEMENT 格式下只会记录一个 update 语句而已；</li>
<li>MIXED：包含了 STATEMENT 和 ROW 模式，它会根据不同的情况自动使用 ROW 模式和 STATEMENT 模式；</li>
</ul>
<h4 id="有了undolog为什么还需要redolog呢"><a href="#有了undolog为什么还需要redolog呢" class="headerlink" title="有了undolog为什么还需要redolog呢"></a>有了undolog为什么还需要redolog呢</h4><p>防止断电重启导致还没来得及落盘的脏页数据就会丢失，当有一条记录需要更新的时候，InnoDB 引擎就会先更新内存（同时标记为脏页），然后将本次对这个页的修改以 redo log 的形式记录下来，这个时候更新就算完成了。后续，InnoDB 引擎会在适当的时候，由后台线程将缓存在 Buffer Pool 的脏页刷新到磁盘里，这就是 WAL （Write-Ahead Logging）技术。</p>
<p>WAL技术指的是， MySQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写到磁盘上。</p>
<p>undolog和redolog的区别在于</p>
<ul>
<li>undolog记录了事务开始前的数据状态，记录的是更新之前的值</li>
<li>redolog记录的是事务完成后的数据状态，记录的是更新后的值</li>
</ul>
<p>事务提交之前系统崩溃，重启后会通过undolog回滚事务，事务提交之后发生了崩溃，重启后会根据redolog恢复事务。</p>
<p>其次，redolog是追加写的操作，所以磁盘操作是顺序写，比随机写高效很多。</p>
<h4 id="redolog怎么保证持久性"><a href="#redolog怎么保证持久性" class="headerlink" title="redolog怎么保证持久性"></a>redolog怎么保证持久性</h4><ul>
<li>WAL技术</li>
<li>顺序写</li>
<li>Checkpoint机制：MySQL会定期将内存中的数据刷新到磁盘，同时将最新的LSN（Log Sequence Number）记录到磁盘中，这个LSN可以确保redo log中的操作是按顺序执行的。在恢复数据时，系统会根据LSN来确定从哪个位置开始应用redo log。</li>
</ul>
<h4 id="binlog两阶段提交过程是怎样的？"><a href="#binlog两阶段提交过程是怎样的？" class="headerlink" title="binlog两阶段提交过程是怎样的？"></a>binlog两阶段提交过程是怎样的？</h4><ul>
<li>prepare阶段：将 XID（内部 XA 事务的 ID） 写入到 redo log，同时将 redo log 对应的事务状态设置为 prepare，然后将 redo log 持久化到磁盘（innodb_flush_log_at_trx_commit &#x3D; 1 的作用）；</li>
<li>commit阶段：把 XID 写入到 binlog，然后将 binlog 持久化到磁盘（sync_binlog &#x3D; 1 的作用），接着调用引擎的提交事务接口，将 redo log 状态设置为 commit，此时该状态并不需要持久化到磁盘，只需要 write 到文件系统的 page cache 中就够了，因为只要 binlog 写磁盘成功，就算 redo log 的状态还是 prepare 也没有关系，一样会被认为事务已经执行成功；</li>
</ul>
<h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><h4 id="mysql的explain有什么作用"><a href="#mysql的explain有什么作用" class="headerlink" title="mysql的explain有什么作用"></a>mysql的explain有什么作用</h4><p>查看sql的执行计划，主要用来分析sql语句的执行过程，比如有没有走索引，有没有外部排序，有没有索引覆盖等。</p>
<ul>
<li>possible_keys：表示可能用到的索引</li>
<li>keys：实际用到的索引</li>
<li>key_len：表示索引的长度</li>
<li>rows：表示扫描的行数</li>
<li>type：表示数据扫描的类型</li>
</ul>
<p>type字段就是描述了找到所需数据时使用的扫描方式是什么，常见的类型执行效率从低到高为：</p>
<ul>
<li>All（全表扫描）</li>
<li>index（全索引扫描）</li>
<li>range（索引范围扫描）：一般在where子句中使用&lt;，&gt;，in，between等关键词，只检索给定范围的行，属于范围查找。</li>
<li>ref（非唯一索引扫描）：表示采用了非唯一索引，或者是唯一索引的非唯一性前缀，返回数据可能是多条。因为虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。</li>
<li>eq_ref（唯一索引扫描）：使用主键或唯一索引时产生的访问方式，通常使用在多表联查中。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。</li>
<li>const（结果只有一条的主键或唯一索引扫描）：const 类型表示使用了主键或者唯一索引与常量值进行比较，比如 select name from product where id&#x3D;1。需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，const 是与常量进行比较，查询效率会更快，而 eq_ref 通常用于多表联查中</li>
</ul>
<h4 id="如果Explain用到的索引不正确，有什么办法干预？"><a href="#如果Explain用到的索引不正确，有什么办法干预？" class="headerlink" title="如果Explain用到的索引不正确，有什么办法干预？"></a>如果Explain用到的索引不正确，有什么办法干预？</h4><p>可以使用force index，强制走索引。</p>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> productName,buyPrice</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line">FORCE INDEX(idx_buyPrice)</span><br><span class="line"><span class="keyword">WHERE</span> buyPrice <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> buyPrice</span><br></pre></td></tr></table></figure>

<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="MySQL如何进行主从复制？"><a href="#MySQL如何进行主从复制？" class="headerlink" title="MySQL如何进行主从复制？"></a>MySQL如何进行主从复制？</h4><p>MySQL主从复制依赖于binlog，也就是记录MySQL的所有变化并以二进制形式保存在磁盘上。复制的过程就是将binlog中的数据从主库复制到从库上。</p>
<p>这个过程一般是异步的，也就是主库上执行事务操作的线程不会等待复制binlog的线程同步完成。</p>
<p>MySQL的集群复制简单来说可以分为三个阶段：</p>
<ul>
<li>写入binlog：主库写binlog日志，提交事务，并更新本地存储数据</li>
<li>同步binlog：把binlog复制到所有从库上，每个从库把binlog写道暂存日志上</li>
<li>回放binlog：更新存储引擎中的数据</li>
</ul>
<p>完成主从复制后，就可以在写数据时只写主库，读数据只读从库，这样即使写请求会锁表或者锁记录也不会影响读请求的执行。</p>
<h4 id="分表和分库是什么？有什么区别"><a href="#分表和分库是什么？有什么区别" class="headerlink" title="分表和分库是什么？有什么区别"></a>分表和分库是什么？有什么区别</h4><ul>
<li>分库是一种水平扩展数据库的技术，将数据按照一定的规则划分到多个独立的数据库中。每个数据库只负责存储部分数据，实现了数据的拆分和分布式存储。分库主要是为了解决并发连接过多，单机mysql扛不住的时候</li>
<li>分表是将单个数据库中的表拆分成多个表，每个表只负责存储一部分数据，这种数据的垂直划分能够提升查询效率，减轻单个表的压力。分表主要是为了解决单表数据量太大，导致查询性能下降的问题。</li>
</ul>
<p>分库和分表又分为水平拆分和垂直拆分：</p>
<ul>
<li>垂直分库：一般来说按照业务和功能的维度进行拆分，将不同业务数据分别放到不同的数据库中，核心理念 专库专用。按业务类型对数据分离，剥离为多个数据库，像订单、支付、会员、积分相关等表放在对应的订单库、支付库、会员库、积分库。垂直分库把一个库的压力分摊到多个库，提升了一些数据库性能，但并没有解决由于单表数据量过大导致的性能问题，所以就需要配合后边的分表来解决。</li>
<li>垂直分表：针对业务上字段比较多的大表进行的，一般是把业务宽表中比较独立的字段，或者不常用的字段拆分到单独的数据表中，是一种大表拆小表的模式。数据库它是以行为单位将数据加载到内存中，这样拆分以后核心表大多是访问频率较高的字段，而且字段长度也都较短，因而可以加载更多数据到内存中，减少磁盘IO，增加索引查询的命中率，进一步提升数据库性能。</li>
<li>水平分库：是把同一个表按一定规则拆分到不同的数据库中，每个库可以位于不同的服务器上，以此实现水平扩展，是一种常见的提升数据库性能的方式。这种方案往往能解决单库存储量及性能瓶颈问题，但由于同一个表被分配在不同的数据库中，数据的访问需要额外的路由工作，因此系统的复杂度也被提升了。</li>
<li>水平分表：是在同一个数据库内，把一张大数据量的表按一定规则，切分成多个结构完全相同表，而每个表只存原表的一部分数据。水平分表尽管拆分了表，但子表都还是在同一个数据库实例中，只是解决了单一表数据量过大的问题，并没有将拆分后的表分散到不同的机器上，还在竞争同一个物理机的CPU、内存、网络IO等。要想进一步提升性能，就需要将拆分后的表分散到不同的数据库中，达到分布式的效果。</li>
</ul>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis的数据结构有哪些？"><a href="#Redis的数据结构有哪些？" class="headerlink" title="Redis的数据结构有哪些？"></a>Redis的数据结构有哪些？</h3><p>五大基本数据类型：String，Hash（类似于哈希表），List（类似于双向链表），Set，ZSet（有序集合，使用score排序），新增数据类型：GEO，BitMap，HyperLoglog，Stream。</p>
<p>应用场景：</p>
<ul>
<li>字符串：缓存对象，常规技术，分布式锁，共享session信息</li>
<li>List：消息队列（注意：1、生产者需要自己实现全局唯一ID。2、不能以消费组形式消费数据）</li>
<li>Hash：缓存对象，购物车等</li>
<li>Set：聚合计算（并，差，交集），例如点赞，共同关注，抽奖活动等</li>
<li>ZSet：排序场景，例如排行榜，电话和姓名排序等。</li>
<li>BitMap：二值统计场景，比如签到，判断用户登录状态，连续签到用户总数等</li>
<li>HyperLogLog：海量数据基数统计场景，比如百万级网页UV计数等</li>
<li>GEO：存储地理位置信息</li>
<li>Stream：消息队列，相比基于List类型实现的消息队列，有两个特有的特性：自动生成全局唯一消息ID，支持以消费组的形式消费数据</li>
</ul>
<h4 id="ZSet底层如何实现的？"><a href="#ZSet底层如何实现的？" class="headerlink" title="ZSet底层如何实现的？"></a>ZSet底层如何实现的？</h4><p>底层数据结构由压缩列表或跳表实现的</p>
<ul>
<li>如果有序集合的元素个数小于128个，每个元素的值小于64字节时，使用压缩列表</li>
<li>否则使用跳表</li>
</ul>
<h4 id="跳表是怎么实现的"><a href="#跳表是怎么实现的" class="headerlink" title="跳表是怎么实现的"></a>跳表是怎么实现的</h4><p>跳表的结构由多层的链表构成，随着层级的递增，每一层的链表元素是下层元素的子集，查找元素时，会在多个层级上跳来跳去，查询的时间复杂度为O(logn)。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719804939236-89f12a47-b851-4d06-a5f3-399e1119db57.png" alt="img"></p>
<p>Redis的ZSet要同时存储元素和权重，对应跳表结构中sds类型的ele变量和double类型的score变量。</p>
<h4 id="跳表如何设置层高？"><a href="#跳表如何设置层高？" class="headerlink" title="跳表如何设置层高？"></a>跳表如何设置层高？</h4><p>跳表在创建节点时，会随机生成一个0-1范围的数，如果这个数小于0.25，那么层数就增加一层，然后继续生成下一个随机数，直到随机数的结果大于0.25结束，最终确定该节点的层数。</p>
<h4 id="Redis为什么使用跳表而不是B-树"><a href="#Redis为什么使用跳表而不是B-树" class="headerlink" title="Redis为什么使用跳表而不是B+树"></a>Redis为什么使用跳表而不是B+树</h4><ul>
<li>从内存占用上看，跳表更灵活，平衡树每个节点包含两个指针，而跳表平均每个节点包含1.33个指针。</li>
<li>做范围查找时，跳表比平衡树操作简单。跳表进行范围查找时，只需要找到范围的小值，然后对第一层链表进行若干步遍历即可，而平衡树在找到范围小值后，还需要进行中序遍历继续寻找不超过范围大值的节点。</li>
<li>实现难度：对平衡树进行增删改时，可能需要调整树的结构，逻辑复杂，而跳表的插入与删除只需要修改相邻节点的指针，操作简单又快速。</li>
</ul>
<h4 id="压缩列表怎么实现的"><a href="#压缩列表怎么实现的" class="headerlink" title="压缩列表怎么实现的"></a>压缩列表怎么实现的</h4><p>压缩列表是由连续内存块组成的顺序型数据结构，有点类似于数组。</p>
<p>表头有三个字段：</p>
<ul>
<li>zlbytes：记录整个压缩列表占用内存的字节数</li>
<li>zltail：记录列表尾部节点距离起始地址有多少字节</li>
<li>zllen：记录压缩列表包含多少节点。</li>
</ul>
<p>末尾有一个字段：</p>
<ul>
<li>zlend：标记压缩列表结束点，固定值为0xFF（十进制255）</li>
</ul>
<p>压缩列表查找第一个元素和最后一个元素可以通过表头字段直接定位，但查找其他元素就需要逐个查找了，因此压缩列表不适合存储过大的数据。</p>
<p>当我们往压缩列表中插入数据时，压缩列表就会根据数据类型是字符串还是整数，以及数据的大小，会使用不同空间大小的 prevlen 和 encoding 这两个元素里保存的信息，这种根据数据大小和类型进行不同的空间大小分配的设计思想，正是 Redis 为了节省内存而采用的</p>
<p>压缩列表的缺点是会发生连锁更新的问题，因此连锁更新一旦发生，就会导致压缩列表占用的内存空间要多次重新分配，这就会直接影响到压缩列表的访问性能</p>
<h4 id="介绍一下Redis的listpack"><a href="#介绍一下Redis的listpack" class="headerlink" title="介绍一下Redis的listpack"></a>介绍一下Redis的listpack</h4><p>redis5.0引入的新数据结构，目的是替代压缩列表，最大的特点是listpack中每个节点不再包含前一个节点的长度了，压缩列表每个节点正因为需要保存前一个节点的长度字段，就会有连锁更新的隐患。</p>
<p>listpack同样采用了压缩列表中的一些优秀设计：还是用一块连续的内存空间来紧凑地保存数据，并且为了节省内存开销，listpack节点会采用不同的编码方式保存不同大小的数据。</p>
<p>底层结构：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1719035634415-c436d60e-58a7-4dfc-9e69-db8e2f96d19c.png" alt="img"></p>
<ul>
<li>encoding：定义该元素的编码类型，会对不同长度的整数和字符串进行编码；</li>
<li>data：实际存放数据</li>
<li>len：encoding+data长度</li>
</ul>
<h4 id="Redis哈希表怎么扩容的"><a href="#Redis哈希表怎么扩容的" class="headerlink" title="Redis哈希表怎么扩容的"></a>Redis哈希表怎么扩容的</h4><p>类似于Java集合中HashMap的扩容机制，区别在于：redis哈希表创建的时候会创建两张哈希表，一张哈希表存储数据，另一张等待下一次rehash（没有分配空间），在redis哈希表扩容的时候有一处重要的地方，如果哈希表1在数据量非常大的情况下，将数据迁移至哈希表2的时候会涉及大量的数据拷贝，此时可能会对Redis造成阻塞，无法服务其他请求。</p>
<p>为了避免rehash迁移阻塞，redis采用了渐进式rehash，也就是分多次迁移数据，步骤如下：</p>
<ul>
<li>给哈希表2分配空间</li>
<li>在rehash期间，每次哈希表元素进行新增，删除，查找或者更新操作时，Redis除了会执行对应的操作，还会顺序将哈希表1中索引位置上的所有key-value迁移到哈希表2上。</li>
<li>随着处理客户端发起的哈希表操作请求数量越多，最终某个时间点会把哈希表1的所有key-value迁移到哈希表2，从而完成rehash操作。</li>
</ul>
<p>也就是说，在此期间如果要去哈希表中查找一条数据，先会在哈希表1查找，如果没有，再去哈希表2查找。</p>
<h4 id="String是使用什么存储的？为什么不用C语言中的字符串"><a href="#String是使用什么存储的？为什么不用C语言中的字符串" class="headerlink" title="String是使用什么存储的？为什么不用C语言中的字符串"></a>String是使用什么存储的？为什么不用C语言中的字符串</h4><p>使用SDS数据结构存储，结构如下：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/image-20240725232549832.png" alt="img"></p>
<p>结构中的每个成员变量分别为：</p>
<ul>
<li>len，记录了字符串长度，获取字符串长度时，时间复杂度为O(1)</li>
<li>alloc：分配给字符数组的空间长度，这样在修改字符串的时候，可以通过alloc-len计算出剩余的空间大小，可以用来判断空间是否满足修改需求，如果不满足的话，就会自动将SDS的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现缓冲区溢出的问题。</li>
<li>flags：用来表示不同类型的SDS，分别为<ul>
<li>sdshdr5</li>
<li>sdshdr8</li>
<li>sdshdr16</li>
<li>sdshdr32</li>
<li>sdshdr64</li>
</ul>
</li>
<li>buf[]：字符数组，用来保存实际数据，不仅可以保存字符串，也可以保存二进制数据。</li>
</ul>
<p>总的来说，Redis的SDS结构在原本字符数组上增加了三个元数据：len,alloc,flags，用来解决C语言字符串的缺陷。</p>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><h4 id="Redis为什么快？"><a href="#Redis为什么快？" class="headerlink" title="Redis为什么快？"></a>Redis为什么快？</h4><p>首先，单线程Redis的吞吐量高达10W&#x2F;秒。</p>
<ul>
<li>Redis为内存型数据库，大部分操作都在内存中完成，并且采用高效的数据结构，Redis的瓶颈可能是机器的内存或者网络带宽，而并非CPU</li>
<li>Redis采用单线程模型避免了多线程之间的竞争，省去了性能开销，还不会遇到死锁问题</li>
<li>Redis采用了I&#x2F;O多路复用模型处理大量的客户端Socket请求，I&#x2F;O多路复用机制是指一个线程处理多个I&#x2F;O流，也就是select&#x2F;epoll机制。简单来说，在Redis只运行单线程情况下，该机制允许内核中同时存在多个监听socket和已连接socket，内核会一直监听这些socket上的连接请求或数据请求。一旦有请求到达，就会交给Redis线程处理，这就实现了一个redis线程处理多个IO流的效果。</li>
</ul>
<h4 id="Redis哪些地方使用了多线程"><a href="#Redis哪些地方使用了多线程" class="headerlink" title="Redis哪些地方使用了多线程"></a>Redis哪些地方使用了多线程</h4><p>Redis单线程指的是接收客户端请求-&gt;解析请求-&gt;进行数据读写等操作-&gt;发送数据给客户端这个过程是由一个单线程（主线程）完成的，但Redis并不是单线程的，在Redis启动的时候，会启动后台线程（BIO）：</p>
<ul>
<li>Redis在2.6版本，会启动2个后台线程，分别处理关闭文件、AOF刷盘这两个任务</li>
<li>4.0版本之后，新增了一个新的后台线程，用来异步释放Redis内存，也就是Lazyfree线程。例如执行unlink key&#x2F;flushall async等命令，会把这些删除操作交给后台线程来执行，好处是不会导致Redis主线程卡顿。因此在删除一个大key的时候，不要使用DEL命令，会导致主线程卡顿，因此使用unlink更合适。</li>
</ul>
<p>Redis为关闭文件，AOF刷盘，释放内存这些操作创建单独的线程来处理，是因为这些任务的操作都是很耗时的，把这些任务交给主线程处理很容易出现阻塞。</p>
<p>在6.0版本之后，也采用了多个I&#x2F;O线程来处理网络请求，这是因为随着网络硬件性能的提升，Redis的瓶颈可能会出在网络I&#x2F;O的处理上。但命令的执行Redis仍然采用单线程处理</p>
<h4 id="Redis怎么实现IO多路复用"><a href="#Redis怎么实现IO多路复用" class="headerlink" title="Redis怎么实现IO多路复用"></a>Redis怎么实现IO多路复用</h4><p>Redis是单线程执行的，所有操作都是按照线性顺序处理的，但由于读写操作等待用户输入和输出都是阻塞的，为了解决这个问题，Redis采用了多路复用机制</p>
<p>多路指的是多个网络连接客户端，复用指的是复用同一个线程，来检查多个socket的就绪状态，在单个线程通过记录跟踪每一个socket（I&#x2F;O流）的状态来管理处理多个I&#x2F;O流。模型如下：</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1720433058791-94f03cb5-e89c-45ed-ba34-88a0dac99d98.png" alt="img"></p>
<ul>
<li>一个socket客户端与服务端连接时，会生成对应一个套接字描述符（文件描述符的一种），每一个socket网络连接其实都对应一个文件描述符</li>
<li>多个客户端与服务端连接时，Redis使用I&#x2F;O多路复用程序将客户端socket对应的FD注册到监听列表（一个队列）中。当客户端执行read，write等操作命令时，I&#x2F;O多路复用程序会将命令封装成一个事件，并绑定到对应的FD上</li>
<li>文件事件处理器使用I&#x2F;O多路复用模块同时监控多个文件描述符（FD）的读写情况，当accept、read、write和close文件事件产生时，文件事件处理器就会回调FD绑定的事件处理器进行处理相关命令操作。</li>
</ul>
<h4 id="Redis的网络模型是怎样的"><a href="#Redis的网络模型是怎样的" class="headerlink" title="Redis的网络模型是怎样的"></a>Redis的网络模型是怎样的</h4><p>6.0版本之前，使用的是单Reactor单线程模型，所有工作都在同一个进程内完成，所以实现起来比较简单，不需要考虑进程间通信，也不用担心多线程竞争。但这种方式不能充分利用多核CPU的性能，而且在Handler对象处理业务的时候，整个进程是无法处理其他连接事件的。</p>
<p>因此在6.0版本之后，Redis就将网络IO的处理改为多线程的方式了，但只有网络IO是多线程的，命令的执行还是采取单线程来处理。</p>
<h3 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h3><h4 id="如何实现Redis原子性"><a href="#如何实现Redis原子性" class="headerlink" title="如何实现Redis原子性"></a>如何实现Redis原子性</h4><p>Redis执行命令的时候是单线程来处理的，执行一条命令的时候是具备原子性的，如果要保证两条指令的原子性的话，可以考虑使用lua脚本，将多个操作写入一个lua脚本中，Redis会把整个lua脚本作为一个整体执行，在执行的过程中不会被其他命令打断，从而保证了Lua脚本中操作的原子性。</p>
<p>例如在分布式锁场景下，解锁期间涉及两个操作，先判断锁是不是自己的，是自己的才能删除锁，会通过lua脚本保证原子性。</p>
<h4 id="除了lua有没有其他操作也能保证原子性"><a href="#除了lua有没有其他操作也能保证原子性" class="headerlink" title="除了lua有没有其他操作也能保证原子性"></a>除了lua有没有其他操作也能保证原子性</h4><p>事务，如果Redis事务正常执行，没有发生错误，将MULTI和EXEC配合使用，就可以保证多个操作都完成。</p>
<p>如果事务发生错误了，就没办法保证原子性了。假设由两条指令，第一条指令出错了，而第二条指令正常执行，那事务并不会回滚，因为Redis中并没有提供回滚机制。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; LPOP mc</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; DECR key2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">1) (error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">2) (integer) 2023</span><br></pre></td></tr></table></figure>

<p>因此Redis的原子性只能在事务正常执行时保证，失败并不能保证原子性。</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="Redis有哪两种持久化方法，有什么优缺点"><a href="#Redis有哪两种持久化方法，有什么优缺点" class="headerlink" title="Redis有哪两种持久化方法，有什么优缺点"></a>Redis有哪两种持久化方法，有什么优缺点</h4><ul>
<li><p>RDB：类似于快照，将某一时刻的内存数据，以二进制的方式写入磁盘。AOF是需要把所有日志都执行一遍，一旦AOF日志非常多，势必会造成Redis恢复操作缓慢。</p>
<p>RDB提供了两个命令来生成RDB文件，分别是save和bgsave，区别就在于是否在主线程里执行。save在主线程，写入RDB文件时间太长，会阻塞主线程；bgsave是创建一个子线程来生成RDB文件。</p>
</li>
<li><p>AOF：类似于日志，每执行一次写操作，就把该命令追加到文件中。在Redis重启时，会读取该文件记录的命令，然后逐一执行命令恢复数据，Redis提供了三种写回硬盘的策略，在Redis.conf配置文件中的appendfsync配置项可以有以下3种参数可填：</p>
<ul>
<li>Always：每次执行完写操作命令，同步将AOF日志数据写回硬盘。优点是可靠性高，最大程度保证数据不丢失，但缺点也很明显，每个命令都要写回硬盘开销很大。</li>
<li>Everysec：每次执行完写操作命令，先将命令写入AOF文件的内核缓冲区，然后每隔一秒将缓冲区里的内容写回到磁盘。缺点就是如果宕机就会丢失1秒内的数据</li>
<li>No：不由Redis控制写回硬盘的时机，转交给操作系统控制写回的时机，也就是每次写操作命令执行完后，先将命令写入到AOF文件的内核缓冲区，再由操作系统决定何时将缓冲区内容写回硬盘。优点是性能好，但是宕机会丢失很多数据。</li>
</ul>
</li>
</ul>
<p>总的来说，RDB的优点就是文件体积小，备份和恢复的速度非常快，但在两次快照之间Redis服务器发生故障，会丢失这期间的数据。而AOF的数据完整性与可靠性保证的是最好的，但是频繁的为文件追加写入命令需要消耗更多的资源，而且AOF文件占用的磁盘空间也会很大，重新恢复数据时速度也会比较慢。</p>
<h3 id="缓存淘汰和过期删除"><a href="#缓存淘汰和过期删除" class="headerlink" title="缓存淘汰和过期删除"></a>缓存淘汰和过期删除</h3><h4 id="过期删除策略和内存淘汰策略有什么区别"><a href="#过期删除策略和内存淘汰策略有什么区别" class="headerlink" title="过期删除策略和内存淘汰策略有什么区别"></a>过期删除策略和内存淘汰策略有什么区别</h4><ul>
<li>内存淘汰策略是在内存满了的时候，redis会触发内存淘汰策略，淘汰一些不必要的内存资源，以腾出空间，来保存新的内容。</li>
<li>过期键删除策略是将已过期的键值删除，Redis采用的删除策略是惰性删除+定期删除</li>
</ul>
<h4 id="介绍一下内存淘汰策略"><a href="#介绍一下内存淘汰策略" class="headerlink" title="介绍一下内存淘汰策略"></a>介绍一下内存淘汰策略</h4><p>Redis内存淘汰策略共有八种，大体分为不进行数据淘汰和进行数据淘汰两类策略</p>
<p>不进行：</p>
<ul>
<li>noeviction（Redis3.0之后默认的淘汰策略）：当运行内存超过最大内存的时候，不淘汰任何数据，如果有新的数据写入，会报错通知禁止写入。</li>
</ul>
<p>进行淘汰：</p>
<ul>
<li>volatile-random：随机淘汰设置了过期时间的任意键值</li>
<li>volatile-ttl：优先淘汰更早过期的键值</li>
<li>volatile-lru：淘汰所有设置了过期时间的键值中，最久未使用的键值</li>
<li>volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值</li>
<li>allkeys-random：随意淘汰任意键值</li>
<li>allkeys-lru：淘汰整个键值中最久未使用的键值</li>
<li>allkeys-lfu：淘汰整个键值中最少使用的键值</li>
</ul>
<h4 id="介绍一下过期删除策略"><a href="#介绍一下过期删除策略" class="headerlink" title="介绍一下过期删除策略"></a>介绍一下过期删除策略</h4><p>Redis选择了惰性删除+定期删除这两种策略配合使用，以求在合理使用cpu时间和避免内存浪费之间取得平衡</p>
<p>惰性删除策略是Redis在访问或修改key之前，都会调用db.c文件中的expireIfNeeded函数进行过期检查，检查是否过期，如果过期，则删除该key，可以通过lazyfree_lazy_expire参数配置决定同步还是异步删除，然后返回null给客户端。没有过期就会返回正常的键值对给客户端</p>
<p>定期策略是每隔一段时间随机从数据库中取出一定数量的key（配置是20个）进行检查，并删除其中的过期key。Redis默认是每秒进行10次定期检查一次，同样也可以通过redis.conf对定期策略进行配置。</p>
<p>定期删除的流程：</p>
<ol>
<li>从过期字典中随机抽取20个key</li>
<li>删除已过期的key</li>
<li>如果过期的数量超过5个，也就是25%，则继续重复步骤一，直到比例小于25%，则停止继续删除等待下一轮再检查</li>
</ol>
<h4 id="为什么Redis过期不立即删除key"><a href="#为什么Redis过期不立即删除key" class="headerlink" title="为什么Redis过期不立即删除key"></a>为什么Redis过期不立即删除key</h4><p>在过期key比较多的情况下，删除过期key可能会占用相当一部分cpu时间，将这部分时间用于删除和当前任务无关的过期键上，会对服务器的响应时间和吞吐量造成影响。</p>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><h4 id="主从同步中的增量和完全同步怎么实现"><a href="#主从同步中的增量和完全同步怎么实现" class="headerlink" title="主从同步中的增量和完全同步怎么实现"></a>主从同步中的增量和完全同步怎么实现</h4><blockquote>
<p>完全同步</p>
</blockquote>
<ol>
<li>从服务器向主服务器发送SYNC命令请求开始同步</li>
<li>接收到SYNC命令后，主服务器会保存当前数据集的状态到临时的RDB文件中</li>
<li>主服务器将RDB文件发送给从服务器</li>
<li>从服务器接收到文件后，清空当前数据集，并下载RDB文件中的数据</li>
<li>在RDB文件生成和传输期间，主服务器会记录所有接收到的写命令到replication backlog buffer。</li>
<li>一旦RDB文件传输完成，主服务器会将replication backlog buffer中的命令发送给从服务器，从服务器会执行这些指令以保证数据一致性。</li>
</ol>
<blockquote>
<p>增量同步</p>
</blockquote>
<p>增量同步允许从服务器从断点处继续同步，而不是每次进行完全同步，它基于PSYNC命令，使用了运行ID（run ID）和复制偏移量（offset）</p>
<ul>
<li>从服务器恢复网络时，会发送psync命令给主服务器，此时psync命令里的offset参数不是-1；</li>
<li>主服务器收到该命令后，然后用CONTINUE响应命令告诉从服务器接下来采用增量复制的方式同步数据</li>
<li>然后主服务器将主从服务器断线，所执行的写命令发送给从服务器，然后从服务器执行这些命令。</li>
</ul>
<p>主服务器还需要知道将哪些增量数据发送给从服务器</p>
<ul>
<li>repl_backlog_buffer：是一个环形缓冲区，用于主从服务器断连后，从中找到差异的数据；</li>
<li>replication offset，标记上面那个缓冲区的同步进度，主从服务器都有各自的偏移量，主服务器使用master_repl_offset来记录自己写到的位置，从服务器使用slave_repl_offset来记录到自己读的位置。</li>
</ul>
<h4 id="哨兵机制的原理？"><a href="#哨兵机制的原理？" class="headerlink" title="哨兵机制的原理？"></a>哨兵机制的原理？</h4><p>在Redis主从读写架构分离中，如果主节点挂了，将没有从节点来服务客户端的写操作请求，也没有主节点给从节点进行数据同步了。</p>
<p>这时就出现了哨兵机制，它的作用是实现主从节点故障转移，会监测主节点是否存活，如果发现主节点挂掉了，它就会选举出一个从节点切换为主节点，并且把新主节点的相关信息通知给从节点和客户端。</p>
<h4 id="哨兵机制的选主节点的算法介绍一下"><a href="#哨兵机制的选主节点的算法介绍一下" class="headerlink" title="哨兵机制的选主节点的算法介绍一下"></a>哨兵机制的选主节点的算法介绍一下</h4><ol>
<li><p>故障节点主观下线</p>
<p>哨兵集群的每一个哨兵节点会定时对redis集群的所有节点发心跳包检测节点是否正常，如果监测不到节点回复心跳包，那么这个节点就会被哨兵主观下线</p>
</li>
<li><p>故障节点客观下线</p>
<p>该节点被一个sentinel节点标记为主观下线后并不会立即下线，还需要其他sentinel节点共同判断为主观下线才行，sentinel集群中超过quorum数量的sentinel节点认为该节点主观下线，这时就会客观下线。如果客观下线的是从节点，就没有任何操作了，如果是主节点，就需要重新选举一个节点升级为主节点。</p>
</li>
<li><p>哨兵集群选举Leader</p>
<p>每一个sentinel节点都可以成为leader，这时会请求其他sentinel节点选举自己为leader。被请求的sentinel节点如果没有同意过其他sentinel节点的选举请求，则同意该请求（选举票数+1）。</p>
<p>如果一个sentinel节点获得的选举票数达到Leader最低票数（quorum和节点数&#x2F;2+1的最大值），该节点就会被选举为leader，否则重新进行选举。</p>
</li>
<li><p>哨兵leader决定新主节点</p>
<p>当选出sentinel leader后，由leader从redis从节点中选择一个作为新的主节点</p>
<ol>
<li>过滤故障的节点</li>
<li>选择优先级slave-priority最大的从节点作为主节点，如不存在则继续</li>
<li>选择复制偏移量（数据写入量的字节，记录写了多少数据，主服务器会把偏移量同步给从服务器，当主从的偏移量一致，则数据是完全同步）最大的从节点作为主节点，如不存在则继续</li>
<li>选择runid最小的从节点作为主节点。</li>
</ol>
</li>
</ol>
<h4 id="redis的集群模式了解吗，有哪些优缺点？"><a href="#redis的集群模式了解吗，有哪些优缺点？" class="headerlink" title="redis的集群模式了解吗，有哪些优缺点？"></a>redis的集群模式了解吗，有哪些优缺点？</h4><p>Redis集群方案采用哈希槽，来处理数据和节点之间的映射关系。在redis集群方案中，一个切片集群共有16384个哈希槽，这些哈希槽类似于数据分区，每个键值对都会根据它的key，被映射到一个哈希槽中，具体步骤分为以下两步：</p>
<ul>
<li>根据键值对的key，按照CR16算法计算出一个16bit的值。</li>
<li>再用16bit值对16384取模，得到0~16383范围内的模数，每个模数代表一个相应编号的哈希槽。</li>
</ul>
<p>然后把哈希槽映射到具体的redis节点上，有以下两种方案：</p>
<ul>
<li>平均分配：在使用cluster create命令创建Redis集群时，Redis会自动把所有哈希槽平均分布到集群节点上。比如集群有9个节点，则每个节点上槽的个数为16384&#x2F;9个</li>
<li>手动分配：可以使用cluster meet命令手动建立节点间的连接，组成集群，再使用cluster addslots命令，指定每个节点上的哈希槽个数。</li>
</ul>
<p>优点：</p>
<ul>
<li>高可用性：节点之间采用主从复制机制，可以保证数据的持久性和容错能力，哪怕一个节点挂掉，整个集群还可以继续工作</li>
<li>高性能：集群采用分片技术，将数据分散到多个节点，从而提高读写性能。当业务访问量大到Redis单机无法满足时，可以通过添加节点来增加集群的吞吐量。</li>
<li>扩展性好：可以根据实际需求动态增加或减少节点，从而实现可扩展性。集群模式中某些节点还可以作为代理节点，自动转发请求，增加数据模式的灵活度和可定制性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>部署和维护较复杂：Redis集群的部署和维护需要考虑到分片规则、节点的布置、主从配置以及故障处理等多个方面，需要较强的技术支持，增加了节点异常处理的复杂性和成本。</li>
<li>集群同步问题：当某些节点失败或者网络出故障，集群中数据同步的问题也会出现。数据同步的复杂度和工作量随着节点的增加而增加，同步时间也较长，导致一定的读写延迟。</li>
<li>数据分片限制：Redis集群的数据分片也限制了一些功能的实现，如在一个key上修改多次，可能会因为该key所在的节点位置变化而失败。此外，由于将数据分散存储到各个节点，某些操作不能跨节点实现，不同节点之间的一些操作需要额外注意。</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="为什么使用Redis"><a href="#为什么使用Redis" class="headerlink" title="为什么使用Redis"></a>为什么使用Redis</h4><ul>
<li>高性能：假如用户第一次访问 MySQL 中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据缓存在 Redis 中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了，操作 Redis 缓存就是直接操作内存，所以速度相当快。</li>
<li>高并发：单台设备的 Redis 的 QPS（Query Per Second，每秒钟处理完请求的次数） 是 MySQL 的 10 倍，所以直接访问Redis能够承受的请求是远远大于访问mysql的，可以考虑把数据库中的部分数据转移到缓存中去，在缓存命中的情况下可以直接请求Redis。</li>
</ul>
<h4 id="为什么Redis比MySQL快"><a href="#为什么Redis比MySQL快" class="headerlink" title="为什么Redis比MySQL快"></a>为什么Redis比MySQL快</h4><ul>
<li>Redis是基于内存存储结构的NOSQL数据库，由于内存存储速度快，Redis能够更快地读取和写入数据，而MySQL需要频繁的磁盘IO操作。</li>
<li>Redis是基于键值对存储数据的，支持简单的数据结构，而MySQL需要定义表结构，索引等复杂的关系型数据结构，Redis采用的是哈希表结构，查询时间复杂度是O(1)，而mysql是b+树，复杂度为O(logn)。</li>
<li>线程模型：Redis采用的是单线程模型，避免了多线程的竞争，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁的问题</li>
</ul>
<h4 id="高并发场景下，Redis单节点-MySQL单节点能有多大的并发量"><a href="#高并发场景下，Redis单节点-MySQL单节点能有多大的并发量" class="headerlink" title="高并发场景下，Redis单节点+MySQL单节点能有多大的并发量"></a>高并发场景下，Redis单节点+MySQL单节点能有多大的并发量</h4><ul>
<li>如果缓存命中，4核8gb内存的配置，redis可以支撑10w的QPS</li>
<li>如果没有命中，mysql只能支持5000左右的QPS</li>
</ul>
<h4 id="Redis的应用场景有哪些？"><a href="#Redis的应用场景有哪些？" class="headerlink" title="Redis的应用场景有哪些？"></a>Redis的应用场景有哪些？</h4><ul>
<li>缓存：最常用的场景，将热门数据存储到缓存中，可以极大地提高访问速度，减轻数据库负载。</li>
<li>排行榜：使用zset用于实现排行榜和排名系统，可以方便地进行数据排序和排名</li>
<li>分布式锁：使用Redis实现分布式锁，确保多个进程或服务之间的数据操作的原子性和一致性。</li>
<li>计数器：由于Redis的原子性和高性能，它非常适合用于实现计数器和统计数据的存储，如网站访问量统计、点赞统计等。</li>
<li>消息队列：Redis的发布订阅功能使其成为一个轻量级的消息队列，它可以用来实现发布和订阅模式，以便实时处理消息。</li>
</ul>
<h4 id="Redis支持并发操作吗"><a href="#Redis支持并发操作吗" class="headerlink" title="Redis支持并发操作吗"></a>Redis支持并发操作吗</h4><p>Redis单个命令能够保证原子性，这对于并发操作非常重要。Redis可以将一系列的操作放入一个事务中执行，使用MULTI，EXEC，DISCARD以及WATCH等命令管理事务。这样可以确保一系列操作的原子性。</p>
<h4 id="Redis分布式锁怎么实现的"><a href="#Redis分布式锁怎么实现的" class="headerlink" title="Redis分布式锁怎么实现的"></a>Redis分布式锁怎么实现的</h4><p>分布式锁是在分布式环境下控制并发访问的一种机制，控制某个资源在同一时刻只能被一个应用所使用。</p>
<p>Redis本身可以被多个客户端共享访问，可以用来保存分布式锁。Redis的SETNX命令可以用来实现分布式锁：如果key不存在，则显示插入成功，可以用来表示加锁成功。如果key存在，表示加锁失败。</p>
<p>在设置分布式锁时，如果一个客户端拿到锁后发生异常，导致锁一直无法被释放，因此还需要设置过期时间。并且在设置锁的变量值时，每个客户端设置的是一个唯一值，用于标识客户端，防止在释放锁时出现误释放操作。</p>
<p>在释放锁涉及两个操作，一个是检查锁的变量值也就是唯一标识符是否与自己的值相等，如果相等就会删除该键值对，也就是释放锁。要保证两个操作的原子性，还需要用到Lua脚本。</p>
<h4 id="Redis的大key问题是什么？"><a href="#Redis的大key问题是什么？" class="headerlink" title="Redis的大key问题是什么？"></a>Redis的大key问题是什么？</h4><p>指的是某个Key对应的value值所占的内存空间比较大，导致Redis的性能下降，内存不足，数据不均衡以及主从同步延迟等问题。</p>
<p>通常认为字符串类型的Key对应的value值占用空间大于1M，或者集合类型的k元素数量超过1w个，就算是大key。但评判为大key的标准并不是一成不变的，在高并发低延迟的场景下，仅10kb就已经算是大key了，因此要根据实际的业务场景来确立合理的大key阈值。</p>
<h4 id="大key会造成什么问题？"><a href="#大key会造成什么问题？" class="headerlink" title="大key会造成什么问题？"></a>大key会造成什么问题？</h4><ul>
<li>内存占用过高：大key内存占用过高，可能导致可用内存不足，从而触发内存淘汰策略。极端情况下可能会导致内存耗尽，Redis实例崩溃</li>
<li>性能下降：大Key会占用大量内存空间，导致内存碎片增加，进而影响Redis的性能。对于大key的增删改查操作都会消耗更多的CPU时间和内存资源，进一步降低系统性能。</li>
<li>阻塞其他操作：某些对大Key的操作可能会导致Redis实例阻塞。例如，使用DEL命令删除一个大Key时，可能会导致Redis实例在一段时间内无法响应其他客户端请求，从而影响系统的响应时间和吞吐量。</li>
<li>网络拥塞：每次获取大key产生的网络流量较大，可能造成机器或局域网的带宽被打满，同时波及其他服务。例如：一个大key占用空间是1MB，每秒访问1000次，就有1000MB的流量。</li>
<li>主从同步延迟：当Redis实例配置了主从同步时，大Key可能导致主从同步延迟。由于大Key占用较多内存，同步过程中需要传输大量数据，这会导致主从之间的网络传输延迟增加，进而影响数据一致性。</li>
<li>数据倾斜：在Redis集群模式中，某个数据分片的内存使用率远超其他数据分片，无法使数据分片的内存资源达到均衡。另外也可能造成Redis内存达到maxmemory参数定义的上限导致重要的key被逐出，甚至引发内存溢出。</li>
</ul>
<h4 id="如何解决大key问题"><a href="#如何解决大key问题" class="headerlink" title="如何解决大key问题"></a>如何解决大key问题</h4><ul>
<li>对大key进行拆分</li>
<li>对大key进行删除：某些大key并不适合使用redis进行存储，应将其转移到其他存储位置，并在Redis中异步删除此数据</li>
<li>监控Redis的内存水位：可以通过监控系统设置合理的Redis内存报警阈值进行提醒，例如Redis内存使用率超过70%、Redis的内存在一小时内增长率超过20%</li>
<li>对过期数据进行定期清理，堆积大量过期数据会造成大key的产生，例如在对hash数据类型中以增量的形式不断写入大量数据而忽略了数据的时效性。可以通过定时任务的方式对失效数据进行处理。</li>
</ul>
<h4 id="什么是热Key，如何解决热key问题"><a href="#什么是热Key，如何解决热key问题" class="headerlink" title="什么是热Key，如何解决热key问题"></a>什么是热Key，如何解决热key问题</h4><p>一个key被请求频率很高，例如：</p>
<ul>
<li>QPS集中在特定的key：redis实例的总QPS为10000，而其中一个key的每秒访问率达到了7000</li>
<li>带宽使用率集中在特定的key：对一个拥有上千个成员且总大小为1MB的Hash key每秒发送大量的Hash get请求</li>
<li>CPU使用时间占比集中在特定的key：对一个拥有数万个成员（ZSET类型）每秒发送大量的ZRANGE请求。</li>
</ul>
<p>解决热key问题有以下思路：</p>
<ul>
<li>在Redis集群架构中对热key进行复制，例如将热key foo复制出三个内容完全一样的key并命名为foo2、foo3、foo4，将这三个key迁移到其他数据分片来解决单个数据分片的热key压力。</li>
<li>使用读写分离架构，如果热key的产生来自于读请求，可以将实例改造为读写分离架构来降低每个数据分片的读请求压力。</li>
</ul>
<h4 id="Redis和MySQL如何保证数据一致性"><a href="#Redis和MySQL如何保证数据一致性" class="headerlink" title="Redis和MySQL如何保证数据一致性"></a>Redis和MySQL如何保证数据一致性</h4><p>读数据时，采取旁路缓存策略，如果缓存未命中，会从数据库中加载数据到缓存中，对于写数据，更新数据库后，再删除缓存。</p>
<p>缓存是通过牺牲强一致性来提高性能的，如果遇到需要数据库和缓存数据保持强一致性时（如银行系统），就不适合使用缓存。因为使用缓存虽然提升了性能，但是会有数据更新的延迟，且设置缓存还需要设置过期时间，过短或者过长都不好。</p>
<p>可以通过一些方案来保证最终一致性的，比如消息队列方案，以及canal+消息队列方案</p>
<blockquote>
<p>消息队列方案</p>
</blockquote>
<p>将删除缓存的操作加入到消息队列中，由消费者来操作数据。</p>
<ul>
<li>如果应用删除缓存失败：可以从消息队列中重新读取数据，然后再次删除缓存，这个就是重试机制。当然，如果重试超过一定次数仍未成功，就需要向业务层发送错误信息了</li>
<li>删除缓存成功后，就需要把数据从消息队列中移除，避免重复操作。</li>
</ul>
<p>这种方案对于原先已经架构成熟的系统来说十分麻烦，因为会造成许多业务代码的入侵。</p>
<blockquote>
<p>订阅mysql binlog，再操作缓存</p>
</blockquote>
<p>先更新数据库，再删除缓存，第一步操作就是更新数据库，那么更新数据库成功就会产生一条变更日志在binlog中。此时就可以通过订阅binlog日志拿到具体要操作的数据，然后再执行缓存删除，阿里巴巴开源的Canal中间件就是基于这个实现的。</p>
<p>Canal模拟MySQL的主从复制的交互协议，把自己伪装成一个MySQL从节点，向MySQL主节点发送dump请求，MySQL收到请求后就会开始推送binlog给Canal，Canal解析binlog字节流之后，转换为便于读取的数据化结构，供下游程序订阅使用。</p>
<p>将binlog日志采集发送到MQ队列中，然后编写一个简单的缓存删除消息者订阅binlog日志，根据更新log删除缓存，并且通过ACK机制确认处理这条更新log，保证数据一致性。</p>
<h4 id="缓存雪崩、击穿、穿透是什么？如何解决？"><a href="#缓存雪崩、击穿、穿透是什么？如何解决？" class="headerlink" title="缓存雪崩、击穿、穿透是什么？如何解决？"></a>缓存雪崩、击穿、穿透是什么？如何解决？</h4><ul>
<li><p>雪崩：当大量缓存在同一时间过期或者Redis故障宕机时，如果此时由大量的请求无法在Redis中处理，就会去访问数据库，导致数据库的压力骤增，严重的情况甚至会造成数据库宕机，从而形成一系列连锁反应造成整个系统崩溃。</p>
<p>解决方案：</p>
<ul>
<li>均匀设置过期时间，在对缓存设置过期时间时加上一个随机数，这样就保证数据不会在同一时间过期</li>
<li>互斥锁：当业务线程在处理用户请求时，如果发现访问的数据不在Redis中，就加个互斥锁，保证同一时间内只有一个请求来构建缓存，当缓存构建完毕时再释放锁，在设置互斥锁的时候同样要加过期时间防止长时间阻塞导致死锁。</li>
<li>后台更新缓存：业务线程不再负责更新缓存，缓存也不设置有效期，而是让缓存永久有效，并将更新缓存的工作交给后台线程定时更新。</li>
</ul>
</li>
<li><p>击穿：某个热点数据过期了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易被高并发的请求冲垮。</p>
<p>解决方案：</p>
<ul>
<li>互斥锁：保证同一时间只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或默认值。</li>
<li>不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间。</li>
</ul>
</li>
<li><p>穿透：当用户访问的数据既不在缓存中也不在数据库中，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。如果有大量这样的请求到来时，数据库的压力骤增。</p>
<ul>
<li>非法请求的限制：当有大量恶意请求访问不存在的数据时，也会发生缓存穿透，因此在API入口就需要判断请求参数是否合理，是否含有非法值，请求字段是否存在，避免进一步访问缓存和数据库。</li>
<li>缓存空值和默认值：当线上业务发生缓存穿透现象时，可以针对查询的数据在缓存中设置一个空值或者默认值，这样后续请求就可以在缓存中获取到结果，返回给用户，而不会继续查数据库。</li>
<li>布隆过滤器：在写入数据库时，使用布隆过滤器做个标记，在用户请求到来时，业务线程确认缓存失效后，可以通过查询布隆过滤器快速判断数据是否存在，如果不存在就不用查询数据库来判断数据是否存在。即使发生了穿透大量请求只会查询Redis和布隆过滤器，此外Redis自己也是支持布隆过滤器的。</li>
</ul>
</li>
</ul>
<h4 id="布隆过滤器的原理？"><a href="#布隆过滤器的原理？" class="headerlink" title="布隆过滤器的原理？"></a>布隆过滤器的原理？</h4><p>布隆过滤器在写入数据库数据时会在过滤器中做个标记，这样下次查询数据是否在数据库时，只需要查询布隆过滤器，如果查询数据没有被标记，说明不在数据库中，过滤器通过以下操作完成标记：</p>
<ol>
<li>使用N个哈希函数分别对数据做哈希计算，得到N个哈希值</li>
<li>将第一步得到的N个哈希值对位图数组的长度取模，得到每个哈希值在位图数组的对应位置。</li>
<li>将每个哈希值在位图数组的对应位置的值设置为1。</li>
</ol>
<p>例如：<img src="https://cdn.xiaolincoding.com//picgo/1719903580960-2490c9c0-616b-4b11-a290-4891c2d7511a.png" alt="img"></p>
<p>在数据库写入数据x后，会被三个哈希函数分别计算出三个哈希值，然后取模结果为1，4，6并设置值为1，下一次要查询数据是否在数据库时，通过检查布隆过滤器的1，4，6是否都为1，只要有一个不为1，那么就认为数据x不在数据库中。</p>
<p>布隆过滤器是基于哈希函数实现查找的，会存在哈希冲突的情况，也就是会误判，不过布隆过滤器查询到数据存在，数据库中不一定存在，如果过滤器不存在，数据库中一定不存在。</p>
<h4 id="如何设计并发场景处理高并发以及超卖问题"><a href="#如何设计并发场景处理高并发以及超卖问题" class="headerlink" title="如何设计并发场景处理高并发以及超卖问题"></a>如何设计并发场景处理高并发以及超卖问题</h4><blockquote>
<p>数据库层面解决：</p>
</blockquote>
<p>使用select  … for update给数据行加锁，此时其他线程可以使用select语句，但如果也是用for update加锁，或者使用delete都会被阻塞，直到前面的线程提交事务，其他排在后面的线程才能获取到锁</p>
<p>这种方案性能比较差，高并发情况下可能还因为获取不到数据库的连接或者因为超时等待报错。</p>
<blockquote>
<p>分布式锁+分段缓存</p>
</blockquote>
<p>把数据分成很多个段，每个段是一个单独的锁，所以多个线程过来并发修改数据的时候，可以并发的修改不同段的数据。假设场景：假如现在商品有100个库存，在redis存放5个库存key，用户下单时对用户id进行%5计算，看落在哪个redis的key上，就去取哪个，这样每次就能够处理5个进程请求。</p>
<p>这种方案可以解决同一个商品在多用户同时下单的情况，但有个坑需要解决：当某段锁的库存不足，一定要实现自动释放锁然后换下一个分段库存再次尝试加锁处理，此种方案复杂比较高。</p>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><h4 id="网络OSI模型和TCP-IP模型分别介绍一下"><a href="#网络OSI模型和TCP-IP模型分别介绍一下" class="headerlink" title="网络OSI模型和TCP&#x2F;IP模型分别介绍一下"></a>网络OSI模型和TCP&#x2F;IP模型分别介绍一下</h4><blockquote>
<p>OSI七层模型</p>
</blockquote>
<p>为了使得多种设备能通过网络相互通信，和为了解决各种不同设备在网络互联中的兼容性问题，国际标准化组织制定了开放式系统互联通信参考模型，也就是OSI模型。</p>
<p><img src="https://cdn.xiaolincoding.com//picgo/1721097268006-12c71992-11b3-4a8e-9d05-35ad3e0ab86e.png" alt="img"></p>
<p>每一层职能都不同，如下：</p>
<ul>
<li>应用层：负责给应用程序提供统一的接口</li>
<li>表示层：负责把数据转换成兼容另一个系统能识别的格式</li>
<li>会话层：负责建立、管理和终止表示层实体之间的通信会话；</li>
<li>传输层：负责端到端的数据传输</li>
<li>网络层：负责数据的路由、转发、分片</li>
<li>数据链路层：负责数据的封帧和差错检测，以及MAC寻址</li>
<li>物理层：负责在物理网络中传输数据帧</li>
</ul>
<p>OSI模型实在太复杂，提出的也只是概念理论上的分层，并没有提供具体的实现方案。而比较常见也比较实用的是四层模型，即TCP&#x2F;IP网络模型。</p>
<blockquote>
<p>TCP&#x2F;IP模型</p>
</blockquote>
<p>TCP&#x2F;IP协议被组织成四个概念层，其中有三层对应于ISO参考模型中的相应层。TCP&#x2F;IP协议族并不包含物理层和数据链路层，因此它不能独立完成整个计算机网络系统的功能，必须与许多其他的协议协同工作。TCP&#x2F;IP 网络通常是由上到下分成 4 层，分别是应用层，传输层，网络层，网络接口层。</p>
<ul>
<li>应用层：支持HTTP、SMTP等最终用户进程</li>
<li>传输层：处理主机到主机的通信（TCP、UDP）</li>
<li>网络层：寻址和路由数据包（IP协议）</li>
<li>链路层：通过网络的物理电线、电缆或无线信道移动比特</li>
</ul>
<h4 id="网络为什么要分层？"><a href="#网络为什么要分层？" class="headerlink" title="网络为什么要分层？"></a>网络为什么要分层？</h4><ul>
<li>分层的目的是为了降低耦合，各层相互独立之后，上层可以不关心下层的实现，只关心下层提供的接口服务，有利于排查网络问题，能更精细定位问题所在哪一层。</li>
<li>而且分层之后层一层之间不会产生关联性，不会因为某个层的改动，影响了其他层，比如我们应用层的 HTTP 协议，从 HTTP1.1 升级到 HTTP2.0 的时候，并不会对传输层、网络层等有影响，或者网络层的IPv4协议升级为 IPv6协议的时候，也不会影响应用层、传输层。</li>
</ul>
<h4 id="输入网址后，期间发生了什么"><a href="#输入网址后，期间发生了什么" class="headerlink" title="输入网址后，期间发生了什么"></a>输入网址后，期间发生了什么</h4><ul>
<li>解析URL：解析出域名，资源路径，端口等信息，然后构造HTTP请求报文</li>
<li>域名解析：将域名解析为IP地址，会先查系统缓存是否有域名信息，如果有就返回IP地址，没有就会查看本地系统host文件有没有域名信息，如果有就返回IP地址，如果没有就去查本地DNS服务器，如果本地DNS服务器缓存中有域名信息，就返回IP地址，否则本地DNS服务器分别去根域名服务器-&gt;顶级域名服务器-&gt;权威域名服务器询问，最后拿着返回的IP交给浏览器。</li>
<li>由于HTTP是基于TCP传输的，所以在发送HTTP请求之前，需要进行三次握手，在客户端发送第一次握手的时候，TCP头部会填上SYN标记位，同时填上目标端口和源端口信息。源端口是浏览器随机生成的，目标端口会看是HTTP还是HTTPS的，http默认端口为80，https默认端口位443。</li>
<li>然后到网络层，会加上IP头，同时填上目标IP地址和源IP地址。</li>
<li>然后到数据链路层，会通过ARP协议，获取路由器的MAC地址，然后会加上MAC头，填上目标MAC地址和源MAC地址。</li>
<li>然后到物理层之后，直接把数据包转发给路由器，路由器再通过下一跳，最终找到目标服务器，然后目标服务器收到客户的SYN报文后，会响应第二次握手</li>
<li>当双方都完成三次握手后，如果是HTTP协议，客户端就会将HTTP请求发送给目标服务器；如果是HTTPS协议，客户端还要和服务端进行TLS四次握手。</li>
<li>目标服务器收到 HTTP 请求消息后，就返回 HTTP 响应消息，浏览器会对响应消息进行解析渲染，呈现给用户。</li>
</ul>
<h4 id="DNS域名解析使用了什么协议？"><a href="#DNS域名解析使用了什么协议？" class="headerlink" title="DNS域名解析使用了什么协议？"></a>DNS域名解析使用了什么协议？</h4><p>在DNS中，域名解析请求和响应都是基于UDP进行传输的</p>
<p>UDP是一种无连接的传输层协议，它提供了一种简单的传输机制，适用于对实时性要求较高的应用场景。DNS使用UDP协议进行域名解析是因为域名解析通常是短小而频繁的请求，UDP的无连接特性可以减少建立和断开连接的开销，并提高解析的效率。</p>
<p>UDP对于TCP的缺点是没办法保证数据的可靠传输，针对这个缺陷，可以在应用层实现一个超时重传机制，如果域名解析请求在一定时间内没收到响应，那么就重发域名解析请求。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><h4 id="应用层有哪些协议？"><a href="#应用层有哪些协议？" class="headerlink" title="应用层有哪些协议？"></a>应用层有哪些协议？</h4><p>HTTP、HTTPS、CDN、DNS、FTP。</p>
<h4 id="HTTP协议的特点有哪些？"><a href="#HTTP协议的特点有哪些？" class="headerlink" title="HTTP协议的特点有哪些？"></a>HTTP协议的特点有哪些？</h4><ul>
<li>基于文本：http的消息是基于文本形式传输，易于阅读和调试</li>
<li>可扩展性：http协议本身不限制数据的内容和格式，可以通过扩展头部、方法等来支持新的功能</li>
<li>灵活性：HTTP支持不同的数据格式（如HTML、JSON、XML等），适用于多种场景。</li>
<li>请求应答模式：HTTP是请求应答模式，请求方先发起连接和请求，是主动的，而应答方只有在收到请求的时候才会应答，否则没有任何动作。</li>
<li>无状态：HTTP每个请求是独立的，服务器不会保留当前HTTP请求的状态信息，需要通过其他手段（session、cookie）来维护状态。</li>
</ul>
<h4 id="HTTP报文有哪些部分"><a href="#HTTP报文有哪些部分" class="headerlink" title="HTTP报文有哪些部分"></a>HTTP报文有哪些部分</h4><p>请求报文：</p>
<ul>
<li>请求行：包含请求方法、请求目标(URL或URI)和HTTP协议版本</li>
<li>请求头部：包含关于请求的附加信息，如Host、user-agent、Content-Type等</li>
<li>空行：请求头部和请求体之间用空行分隔</li>
<li>请求体：可选，包含请求数据，通常用于POST请求等需要传输数据的情况</li>
</ul>
<p>响应报文：</p>
<ul>
<li>状态行：包含HTTP协议版本、状态码和状态信息</li>
<li>响应头部：包含关于响应的附加信息，如Content-type、Content-Length等</li>
<li>空行：响应头部和响应体之间用空行分隔</li>
<li>响应体：包含响应的数据，通常是服务器返回的HTML、JSON等内容。</li>
</ul>
<h4 id="哪些HTTP方法是安全或者幂等的？"><a href="#哪些HTTP方法是安全或者幂等的？" class="headerlink" title="哪些HTTP方法是安全或者幂等的？"></a>哪些HTTP方法是安全或者幂等的？</h4><p>幂等：指执行一次和执行多次的影响是相同的，这些执行操作不会影响系统状态。</p>
<ul>
<li>GET和HEAD是安全且幂等的，因为它们是只读操作，只要开发者遵循规范要求的去处理请求，无论GET和HEAD多少次，服务器上的数据都是安全的</li>
<li>POST&#x2F;DELETE&#x2F;PUT这些方法都会增删改服务器上的资源，因此不安全</li>
<li>DELETE&#x2F;PUT方法都是幂等的，因为DELETE多次删除资源，效果都是资源不存在，PUT多次更新数据，结果都是一样的。</li>
<li>POST不是幂等的，因为多次POST请求，会创建多个资源，所以不是幂等的。</li>
</ul>
<h4 id="HTTP常用的状态码？"><a href="#HTTP常用的状态码？" class="headerlink" title="HTTP常用的状态码？"></a>HTTP常用的状态码？</h4><p>分为五大类：</p>
<ul>
<li>1xx类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少</li>
<li>2xx类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。</li>
<li>3xx类状态码表示客户端请求的资源发生了变动，需要客户端用新的URL重新发送请求获取资源，也就是重定向</li>
<li>4xx类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。</li>
<li>5xx类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。</li>
</ul>
<p>常见的有：</p>
<ul>
<li>200：请求成功</li>
<li>404：无法找到页面，405：请求的方法类型不支持</li>
<li>301：永久重定向，302：临时重定向</li>
<li>500：服务器内部出错。</li>
</ul>
<h4 id="什么时候会出现502错误码？"><a href="#什么时候会出现502错误码？" class="headerlink" title="什么时候会出现502错误码？"></a>什么时候会出现502错误码？</h4><p>如果客户端访问服务器是通过nginx来反向代理到应用服务器，那么如果应用服务器出现了故障，导致nginx无法从应用服务器获取到响应，就会返回502给客户端</p>
<h4 id="有个服务出现了504，这个服务出现了什么问题？"><a href="#有个服务出现了504，这个服务出现了什么问题？" class="headerlink" title="有个服务出现了504，这个服务出现了什么问题？"></a>有个服务出现了504，这个服务出现了什么问题？</h4><p>504是网关超时错误，通常是nginx将请求代理到后端应用时，后端应用没有在规定时间内返回数据，需要开发检查下应用那块有什么耗时的操作，比如是否出现了sql慢查询，接口是否发生死循环，死锁等问题，然后后端服务器系统负载高不高。</p>
<h4 id="HTTP返回状态301-302分别是什么？"><a href="#HTTP返回状态301-302分别是什么？" class="headerlink" title="HTTP返回状态301 302分别是什么？"></a>HTTP返回状态301 302分别是什么？</h4><ul>
<li>301表示永久重定向，说明请求的资源已经不在了，需要改用新的URL再次访问。</li>
<li>302代表临时跳转，例如URL地址A向URL地址B上跳转，但这并不是永久性的，在经过一段时间后，URL地址A还可能向URL地址C上跳转。</li>
</ul>
<h4 id="HTTP是长连接还是短连接？"><a href="#HTTP是长连接还是短连接？" class="headerlink" title="HTTP是长连接还是短连接？"></a>HTTP是长连接还是短连接？</h4><p>HTTP1.0虽然支持长连接，但是默认是短连接，从HTTP1.1之后都是默认长连接了</p>
<h4 id="长连接和短连接的区别？"><a href="#长连接和短连接的区别？" class="headerlink" title="长连接和短连接的区别？"></a>长连接和短连接的区别？</h4><p>短连接每次通信请求都需要建立新的连接，请求完成后立即关闭连接。这样每次请求都需要建立连接和释放连接，会增加通信开销和延迟</p>
<p>长连接在通信过程中保持连接的持续性，多次请求可以共享同一个连接。在长连接中，客户端和服务端建立连接后可以进行多次请求和响应，减少了连接建立和释放的开销，提高了通信效率。</p>
<h4 id="HTTP1-0和1-1的区别？"><a href="#HTTP1-0和1-1的区别？" class="headerlink" title="HTTP1.0和1.1的区别？"></a>HTTP1.0和1.1的区别？</h4><p>长连接：HTTP1.1默认的连接是长连接，而1.0默认的是短连接</p>
<p>请求管道化：HTTP&#x2F;1.1 支持请求管道传输（pipline） 的方式，HTTP&#x2F;1.0 不支持这个模式，HTTP&#x2F;1.0 请求和响应必须是串行的，当一个请求和它响应完成之后，才能发送下一个请求，而 HTTP&#x2F;1.1 由于支持管道传输方式，因此可以并发发送HTTP请求，能够提高HTTP请求的效率，但是HTTP响应还是得按顺序响应，只有HTTP&#x2F;2.0 实现了 HTTP 请求和响应的并发传输的能力。</p>
<p>host字段：HTTP1.1新增了 host 字段， 通过Host头部字段，一个物理服务器可以承载多个域名或站点。</p>
<h4 id="1-1和2-0的区别？"><a href="#1-1和2-0的区别？" class="headerlink" title="1.1和2.0的区别？"></a>1.1和2.0的区别？</h4><p>我认为 HTTP&#x2F;1.1 和 HTTP&#x2F;2.0 最大的区别在于，HTTP&#x2F;1.1无法实现请求和响应的并发传输，而 HTTP&#x2F;2.0 能够实现请求和响应的并发传输，HTTP&#x2F;1.1 虽然支持了管道化请求模式，能够并发传输HTTP请求，但是HTTP响应还是需要按顺序返回，无法做到HTTP响应并发传输，HTTP&#x2F;2 引入了 stream 的概念，不同的HTTP请求和响用不同的 stream 来区分，多个 stream 复用一条 TCP 连接，只需要一条连接就可以达到了并发传输的效果。</p>
<p>HTTP2.0在HTTP报文格式上也做了改进，HTTP2.0用了HPACK算法压缩了HTTP头部，同时将HTTP&#x2F;1.1纯文本的格式改进成了二进制格式，提高了数据传输的效率。</p>
<p>HTTP2.0还支持服务器主动推送资源，比如客户端在从服务器获取HTML文件时，可能这个页面渲染还需要其他CSS，这时候服务器可以主动推送CSS文件，减少了消息传递的次数。</p>
<h4 id="2-0和3-0的区别？"><a href="#2-0和3-0的区别？" class="headerlink" title="2.0和3.0的区别？"></a>2.0和3.0的区别？</h4><p>最大区别在于传输层使用的协议不同，以往 HTTP 都是基于 TCP 协议进行传输，这次 HTTP3.0 改用 UDP 协议。这个变化是有原因的，HTTP&#x2F;2.0 并发传输的特性，是在一条 TCP 连接上实现的，这里会有 TCP 队头阻塞的问题，在传输过程中，假设某个stream发生了丢包，服务端不仅不能处理这个 stream，也不能处理其他 stream，必须等这个包重传了，才能继续处理其他 stream。为了解决这个问题，HTTP&#x2F;3.0 将传输层改用 UDP 协议，并在 UDP 基础上实现了一个可靠传输的QUIC协议，当某个流发生丢包时，只会阻塞这个stream，其他stream不会受到影响，因此不存在队头阻塞问题。</p>
<p>除此之外：</p>
<ul>
<li>HTTP&#x2F;3.0 连接建立方面比 HTTP&#x2F;2.0 更高效，HTTP&#x2F;2.0建立连接的时候需要 3 次 TCP 握手+TLS 四次握手，而 HTTP3.0的协议只需要 3 次握手就能完成连接建立+TLS握手建立。</li>
<li>最后还有一点，HTTP&#x2F;3.0 在网络环境切换的过程，可以不需要重新建立连接。以往 HTTP 都是基于 TCP 协议进行传输，TCP 是根据四元组信息唯一确认一条连接，如果四元组信息某一个信息发生变化了，这时候就需要断开连接，重新建立连接，比如4G网络切换到 WIFI 网络的时候，所有的 TCP 连接都需要重新建立，而 HTTP&#x2F;3.0 是在应用层通过连接 ID 来唯一确认连接的，即使网络发生切换，也不会影响原本的连接，消除重连的成本。</li>
</ul>
<h4 id="HTTP用户后续的操作，服务端如何知道属于同一个用户？追问：如果服务端是一个集群机器？"><a href="#HTTP用户后续的操作，服务端如何知道属于同一个用户？追问：如果服务端是一个集群机器？" class="headerlink" title="HTTP用户后续的操作，服务端如何知道属于同一个用户？追问：如果服务端是一个集群机器？"></a>HTTP用户后续的操作，服务端如何知道属于同一个用户？追问：如果服务端是一个集群机器？</h4><p>可以使用session cookie机制，达到身份识别的效果。</p>
<p>比如，我用账号密码登录某电商，登录成功后，网站服务器会校验账号和密码，校验成功后，会生成一个唯一的session id来标识，然后将该session id设置到cookie中发送给客户端，客户端再次访问网站时，会将该Cookie发送给服务器，服务器通过Cookie中的session id可以获取用户之前的状态信息，免去了重复登录的麻烦，实现了状态保持。</p>
<p>追问：如果服务端是一个集群机器的话， 可以用一台 Redis 来保存 session 数据，达到共享 session 的效果，不过这种方案存在单点的问题，如果 redis 挂了，可能所有用户登陆状态都会消失了，虽然可以通过搭建 redis 集群来保证避免单点问题，但是我觉得这个方案成本太高了。</p>
<p>一种比较低的解决成本方案是：不用session而是改用JWT来实现用户凭证比较好，因为JWT的状态信息是保存在客户端的，服务端不再保存状态信息，天然适合分布式系统。</p>
<h4 id="Cookie、Session、Token的区别"><a href="#Cookie、Session、Token的区别" class="headerlink" title="Cookie、Session、Token的区别"></a>Cookie、Session、Token的区别</h4><ul>
<li>存储位置不同：cookie存储在客户端，即浏览器中的文本文件，通过在HTTP头中传递给服务器来进行通信；session存储在服务端，通常是存储在服务器的内存或数据库中；token也是存储在客户端，但是通常以加密的方式存储在localStorage或sessionStorage中</li>
<li>安全性不同：cookie存储在客户端，可能会被窃取或篡改，因此存储敏感信息时需要进行加密处理；session存储在服务端，通过session ID将客户端与服务端关联起来，可以避免敏感数据直接暴露；token通常使用加密算法生成，有效期短且单向不可逆，可以提供较高的安全性。</li>
<li>跨域支持不同：为了防止安全事故，cookie不支持跨域传输，而session机制通常是通过Cookie存储session id的，因此session id默认情况下也是不支持跨域的；但token可以轻松实现跨域，因为token是存储在客户端的LocalStorage或者作为请求头的一部分发送到服务器的，所以不同的域名token信息传输通常是不受影响的。</li>
<li>状态管理不同：cookie是应用程序通过在客户端存储临时数据，用于实现状态管理的一种机制；Session 是服务器端记录用户状态的方式，服务器会为每个会话分配一个唯一的 Session ID，并将其与用户状态相关联；Token 是一种用于认证和授权的一种机制，通常表示用户的身份信息和权限信息。</li>
</ul>
<h4 id="JWT的原理以及校验机制？"><a href="#JWT的原理以及校验机制？" class="headerlink" title="JWT的原理以及校验机制？"></a>JWT的原理以及校验机制？</h4><p>JWT由3部分组成，分别是头部，负载，签名。头部描述令牌使用的签名算法，负载描述的是用户信息，比如用户名称、过期时间等，头部和负载都不会加密的，只是使用Base64编码。最后一部分签名是对头部和负载两部分数据进行签名，签名的过程是：使用头部的签名算法，通过服务器的密钥对前面两部分内容进行加密计算。</p>
<p>校验JWT令牌的过程是服务端收到客户端发过来的JWT令牌后，服务端会取出头部和负载数据，然后用自己的密钥对这两部分数据进行加密计算，将得到的加密结果和客户端发过来的JWT的签名进行对比，如果相同，就表示前面两部分没有被人篡改，这时候服务器可以进行其他验证，比如检查JWT是否过期，如果没问题，就会执行业务逻辑。</p>
<h4 id="JWT令牌为什么能解决集群部署"><a href="#JWT令牌为什么能解决集群部署" class="headerlink" title="JWT令牌为什么能解决集群部署"></a>JWT令牌为什么能解决集群部署</h4><p>JWT包含身份验证和会话信息，可以让服务器无需存储会话信息，就让服务器成为无状态的了，从而比较容易实现扩展。</p>
<h4 id="JWT的缺点？"><a href="#JWT的缺点？" class="headerlink" title="JWT的缺点？"></a>JWT的缺点？</h4><p>JWT的最大缺点是令牌难以主动失效，一旦JWT签发了，在到期之前就会始终有效，除非服务器搞了额外的逻辑，比如设计一个“黑名单”的额外逻辑，用来把要主动失效的令牌集中存储起来，然后，每次使用JWT进行请求的话都会先判断这个JWT是否存在于黑名单中。</p>
<p>还有，JWT要防止盗用的问题，因为JWT包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限，为了减少盗用，JWT的有效期设计的比较短，而且不应该使用HTTP协议明文传输，而是使用HTTPS协议传输。</p>
<h4 id="什么是跨域？什么情况下会发生跨域请求？"><a href="#什么是跨域？什么情况下会发生跨域请求？" class="headerlink" title="什么是跨域？什么情况下会发生跨域请求？"></a>什么是跨域？什么情况下会发生跨域请求？</h4><p>当一个网页去尝试访问不同源的资源的时候，就意味着发生了跨域请求，只要域名、协议、端口这三个信息任意一个都不同，都认为是不同源的URL。</p>
<p>跨域请求在浏览器上是不被允许的，只要在浏览器上发生跨域请求操作时，浏览器就会自动抛出错误。</p>
<p>如果想绕过这个限制，可以用跨域资源共享技术，实现的方式是服务器需要在响应头上添加Access-Control-Allow-Origin的字段，这个字段是设置为需要放行的域名，浏览器识别到了才能放行该请求。</p>
<h4 id="HTTP和HTTPS有什么区别？"><a href="#HTTP和HTTPS有什么区别？" class="headerlink" title="HTTP和HTTPS有什么区别？"></a>HTTP和HTTPS有什么区别？</h4><ul>
<li>安全性：HTTP是明文传输协议，数据在传输过程中不加密，容易被窃听和篡改。而HTTPS通过使用SSL&#x2F;TLS协议对数据进行加密，提供了更高的安全性和数据保护。</li>
<li>建立连接：HTTP连接建立相对简单，TCP三次握手之后便可进行HTTP报文传输。而HTTPS在三次握手后，还需进行SSL&#x2F;TLS的握手过程，才可进入加密报文传输。</li>
<li>端口号：HTTP默认使用端口号80进行通信，而HTTPS默认使用443端口号</li>
<li>证书：HTTPS需要使用数字证书来验证服务器的身份，并确保数据传输的安全性。证书由受信任的第三方机构颁发，用于证明服务器的身份和所有权。而HTTP没有使用证书进行身份验证和加密。</li>
</ul>
<h4 id="了解过哪些加密算法？"><a href="#了解过哪些加密算法？" class="headerlink" title="了解过哪些加密算法？"></a>了解过哪些加密算法？</h4><p>对称以及非对称加密算法，哈希算法这三种算法</p>
<ul>
<li>在 HTTPS 协议里，对称加密算法和非对称加密算法这两种算法都会用到，对称加密算法就是用一个密钥进行加解密，比如 AES 算法，非对称加密则是有 2 个密钥，分别是公钥和私钥，比如RSA算法。对称加密算法适用于大量数据的加密和解密，而非对称加密算法适用于密钥交换和数字签名等场景。</li>
<li>哈希算法主要用过 MD5 算法，哈希算法是一种单向算法，用户可以通过哈希算法对目标信息生成一段特定长度的唯一的哈希值，却不能通过这个哈希值重新获得目标信息，所以用于数据完整性校验方面。</li>
</ul>
<h4 id="对称和非对称加密是什么？各自有哪些算法？"><a href="#对称和非对称加密是什么？各自有哪些算法？" class="headerlink" title="对称和非对称加密是什么？各自有哪些算法？"></a>对称和非对称加密是什么？各自有哪些算法？</h4><p>对称加密和解密都是用同一个密钥进行操作，加密和解密过程速度较快，适合对大量数据进行加密，对称密钥必须保密，不能明文传输，常见的对称加密算法有AES、DES等。</p>
<p>非对称加密使用两个密钥，分别是公钥和私钥，加密和解密过程相对较慢，适合对少量数据进行加密。公钥可以任意分发，而私钥必须保密，可以通过公钥加密对称密钥，私钥解密的方式，保证对称密钥的安全传输，常见的非对称加密算法有RSA、ECC等。</p>
<h4 id="HTTPS的建立过程？"><a href="#HTTPS的建立过程？" class="headerlink" title="HTTPS的建立过程？"></a>HTTPS的建立过程？</h4><ul>
<li>第一次TLS握手：客户端首先会发一个 Client Hello 消息，消息里面有客户端使用的 TLS 版本号、支持的密码套件列表、客户端生成的随机数，这个随机数是用来后面生成对称密钥元素之一。</li>
<li>第二次TLS握手：当服务端收到客户端的消息后，会返回 Server Hello 消息给的客户端，消息里面有服务器确认的 TLS 版本号、密码套件、服务端生成的随机数。接着服务端为了证明自己的身份，会发送 Server Certificate 给客户端，这个消息里含有数字证书。随后，服务端发了 Server Hello Done 消息，目的是告诉客户端，我已经把该给你的东西都给你了，本次握手完毕。</li>
<li>校验证书：客户端收到服务端的数字证书的时候，会对校验服务端的证书，如果证书是合法的，客户端会用 CA 机构的公钥解密数字证书拿到服务端的公钥。</li>
<li>第三次TLS握手：客户端再次生成一个随机数，用服务端的公钥加密后，通过 Client Key Exchange 消息传给服务端。服务端收到后，用服务端的私钥解密得到客户端的第二个随机数。到这里，服务端和客户端双方都有 3 个随机数，双方根据已经得到的三个随机数，会根据算法生成对称密钥。生成完对称密钥后，客户端会发一个消息告诉服务端开始使用对称加密方式发送消息，并且还会对之前所有发送的数据做个摘要，再用对称加密加密一下，让服务器做个验证，验证对称密钥是否可用，以及之前握手信息是否有被中途篡改。</li>
<li>第四次TLS握手：服务器也是同样的操作，发送消息告诉客户端开始用对称加密方式发送消息，并且也会对数据做个摘要，并用对称密钥加密一下，让客户端做个校验，如果双方都验证加密和解密没问题，那么 TLS 四次握手正式完成了。</li>
</ul>
<h4 id="为什么需要三个随机数"><a href="#为什么需要三个随机数" class="headerlink" title="为什么需要三个随机数"></a>为什么需要三个随机数</h4><p>因为计算机生成一个随机数是伪随机，那么只用一个随机数来做密钥容易被破解，但如果使用三个伪随机数就十分接近随机了，这样密钥破解的难度就变高了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义博客网站搭建教程（1）</title>
    <url>/2025/03/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B1/</url>
    <content><![CDATA[<h1 id="自定义博客网站搭建教程（1）"><a href="#自定义博客网站搭建教程（1）" class="headerlink" title="自定义博客网站搭建教程（1）"></a>自定义博客网站搭建教程（1）</h1><h2 id="搭建效果"><a href="#搭建效果" class="headerlink" title="搭建效果"></a>搭建效果</h2><p>浏览网址：<a href="https://www.cnblogs.com/Love-XiaoMeng">https://www.cnblogs.com/Love-XiaoMeng</a></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202410052319438.png" alt="image-20241004235754298" style="zoom: 33%;" />

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol>
<li><a href="https://www.cnblogs.com/">博客园</a>：你需要在此注册一个账号，同时你需要在博客园右上角开通<strong>我的博客</strong></li>
</ol>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/3531280-20241005004324053-1739085262.png" alt="image-20241004235619782" style="zoom: 33%;" />

<ol start="2">
<li><p>然后你需要在博客后台管理网站中完成好相应设置</p>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241005004324677-447560257.png" alt="image-20241005000227872" style="zoom:33%;" />

<p>如图，同时你需要注意一定要开启<strong>JS权限</strong>否则后面将呈现不出想要的效果</p>
</li>
<li><p><a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v2.1/dist/guide/install.html">SimpleMemory</a>：这里你需要了解我们需要的主题是如何配置的，这里我做一个简单复述，你只需要根据本文走下去即可</p>
</li>
</ol>
<h3 id="博客园后台配置"><a href="#博客园后台配置" class="headerlink" title="博客园后台配置"></a>博客园后台配置</h3><h4 id="进入管理后台"><a href="#进入管理后台" class="headerlink" title="进入管理后台"></a>进入管理后台</h4><p>首先进入管理后台：<a href="https://i.cnblogs.com/Configure.aspx">点击访问</a></p>
<h4 id="选项页"><a href="#选项页" class="headerlink" title="选项页"></a>选项页</h4><p>进入管理后台&#x2F;选项页。</p>
<h4 id="控件确认"><a href="#控件确认" class="headerlink" title="控件确认"></a>控件确认</h4><p>确认博客需要开启&#x2F;关闭哪些控件：</p>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241005004324979-1267629798.png" alt="image-20241005001035129" style="zoom: 50%;" />

<h3 id="设置页"><a href="#设置页" class="headerlink" title="设置页"></a>设置页</h3><p>进入管理后台&#x2F;设置页。</p>
<h4 id="设置博客皮肤"><a href="#设置博客皮肤" class="headerlink" title="设置博客皮肤"></a>设置博客皮肤</h4><p>博客皮肤：<code>SimpleMemory</code></p>
<h4 id="代码高亮配置"><a href="#代码高亮配置" class="headerlink" title="代码高亮配置"></a>代码高亮配置</h4><p>请同步图片上的代码高亮设置：</p>
<img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241005004325217-1913221066.png" alt="image-20241005001214678" style="zoom: 80%;" />

<p>自此博客园相关的设置就设置好了！！</p>
<p>接下来复制相应源码</p>
<h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241005004325432-540630246.png" alt="image-20241005001648461"></p>
<p>在这里的输入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">cnblogsConfig</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">blogIcon</span>: <span class="string">&#x27;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424369/o_241004044524_%E5%AB%A6%E5%A8%A5%E7%8E%89%E5%85%94.svg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">startDate</span>: <span class="string">&#x27;2021-11-02&#x27;</span>, <span class="comment">// 入园时间，年-月-日。入园时间查看方法：鼠标停留园龄时间上，会显示入园时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">avatar</span>: <span class="string">&#x27;https://pic.cnblogs.com/avatar/3531280/20241004112916.png&#x27;</span>, <span class="comment">// 用户头像</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;青墨染烟雨&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">banner</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">home</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;每一个不曾起舞的日子，都是对生命的辜负。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;公主死去了，屠龙的少年还在燃烧&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;当你真心渴望追求某种事物的话，整个宇宙都会联合起来帮你完成。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;我们总以为是过去抓着我们， 其实是我们自己抓着过去不放....&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;在彼此拥抱的时候， 左边和右边同时感觉到心脏的跳动， 唯有那时，人才是平衡而完整的。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;曾经发生的事不可能忘记 只是暂时想不起来而已&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;生活不可能像你想象得那么美好，但也不会像你想象得那么糟。 我觉得人的脆弱和坚强都超乎自己的想象。 有时，我们可能脆弱的一句话就泪流满面， 有时，也发现自己不知不觉咬着牙走了很长的路。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;You never know how strong you are until being strong is the only choice you have.&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;无论如何都不想失去的人，最好保留在朋友的关系以内。 如果跨越界线成为恋人，结局可能是永远，但也可能是永别。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;不是「世界」复杂，而是「你」把世界变复杂了。 问题不在于世界是什么样子，在于你是什么样子。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;信仰，是去相信我们所从未看见的; 而这种信仰的回报，是看见我们所相信的。&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;只有用心看才看得清楚，重要的东西是眼睛看不见的&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">background</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b5.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b2.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004043730_b1.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b3.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b4.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b6.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b7.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424362/o_241004030725_b8.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">article</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">background</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031402_a1.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031402_a2.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031402_a3.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031402_a4.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031403_a5.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031402_a6.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031403_a7.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424366/o_241004031403_a8.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">loading</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">rebound</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tension</span>: <span class="number">16</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">spinner</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="string">&#x27;spinner&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">radius</span>: <span class="number">90</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">progressBar</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&#x27;#F08080&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rtMenu</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">downScrollDom</span>: <span class="string">&#x27;#blog_post_info_block&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">code</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">macStyle</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">line</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">links</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">page</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;BNDong&#x27;</span>, <span class="comment">// 昵称</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">introduction</span>: <span class="string">&#x27;IT技术类博客&#x27;</span>, <span class="comment">// 简介</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">avatar</span>: <span class="string">&#x27;https://blog.dbnuo.com/images/avatar.gif&#x27;</span>, <span class="comment">// 头像</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&#x27;https://blog.dbnuo.com&#x27;</span> <span class="comment">// 友链地址</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;TonyDon&#x27;</span>, <span class="comment">// 昵称</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">introduction</span>: <span class="string">&#x27;IT技术类博客&#x27;</span>, <span class="comment">// 简介</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">avatar</span>: <span class="string">&#x27;https://tonydon-blog.obs.cn-east-3.myhuaweicloud.com/static/icon2.jpg&#x27;</span>, <span class="comment">// 头像</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&#x27;http://www.tonydon.top&#x27;</span> <span class="comment">// 友链地址</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">animate</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">homeBannerTitle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">homeBanner</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>, <span class="comment">//这是背景动画，如果需要可以改成true，但是会消耗电脑资源</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">radius</span>: <span class="number">15</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">background</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>, <span class="comment">//这是背景动画，如果需要可以改成true，但是会消耗电脑资源</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">articleTitle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">articleBanner</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">bannerImages</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">itemNum</span>: <span class="number">5</span>, <span class="comment">// 图片拆分成几列</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">current</span>: <span class="number">0</span>, <span class="comment">// 初始图片的下标，如果为负数则为随机</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sort</span>: <span class="number">1</span>, <span class="comment">// 1 代表每次向下加载一个图片，-1 代表每次向上加载一个图片</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">time</span>: <span class="number">15000</span> <span class="comment">// 每次切换间隔时间，单位：毫秒</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">backgroundMouse</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">typing</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sidebar</span>: &#123; <span class="comment">// 列表数据 [&#x27;导航名称&#x27;, &#x27;链接&#x27;, &#x27;icon&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">navList</span>: [</span></span><br><span class="line"><span class="language-javascript">                [<span class="string">&#x27;GitHub&#x27;</span>, <span class="string">&#x27;https://github.com/qinmoranyanyu&#x27;</span>, <span class="string">&#x27;icon-github&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                [<span class="string">&#x27;Gitee&#x27;</span>, <span class="string">&#x27;https://gitee.com/forever-or-moment&#x27;</span>, <span class="string">&#x27;icon-gitee1&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">titleMsg</span>: <span class="string">&#x27;欢迎来到我的世界~&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">infoBackground</span>: <span class="string">&#x27;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424369/o_241004032813_person_bg.jpg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">customList</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;我的&quot;</span>: &#123; <span class="comment">// 标题</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;data&quot;</span>: [ <span class="comment">// 列表数据 [&#x27;列表&#x27;, &#x27;链接&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">                        [<span class="string">&#x27;日记&#x27;</span>, <span class="string">&#x27;https://i.cnblogs.com/diaries/edit&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                        [<span class="string">&#x27;收藏&#x27;</span>, <span class="string">&#x27;https://wz.cnblogs.com/&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                        [<span class="string">&#x27;写随笔&#x27;</span>, <span class="string">&#x27;https://i.cnblogs.com/posts/edit&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                        [<span class="string">&#x27;写文章&#x27;</span>, <span class="string">&#x27;https://i.cnblogs.com/articles/edit&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                        [<span class="string">&#x27;写日记&#x27;</span>, <span class="string">&#x27;https://i.cnblogs.com/diaries/edit&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                    ],</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;simple-memory-icon-home4&quot;</span> <span class="comment">// 配置图标，参考文档：定制化/字体图标库</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">footer</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">aplayer</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">left</span>: <span class="string">&#x27;我的心是簇拥烈日的花&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">right</span>: <span class="string">&#x27;在你的眼里找到了家&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rtMenu</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">reward</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">alipay</span>: <span class="string">&#x27;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424369/o_241004153513_%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E7%A0%81.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">wechatpay</span>: <span class="string">&#x27;https://images.cnblogs.com/cnblogs_com/blogs/832360/galleries/2424369/o_241004050257_%E5%BE%AE%E4%BF%A1%E6%94%B6%E6%AC%BE%E7%A0%81.jpg&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">switchDayNight</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">enable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">auto</span>: &#123;             <span class="comment">// 自动切换相关配置</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">enable</span>: <span class="literal">true</span>,  <span class="comment">// 开启自动切换</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dayHour</span>: <span class="number">5</span>,     <span class="comment">// 日间模式开始时间，整数型，24小时制</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">nightHour</span>: <span class="number">19</span>   <span class="comment">// 夜间模式开始时间，整数型，24小时制</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@2.1.5/dist/simpleMemory.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意这里面的所有地址链接请修改成你自己的</li>
<li>这里给出配置信息的相关文档，Json中的各个key的作用你可以在这里找到答案，<a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v2.1/dist/reference/configs.html">点击这里</a></li>
</ul>
<h3 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241005004325698-1536026046.png" alt="image-20241005001805777"></p>
<p>注意这串代码很长（4000多行），你如果直接滑动容易引起界面卡顿，建议直接点击右上角的复制按钮即可，<strong>不要滑动复制！！！</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">iframe</span>&#123;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#EntryTag</span>,<span class="selector-id">#blogTitle</span> <span class="selector-tag">h1</span>&#123;<span class="attribute">margin-top</span>:<span class="number">20px</span>&#125;<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span>,<span class="selector-class">.postSticky</span>&#123;<span class="attribute">background</span>:<span class="number">#6fa3ef</span>&#125;<span class="selector-id">#blogTitle</span> <span class="selector-tag">h1</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.dayTitle</span> <span class="selector-tag">a</span>,<span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>&#125;<span class="selector-id">#calendar</span> <span class="selector-tag">table</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-id">#navList</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.postDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">text-decoration</span>:none&#125;<span class="selector-id">#mainContent</span>,<span class="selector-id">#sideBar</span>,<span class="selector-id">#topics</span>&#123;-o-<span class="attribute">text-overflow</span>:ellipsis&#125;*,<span class="selector-class">.Cal</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>&#125;::-moz-selection&#123;<span class="attribute">background</span>:<span class="number">#807dd4</span>;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;<span class="selector-pseudo">::selection</span>&#123;<span class="attribute">background</span>:<span class="number">#807dd4</span>;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;::-webkit-selection&#123;<span class="attribute">background</span>:<span class="number">#807dd4</span>;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;::-webkit-scrollbar&#123;<span class="attribute">height</span>:<span class="number">3px</span>;<span class="attribute">width</span>:<span class="number">3px</span>&#125;::-webkit-scrollbar:hover&#123;<span class="attribute">height</span>:<span class="number">9px</span>;<span class="attribute">width</span>:<span class="number">9px</span>&#125;::-webkit-scrollbar-track&#123;<span class="attribute">background-color</span>:<span class="number">#f9f9f9</span>;<span class="attribute">width</span>:<span class="number">3px</span>&#125;::-webkit-scrollbar-thumb&#123;<span class="attribute">background-clip</span>:padding-box;<span class="attribute">background-color</span>:<span class="number">#999</span>;<span class="attribute">border-radius</span>:<span class="number">10px</span>;<span class="attribute">min-height</span>:<span class="number">100px</span>&#125;::-webkit-scrollbar-thumb:hover&#123;<span class="attribute">background-color</span>:<span class="number">#555</span>&#125;<span class="selector-id">#mainContent</span>,<span class="selector-id">#sideBar</span>,<span class="selector-id">#topics</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">text-overflow</span>:ellipsis&#125;<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span>&#123;<span class="attribute">background</span>:<span class="number">#e8a258</span>&#125;<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span>,<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;<span class="attribute">margin-right</span>:<span class="number">3px</span>&#125;<span class="selector-class">.topicListFooter</span>&#123;<span class="attribute">margin-right</span>:<span class="number">10px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-id">#navList</span> <span class="selector-tag">a</span>,<span class="selector-class">.dayTitle</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">text-align</span>:center&#125;<span class="selector-id">#home</span>,<span class="selector-class">.inner</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto&#125;<span class="selector-id">#divRefreshComments</span>&#123;<span class="attribute">font-size</span>:<span class="number">9pt</span>;<span class="attribute">margin-right</span>:<span class="number">10px</span>&#125;*&#123;<span class="attribute">margin</span>:<span class="number">0</span>&#125;<span class="selector-tag">html</span>&#123;-webkit-tap-highlight-<span class="attribute">color</span>:transparent;<span class="attribute">font-size</span>:<span class="number">62.5%</span>;<span class="attribute">height</span>:<span class="number">100%</span>&#125;<span class="selector-tag">body</span>&#123;-moz-<span class="attribute">font-feature-settings</span>:<span class="string">&quot;kern&quot;</span> <span class="number">1</span>;-o-<span class="attribute">font-feature-settings</span>:<span class="string">&quot;kern&quot;</span> <span class="number">1</span>;<span class="attribute">background-color</span>:<span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#3a4145</span>;<span class="attribute">font-family</span>:Merriweather,Open Sans,Microsoft Jhenghei,Microsoft Yahei,sans-serif;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">overflow</span>:hidden&#125;<span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;<span class="selector-tag">fieldset</span>,<span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>&#125;<span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none&#125;<span class="selector-tag">img</span>&#123;<span class="attribute">max-width</span>:none&#125;<span class="selector-tag">a</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>&#125;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#f60</span>&#125;<span class="selector-class">.clear</span>&#123;<span class="attribute">clear</span>:both&#125;<span class="selector-tag">button</span>&#123;<span class="attribute">background</span>:<span class="number">#5ba4e5</span>;<span class="attribute">border</span>:.<span class="number">1em</span> solid <span class="number">#0000000d</span>;<span class="attribute">border-radius</span>:.<span class="number">3rem</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:inline-block;<span class="attribute">font-family</span>:Open Sans,sans-serif;<span class="attribute">font-size</span>:<span class="number">11px</span>;<span class="attribute">font-weight</span>:<span class="number">300</span>;<span class="attribute">letter-spacing</span>:<span class="number">1px</span>;<span class="attribute">line-height</span>:<span class="number">13px</span>;<span class="attribute">outline</span>:<span class="number">0</span>;<span class="attribute">padding</span>:.<span class="number">1rem</span> <span class="number">1.5rem</span>;<span class="attribute">text-shadow</span>:none;<span class="attribute">text-transform</span>:uppercase;<span class="attribute">width</span>:auto&#125;<span class="selector-tag">b</span>&#123;<span class="attribute">font-weight</span>:<span class="number">400</span>&#125;<span class="selector-id">#home</span>&#123;<span class="attribute">background-color</span>:<span class="number">#ffffffe6</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">#dcdcdc4d</span>;<span class="attribute">max-width</span>:<span class="number">900px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span> <span class="number">30px</span>;<span class="attribute">width</span>:<span class="number">70%</span>&#125;<span class="selector-id">#header</span>&#123;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>&#125;<span class="selector-id">#blogTitle</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">60px</span>&#125;<span class="selector-id">#blogTitle</span> <span class="selector-tag">h1</span>&#123;<span class="attribute">font-size</span>:<span class="number">26px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">line-height</span>:<span class="number">1.5em</span>&#125;<span class="selector-id">#blogTitle</span> <span class="selector-tag">h1</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#515151</span>&#125;<span class="selector-id">#blogTitle</span> <span class="selector-tag">h2</span>&#123;<span class="attribute">color</span>:<span class="number">#757575</span>;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">font-weight</span>:<span class="number">400</span>;<span class="attribute">line-height</span>:<span class="number">1.846153846</span>&#125;<span class="selector-id">#blogLogo</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-id">#navigator</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#ededed</span>;<span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#ededed</span>;<span class="attribute">clear</span>:both;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">margin-top</span>:<span class="number">25px</span>&#125;<span class="selector-id">#bannerbar</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#blog-calendar</span> <span class="selector-tag">td</span>,<span class="selector-id">#blog-calendar</span> <span class="selector-tag">th</span>,<span class="selector-class">.Cal</span>,<span class="selector-class">.btn_my_zzk</span>,<span class="selector-class">.dayTitle</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-id">#navList</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">min-height</span>:<span class="number">30px</span>&#125;<span class="selector-id">#navList</span> <span class="selector-tag">li</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">40px</span> <span class="number">0</span> <span class="number">0</span>&#125;<span class="selector-id">#navList</span> <span class="selector-tag">a</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">height</span>:<span class="number">22px</span>;<span class="attribute">padding-top</span>:<span class="number">19px</span>;<span class="attribute">width</span>:<span class="number">5em</span>&#125;<span class="selector-id">#navList</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-id">#navList</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-id">#navList</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#6a6a6a</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-id">#navList</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.blogStats</span>&#123;<span class="attribute">color</span>:<span class="number">#757575</span>;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">margin-right</span>:<span class="number">2px</span>;<span class="attribute">margin-top</span>:<span class="number">19px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-id">#main</span>&#123;<span class="attribute">margin-top</span>:<span class="number">30px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#mainContent</span> <span class="selector-class">.forFlow</span>&#123;<span class="attribute">float</span>:none;<span class="attribute">width</span>:auto&#125;<span class="selector-id">#mainContent</span>&#123;<span class="attribute">float</span>:none;<span class="attribute">margin</span>:auto;<span class="attribute">min-height</span>:<span class="number">200px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.day</span>,<span class="selector-class">.entrylistItem</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-of-type</span>)&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#e9e9e9</span>;<span class="attribute">min-height</span>:<span class="number">10px</span>&#125;<span class="selector-class">.day</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.entrylistItem</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-of-type</span>)<span class="selector-pseudo">:after</span>&#123;<span class="attribute">bottom</span>:-<span class="number">5px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">height</span>:<span class="number">7px</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">width</span>:<span class="number">7px</span>&#125;<span class="selector-class">.day</span>&#123;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">margin</span>:<span class="number">3.5rem</span> auto;<span class="attribute">padding-bottom</span>:<span class="number">3.3rem</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.btn_my_zzk</span>,<span class="selector-class">.c_b_p_desc_img</span>,<span class="selector-class">.day</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.dayTitle</span>&#123;<span class="attribute">position</span>:absolute&#125;<span class="selector-class">.c_b_p_desc_readmore</span>&#123;<span class="attribute">background</span>:<span class="number">0</span> <span class="number">0</span>;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">border-bottom</span>:<span class="number">2px</span> solid <span class="number">#666</span>;<span class="attribute">color</span>:<span class="number">#555</span><span class="meta">!important</span>;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">font-weight</span>:<span class="number">600</span>;<span class="attribute">margin-top</span>:<span class="number">20px</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">text-align</span>:center;<span class="attribute">transition-property</span>:border;<span class="attribute">width</span>:<span class="number">85px</span>&#125;<span class="selector-class">.day</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e9e9e9</span>;<span class="attribute">border-radius</span>:<span class="number">100%</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ffffffb3</span>;<span class="attribute">display</span>:block;<span class="attribute">margin-left</span>:-<span class="number">5px</span>&#125;<span class="selector-class">.dayTitle</span>&#123;<span class="attribute">background</span>:azure;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#5c8ec6</span>;<span class="attribute">border-radius</span>:<span class="number">50%</span>;<span class="attribute">clear</span>:both;<span class="attribute">display</span>:none;<span class="attribute">height</span>:<span class="number">65px</span>;<span class="attribute">line-height</span>:<span class="number">1.5</span>;<span class="attribute">margin</span>:<span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span> -<span class="number">100px</span>;<span class="attribute">top</span>:-<span class="number">15px</span>;<span class="attribute">width</span>:<span class="number">63px</span>&#125;<span class="selector-class">.dayTitle</span> <span class="selector-tag">a</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">margin-top</span>:<span class="number">15px</span>;<span class="attribute">width</span>:<span class="number">60px</span>&#125;<span class="selector-class">.desc_img</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-class">.c_b_p_desc_img</span>&#123;<span class="attribute">border-left</span>:<span class="number">1px</span> dashed <span class="number">#e9e9e9</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">opacity</span>:.<span class="number">9</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding-left</span>:<span class="number">13px</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">top</span>:-<span class="number">5px</span>;<span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">39%</span> - <span class="number">20px</span>)&#125;<span class="selector-class">.c_b_p_desc_img</span> <span class="selector-tag">div</span>&#123;<span class="attribute">border-radius</span>:<span class="number">4px</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">opacity</span>:.<span class="number">95</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.postCon</span>,<span class="selector-class">.postDesc</span>,<span class="selector-class">.postSeparator</span>,<span class="selector-class">.postTitle</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.postTitle</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;<span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#4a4a4a</span>;<span class="attribute">transition</span>:color .<span class="number">3s</span> ease&#125;<span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">word-wrap</span>:break-word;-webkit-tap-highlight-<span class="attribute">color</span>:transparent;<span class="attribute">background-color</span>:<span class="number">#0000</span>;<span class="attribute">color</span>:<span class="number">#4a4a4a</span>;<span class="attribute">font-family</span>:Open Sans,Microsoft Jhenghei,Microsoft Yahei,sans-serif;<span class="attribute">font-size</span>:<span class="number">3.1rem</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">letter-spacing</span>:-<span class="number">1px</span>;<span class="attribute">transition-delay</span>:<span class="number">0s</span>;<span class="attribute">transition-duration</span>:.<span class="number">3s</span>;<span class="attribute">transition-property</span>:color;<span class="attribute">transition-timing-function</span>:ease&#125;<span class="selector-id">#topics</span> <span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="number">#0000004d</span>&#125;<span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.entrylistPostSummary</span>,<span class="selector-class">.postCon</span>&#123;<span class="attribute">font-feature-settings</span>:<span class="string">&quot;liga&quot;</span> <span class="number">1</span>,<span class="string">&quot;onum&quot;</span> <span class="number">1</span>,<span class="string">&quot;kern&quot;</span> <span class="number">1</span>;<span class="attribute">word-wrap</span>:break-word;-webkit-<span class="attribute">margin</span>-before:<span class="number">0</span>;-webkit-<span class="attribute">margin</span>-after:<span class="number">0</span>;-webkit-<span class="attribute">margin</span>-start:<span class="number">0</span>;-webkit-<span class="attribute">margin</span>-end:<span class="number">0</span>;<span class="attribute">color</span>:<span class="number">#3a4145</span>;<span class="attribute">display</span>:block;<span class="attribute">font-family</span><span class="selector-pseudo">:Not</span>o Sans SC,serif;<span class="attribute">font-size</span>:<span class="number">1.45em</span>;<span class="attribute">line-height</span>:<span class="number">1.7em</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">25px</span> <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-align</span>:justify&#125;<span class="selector-class">.postMeta</span>&#123;<span class="attribute">color</span>:<span class="number">#888</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">position</span>:relative;<span class="attribute">top</span>:<span class="number">10px</span>&#125;<span class="selector-class">.postMeta</span>&gt;<span class="selector-tag">i</span>&#123;<span class="attribute">font-size</span>:<span class="number">15px</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">5px</span>&#125;<span class="selector-class">.postMeta</span>&gt;<span class="selector-tag">i</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first-child</span>)&#123;<span class="attribute">margin-left</span>:<span class="number">10px</span>&#125;<span class="selector-class">.postDesc</span>&#123;<span class="attribute">color</span>:<span class="number">#9eabb3</span>;<span class="attribute">display</span>:none;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">font-family</span>:Open Sans,sans-serif;<span class="attribute">font-size</span>:<span class="number">1.4rem</span>;<span class="attribute">line-height</span>:<span class="number">2.2rem</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding-right</span>:<span class="number">5px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>,<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>,<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>,<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>,<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">color</span>:<span class="number">#0d6efd80</span>;<span class="attribute">content</span>:<span class="string">&quot;#&quot;</span>;<span class="attribute">margin-left</span>:<span class="number">5px</span>;<span class="attribute">transition</span>:color .<span class="number">15s</span> ease-in-out&#125;<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span>&#123;<span class="attribute">color</span>:<span class="number">#ffffffe6</span>;<span class="attribute">font-family</span><span class="selector-pseudo">:Not</span>o Sans SC,serif;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="number">#00000080</span>&#125;<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-size</span>:<span class="number">16px</span>&#125;<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span> br&#123;<span class="attribute">display</span>:none&#125;<span class="selector-class">.postDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.postDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.postDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#666</span>&#125;<span class="selector-class">.postDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>&#125;<span class="selector-class">.postSticky</span>&#123;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">padding</span>:<span class="number">1px</span> <span class="number">3px</span>;<span class="attribute">position</span>:relative;<span class="attribute">top</span>:-<span class="number">6px</span>&#125;<span class="selector-class">.postSeparator</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">height</span>:<span class="number">1px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto <span class="number">15px</span>&#125;<span class="selector-id">#sideBar</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">margin-top</span>:-<span class="number">15px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;<span class="attribute">width</span>:<span class="number">230px</span>&#125;<span class="selector-id">#sideBar</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#757575</span>&#125;<span class="selector-id">#sideBar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>;<span class="attribute">text-decoration</span>:underline&#125;<span class="selector-tag">img</span><span class="selector-class">.sidebar-vip-logo</span>&#123;<span class="attribute">height</span>:<span class="number">11px</span>;<span class="attribute">left</span>:<span class="number">76px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">9px</span>;<span class="attribute">vertical-align</span>:middle;<span class="attribute">width</span>:<span class="number">11px</span>&#125;<span class="selector-class">.sidebar-title-msg</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">text-overflow</span>:ellipsis;<span class="attribute">white-space</span>:nowrap;<span class="attribute">width</span>:<span class="number">195px</span>&#125;<span class="selector-class">.sidebar-title-msg</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">animation</span>:none;<span class="attribute">cursor</span>:pointer;<span class="attribute">overflow</span>:auto;<span class="attribute">text-overflow</span>:unset;<span class="attribute">white-space</span>:unset;<span class="attribute">width</span>:<span class="number">195px</span>&#125;<span class="selector-id">#sb_widget_my_zzk</span>&#123;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.btn_my_zzk</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">color</span>:<span class="number">#0000</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">height</span>:<span class="number">25px</span>;<span class="attribute">right</span>:-<span class="number">35px</span>;<span class="attribute">top</span>:<span class="number">1px</span>;<span class="attribute">width</span>:<span class="number">25px</span>&#125;<span class="selector-class">.input_my_zzk</span><span class="selector-pseudo">:focus</span>,<span class="selector-class">.input_my_zzk</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#666</span>&#125;<span class="selector-class">.input_my_zzk</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transition</span>:all .<span class="number">4s</span> linear <span class="number">0s</span>&#125;<span class="selector-class">.catList</span>,<span class="selector-class">.catListArticleArchive</span>,<span class="selector-class">.catListArticleCategory</span>,<span class="selector-class">.catListBlogRank</span>,<span class="selector-class">.catListComment</span>,<span class="selector-class">.catListEssay</span>,<span class="selector-class">.catListFeedback</span>,<span class="selector-class">.catListImageCategory</span>,<span class="selector-class">.catListLink</span>,<span class="selector-class">.catListNoteBook</span>,<span class="selector-class">.catListPostArchive</span>,<span class="selector-class">.catListPostCategory</span>,<span class="selector-class">.catListTag</span>,<span class="selector-class">.catListView</span>,<span class="selector-class">.mySearch</span>,<span class="selector-class">.newsItem</span>&#123;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">margin-bottom</span>:<span class="number">35px</span>&#125;<span class="selector-id">#blog-calendar</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span>;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-id">#blog-calendar</span> <span class="selector-tag">td</span>&#123;<span class="attribute">font-family</span>:Comic Sans MS;<span class="attribute">text-align</span>:center&#125;<span class="selector-id">#calendar</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ededed</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">#ccc</span>;<span class="attribute">margin-bottom</span>:<span class="number">35px</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>;<span class="attribute">width</span>:<span class="number">228px</span>&#125;<span class="selector-class">.calendar</span>&#123;<span class="attribute">border</span>:<span class="number">0</span> solid <span class="number">#000</span>&#125;<span class="selector-id">#calendar</span> <span class="selector-class">.Cal</span>&#123;<span class="attribute">line-height</span>:<span class="number">1.5em</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#calendar</span> <span class="selector-tag">td</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">font-family</span>:Comic Sans MS;<span class="attribute">padding-top</span>:<span class="number">2px</span>&#125;<span class="selector-class">.Cal</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-family</span>:arial;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.CalOtherMonthDay</span>,<span class="selector-class">.CalWeekendDay</span>&#123;<span class="attribute">padding-bottom</span>:<span class="number">4px</span>;<span class="attribute">padding-top</span>:<span class="number">4px</span>&#125;<span class="selector-id">#calendar</span> <span class="selector-tag">table</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-id">#calendar</span> <span class="selector-tag">table</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-id">#calendar</span> <span class="selector-tag">table</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-id">#calendar</span> <span class="selector-tag">table</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;<span class="selector-class">.CalTodayDay</span>&#123;<span class="attribute">background</span>:<span class="number">#2d2d2b</span>;<span class="attribute">color</span>:<span class="number">#b8b8b8</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-class">.CalDayHeader</span>,<span class="selector-class">.CalWeekendDay</span>&#123;<span class="attribute">background</span>:<span class="number">#111</span>&#125;<span class="selector-class">.CalOtherMonthDay</span>&#123;<span class="attribute">color</span>:<span class="number">#3c3c3c</span>&#125;<span class="selector-id">#calendar</span> <span class="selector-class">.CalNextPrev</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-id">#calendar</span> <span class="selector-class">.CalNextPrev</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-id">#calendar</span> <span class="selector-class">.CalNextPrev</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span>;<span class="attribute">padding-right</span>:<span class="number">15px</span>&#125;<span class="selector-class">.CalDayHeader</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>;<span class="attribute">padding-top</span>:<span class="number">5px</span>&#125;<span class="selector-class">.CalTitle</span>&#123;<span class="attribute">background</span>:<span class="number">#6293bb</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">0</span>;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.CalTitle</span> <span class="selector-tag">td</span>&#123;<span class="attribute">background</span>:<span class="number">#000</span>;<span class="attribute">font-family</span>:verdana;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-class">.Cal</span> <span class="selector-tag">td</span>&#123;<span class="attribute">font-size</span>:<span class="number">10px</span>;<span class="attribute">height</span>:<span class="number">20px</span>&#125;<span class="selector-class">.Cal</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.Cal</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.Cal</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#ff9</span>;<span class="attribute">text-decoration</span>:underline&#125;<span class="selector-class">.Cal</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:none&#125;<span class="selector-class">.CalSelector</span>&#123;<span class="attribute">background</span>:<span class="number">#efefef</span>&#125;<span class="selector-class">.catListTitle</span>&#123;<span class="attribute">font-size</span>:<span class="number">110%</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">line-height</span>:<span class="number">1.2</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">margin-top</span>:<span class="number">15px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>&#125;<span class="selector-id">#sideBarMain</span> <span class="selector-tag">ul</span>,<span class="selector-class">.catListComment</span>,<span class="selector-class">.page-description</span>,<span class="selector-class">.pfl_feedback_area_title</span>&#123;<span class="attribute">line-height</span>:<span class="number">1.5em</span>&#125;<span class="selector-class">.divRecentComment</span>&#123;<span class="attribute">color</span>:<span class="number">#494949</span>;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>;<span class="attribute">text-indent</span>:<span class="number">2em</span>&#125;<span class="selector-id">#sideBarMain</span> <span class="selector-tag">li</span>&#123;<span class="attribute">line-height</span>:<span class="number">1.8</span>&#125;<span class="selector-id">#topics</span>&#123;<span class="attribute">font-family</span>:-apple-system,SF UI Text,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,WenQuanYi Micro Hei,sans-serif;<span class="attribute">margin</span>:<span class="number">15px</span> auto <span class="number">4rem</span>;<span class="attribute">min-height</span>:<span class="number">200px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#topics</span> <span class="selector-class">.postTitle</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">font-size</span>:<span class="number">130%</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">line-height</span>:<span class="number">1.5</span>;<span class="attribute">padding-left</span>:<span class="number">5px</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#BlogPostCategory</span>,<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-id">#EntryTag</span>,<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#666</span>&#125;<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span>,<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span>&#123;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#fff</span><span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="attribute">margin</span>:<span class="number">2px</span> <span class="number">5px</span> <span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">3px</span> <span class="number">5px</span>;<span class="attribute">text-decoration</span>:none&#125;<span class="selector-id">#BlogPostCategory</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-id">#EntryTag</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">opacity</span>:.<span class="number">8</span>;<span class="attribute">transition</span>:all .<span class="number">3s</span> linear <span class="number">0s</span>&#125;<span class="selector-id">#topics</span> <span class="selector-class">.postDesc</span>&#123;<span class="attribute">background</span>:<span class="number">0</span> <span class="number">0</span>;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">margin-top</span>:<span class="number">5px</span>;<span class="attribute">padding-left</span>:<span class="number">0</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.feedbackListSubtitle-louzhu</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.feedbackListSubtitle</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.feedbackListSubtitle</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">border-style</span>:solid solid outset;<span class="attribute">content</span>:<span class="string">&quot; &quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">left</span>:-<span class="number">16px</span>;<span class="attribute">pointer-events</span>:none;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:<span class="number">100%</span>;<span class="attribute">top</span>:<span class="number">11px</span>;<span class="attribute">width</span>:<span class="number">0</span>&#125;<span class="selector-class">.feedback_area_title</span>&#123;<span class="attribute">font</span>:normal normal <span class="number">16px</span>/<span class="number">35px</span> Microsoft YaHei;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span> <span class="number">30px</span>&#125;<span class="selector-class">.louzhu</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">2px</span>&#125;<span class="selector-class">.feedbackListSubtitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.feedbackListSubtitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.feedbackListSubtitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#777</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-class">.feedbackListSubtitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>;<span class="attribute">text-decoration</span>:underline&#125;<span class="selector-class">.feedbackListSubtitle</span> <span class="selector-tag">b</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>&#125;<span class="selector-class">.feedbackListSubtitle</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">border-color</span>:<span class="number">#0000</span> <span class="number">#d1d5da</span> <span class="number">#0000</span> <span class="number">#0000</span>;<span class="attribute">border-width</span>:<span class="number">8px</span>&#125;<span class="selector-class">.feedbackListSubtitle-louzhu</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.feedbackListSubtitle</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">border-color</span>:<span class="number">#0000</span>;<span class="attribute">border-width</span>:<span class="number">7px</span>;<span class="attribute">margin-left</span>:<span class="number">2px</span>;<span class="attribute">margin-top</span>:<span class="number">1px</span>&#125;<span class="selector-class">.feedbackListSubtitle</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">border-right-color</span>:<span class="number">#f6f8fa</span>&#125;<span class="selector-class">.feedbackListSubtitle-louzhu</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">border-right-color</span>:<span class="number">#f1f8ff</span><span class="meta">!important</span>&#125;<span class="selector-class">.feedbackManage</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;<span class="attribute">width</span>:<span class="number">200px</span>&#125;<span class="selector-class">.feedbackCon</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e9e9e9</span>;<span class="attribute">border-bottom-left-radius</span>:<span class="number">5px</span>;<span class="attribute">border-bottom-right-radius</span>:<span class="number">5px</span>;<span class="attribute">border-top</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">1.5</span>;<span class="attribute">min-height</span>:<span class="number">35px</span>;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.feedbackListSubtitle-louzhu</span>&#123;<span class="attribute">background-color</span>:<span class="number">#f1f8ff</span><span class="meta">!important</span>;<span class="attribute">border-bottom-color</span>:<span class="number">#c0d3eb</span><span class="meta">!important</span>&#125;<span class="selector-class">.feedbackItem</span>&#123;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">15px</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">60px</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.feedbackItem</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">background-color</span>:<span class="number">#e1e4e8</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">left</span>:<span class="number">90px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">2px</span>;<span class="attribute">z-index</span>:<span class="number">0</span>&#125;<span class="selector-class">.feedbackAvatar</span>&#123;<span class="attribute">left</span>:<span class="number">1px</span>;<span class="attribute">position</span>:absolute&#125;<span class="selector-class">.feedbackAvatar</span> <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#d1d5da</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">padding</span>:<span class="number">2px</span>;<span class="attribute">width</span>:<span class="number">40px</span>&#125;<span class="selector-tag">div</span><span class="selector-id">#tbCommentBodyPreview</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>&#125;<span class="selector-id">#divRefreshComments</span>&#123;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.commenttb</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-moz-<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#555</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">padding</span>:<span class="number">8px</span>;<span class="attribute">width</span>:<span class="number">320px</span>&#125;<span class="selector-class">.commentTextBox</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.commenttb</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border-color</span>:<span class="number">#52a8eccc</span>;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">transition</span>:all .<span class="number">4s</span> linear <span class="number">0s</span>&#125;<span class="selector-id">#Profile1_panelAdd</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:hover</span>,<span class="selector-id">#Profile1_txtContent</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.commentTextBox</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.commenttb</span><span class="selector-pseudo">:hover</span>&#123;-webkit-<span class="attribute">box-shadow</span>:inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">075</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#52a8ec99</span>;-moz-<span class="attribute">box-shadow</span>:inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">075</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#52a8ec99</span>;<span class="attribute">box-shadow</span>:inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">075</span>),<span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#52a8ec99</span>;<span class="attribute">outline</span>:<span class="number">0</span>&#125;<span class="selector-class">.commentTextBox</span>&#123;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">410px</span><span class="meta">!important</span>&#125;<span class="selector-id">#AjaxHolder_PostComment_btnSubmit</span>&#123;<span class="attribute">background</span>:<span class="number">#5c8ec6</span>;<span class="attribute">border</span>:none;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-moz-<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">outline</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">8px</span> <span class="number">20px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">text-decoration</span>:none;-webkit-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;-moz-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;-o-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;-ms-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;<span class="attribute">vertical-align</span>:middle&#125;<span class="selector-id">#AjaxHolder_PostComment_btnSubmit</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background</span>:<span class="number">#333</span>&#125;<span class="selector-id">#AjaxHolder_PostComment_divCommnentArea</span> <span class="selector-tag">tr</span>&#123;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125;<span class="selector-class">.comment_vote</span>&#123;<span class="attribute">padding-right</span>:<span class="number">10px</span>&#125;<span class="selector-class">.comment_vote</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#999</span>&#125;<span class="selector-class">.comment_vote</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>&#125;<span class="selector-id">#commentform_title</span>&#123;<span class="attribute">background-image</span>:none;<span class="attribute">font</span>:normal normal <span class="number">16px</span>/<span class="number">35px</span> Microsoft YaHei;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;<span class="selector-id">#comment_form_container</span> <span class="selector-class">.author</span>&#123;<span class="attribute">background-image</span>:none;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-moz-<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#555</span>;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">320px</span>&#125;<span class="selector-id">#comment_form_container</span> <span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>&#125;<span class="selector-class">.commentbox_title_left</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>&#125;<span class="selector-id">#comment_form_container</span> <span class="selector-class">.comment_textarea</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-moz-<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#555</span>;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">min-height</span>:<span class="number">250px</span>;<span class="attribute">padding</span>:<span class="number">8px</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#comment_form_container</span> <span class="selector-class">.comment_textarea</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border-color</span>:<span class="number">#5c8ec6</span>;<span class="attribute">outline</span>:<span class="number">0</span>;<span class="attribute">transition</span>:all .<span class="number">4s</span> linear <span class="number">0s</span>&#125;<span class="selector-id">#comment_form_container</span> <span class="selector-class">.comment_textarea</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>&#125;<span class="selector-class">.commentbox_tab</span><span class="selector-class">.active</span>,<span class="selector-class">.commentbox_tab</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">0</span>;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>&#125;<span class="selector-class">.comment_btn</span>&#123;<span class="attribute">background-color</span>:<span class="number">#5c8ec6</span>;<span class="attribute">border</span>:none&#125;<span class="selector-class">.comment_btn</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background</span>:<span class="number">#71ace5</span>&#125;<span class="selector-class">.PostListTitle</span>,<span class="selector-class">.entrylistTitle</span>,<span class="selector-class">.thumbTitle</span>&#123;<span class="attribute">background-image</span>:none;<span class="attribute">height</span>:<span class="number">38px</span>;<span class="attribute">line-height</span>:<span class="number">38px</span>;<span class="attribute">font</span>:normal normal <span class="number">16px</span>/<span class="number">35px</span> Microsoft YaHei;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span> <span class="number">30px</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;<span class="selector-class">.dev__developer</span>,<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">font-family</span>:Open Sans,Microsoft Jhenghei,Microsoft Yahei,sans-serif&#125;<span class="selector-class">.entrylistDescription</span>&#123;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>;<span class="attribute">padding-right</span>:<span class="number">10px</span>;<span class="attribute">padding-top</span>:<span class="number">5px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.entrylistItem</span>&#123;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">margin</span>:<span class="number">3.5rem</span> auto;<span class="attribute">padding-bottom</span>:<span class="number">3.3rem</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.entrylistItem</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e7eef2</span>;<span class="attribute">border-radius</span>:<span class="number">100%</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span>;<span class="attribute">display</span>:block;<span class="attribute">margin-left</span>:-<span class="number">5px</span>;<span class="attribute">position</span>:absolute&#125;<span class="selector-class">.entrylistPosttitle</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">word-wrap</span>:break-word;-webkit-tap-highlight-<span class="attribute">color</span>:transparent;<span class="attribute">background-color</span>:<span class="number">#0000</span>;<span class="attribute">color</span>:<span class="number">#4a4a4a</span>;<span class="attribute">font-size</span>:<span class="number">3.2rem</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">letter-spacing</span>:-<span class="number">1px</span>;<span class="attribute">transition</span>:all .<span class="number">4s</span> linear <span class="number">0s</span>;<span class="attribute">transition-delay</span>:<span class="number">0s</span>;<span class="attribute">transition-duration</span>:.<span class="number">3s</span>;<span class="attribute">transition-property</span>:color;<span class="attribute">transition-timing-function</span>:ease&#125;<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.entrylistItemPostDesc</span>,<span class="selector-class">.sb-title</span>&#123;<span class="attribute">font-family</span>:Open Sans,sans-serif&#125;<span class="selector-class">.entrylistItemPostDesc</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">color</span>:<span class="number">#9eabb3</span>;<span class="attribute">display</span>:none;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">font-size</span>:<span class="number">1.4rem</span>;<span class="attribute">line-height</span>:<span class="number">2.2rem</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding-right</span>:<span class="number">5px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.entrylistItemPostDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.entrylistItemPostDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.entrylistItemPostDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#666</span>&#125;<span class="selector-class">.entrylistItemPostDesc</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>&#125;<span class="selector-class">.entrylist</span> <span class="selector-class">.postSeparator</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">clear</span>:both;<span class="attribute">font-size</span>:<span class="number">0</span>;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-id">#footer</span>,<span class="selector-class">.pager</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-class">.divPhoto</span>,<span class="selector-class">.pager</span>&#123;<span class="attribute">margin-right</span>:<span class="number">10px</span>&#125;<span class="selector-class">.divRecentCommentAticle</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.pager</span>&#123;<span class="attribute">color</span>:<span class="number">#9eabb3</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-id">#nav_next_page</span> <span class="selector-tag">a</span>,<span class="selector-class">.pager</span> <span class="selector-tag">a</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#bfc8cd</span>;<span class="attribute">border-radius</span>:<span class="number">4px</span>;<span class="attribute">color</span>:<span class="number">#9eabb3</span><span class="meta">!important</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">min-width</span>:<span class="number">18px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">text-decoration</span>:none;<span class="attribute">transition</span>:all .<span class="number">2s</span> ease&#125;<span class="selector-id">#nav_next_page</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-id">#nav_next_page</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-id">#nav_next_page</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-class">.pager</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.pager</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.pager</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#9eabb3</span><span class="meta">!important</span>&#125;<span class="selector-class">.pager</span> <span class="selector-tag">a</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">5px</span>&#125;<span class="selector-id">#nav_next_page</span> <span class="selector-tag">a</span>&#123;<span class="attribute">padding</span>:<span class="number">3px</span> <span class="number">5px</span>&#125;<span class="selector-id">#nav_next_page</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.pager</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-color</span>:<span class="number">#98a0a4</span>;<span class="attribute">color</span>:<span class="number">#889093</span>&#125;<span class="selector-class">.PostList</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> dashed <span class="number">#e9e9e9</span>;<span class="attribute">clear</span>:both;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>;<span class="attribute">min-height</span>:<span class="number">1.5em</span>;<span class="attribute">padding-bottom</span>:<span class="number">20px</span>;<span class="attribute">padding-top</span>:<span class="number">20px</span>&#125;<span class="selector-class">.postTitl2</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">padding-bottom</span>:<span class="number">10px</span>;<span class="attribute">padding-top</span>:<span class="number">10px</span>&#125;<span class="selector-class">.postDesc2</span>&#123;<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">float</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.postText2</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">color</span>:<span class="number">#757575</span>&#125;<span class="selector-class">.pfl_feedback_area_title</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.pfl_feedbackItem</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#ccc</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>;<span class="attribute">padding</span>:<span class="number">10px</span>&#125;<span class="selector-class">.pfl_feedbacksubtitle</span>&#123;<span class="attribute">height</span>:<span class="number">1.5em</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.pfl_feedbackname</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>&#125;<span class="selector-class">.commentbox_title_right</span>,<span class="selector-class">.pfl_feedbackManage</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.pfl_feedbackname</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#5c8ec6</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-class">.pfl_feedbackCon</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>;<span class="attribute">padding-top</span>:<span class="number">5px</span>&#125;<span class="selector-class">.pfl_feedbackAnswer</span>&#123;<span class="attribute">color</span>:<span class="number">#f40</span>;<span class="attribute">text-indent</span>:<span class="number">2em</span>&#125;<span class="selector-class">.tdSentMessage</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.errorMessage</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="attribute">width</span>:<span class="number">300px</span>&#125;<span class="selector-id">#Profile1_panelAdd</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,<span class="selector-id">#Profile1_txtContent</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-moz-<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#555</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">padding</span>:<span class="number">8px</span>&#125;<span class="selector-id">#Profile1_panelAdd</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:hover</span>,<span class="selector-id">#Profile1_txtContent</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">border-color</span>:<span class="number">#52a8eccc</span>;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">transition</span>:all .<span class="number">4s</span> linear <span class="number">0s</span>&#125;<span class="selector-id">#Profile1_panelAdd</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>,<span class="selector-id">#Profile1_txtContent</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">border-color</span>:<span class="number">#52a8eccc</span>;<span class="attribute">outline</span>:<span class="number">0</span>&#125;<span class="selector-id">#Profile1_panelAdd</span> <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123;<span class="attribute">background</span>:<span class="number">#5c8ec6</span>;<span class="attribute">border</span>:none;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-moz-<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">outline</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">8px</span> <span class="number">20px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">text-decoration</span>:none;-webkit-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;-moz-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;-o-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;-ms-<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;<span class="attribute">transition</span>:all .<span class="number">4s</span> ease;<span class="attribute">vertical-align</span>:middle&#125;<span class="selector-id">#Profile1_panelAdd</span> <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background</span>:<span class="number">#333</span>&#125;<span class="selector-class">.feedbackListSubtitle</span>&#123;<span class="attribute">align-items</span>:center;<span class="attribute">background-color</span>:<span class="number">#f6f8fa</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e9e9e9</span>;<span class="attribute">border-top-left-radius</span>:<span class="number">5px</span>;<span class="attribute">border-top-right-radius</span>:<span class="number">5px</span>;<span class="attribute">clear</span>:both;<span class="attribute">color</span>:<span class="number">#586069</span>;<span class="attribute">flex-direction</span>:row-reverse;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-overflow</span>:ellipsis;<span class="attribute">white-space</span>:nowrap&#125;<span class="selector-id">#footer</span>,<span class="selector-class">.main-header</span>,<span class="selector-class">.scroll-down</span>&#123;<span class="attribute">position</span>:absolute&#125;<span class="selector-class">.divPhoto</span>&#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">padding</span>:<span class="number">2px</span>&#125;<span class="selector-class">.thumbDescription</span>&#123;<span class="attribute">color</span>:<span class="number">#757575</span>;<span class="attribute">margin-bottom</span>:<span class="number">30px</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>;<span class="attribute">padding-right</span>:<span class="number">10px</span>;<span class="attribute">padding-top</span>:<span class="number">5px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-id">#footer</span>&#123;<span class="attribute">color</span>:<span class="number">#888</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">1.5</span>;<span class="attribute">margin</span>:<span class="number">20vh</span> <span class="number">0</span> <span class="number">0</span>;<span class="attribute">min-height</span>:<span class="number">100px</span>;<span class="attribute">padding</span>:<span class="number">15px</span> <span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>&#125;<span class="selector-class">.my-face</span>&#123;<span class="attribute">animation</span>:my-face <span class="number">5s</span> ease-in-out infinite;<span class="attribute">display</span>:inline-block;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">5px</span>&#125;<span class="keyword">@-moz-keyframes</span> my-face&#123;<span class="number">2%</span>,<span class="number">24%</span>,<span class="number">80%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">4%</span>,<span class="number">68%</span>,<span class="number">98%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">38%</span>,<span class="number">6%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">8%</span>,<span class="number">86%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">10%</span>,<span class="number">72%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">12%</span>,<span class="number">64%</span>,<span class="number">78%</span>,<span class="number">96%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">14%</span>,<span class="number">54%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">16%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">18%</span>,<span class="number">22%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">20%</span>,<span class="number">36%</span>,<span class="number">46%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">26%</span>,<span class="number">50%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">28%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">30%</span>,<span class="number">40%</span>,<span class="number">62%</span>,<span class="number">76%</span>,<span class="number">88%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">32%</span>,<span class="number">34%</span>,<span class="number">66%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">42%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">44%</span>,<span class="number">70%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">48%</span>,<span class="number">74%</span>,<span class="number">82%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">52%</span>,<span class="number">56%</span>,<span class="number">60%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">58%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">84%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">90%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">92%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">94%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>)&#125;&#125;<span class="keyword">@-webkit-keyframes</span> my-face&#123;<span class="number">2%</span>,<span class="number">24%</span>,<span class="number">80%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">4%</span>,<span class="number">68%</span>,<span class="number">98%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">38%</span>,<span class="number">6%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">8%</span>,<span class="number">86%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">10%</span>,<span class="number">72%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">12%</span>,<span class="number">64%</span>,<span class="number">78%</span>,<span class="number">96%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">14%</span>,<span class="number">54%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">16%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">18%</span>,<span class="number">22%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">20%</span>,<span class="number">36%</span>,<span class="number">46%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">26%</span>,<span class="number">50%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">28%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">30%</span>,<span class="number">40%</span>,<span class="number">62%</span>,<span class="number">76%</span>,<span class="number">88%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">32%</span>,<span class="number">34%</span>,<span class="number">66%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">42%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">44%</span>,<span class="number">70%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">48%</span>,<span class="number">74%</span>,<span class="number">82%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">52%</span>,<span class="number">56%</span>,<span class="number">60%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">58%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">84%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">90%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">92%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">94%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>)&#125;&#125;<span class="keyword">@-o-keyframes</span> my-face&#123;<span class="number">2%</span>,<span class="number">24%</span>,<span class="number">80%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">4%</span>,<span class="number">68%</span>,<span class="number">98%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">38%</span>,<span class="number">6%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">8%</span>,<span class="number">86%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">10%</span>,<span class="number">72%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">12%</span>,<span class="number">64%</span>,<span class="number">78%</span>,<span class="number">96%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">14%</span>,<span class="number">54%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">16%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">18%</span>,<span class="number">22%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">20%</span>,<span class="number">36%</span>,<span class="number">46%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">26%</span>,<span class="number">50%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">28%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">30%</span>,<span class="number">40%</span>,<span class="number">62%</span>,<span class="number">76%</span>,<span class="number">88%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">32%</span>,<span class="number">34%</span>,<span class="number">66%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">42%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">44%</span>,<span class="number">70%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">48%</span>,<span class="number">74%</span>,<span class="number">82%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">52%</span>,<span class="number">56%</span>,<span class="number">60%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">58%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">84%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">90%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">92%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">94%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>)&#125;&#125;<span class="keyword">@keyframes</span> my-face&#123;<span class="number">2%</span>,<span class="number">24%</span>,<span class="number">80%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">4%</span>,<span class="number">68%</span>,<span class="number">98%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">38%</span>,<span class="number">6%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">8%</span>,<span class="number">86%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">10%</span>,<span class="number">72%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">12%</span>,<span class="number">64%</span>,<span class="number">78%</span>,<span class="number">96%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">14%</span>,<span class="number">54%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">16%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">18%</span>,<span class="number">22%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">20%</span>,<span class="number">36%</span>,<span class="number">46%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">26%</span>,<span class="number">50%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">28%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">1.5deg</span>)&#125;<span class="number">30%</span>,<span class="number">40%</span>,<span class="number">62%</span>,<span class="number">76%</span>,<span class="number">88%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">32%</span>,<span class="number">34%</span>,<span class="number">66%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">42%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-<span class="number">1.5deg</span>)&#125;<span class="number">44%</span>,<span class="number">70%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">48%</span>,<span class="number">74%</span>,<span class="number">82%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-.<span class="number">5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">52%</span>,<span class="number">56%</span>,<span class="number">60%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">58%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">84%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">1.5px</span>) <span class="built_in">rotate</span>(<span class="number">2.5deg</span>)&#125;<span class="number">90%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">92%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(.<span class="number">5px</span>) <span class="built_in">rotate</span>(-.<span class="number">5deg</span>)&#125;<span class="number">94%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">2.5px</span>) <span class="built_in">rotate</span>(.<span class="number">5deg</span>)&#125;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);-o-<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">0</span>)&#125;&#125;<span class="selector-class">.personInfo</span>&#123;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>&#125;<span class="selector-class">.pages</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-class">.postBody</span>&#123;<span class="attribute">color</span>:<span class="number">#23263b</span>;<span class="attribute">font-size</span>:<span class="number">1.55rem</span>;<span class="attribute">line-height</span>:<span class="number">1.6</span>&#125;<span class="selector-class">.postBody</span> <span class="selector-tag">p</span>,<span class="selector-class">.postCon</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto <span class="number">1em</span>&#125;<span class="selector-class">.postCon</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.postCon</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.postCon</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#9eabb3</span>&#125;<span class="selector-class">.postCon</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#98a0a4</span>&#125;<span class="selector-class">.postBody</span> <span class="selector-tag">ul</span>,<span class="selector-class">.postCon</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">margin-left</span>:<span class="number">2em</span>&#125;<span class="selector-class">.myposts_title</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">text-align</span>:center&#125;<span class="selector-id">#sideBar</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-id">#sideBar</span> <span class="selector-tag">h3</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>&#125;<span class="selector-class">.img-rounded</span>&#123;<span class="attribute">transition</span>:transform .<span class="number">5s</span> ease-out;-webkit-<span class="attribute">transition</span>:transform .<span class="number">6s</span> ease-out;-moz-<span class="attribute">transition</span>:transform .<span class="number">5s</span> ease-out;-ms-<span class="attribute">transition</span>:transform .<span class="number">5s</span> ease-out;-o-<span class="attribute">transition</span>:transform .<span class="number">5s</span> ease-out&#125;<span class="selector-class">.img-rounded</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">1turn</span>)&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">img</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>;<span class="attribute">max-width</span>:<span class="number">700px</span>&#125;<span class="selector-class">.main-header</span>&#123;<span class="attribute">background-size</span>:cover;<span class="attribute">background</span>:<span class="number">#333</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#969696b3</span>;<span class="attribute">display</span>:flex;<span class="attribute">height</span>:<span class="number">100vh</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">max-height</span>:<span class="number">100vh</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">text-align</span>:center;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">z-index</span>:<span class="number">3</span>&#125;<span class="selector-class">.main-header</span> <span class="selector-class">.part</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>&#125;<span class="selector-class">.main-header</span> <span class="selector-class">.part</span> <span class="selector-class">.section</span>&#123;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">position</span>:relative;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.main-header</span> <span class="selector-class">.part</span> <span class="selector-class">.section</span> <span class="selector-tag">img</span>&#123;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">left</span>:<span class="built_in">var</span>(--x);<span class="attribute">object-fit</span>:cover;<span class="attribute">pointer-events</span>:none;<span class="attribute">position</span>:absolute;<span class="attribute">width</span>:<span class="number">100vw</span>&#125;<span class="selector-id">#homeTopCanvas</span>&#123;<span class="attribute">z-index</span>:-<span class="number">1</span>&#125;<span class="selector-class">.inner</span>&#123;<span class="attribute">max-width</span>:<span class="number">800px</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">position</span>:relative;<span class="attribute">width</span>:<span class="number">80%</span>&#125;<span class="selector-class">.page-title</span>,<span class="selector-class">.sb-title</span>&#123;-webkit-<span class="attribute">animation-delay</span>:.<span class="number">6s</span>;<span class="attribute">animation-delay</span>:.<span class="number">5s</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">letter-spacing</span>:-<span class="number">1px</span>;<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="number">#0000004d</span>&#125;<span class="selector-class">.sb-title</span>&#123;-webkit-<span class="attribute">animation</span>:fade-in-down <span class="number">1s</span>&#125;<span class="selector-class">.page-title</span>,<span class="selector-class">.sb-title</span>&#123;<span class="attribute">animation</span>:fade-in-down <span class="number">1s</span> both&#125;<span class="selector-class">.page-title</span>&#123;-webkit-<span class="attribute">animation</span>:fade-in-down <span class="number">1s</span> both;<span class="attribute">font-family</span>:Playball,cursive;<span class="attribute">font-size</span>:<span class="number">5rem</span>;<span class="attribute">mix-blend-mode</span>:screen&#125;<span class="selector-class">.page-title-hover</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">animation</span>:pageTitleText <span class="number">2s</span> infinite;-webkit-<span class="attribute">animation</span>:pageTitleText <span class="number">1s</span> infinite&#125;<span class="keyword">@keyframes</span> pageTitleText&#123;<span class="number">0%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> tomato&#125;<span class="number">10%</span>&#123;<span class="attribute">text-shadow</span>:-<span class="number">2px</span> -<span class="number">2px</span> <span class="number">0</span> gold&#125;<span class="number">20%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> lime&#125;<span class="number">30%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#40e0d0</span>&#125;<span class="number">40%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> tomato&#125;<span class="number">50%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">0</span> -<span class="number">2px</span> <span class="number">0</span> gold&#125;<span class="number">60%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> lime&#125;<span class="number">70%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#40e0d0</span>&#125;<span class="number">80%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> -<span class="number">4px</span> <span class="number">0</span> tomato&#125;<span class="number">90%</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> gold&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> lime&#125;&#125;<span class="selector-id">#footer</span> <span class="selector-class">.footer-text</span>,<span class="selector-class">.page-description</span>&#123;<span class="attribute">font-family</span>:Long Cang,cursive&#125;<span class="selector-class">.sb-title</span>&#123;<span class="attribute">font-size</span>:<span class="number">3.55rem</span>&#125;<span class="selector-class">.vertical</span>&#123;<span class="attribute">align-items</span>:center;<span class="attribute">display</span>:flex;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">position</span>:absolute;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">z-index</span>:<span class="number">2</span>&#125;<span class="selector-class">.page-author</span>,<span class="selector-class">.page-description</span>&#123;<span class="attribute">color</span>:<span class="number">#fffc</span>;<span class="attribute">display</span>:none;<span class="attribute">font-weight</span>:<span class="number">400</span>;<span class="attribute">letter-spacing</span>:.<span class="number">01rem</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="number">#00000080</span>&#125;<span class="selector-class">.page-description</span>&#123;-webkit-<span class="attribute">box-orient</span>:vertical;-webkit-<span class="selector-tag">line</span>-clamp:<span class="number">10</span>;<span class="attribute">font-size</span>:<span class="number">2.2rem</span>;<span class="attribute">overflow</span>:hidden&#125;<span class="selector-class">.page-author</span>,<span class="selector-class">.page-description</span>&#123;-webkit-<span class="attribute">animation</span>:fade-in-down .<span class="number">9s</span>;<span class="attribute">animation</span>:fade-in-down .<span class="number">9s</span> both;-webkit-<span class="attribute">animation-delay</span>:.<span class="number">1s</span>;<span class="attribute">animation-delay</span>:.<span class="number">3s</span>&#125;<span class="selector-class">.page-author</span>&#123;<span class="attribute">font-family</span>:Ubuntu Mono,monospace;<span class="attribute">font-size</span>:<span class="number">1.5rem</span><span class="meta">!important</span>;<span class="attribute">line-height</span>:<span class="number">1.3em</span>&#125;<span class="selector-class">.scroll-down</span>&#123;-webkit-<span class="attribute">animation</span>:bounce <span class="number">4s</span> <span class="number">2s</span> infinite;<span class="attribute">animation</span>:bounce <span class="number">4s</span> <span class="number">2s</span> infinite;<span class="attribute">bottom</span>:<span class="number">45px</span>;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">34px</span>;<span class="attribute">height</span>:<span class="number">34px</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">margin-left</span>:-<span class="number">16px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">text-decoration</span>:none<span class="meta">!important</span>;-webkit-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">90deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">width</span>:<span class="number">34px</span>;<span class="attribute">z-index</span>:<span class="number">100</span>&#125;<span class="selector-class">.hidden</span>,<span class="selector-class">.m-list-title</span>,<span class="selector-class">.post-del-title</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-class">.scroll-down-icon</span>&#123;<span class="attribute">bottom</span>:<span class="number">7px</span>;<span class="attribute">color</span>:<span class="number">#fff9</span>;<span class="attribute">font-size</span>:<span class="number">34px</span><span class="meta">!important</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.scroll-down</span><span class="selector-pseudo">:hover</span>&#123;-webkit-<span class="attribute">animation</span>:none;<span class="attribute">animation</span>:none;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;<span class="selector-class">.hidden</span>&#123;<span class="attribute">text-indent</span>:-<span class="number">9999px</span>;<span class="attribute">visibility</span>:hidden&#125;<span class="keyword">@-webkit-keyframes</span> bounce&#123;<span class="number">0%</span>,<span class="number">10%</span>,<span class="number">25%</span>,<span class="number">40%</span>,<span class="number">50%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>)&#125;<span class="number">20%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>)&#125;<span class="number">30%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>)&#125;&#125;<span class="keyword">@keyframes</span> bounce&#123;<span class="number">0%</span>,<span class="number">10%</span>,<span class="number">25%</span>,<span class="number">40%</span>,<span class="number">50%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>)&#125;<span class="number">20%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>)&#125;<span class="number">30%</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">5px</span>) <span class="built_in">rotate</span>(-<span class="number">90deg</span>)&#125;&#125;<span class="keyword">@-webkit-keyframes</span> fade-in-down&#123;<span class="number">0%</span>&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>)&#125;&#125;<span class="keyword">@keyframes</span> fade-in-down&#123;<span class="number">0%</span>&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">10px</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>)&#125;&#125;<span class="selector-class">.menu-button-scroll</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(<span class="number">180deg</span>,<span class="number">#fff</span>,<span class="number">#f5f5fa</span>)<span class="meta">!important</span>;<span class="attribute">border</span>:<span class="number">0</span><span class="meta">!important</span>;-webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> -<span class="number">2px</span> <span class="number">#252c6126</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d649433</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> -<span class="number">2px</span> <span class="number">#252c6126</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d649433</span>;<span class="attribute">color</span>:<span class="number">#777aaf</span><span class="meta">!important</span>;<span class="attribute">left</span>:-<span class="number">17px</span><span class="meta">!important</span>;<span class="attribute">width</span>:<span class="number">35px</span><span class="meta">!important</span>&#125;<span class="selector-class">.menu-button-scroll</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">#777aaf</span> <span class="number">20%</span>,<span class="number">#0000</span> <span class="number">0</span>,<span class="number">#0000</span> <span class="number">40%</span>,<span class="number">#777aaf</span> <span class="number">0</span>,<span class="number">#777aaf</span> <span class="number">60%</span>,<span class="number">#0000</span> <span class="number">0</span>,<span class="number">#0000</span> <span class="number">80%</span>,<span class="number">#777aaf</span> <span class="number">0</span>)<span class="meta">!important</span>&#125;<span class="selector-class">.m-list-title</span>&#123;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#3b3b3b</span>;<span class="attribute">font-family</span>:Merriweather,Open Sans,Microsoft Jhenghei,Microsoft Yahei,sans-serif;<span class="attribute">margin</span>:<span class="number">24px</span> <span class="number">0</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.m-list-title-select</span>&#123;<span class="attribute">color</span>:<span class="number">#888</span>;<span class="attribute">font-size</span>:<span class="number">22px</span><span class="meta">!important</span>;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:-<span class="number">7px</span>;<span class="attribute">top</span>:<span class="number">1px</span>&#125;<span class="selector-id">#introduce</span> <span class="selector-tag">div</span>,<span class="selector-id">#rightMenu</span>&#123;<span class="attribute">right</span>:<span class="number">10px</span>;<span class="attribute">text-align</span>:center&#125;<span class="selector-class">.m-list-title-select</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#b8b8b8</span>;<span class="attribute">cursor</span>:pointer&#125;<span class="selector-class">.m-list-title</span>&gt;<span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#000</span>;<span class="attribute">bottom</span>:-<span class="number">9px</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">#000</span>;<span class="attribute">color</span>:<span class="number">#b8b8b8</span>;<span class="attribute">display</span>:block;<span class="attribute">left</span>:<span class="number">35%</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="attribute">margin-left</span>:-<span class="number">5px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">74px</span>&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h6</span>,<span class="selector-tag">blockquote</span>&#123;<span class="attr">--text-opacity</span>:<span class="number">1</span><span class="meta">!important</span>;<span class="attribute">background-color</span>:<span class="number">#f7f7f7</span><span class="meta">!important</span>;<span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(<span class="number">180deg</span>,<span class="number">#fff</span>,<span class="number">#f5f5fa</span>)<span class="meta">!important</span>;<span class="attribute">border</span>:none<span class="meta">!important</span>;<span class="attribute">border-left</span>:<span class="number">3px</span> solid <span class="number">#5468ffcc</span><span class="meta">!important</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> <span class="number">0</span> <span class="number">#252c6117</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d64940f</span><span class="meta">!important</span>;<span class="attribute">color</span>:<span class="number">#484c7a</span><span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-weight</span>:<span class="number">400</span>;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">0</span><span class="meta">!important</span>;<span class="attribute">padding</span>:<span class="number">15px</span><span class="meta">!important</span>&#125;<span class="selector-tag">blockquote</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span><span class="meta">!important</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">text-indent</span>:<span class="number">0</span><span class="meta">!important</span>&#125;<span class="selector-tag">details</span>&#123;<span class="attribute">background</span>:<span class="number">#448aff1a</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#1b86f9</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">margin</span>:<span class="number">1.5rem</span> <span class="number">0</span>;<span class="attribute">padding</span>:.<span class="number">5rem</span> <span class="number">1rem</span>&#125;<span class="selector-tag">summary</span>&#123;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:block;<span class="attribute">outline</span>:none&#125;<span class="selector-tag">details</span>&gt;<span class="selector-tag">summary</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">color</span>:<span class="number">#448aff</span>;<span class="attribute">content</span>:<span class="string">&quot;\e699&quot;</span>;<span class="attribute">font-family</span>:iconfont,simple-memory-iconfont<span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">1.5rem</span>;<span class="attribute">font-style</span>:normal<span class="meta">!important</span>;<span class="attribute">left</span>:.<span class="number">6rem</span>&#125;<span class="selector-class">.blogpost-body</span> <span class="selector-tag">p</span><span class="selector-class">.tip</span>&#123;<span class="attribute">background-color</span>:<span class="number">#42b9831a</span><span class="meta">!important</span>;<span class="attribute">border</span>:none<span class="meta">!important</span>;<span class="attribute">border-left</span>:<span class="number">4px</span> solid <span class="number">#42b983</span><span class="meta">!important</span>&#125;<span class="selector-class">.blogpost-body</span> <span class="selector-tag">p</span><span class="selector-class">.tip</span>,<span class="selector-class">.blogpost-body</span> <span class="selector-tag">p</span><span class="selector-class">.warn</span>&#123;<span class="attr">--text-opacity</span>:<span class="number">1</span><span class="meta">!important</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> <span class="number">0</span> <span class="number">#252c6117</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d64940f</span><span class="meta">!important</span>;<span class="attribute">color</span>:<span class="number">#484c7a</span><span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-weight</span>:<span class="number">400</span>;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">8px</span><span class="meta">!important</span>;<span class="attribute">padding</span>:<span class="number">15px</span><span class="meta">!important</span>&#125;<span class="selector-class">.blogpost-body</span> <span class="selector-tag">p</span><span class="selector-class">.warn</span>&#123;<span class="attribute">background-color</span>:<span class="number">#ff66661a</span><span class="meta">!important</span>;<span class="attribute">border</span>:none<span class="meta">!important</span>;<span class="attribute">border-left</span>:<span class="number">4px</span> solid <span class="number">#f66</span><span class="meta">!important</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.blogpost-body</span> <span class="selector-tag">p</span><span class="selector-class">.warn</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">background-color</span>:<span class="number">#f66</span>;<span class="attribute">border-radius</span>:<span class="number">100%</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">content</span>:<span class="string">&quot;!&quot;</span>;<span class="attribute">font-family</span>:Dosis,Source Sans Pro,Helvetica Neue,Arial,sans-serif;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">left</span>:-<span class="number">12px</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">text-align</span>:center;<span class="attribute">top</span>:<span class="number">14px</span>;<span class="attribute">width</span>:<span class="number">20px</span>&#125;<span class="selector-class">.titleIcon</span>&#123;<span class="attribute">color</span>:<span class="number">#5d69a5</span>;<span class="attribute">font-size</span>:<span class="number">34px</span><span class="meta">!important</span>;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;<span class="attribute">margin-top</span>:<span class="number">5px</span>;<span class="attribute">padding-left</span>:<span class="number">0</span>&#125;<span class="selector-class">.postBody</span> <span class="selector-tag">li</span>,<span class="selector-class">.postCon</span> <span class="selector-tag">li</span>&#123;<span class="attribute">list-style-type</span>:disc;<span class="attribute">margin-bottom</span>:.<span class="number">5em</span>&#125;<span class="selector-id">#commentform_title</span>,<span class="selector-class">.entrylistTitle</span>,<span class="selector-class">.feedback_area_title</span>&#123;<span class="attribute">border-bottom</span>:none&#125;<span class="selector-id">#commentform_title</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.entrylistTitle</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.feedback_area_title</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> dashed <span class="number">#e9e9e9</span>;<span class="attribute">bottom</span>:<span class="number">16px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">position</span>:relative;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.entrylistTitle</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">left</span>:<span class="number">200px</span>&#125;<span class="selector-id">#commentform_title</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.feedback_area_title</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">left</span>:<span class="number">80px</span>&#125;<span class="selector-id">#tbCommentBody</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span><span class="meta">!important</span>&#125;<span class="selector-id">#rightMenu</span>&#123;<span class="attribute">bottom</span>:<span class="number">10px</span>;<span class="attribute">min-width</span>:<span class="number">24px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">width</span>:<span class="number">40px</span>;<span class="attribute">z-index</span>:<span class="number">2</span>&#125;<span class="selector-tag">div</span><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenuItem</span>&#123;<span class="attribute">border-radius</span>:<span class="number">50%</span>;-webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> -<span class="number">2px</span> <span class="number">#252c6126</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d649433</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> -<span class="number">2px</span> <span class="number">#252c6126</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d649433</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">15px</span>;<span class="attribute">height</span>:<span class="number">28px</span>;<span class="attribute">line-height</span>:<span class="number">28px</span>;<span class="attribute">margin-bottom</span>:<span class="number">4px</span>;<span class="attribute">padding</span>:<span class="number">4px</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">28px</span>&#125;<span class="selector-id">#author_profile</span>,<span class="selector-id">#div_digg</span>&#123;<span class="attribute">margin-top</span>:<span class="number">5px</span>&#125;<span class="selector-id">#div_digg</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">margin-right</span>:<span class="number">20px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">140px</span>&#125;<span class="selector-id">#div_digg</span> <span class="selector-class">.buryit</span>,<span class="selector-id">#div_digg</span> <span class="selector-class">.diggit</span>&#123;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">height</span>:<span class="number">58px</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding-top</span>:<span class="number">0</span>;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">58px</span>&#125;<span class="selector-id">#div_digg</span> <span class="selector-class">.diggit</span>&#123;<span class="attribute">background</span>:<span class="number">#ecfdf5</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#a7f3d0</span>;<span class="attribute">color</span>:<span class="number">#10b981</span>;<span class="attribute">float</span><span class="selector-pseudo">:left</span>&#125;<span class="selector-id">#div_digg</span> <span class="selector-class">.buryit</span>&#123;<span class="attribute">background</span>:<span class="number">#f6f8fa</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e5e7eb</span>;<span class="attribute">color</span>:<span class="number">#6b7280</span>;<span class="attribute">float</span><span class="selector-pseudo">:right</span>&#125;<span class="selector-id">#div_digg</span> <span class="selector-class">.buryit</span> <span class="selector-tag">i</span>,<span class="selector-id">#div_digg</span> <span class="selector-class">.diggit</span> <span class="selector-tag">i</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">margin-top</span>:<span class="number">4px</span>&#125;<span class="selector-id">#div_digg</span> <span class="selector-class">.diggit</span> <span class="selector-class">.diggnum</span>&#123;<span class="attribute">color</span>:<span class="number">#10b981</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>&#125;<span class="selector-id">#div_digg</span> <span class="selector-class">.buryit</span> <span class="selector-class">.burynum</span>&#123;<span class="attribute">color</span>:<span class="number">#6b7280</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>&#125;<span class="selector-id">#rightMenu</span> <span class="selector-tag">i</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">font-weight</span>:<span class="number">500</span>&#125;<span class="selector-id">#rightMenu</span> <span class="selector-class">.hideRightMenu</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#rightGzh</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-size</span>:<span class="number">18px</span>&#125;<span class="selector-id">#rightDashang</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-size</span>:<span class="number">32px</span>;<span class="attribute">left</span>:-<span class="number">1px</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.rightMenuItem</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(<span class="number">180deg</span>,<span class="number">#fff</span>,<span class="number">#f5f5fa</span>);<span class="attribute">color</span>:<span class="number">#777aaf</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">filter</span>:<span class="built_in">Alpha</span>(opacity=<span class="number">50</span>);<span class="attribute">position</span>:relative;-webkit-<span class="attribute">transition</span>:all .<span class="number">5s</span> ease-out;<span class="attribute">transition</span>:all .<span class="number">5s</span> ease-out&#125;<span class="selector-id">#attention</span> <span class="selector-tag">i</span>,<span class="selector-id">#rightBuryit</span> <span class="selector-tag">i</span>,<span class="selector-id">#rightDiggit</span> <span class="selector-tag">i</span>,<span class="selector-id">#rightMenuHome</span> <span class="selector-tag">i</span>,<span class="selector-id">#rtaDirectory</span> <span class="selector-tag">i</span>,<span class="selector-id">#toUpDownI</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-weight</span>:<span class="number">600</span>&#125;<span class="selector-id">#rightDashang</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#rightGzh</span> <span class="selector-class">.rightMenuSpan</span>&#123;<span class="attribute">color</span>:<span class="number">#777</span>;<span class="attribute">display</span>:none;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">left</span>:-<span class="number">156px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;<span class="attribute">width</span>:<span class="number">140px</span>&#125;<span class="selector-id">#rightGzh</span> <span class="selector-class">.rightMenuSpan</span>&#123;<span class="attribute">top</span>:-<span class="number">25px</span>&#125;<span class="selector-id">#attention</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#rightBuryit</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#rightDiggit</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#rightMenuHome</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#rightMenuSite</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#rtaDirectory</span> <span class="selector-class">.rightMenuSpan</span>,<span class="selector-id">#toUpDown</span> <span class="selector-class">.rightMenuSpan</span>&#123;<span class="attribute">background</span>:<span class="number">#1b1c1d</span><span class="meta">!important</span>;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;-webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> -<span class="number">1px</span> <span class="number">#8c92a380</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> -<span class="number">1px</span> <span class="number">#8c92a380</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">display</span>:none;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-style</span>:normal;<span class="attribute">font-weight</span>:<span class="number">400</span>;<span class="attribute">left</span>:-<span class="number">95px</span>;<span class="attribute">max-width</span>:unset;<span class="attribute">opacity</span>:.<span class="number">9</span>;<span class="attribute">position</span>:absolute;<span class="attribute">text-align</span>:center;<span class="attribute">white-space</span>:nowrap;<span class="attribute">width</span>:<span class="number">83px</span>&#125;<span class="selector-id">#attention</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#rightBuryit</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#rightDiggit</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#rightMenuHome</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#rightMenuSite</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#rtaDirectory</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#toUpDown</span> <span class="selector-class">.rightMenuSpan</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">background-attachment</span>:scroll;<span class="attribute">background-clip</span>:initial;<span class="attribute">background-color</span>:<span class="number">#1b1c1d</span>;<span class="attribute">bottom</span>:auto;<span class="attribute">box-shadow</span>:<span class="number">1px</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#b3b3b333</span>;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">height</span>:<span class="number">8.98px</span>;<span class="attribute">left</span>:auto;<span class="attribute">margin-top</span>:-<span class="number">3.9px</span>;<span class="attribute">opacity</span>:.<span class="number">9</span>;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:-.<span class="number">325em</span>;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">transform</span>:<span class="built_in">matrix</span>(.<span class="number">707107</span>,.<span class="number">707107</span>,-.<span class="number">707107</span>,.<span class="number">707107</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="attribute">white-space</span>:nowrap;<span class="attribute">width</span>:<span class="number">8.98px</span>&#125;<span class="selector-class">.rightDanshanSpan</span>&#123;<span class="attribute">bottom</span>:-<span class="number">134px</span>&#125;<span class="selector-class">.ds-pay</span>&#123;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.ds-alipay</span>,<span class="selector-class">.ds-gzh</span>,<span class="selector-class">.ds-wecat</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">2px</span> <span class="number">7px</span> <span class="number">#0000004d</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">height</span>:<span class="number">140px</span>;<span class="attribute">margin</span>:<span class="number">3px</span> <span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">5px</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-align</span>:center;<span class="attribute">transition</span>:all <span class="number">1s</span> ease-in-out <span class="number">0s</span>;<span class="attribute">width</span>:<span class="number">140px</span>&#125;<span class="selector-class">.ds-alipay</span> <span class="selector-tag">img</span>,<span class="selector-class">.ds-gzh</span> <span class="selector-tag">img</span>,<span class="selector-class">.ds-wecat</span> <span class="selector-tag">img</span>&#123;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-class">.ds-alipay</span> <span class="selector-tag">span</span>,<span class="selector-class">.ds-gzh</span> <span class="selector-tag">span</span>,<span class="selector-class">.ds-wecat</span> <span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">7px</span> <span class="number">#0000001a</span>;<span class="attribute">color</span>:<span class="number">#777</span>;<span class="attribute">font-family</span>:Ubuntu Mono,monospace;<span class="attribute">font-size</span>:.<span class="number">85em</span>;<span class="attribute">height</span>:<span class="number">18px</span>;<span class="attribute">left</span>:-<span class="number">32px</span>;<span class="attribute">line-height</span>:<span class="number">18px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">6px</span> <span class="number">2px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">14px</span>;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">90deg</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">90deg</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">90deg</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">90deg</span>);-o-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">90deg</span>)&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">table</span> <span class="selector-tag">td</span>,<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">table</span> <span class="selector-tag">th</span>,<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span> <span class="selector-tag">td</span>,<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span> <span class="selector-tag">th</span>&#123;<span class="attribute">background-clip</span>:padding-box;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">display</span>:table-cell;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-overflow</span>:ellipsis;<span class="attribute">vertical-align</span>:middle&#125;<span class="selector-class">.attentionSpan</span>&#123;<span class="attribute">top</span>:<span class="number">2px</span>&#125;<span class="selector-class">.cnblogs-markdown</span> <span class="selector-class">.cnblogs_code_copy</span> <span class="selector-tag">a</span>,<span class="selector-class">.rightBuryitSpan</span>&#123;<span class="attribute">top</span>:<span class="number">0</span>&#125;<span class="selector-class">.rightDiggitSpan</span>&#123;<span class="attribute">top</span>:<span class="number">7px</span>&#125;<span class="selector-class">.toUpDownSpan</span>&#123;<span class="attribute">top</span>:<span class="number">3px</span>&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">table</span>,<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span>&#123;<span class="attribute">background-color</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#dfe3ec</span>;<span class="attribute">border-bottom</span>:<span class="number">0</span>;<span class="attribute">border-collapse</span>:initial<span class="meta">!important</span>;<span class="attribute">border-right</span>:<span class="number">0</span>;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">color</span>:<span class="number">#222</span>;<span class="attribute">display</span>:table<span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">overflow</span>:hidden<span class="meta">!important</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">position</span>:relative;<span class="attribute">width</span>:<span class="number">100%</span><span class="meta">!important</span>&#125;<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span>,<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">table</span> <span class="selector-tag">th</span>,<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span> <span class="selector-tag">th</span>&#123;<span class="attribute">background-color</span>:<span class="number">#eef0f6</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#dfe3ec</span>;<span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#dfe3ec</span>;<span class="attribute">min-width</span>:<span class="number">100px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">18px</span>;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">table</span> <span class="selector-tag">td</span>,<span class="selector-class">.feedbackCon</span> <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;<span class="attribute">background-color</span>:<span class="number">#fff</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#dfe6ec</span>;<span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#dfe3ec</span>;<span class="attribute">min-width</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span>&#125;<span class="selector-id">#cnblogs_post_body</span>&gt;<span class="selector-tag">p</span>&#123;<span class="attribute">font-feature-settings</span>:<span class="string">&quot;tnum&quot;</span>;<span class="attribute">font-family</span>:-apple-system,BlinkMacSystemFont,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Segoe UI,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Helvetica Neue,Helvetica,Arial,sans-serif;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">font-variant</span>:tabular-nums;<span class="attribute">font-weight</span>:<span class="number">400</span>;<span class="attribute">letter-spacing</span>:.<span class="number">015em</span>;<span class="attribute">line-height</span>:<span class="number">1.8</span>;<span class="attribute">margin</span>:<span class="number">13px</span> auto;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">word-break</span>:break-word&#125;<span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;<span class="attribute">margin-left</span>:<span class="number">18px</span>&#125;<span class="selector-class">.cnblogs_code</span>,pre&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>&#125;<span class="selector-class">.cnblogs_code</span>,<span class="selector-class">.cnblogs_code</span> pre,<span class="selector-class">.cnblogs_code</span> <span class="selector-tag">span</span>,pre&#123;<span class="attribute">font-family</span>:Source Code Pro,Consolas,Menlo,Monaco,Courier New,monospace<span class="meta">!important</span>;<span class="attribute">font-weight</span>:<span class="number">400</span>&#125;<span class="selector-class">.header__span</span> <span class="selector-class">.dev__developer</span>&#123;<span class="attribute">left</span>:<span class="number">90px</span>;<span class="attribute">min-height</span>:<span class="number">34px</span>;<span class="attribute">top</span>:<span class="number">12px</span>&#125;<span class="selector-class">.dev__developer</span>,<span class="selector-class">.dev__fe</span>,<span class="selector-class">.dev__fe</span> <span class="selector-tag">i</span>,<span class="selector-class">.dev__slash</span>,<span class="selector-class">.dev__ux</span>,<span class="selector-class">.dev__ux</span> <span class="selector-tag">i</span>&#123;<span class="attribute">transition</span>:all .<span class="number">6s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">555</span>,-.<span class="number">375</span>,<span class="number">0</span>,<span class="number">1.615</span>)&#125;<span class="selector-class">.header__dev--open</span> <span class="selector-class">.dev__fe</span> <span class="selector-tag">i</span>&#123;<span class="attribute">text-indent</span>:<span class="number">5px</span><span class="meta">!important</span>&#125;<span class="selector-class">.header__dev--open</span> <span class="selector-class">.dev__ux</span> <span class="selector-tag">i</span>&#123;<span class="attribute">text-indent</span>:<span class="number">11px</span><span class="meta">!important</span>&#125;<span class="selector-class">.header__dev--open</span> <span class="selector-class">.dev__developer</span>&#123;<span class="attribute">opacity</span>:.<span class="number">6</span>;-webkit-<span class="attribute">transform</span>:<span class="built_in">translateX</span>(<span class="number">15px</span>);<span class="attribute">transform</span>:<span class="built_in">translateX</span>(<span class="number">15px</span>)&#125;<span class="selector-class">.header__dev--open</span> <span class="selector-class">.dev__slash</span>&#123;-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">9</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">9</span>) <span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="selector-class">.header__dev--slow</span> <span class="selector-class">.dev__developer</span>,<span class="selector-class">.header__dev--slow</span> <span class="selector-class">.dev__fe</span>,<span class="selector-class">.header__dev--slow</span> <span class="selector-class">.dev__fe</span> <span class="selector-tag">i</span>,<span class="selector-class">.header__dev--slow</span> <span class="selector-class">.dev__slash</span>,<span class="selector-class">.header__dev--slow</span> <span class="selector-class">.dev__ux</span>,<span class="selector-class">.header__dev--slow</span> <span class="selector-class">.dev__ux</span> <span class="selector-tag">i</span>&#123;<span class="attribute">transition</span>:all <span class="number">1.2s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">555</span>,-.<span class="number">375</span>,<span class="number">0</span>,<span class="number">1.615</span>)&#125;<span class="selector-id">#m-nav-list</span> <span class="selector-tag">li</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">position</span>:relative&#125;<span class="selector-id">#m-nav-list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">i</span>&#123;<span class="attribute">color</span>:<span class="number">#888</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">left</span>:-<span class="number">2px</span>;<span class="attribute">margin-right</span>:<span class="number">3px</span>;<span class="attribute">position</span>:relative;<span class="attribute">top</span>:<span class="number">1px</span>&#125;<span class="selector-id">#comment_nav</span>,<span class="selector-id">#header</span>,<span class="selector-id">#leftcontentcontainer</span>,<span class="selector-id">#profile_block</span>,<span class="selector-id">#top_nav</span>,<span class="selector-class">.catListTitle</span>&#123;<span class="attribute">display</span>:none<span class="meta">!important</span>&#125;<span class="selector-id">#ad_c1</span>,<span class="selector-id">#ad_c2</span>,<span class="selector-id">#ad_t1</span>,<span class="selector-id">#ad_t2</span>,<span class="selector-id">#cnblogs_c1</span>,<span class="selector-id">#cnblogs_c2</span>,<span class="selector-id">#commentform_title</span> <span class="selector-tag">a</span>,<span class="selector-id">#under_post_kb</span>,<span class="selector-id">#under_post_news</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#progressBar</span>&#123;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">position</span>:fixed;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">z-index</span>:<span class="number">998</span>&#125;<span class="selector-id">#home</span> <span class="selector-tag">code</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[class]</span>),<span class="selector-tag">span</span><span class="selector-class">.cnblogs_code</span>&#123;<span class="attribute">background-color</span>:<span class="number">#f9f2f4</span>;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">bottom</span>:<span class="number">1px</span>;<span class="attribute">color</span>:<span class="number">#d83b64</span>;<span class="attribute">display</span>:inline;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">padding</span>:<span class="number">2px</span> <span class="number">4px</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-class">.cnblogs_code</span>&#123;<span class="attribute">background-color</span>:initial;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">position</span>:relative&#125;pre&#123;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">border</span>:<span class="number">0</span><span class="meta">!important</span>;<span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">4px</span><span class="meta">!important</span>;<span class="attribute">counter-reset</span>:itemcounter;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">white-space</span>:pre;<span class="attribute">word-break</span>:break-all&#125;<span class="selector-class">.postBody</span> pre<span class="selector-pseudo">:not</span>(<span class="selector-class">.hljs</span>)&#123;<span class="attribute">color</span>:<span class="number">#23263b</span>&#125;pre <span class="selector-class">.line-numbers-rows</span>&#123;<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">counter-increment</span>:itemcounter;<span class="attribute">left</span>:<span class="number">1px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">34px</span>&#125;<span class="selector-class">.code-pre-line</span>,<span class="selector-tag">code</span>-box&#123;<span class="attribute">display</span>:block;<span class="attribute">position</span>:relative&#125;<span class="selector-tag">code</span>-box&#123;<span class="attribute">border-radius</span>:<span class="number">4px</span>;-webkit-<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> -<span class="number">2px</span> <span class="number">#252c6126</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d64940f</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">4px</span> <span class="number">11px</span> -<span class="number">2px</span> <span class="number">#252c6126</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#5d64940f</span>;<span class="attribute">margin</span>:<span class="number">5px</span>&#125;<span class="selector-class">.code-hljs-len</span>&#123;<span class="attribute">background-color</span>:<span class="number">#e6e6e61a</span>;<span class="attribute">border-radius</span>:<span class="number">2px</span>;<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">height</span>:<span class="number">22px</span>;<span class="attribute">left</span>:<span class="number">73px</span>;<span class="attribute">line-height</span>:<span class="number">22px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">6px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">6px</span>;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">code</span>-box <span class="selector-class">.code-tools</span>&#123;-webkit-<span class="attribute">box-align</span>:center;-moz-<span class="attribute">box-align</span>:center;-o-<span class="attribute">box-align</span>:center;-ms-<span class="attribute">flex</span>-align:center;-webkit-<span class="attribute">align-items</span>:center;<span class="attribute">align-items</span>:center;<span class="attribute">border-radius</span>:<span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;<span class="attribute">color</span>:<span class="number">#effc</span>;<span class="attribute">display</span>:flex;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">height</span>:<span class="number">16px</span>;<span class="attribute">min-height</span>:<span class="number">1.2rem</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding</span>:<span class="number">6px</span>;<span class="attribute">position</span>:relative&#125;<span class="selector-tag">code</span>-box <span class="selector-class">.code-tools</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">background</span>:<span class="number">#fc625d</span>;<span class="attribute">border-radius</span>:<span class="number">50%</span>;-webkit-<span class="attribute">box-shadow</span>:<span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>,<span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span>;<span class="attribute">box-shadow</span>:<span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>,<span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span>;<span class="attribute">content</span>:<span class="string">&quot; &quot;</span>;<span class="attribute">height</span>:<span class="number">12px</span>;<span class="attribute">left</span>:<span class="number">12px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">11px</span>;<span class="attribute">width</span>:<span class="number">12px</span>&#125;pre <span class="selector-class">.line-numbers-rows</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">content</span>:<span class="built_in">counter</span>(itemcounter)&#125;<span class="selector-class">.code-pre-line</span>&#123;<span class="attribute">padding-left</span>:<span class="number">44px</span><span class="meta">!important</span>&#125;<span class="selector-class">.code-copay-btn</span>&#123;<span class="attribute">align-items</span>:center;<span class="attribute">background-color</span>:<span class="number">#e6e6e633</span>;<span class="attribute">border</span>:none;<span class="attribute">border-radius</span>:<span class="number">6px</span>;<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:flex;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">height</span>:<span class="number">24px</span>;<span class="attribute">justify-content</span>:center;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">1px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:<span class="number">8px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">top</span>:<span class="number">6px</span>;<span class="attribute">transition</span>:opacity .<span class="number">2s</span> ease-in-out,visibility .<span class="number">2s</span> ease-in-out;-webkit-<span class="attribute">user-select</span>:none;-moz-<span class="attribute">user-select</span>:none;-ms-<span class="attribute">user-select</span>:none;<span class="attribute">user-select</span>:none;<span class="attribute">visibility</span>:hidden;<span class="attribute">width</span>:<span class="number">26px</span>;<span class="attribute">z-index</span>:<span class="number">1</span>&#125;<span class="selector-class">.cnblogs_code</span> <span class="selector-tag">div</span>&#123;<span class="attribute">background-color</span>:initial&#125;<span class="selector-class">.cnblogs_code_collapse</span>&#123;<span class="attribute">background-color</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">color</span>:<span class="number">#d08770</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:inline;<span class="attribute">font-family</span>:Merriweather,Open Sans,Microsoft Jhenghei,Microsoft Yahei,sans-serif<span class="meta">!important</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">position</span>:relative;<span class="attribute">top</span>:<span class="number">1px</span>&#125;<span class="selector-id">#sideToolbar</span>,<span class="selector-class">.cnblogs_code_copy</span> <span class="selector-tag">img</span>,<span class="selector-class">.list</span> <span class="selector-class">.out</span> <span class="selector-class">.icontd</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-class">.cnblogs_code_toolbar</span>&#123;<span class="attribute">height</span>:<span class="number">0</span>&#125;<span class="selector-class">.cnblogs_code_copy</span> <span class="selector-tag">a</span>&#123;<span class="attribute">background-repeat</span>:no-repeat;<span class="attribute">display</span>:inline-block;<span class="attribute">height</span>:<span class="number">16px</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">position</span>:absolute;<span class="attribute">width</span>:<span class="number">16px</span>&#125;<span class="selector-class">.code_img_closed</span>,<span class="selector-class">.code_img_opened</span>&#123;<span class="attribute">cursor</span>:pointer&#125;<span class="selector-class">.cnblogs_code_toolbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-class">.cnblogs_code_toolbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.cnblogs_code_toolbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.cnblogs_code_toolbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> <span class="selector-tag">img</span>,<span class="selector-class">.cnblogs_code_toolbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-class">.cnblogs_code_toolbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> <span class="selector-tag">img</span>&#123;<span class="attribute">background-color</span>:initial<span class="meta">!important</span>;<span class="attribute">border</span>:none<span class="meta">!important</span>&#125;<span class="selector-class">.cnblogs-markdown</span> <span class="selector-tag">code</span>,<span class="selector-class">.cnblogs-post-body</span> <span class="selector-tag">code</span>&#123;<span class="attribute">background-color</span>:unset<span class="meta">!important</span>;<span class="attribute">border</span>:<span class="number">0</span><span class="meta">!important</span>&#125;<span class="selector-class">.postBody</span> <span class="selector-class">.cnblogs-markdown</span> <span class="selector-tag">code</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.language-env</span>),<span class="selector-class">.postBody</span> <span class="selector-class">.cnblogs-post-body</span> <span class="selector-tag">code</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.language-env</span>)&#123;<span class="attribute">background-color</span>:<span class="number">#f9f2f4</span><span class="meta">!important</span>;<span class="attribute">border</span>:<span class="number">0</span><span class="meta">!important</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span><span class="meta">!important</span>;<span class="attribute">bottom</span>:<span class="number">1px</span>;<span class="attribute">color</span>:<span class="number">#d83b64</span>;<span class="attribute">font-family</span>:Ubuntu Mono,monospace<span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">13px</span><span class="meta">!important</span>;<span class="attribute">font-weight</span>:<span class="number">600</span>;<span class="attribute">padding</span>:<span class="number">2px</span> <span class="number">4px</span><span class="meta">!important</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-indent</span>:<span class="number">0</span><span class="meta">!important</span>&#125;<span class="selector-id">#cnblogs_post_body</span>&gt;pre <span class="selector-class">.cnblogs_code_copy</span> <span class="selector-tag">a</span>&#123;<span class="attribute">right</span>:<span class="number">5px</span>&#125;<span class="selector-id">#cnblogs_post_body</span>&gt;pre&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">15px</span><span class="meta">!important</span>&#125;<span class="selector-id">#pageAnimationOffOn</span>&#123;<span class="attribute">color</span>:<span class="number">#fff9</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:<span class="number">20px</span>;<span class="attribute">top</span>:<span class="number">15px</span>;<span class="attribute">z-index</span>:<span class="number">999</span>&#125;<span class="selector-id">#pageAnimationOffOnIcon</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">20px</span>;<span class="attribute">font-weight</span>:<span class="number">700</span>&#125;<span class="selector-class">.toc</span>&#123;<span class="attribute">margin-bottom</span>:<span class="number">30px</span>&#125;<span class="selector-class">.article-info</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">margin-top</span>:<span class="number">0</span>&#125;<span class="selector-class">.article-info-text</span>&#123;<span class="attribute">margin-bottom</span>:<span class="number">18px</span>&#125;<span class="selector-class">.article-info-tag</span>&#123;<span class="attribute">background-image</span>:none;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">box-shadow</span>:none;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">font-weight</span>:<span class="number">500</span>;<span class="attribute">height</span>:<span class="number">22px</span>;<span class="attribute">letter-spacing</span>:<span class="number">2px</span>;<span class="attribute">line-height</span>:<span class="number">22px</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">5px</span>;<span class="attribute">position</span>:relative;<span class="attribute">text-decoration</span>:none;<span class="attribute">text-transform</span>:uppercase;<span class="attribute">width</span>:fit-content;<span class="attribute">width</span>:-webkit-fit-content;<span class="attribute">width</span>:-moz-fit-content&#125;<span class="selector-class">.article-tag-class-color</span>&#123;<span class="attribute">background-color</span>:<span class="number">#e8a258</span>&#125;<span class="selector-class">.article-tag-color</span>&#123;<span class="attribute">background-color</span>:<span class="number">#6fa3ef</span>&#125;<span class="selector-tag">a</span><span class="selector-attr">[name=top]</span>,<span class="selector-tag">div</span><span class="selector-id">#loading</span>&#123;<span class="attribute">background-color</span>:<span class="number">#f0f0f0</span>;<span class="attribute">height</span>:<span class="number">100vh</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">position</span>:fixed;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">100vw</span>;<span class="attribute">z-index</span>:<span class="number">1099</span>&#125;<span class="selector-id">#evanyou</span>&#123;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">position</span>:fixed;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">z-index</span>:-<span class="number">1</span>&#125;<span class="selector-id">#green_channel</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">border-bottom</span>:<span class="number">1px</span> dashed <span class="number">#eee</span>;<span class="attribute">border-top</span>:<span class="number">1px</span> dashed <span class="number">#eee</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">0</span>;<span class="attribute">text-align</span>:center;<span class="attribute">vertical-align</span>:middle;<span class="attribute">width</span>:<span class="number">100%</span><span class="meta">!important</span>&#125;<span class="selector-id">#blog_post_info</span> <span class="selector-id">#green_channel</span> <span class="selector-tag">a</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#btn_comment_submit</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_digg</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_favorite</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_follow</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_wechat</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_weibo</span>&#123;<span class="attribute">background-image</span>:none;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">font-weight</span>:<span class="number">500</span>;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">letter-spacing</span>:<span class="number">2px</span>;<span class="attribute">line-height</span>:<span class="number">30px</span>;<span class="attribute">margin</span>:<span class="number">10px</span> auto auto;<span class="attribute">position</span>:relative;<span class="attribute">text-decoration</span>:none;<span class="attribute">text-transform</span>:uppercase;<span class="attribute">transition</span>:all .<span class="number">4s</span>;-webkit-<span class="attribute">transition</span>:all .<span class="number">4s</span>;-moz-<span class="attribute">transition</span>:all .<span class="number">4s</span>;-ms-<span class="attribute">transition</span>:all .<span class="number">4s</span>;-o-<span class="attribute">transition</span>:all .<span class="number">4s</span>;<span class="attribute">width</span>:<span class="number">80px</span>&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_digg</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_favorite</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_follow</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_wechat</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_weibo</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.02</span>)&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_digg</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_favorite</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_follow</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_wechat</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-id">#green_channel_weibo</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">95</span>);<span class="attribute">transition</span>:all .<span class="number">4s</span> -<span class="number">125ms</span>&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_digg</span>&#123;<span class="attribute">background-color</span>:<span class="number">#5c8ec6</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">15px</span> <span class="number">18px</span> -<span class="number">6px</span> <span class="number">#5fc1cea6</span>&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_follow</span>&#123;<span class="attribute">background-color</span>:<span class="number">#e33100</span><span class="meta">!important</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">15px</span> <span class="number">18px</span> -<span class="number">6px</span> <span class="number">#e33100a6</span>;<span class="attribute">margin-left</span>:<span class="number">10px</span>&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_favorite</span>&#123;<span class="attribute">background-color</span>:<span class="number">#ffb515</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">15px</span> <span class="number">18px</span> -<span class="number">6px</span> <span class="number">#ffc64ba6</span>;<span class="attribute">margin-left</span>:<span class="number">10px</span>&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_weibo</span>&#123;<span class="attribute">background-color</span>:<span class="number">#ff464b</span><span class="meta">!important</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">15px</span> <span class="number">18px</span> -<span class="number">6px</span> <span class="number">#ff464ba6</span><span class="meta">!important</span>;<span class="attribute">margin-left</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">45px</span>&#125;<span class="selector-tag">a</span><span class="selector-id">#green_channel_wechat</span>&#123;<span class="attribute">background-color</span>:<span class="number">#3cb034</span><span class="meta">!important</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">15px</span> <span class="number">18px</span> -<span class="number">6px</span> <span class="number">#3cb034a6</span><span class="meta">!important</span>;<span class="attribute">margin-left</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">45px</span>&#125;<span class="selector-id">#author_profile_info</span> <span class="selector-tag">img</span><span class="selector-class">.author_avatar</span>&#123;<span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#f7f7f7</span>;<span class="attribute">border-radius</span>:<span class="number">100%</span>;<span class="attribute">box-shadow</span>:inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">#0000004d</span>,<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">#0006</span>;<span class="attribute">margin-left</span>:<span class="number">3px</span>;<span class="attribute">margin-right</span>:<span class="number">7px</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;<span class="selector-tag">div</span><span class="selector-id">#green_channel</span> <span class="selector-tag">img</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">width</span>:<span class="number">20px</span>&#125;<span class="keyword">@keyframes</span> beating&#123;<span class="number">0%</span>,<span class="number">30%</span>,<span class="number">70%</span>,<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">20%</span>,<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.6</span>)&#125;&#125;<span class="selector-class">.footer-t1</span>&#123;<span class="attribute">background</span>:<span class="number">#232323</span>;<span class="attribute">margin</span>:<span class="number">250px</span> <span class="number">0</span> <span class="number">0</span><span class="meta">!important</span>;<span class="attribute">min-height</span>:<span class="number">130px</span><span class="meta">!important</span>&#125;<span class="selector-class">.footer-image</span>&#123;<span class="attribute">height</span>:<span class="number">368px</span>;<span class="attribute">pointer-events</span>:none;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:-<span class="number">293px</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">z-index</span>:<span class="number">1</span>&#125;<span class="selector-id">#footer</span> <span class="selector-class">.footer-box</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;<span class="attribute">max-width</span>:<span class="number">900px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">width</span>:<span class="number">70%</span>&#125;<span class="selector-id">#footer</span> <span class="selector-class">.footer-text</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> dashed <span class="number">#333</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto <span class="number">5px</span>;<span class="attribute">padding-bottom</span>:<span class="number">5px</span>&#125;<span class="selector-id">#footer</span> <span class="selector-class">.footer-text</span> <span class="selector-class">.footer-text-icon</span>&#123;-webkit-<span class="attribute">font-smoothing</span>:antialiased;<span class="attribute">animation</span>:iconAnimate <span class="number">1.33s</span> ease-in-out infinite;<span class="attribute">display</span>:inline-block;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">7px</span>&#125;<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span>&#123;<span class="attribute">bottom</span>:<span class="number">7.25rem</span>;<span class="attribute">height</span>:<span class="number">18rem</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">position</span>:absolute;<span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">0</span>);<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">z-index</span>:-<span class="number">1</span>&#125;<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-tag">figure</span>&#123;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">height</span>:<span class="number">15rem</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">position</span>:absolute;<span class="attribute">width</span>:<span class="number">100%</span>&#125;<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-class">.background</span>,<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-class">.clouds</span>,<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-class">.foreground</span>&#123;<span class="attribute">background-repeat</span>:repeat-x<span class="meta">!important</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:<span class="number">0</span>&#125;<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-class">.foreground</span>&#123;<span class="attribute">background-size</span>:<span class="number">225em</span> <span class="number">15em</span><span class="meta">!important</span>;<span class="attribute">top</span>:<span class="number">1rem</span><span class="meta">!important</span>&#125;<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-class">.background</span>&#123;<span class="attribute">background-size</span>:<span class="number">225em</span> <span class="number">21.313em</span><span class="meta">!important</span>;<span class="attribute">top</span>:-<span class="number">1em</span><span class="meta">!important</span>&#125;<span class="selector-tag">footer</span> <span class="selector-tag">footer</span>-<span class="attribute">background</span> <span class="selector-class">.clouds</span>&#123;<span class="attribute">background-size</span>:<span class="number">225em</span> <span class="number">15em</span><span class="meta">!important</span>;<span class="attribute">top</span>:-<span class="number">2em</span><span class="meta">!important</span>&#125;<span class="selector-tag">table</span><span class="selector-id">#blogCalendar</span>&gt;<span class="selector-tag">tbody</span>&gt;<span class="selector-tag">tr</span>&gt;<span class="selector-tag">td</span>&gt;<span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#bbb</span>&#125;<span class="selector-class">.art-dialog</span>&#123;<span class="attribute">background-color</span>:<span class="number">#000000b3</span><span class="meta">!important</span>;<span class="attribute">border</span>:unset<span class="meta">!important</span>;<span class="attribute">color</span>:<span class="number">#f9f9f9</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-header</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#444</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-footer</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span> <span class="number">10px</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-button</span> <span class="selector-tag">button</span>&#123;<span class="attribute">border</span>:unset<span class="meta">!important</span>;<span class="attribute">color</span>:<span class="number">#f9f9f9</span><span class="meta">!important</span>;<span class="attribute">font-size</span>:<span class="number">12px</span><span class="meta">!important</span>;<span class="attribute">padding</span>:<span class="number">2px</span> <span class="number">6px</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-button</span> <span class="selector-tag">button</span><span class="selector-attr">[i-id=cancel]</span>&#123;<span class="attribute">background-color</span>:<span class="number">#d98d6f</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-statusbar</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-button</span> <span class="selector-tag">button</span><span class="selector-attr">[i-id=cancel]</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">background-color</span>:<span class="number">#ca8966</span><span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-statusbar</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#ff9128</span>&#125;<span class="selector-class">.art-dialog-content</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#85d6d9</span>&#125;<span class="selector-class">.art-dialog-close</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span><span class="meta">!important</span>;<span class="attribute">text-shadow</span>:unset<span class="meta">!important</span>&#125;<span class="selector-class">.art-dialog-button</span> <span class="selector-tag">button</span><span class="selector-attr">[i-id=\6CE8\518C]</span>&#123;<span class="attribute">background-color</span>:<span class="number">#5fcc7d</span><span class="meta">!important</span>&#125;<span class="keyword">@-moz-keyframes</span> iconAnimate&#123;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">10%</span>,<span class="number">30%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">20%</span>,<span class="number">40%</span>,<span class="number">50%</span>,<span class="number">60%</span>,<span class="number">70%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.1</span>)&#125;&#125;<span class="keyword">@-webkit-keyframes</span> iconAnimate&#123;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">10%</span>,<span class="number">30%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">20%</span>,<span class="number">40%</span>,<span class="number">50%</span>,<span class="number">60%</span>,<span class="number">70%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.1</span>)&#125;&#125;<span class="keyword">@-o-keyframes</span> iconAnimate&#123;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">10%</span>,<span class="number">30%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">20%</span>,<span class="number">40%</span>,<span class="number">50%</span>,<span class="number">60%</span>,<span class="number">70%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.1</span>)&#125;&#125;<span class="keyword">@keyframes</span> iconAnimate&#123;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">10%</span>,<span class="number">30%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">20%</span>,<span class="number">40%</span>,<span class="number">50%</span>,<span class="number">60%</span>,<span class="number">70%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.1</span>)&#125;&#125;<span class="selector-id">#dayNightSwitch</span>&#123;<span class="attribute">cursor</span>:pointer;<span class="attribute">display</span>:inline-block;<span class="attribute">opacity</span>:.<span class="number">65</span>;<span class="attribute">position</span>:absolute;<span class="attribute">right</span>:<span class="number">20px</span>;<span class="attribute">top</span>:<span class="number">25px</span>;<span class="attribute">z-index</span>:<span class="number">4</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span>&#123;<span class="attribute">background</span>:<span class="number">#324164</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#1e2d50</span>;<span class="attribute">border-radius</span>:<span class="number">25px</span>;<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">15px</span> <span class="number">10px</span> -<span class="number">10px</span> <span class="number">#0003</span>,<span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#0000001a</span>;<span class="attribute">height</span>:<span class="number">25px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">position</span>:relative;<span class="attribute">width</span>:<span class="number">65px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> *&#123;<span class="attribute">transition</span>:all .<span class="number">4s</span> ease&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span>&#123;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#52a6bf</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span> <span class="selector-class">.sky</span>&#123;<span class="attribute">animation</span>:none<span class="meta">!important</span>;<span class="attribute">border-radius</span>:<span class="number">25px</span>;<span class="attribute">height</span>:<span class="number">25px</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>);<span class="attribute">width</span>:<span class="number">65px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span> <span class="selector-class">.sunMoon</span>&#123;<span class="attribute">background</span>:<span class="number">#ffdf61</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#d9b31c</span>;<span class="attribute">left</span>:<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">23px</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.crater</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>)<span class="meta">!important</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span>&#123;<span class="attribute">animation</span>:cloudAnim <span class="number">2.5s</span> linear infinite;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">transform</span>:<span class="built_in">translatex</span>(<span class="number">0</span>);<span class="attribute">transition-delay</span>:.<span class="number">2s</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span>&#123;<span class="attribute">background</span>:<span class="number">#f0e1a5</span>;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ccc091</span>;<span class="attribute">border-radius</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">16px</span>;<span class="attribute">left</span>:<span class="number">3px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">2.5px</span>;<span class="attribute">width</span>:<span class="number">16px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.crater</span>&#123;<span class="attribute">background</span>:<span class="number">#ccc091</span>;<span class="attribute">border-radius</span>:<span class="number">13px</span>;<span class="attribute">height</span>:<span class="number">5px</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">20%</span>;<span class="attribute">width</span>:<span class="number">5px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.crater</span><span class="selector-class">.crater1</span>&#123;<span class="attribute">left</span>:<span class="number">30%</span>;<span class="attribute">top</span>:<span class="number">45%</span>;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">5</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.crater</span><span class="selector-class">.crater2</span>&#123;<span class="attribute">left</span>:<span class="number">55%</span>;<span class="attribute">top</span>:<span class="number">60%</span>;<span class="attribute">transform</span>:<span class="built_in">scale</span>(.<span class="number">7</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">position</span>:absolute;<span class="attribute">transform</span>:<span class="built_in">translatex</span>(-<span class="number">20px</span>);<span class="attribute">transition-delay</span>:<span class="number">0s</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part1</span>&#123;<span class="attribute">height</span>:<span class="number">2px</span>;<span class="attribute">left</span>:-<span class="number">12px</span>;<span class="attribute">top</span>:<span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">1.5px</span>);<span class="attribute">width</span>:<span class="number">20px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part1</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">height</span>:<span class="number">3px</span>;<span class="attribute">left</span>:<span class="number">40%</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:-<span class="number">100%</span>;<span class="attribute">width</span>:<span class="number">3px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part1</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">height</span>:<span class="number">2px</span>;<span class="attribute">left</span>:<span class="number">20%</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:-<span class="number">200%</span>;<span class="attribute">width</span>:<span class="number">15px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part2</span>&#123;<span class="attribute">height</span>:<span class="number">3px</span>;<span class="attribute">left</span>:-<span class="number">1px</span>;<span class="attribute">top</span>:<span class="built_in">calc</span>(<span class="number">50%</span> + .<span class="number">3px</span>);<span class="attribute">width</span>:<span class="number">3px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part2</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border-radius</span>:<span class="number">3px</span>;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">height</span>:<span class="number">2px</span>;<span class="attribute">left</span>:-<span class="number">8px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">100%</span>;<span class="attribute">width</span>:<span class="number">18px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span>&#123;<span class="attribute">background</span>:<span class="number">#5ebedb</span>;<span class="attribute">border-radius</span>:<span class="number">5px</span>;<span class="attribute">height</span>:<span class="number">5px</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">10%</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">20px</span>,<span class="number">5px</span>);<span class="attribute">width</span>:<span class="number">5px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span><span class="selector-class">.star1</span>&#123;<span class="attribute">animation</span>:starAnim1 <span class="number">3s</span> linear -<span class="number">2.4s</span> infinite;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">10px</span>,<span class="number">15px</span>) <span class="built_in">scale</span>(.<span class="number">3</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span><span class="selector-class">.star2</span>&#123;<span class="attribute">animation</span>:starAnim2 <span class="number">3s</span> linear -<span class="number">1.1s</span> infinite;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">15px</span>,-<span class="number">7px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span><span class="selector-class">.star3</span>&#123;<span class="attribute">animation</span>:starAnim3 <span class="number">3s</span> linear -<span class="number">1.5s</span> infinite;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">35px</span>,-<span class="number">12px</span>) <span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span><span class="selector-class">.star4</span>&#123;<span class="attribute">animation</span>:starAnim4 <span class="number">3s</span> linear -<span class="number">1.9s</span> infinite;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">30px</span>,<span class="number">12px</span>) <span class="built_in">scale</span>(.<span class="number">4</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span><span class="selector-class">.star5</span>&#123;<span class="attribute">animation</span>:starAnim5 <span class="number">3s</span> linear -<span class="number">2.8s</span> infinite;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span><span class="selector-class">.sky</span>&#123;<span class="attribute">animation</span>:skyAnim <span class="number">3s</span> linear -.<span class="number">4s</span> infinite&#125;<span class="keyword">@keyframes</span> starAnim1&#123;<span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">5px</span>,<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">3</span>)&#125;<span class="number">20%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">8px</span>,<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">3</span>)&#125;<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">10px</span>) <span class="built_in">scale</span>(.<span class="number">3</span>)&#125;<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">8px</span>,-<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">3</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">5px</span>,-<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">3</span>)&#125;&#125;<span class="keyword">@keyframes</span> starAnim2&#123;<span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">10px</span>,<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="number">20%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">13px</span>,<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">15px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">13px</span>,-<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">10px</span>,-<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;&#125;<span class="keyword">@keyframes</span> starAnim3&#123;<span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">30px</span>,<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">20%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">33px</span>,<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">35px</span>) <span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">33px</span>,-<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">9</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">30px</span>,-<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">9</span>)&#125;&#125;<span class="keyword">@keyframes</span> starAnim4&#123;<span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">25px</span>,<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">4</span>)&#125;<span class="number">20%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">28px</span>,<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">4</span>)&#125;<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">4</span>)&#125;<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">28px</span>,-<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">4</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">25px</span>,-<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">4</span>)&#125;&#125;<span class="keyword">@keyframes</span> starAnim5&#123;<span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="number">20%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">3px</span>,<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">5px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">3px</span>,-<span class="number">17px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">30px</span>) <span class="built_in">scale</span>(.<span class="number">6</span>)&#125;&#125;<span class="keyword">@keyframes</span> skyAnim&#123;<span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">15px</span>,<span class="number">30px</span>) <span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">20%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">18px</span>,<span class="number">17px</span>) <span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">20px</span>) <span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">18px</span>,-<span class="number">17px</span>) <span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">15px</span>,-<span class="number">30px</span>) <span class="built_in">scale</span>(<span class="number">1</span>)&#125;&#125;<span class="keyword">@keyframes</span> cloudAnim&#123;<span class="number">0%</span>,<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translatex</span>(<span class="number">0</span>)&#125;<span class="number">14%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translatex</span>(<span class="number">5px</span>)&#125;<span class="number">56%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">translatex</span>(-<span class="number">10px</span>)&#125;&#125;<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)&#123;<span class="selector-class">.main-header</span>&#123;-webkit-<span class="attribute">box-sizing</span>:border-box;-moz-<span class="attribute">box-sizing</span>:border-box;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">height</span>:<span class="number">60vh</span>;<span class="attribute">max-height</span>:<span class="number">60vh</span>;<span class="attribute">min-height</span>:<span class="number">240px</span>&#125;<span class="selector-id">#home</span>&#123;<span class="attribute">max-width</span>:<span class="number">100vw</span>;<span class="attribute">width</span>:<span class="number">85%</span>&#125;<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">font-size</span>:<span class="number">2.8rem</span>&#125;<span class="selector-class">.entrylistItemPostDesc</span>,<span class="selector-class">.postDesc</span>&#123;<span class="attribute">font-size</span>:<span class="number">1.3rem</span>&#125;<span class="selector-class">.entrylistPosttitle</span>,<span class="selector-class">.page-title</span>&#123;<span class="attribute">font-size</span>:<span class="number">4rem</span>;<span class="attribute">letter-spacing</span>:-<span class="number">1px</span>&#125;<span class="selector-class">.sb-title</span>&#123;<span class="attribute">font-size</span>:<span class="number">3.3rem</span>;<span class="attribute">letter-spacing</span>:-<span class="number">1px</span>&#125;<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span>,<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-size</span>:<span class="number">15px</span>&#125;<span class="selector-class">.page-description</span>&#123;-webkit-<span class="selector-tag">line</span>-clamp:<span class="number">4</span>;<span class="attribute">font-size</span>:<span class="number">2rem</span>;<span class="attribute">line-height</span>:<span class="number">2rem</span>&#125;<span class="selector-class">.page-author</span>&#123;<span class="attribute">font-size</span>:<span class="number">1.3rem</span><span class="meta">!important</span>;<span class="attribute">line-height</span>:<span class="number">1.3em</span>&#125;<span class="selector-id">#aplayer</span>,<span class="selector-id">#evanyou</span>,<span class="selector-id">#music-box</span>,<span class="selector-id">#nhBannerAnimation</span>,<span class="selector-class">.scroll-down</span>,<span class="selector-tag">body</span>&gt;meting-js&#123;<span class="attribute">display</span>:none<span class="meta">!important</span>&#125;<span class="selector-class">.c_b_p_desc_readmore</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">width</span>:<span class="number">75px</span>&#125;&#125;<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">960px</span>)&#123;<span class="selector-class">.main-header</span>&#123;-webkit-<span class="attribute">box-sizing</span>:border-box;-moz-<span class="attribute">box-sizing</span>:border-box;<span class="attribute">box-sizing</span>:border-box;<span class="attribute">height</span>:<span class="number">50vh</span>;<span class="attribute">max-height</span>:<span class="number">50vh</span>;<span class="attribute">min-height</span>:<span class="number">240px</span>&#125;<span class="selector-id">#home</span>&#123;<span class="attribute">width</span>:auto&#125;<span class="selector-id">#pageAnimationOffOn</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#articleSuffix</span> <span class="selector-class">.articleSuffix-left</span>,<span class="selector-id">#bgCanvas</span>,<span class="selector-id">#homeTopCanvas</span>,<span class="selector-class">.c_b_p_desc_img</span>&#123;<span class="attribute">display</span>:none<span class="meta">!important</span>&#125;<span class="selector-id">#articleSuffix</span> <span class="selector-class">.articleSuffix-right</span>&#123;<span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">12px</span>)<span class="meta">!important</span>&#125;<span class="selector-class">.c_b_p_desc</span>,<span class="selector-class">.entrylistPostSummary</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span><span class="meta">!important</span>&#125;<span class="selector-class">.postCon</span>&#123;<span class="attribute">min-height</span>:unset<span class="meta">!important</span>&#125;&#125;<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">767px</span>)&#123;<span class="selector-class">.skin-simplememory</span> <span class="selector-id">#main</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span><span class="meta">!important</span>&#125;&#125;<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">720px</span>)&#123;<span class="selector-id">#cnblogs_post_body</span>&gt;<span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">1em</span>;<span class="attribute">line-height</span>:<span class="number">1.8em</span>;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">10px</span>&#125;<span class="selector-class">.main-header</span>&#123;<span class="attribute">height</span>:<span class="number">40vh</span>;<span class="attribute">margin-bottom</span>:<span class="number">15px</span>;<span class="attribute">max-height</span>:<span class="number">40vh</span>&#125;<span class="selector-id">#home</span>&#123;<span class="attribute">box-shadow</span>:unset;<span class="attribute">padding-left</span>:<span class="number">5px</span>;<span class="attribute">padding-right</span>:<span class="number">5px</span>&#125;<span class="selector-class">.entrylistPosttitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-class">.postTitle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">font-size</span>:<span class="number">2.3rem</span>&#125;<span class="selector-class">.entrylistItemPostDesc</span>,<span class="selector-class">.entrylistPostSummary</span>,<span class="selector-class">.login_tips</span>,<span class="selector-class">.postCon</span>,<span class="selector-class">.postDesc</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-class">.commentform</span>,<span class="selector-class">.menu-button</span>&#123;<span class="attribute">border</span>:none<span class="meta">!important</span>;<span class="attribute">margin</span>:<span class="number">0</span><span class="meta">!important</span>&#125;<span class="selector-class">.inner</span>&#123;<span class="attribute">margin</span>:<span class="number">2rem</span> auto;<span class="attribute">width</span>:auto&#125;<span class="selector-class">.entrylistPosttitle</span>,<span class="selector-class">.page-title</span>&#123;<span class="attribute">font-size</span>:<span class="number">2.6rem</span>&#125;<span class="selector-class">.sb-title</span>&#123;<span class="attribute">font-size</span>:<span class="number">2.8rem</span>&#125;<span class="selector-class">.page-description</span>&#123;-webkit-<span class="selector-tag">line</span>-clamp:<span class="number">2</span>;<span class="attribute">font-size</span>:<span class="number">1.6rem</span>&#125;<span class="selector-class">.page-author</span>&#123;<span class="attribute">font-size</span>:<span class="number">1rem</span><span class="meta">!important</span>&#125;<span class="selector-class">.menu-button-scroll</span>&#123;<span class="attribute">left</span>:-<span class="number">5px</span><span class="meta">!important</span>;<span class="attribute">width</span>:<span class="number">33px</span><span class="meta">!important</span>&#125;<span class="selector-id">#aplayer</span>,<span class="selector-id">#articleSuffix</span>,<span class="selector-id">#bgCanvas</span>,<span class="selector-id">#canvas</span>,<span class="selector-id">#evanyou</span>,<span class="selector-id">#homeTopCanvas</span>,<span class="selector-id">#music-box</span>,<span class="selector-id">#pageAnimationOffOn</span>,<span class="selector-class">.comment_date</span>,<span class="selector-class">.scroll-down</span>,<span class="selector-tag">body</span>&gt;meting-js&#123;<span class="attribute">display</span>:none<span class="meta">!important</span>&#125;<span class="selector-class">.postMeta</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-class">.postMeta</span>&gt;<span class="selector-tag">i</span>,<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span>,<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span> <span class="selector-tag">i</span>&#123;<span class="attribute">font-size</span>:<span class="number">13px</span>&#125;<span class="selector-tag">p</span><span class="selector-class">.article-info-text</span>&gt;<span class="selector-class">.postMeta</span> br&#123;<span class="attribute">display</span>:inline&#125;<span class="selector-class">.article-info-tag</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">3px</span>&#125;<span class="selector-class">.c_b_p_desc_readmore</span>&#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">13px</span>;<span class="attribute">width</span>:<span class="number">68px</span>&#125;<span class="selector-class">.postSticky</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">top</span>:-<span class="number">4px</span>&#125;<span class="selector-id">#footer</span> <span class="selector-class">.footer-box</span>&#123;<span class="attribute">width</span>:<span class="number">95%</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span>,<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span> <span class="selector-class">.sky</span>&#123;<span class="attribute">border-radius</span>:<span class="number">18px</span>;<span class="attribute">height</span>:<span class="number">18px</span>;<span class="attribute">width</span>:<span class="number">50px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span>&#123;<span class="attribute">height</span>:<span class="number">12px</span>;<span class="attribute">top</span>:<span class="number">1px</span>;<span class="attribute">width</span>:<span class="number">12px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span><span class="selector-class">.daySwitch</span> <span class="selector-class">.sunMoon</span>&#123;<span class="attribute">left</span>:<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">19px</span>)&#125;<span class="selector-id">#dayNightSwitch</span>&#123;<span class="attribute">right</span>:<span class="number">12px</span>;<span class="attribute">top</span>:<span class="number">15px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.star</span>&#123;<span class="attribute">top</span>:-<span class="number">50%</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.crater</span>&#123;<span class="attribute">height</span>:<span class="number">3px</span>;<span class="attribute">width</span>:<span class="number">3px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part1</span>&#123;<span class="attribute">width</span>:<span class="number">17px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part1</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">width</span>:<span class="number">12px</span>&#125;<span class="selector-id">#dayNightSwitch</span> <span class="selector-class">.onOff</span> <span class="selector-class">.sunMoon</span> <span class="selector-class">.cloud</span><span class="selector-class">.part2</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">width</span>:<span class="number">15px</span>&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="页脚代码"><a href="#页脚代码" class="headerlink" title="页脚代码"></a>页脚代码</h3><p><img src="https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241005004325898-1157720710.png" alt="image-20241005003939772"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--点击冒点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;1777&quot;</span> <span class="attr">height</span>=<span class="string">&quot;841&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://blog-static.cnblogs.com/files/elkyo/mouse-click.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>自此，博客网站已经搭建好了</p>
<p>接下来是如何上传博客文章的搭建</p>
<p>有什么疑问欢迎评论区评论或直接私信</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模学习笔记</title>
    <url>/2025/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p>
<h1 id="评价类方法"><a href="#评价类方法" class="headerlink" title="评价类方法"></a>评价类方法</h1><h2 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h2><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>虫部落‐快搜 ： <a href="https://search.chongbuluo.com/">https://search.chongbuluo.com/</a></p>
<h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>1.写出判断矩阵</p>
<p>2.判断矩阵一致性检验</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751412.png" style="zoom: 67%;" />

<p>3.判断矩阵求权重</p>
<ol>
<li><p>算术平均法</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751477.png" style="zoom: 67%;" />
</li>
<li><p>几何平均法</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751426.png" style="zoom:67%;" />
</li>
<li><p>&#x3D;&#x3D;特征值法（最常用）&#x3D;&#x3D;</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751498.png" style="zoom:67%;" /></li>
</ol>
<p>4.计算权重和</p>
<h3 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 注意：在论文写作中，应该先对判断矩阵进行一致性检验，然后再计算权重，因为只有判断矩阵通过了一致性检验，其权重才是有意义的。</span></span><br><span class="line"><span class="comment">%% 在下面的代码中，我们先计算了权重，然后再进行了一致性检验，这是为了顺应计算过程，事实上在逻辑上是说不过去的。</span></span><br><span class="line"><span class="comment">%% 因此大家自己写论文中如果用到了层次分析法，一定要先对判断矩阵进行一致性检验。</span></span><br><span class="line"><span class="comment">%% 而且要说明的是，只有非一致矩阵的判断矩阵才需要进行一致性检验。</span></span><br><span class="line"><span class="comment">%% 如果你的判断矩阵本身就是一个一致矩阵，那么就没有必要进行一致性检验。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 在每一行的语句后面加上分号(一定要是英文的哦;中文的长这个样子；)表示不显示运行结果</span></span><br><span class="line"><span class="comment">% 多行注释:选中要注释的若干语句,快捷键Ctrl+R</span></span><br><span class="line"><span class="comment">% 取消注释:选中要取消注释的语句,快捷键Ctrl+T</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;请输入判断矩阵A&#x27;</span>)  <span class="comment">%matlab中disp()就是屏幕输出函数，类似于c语言中的printf（）函数</span></span><br><span class="line"><span class="comment">% 注意，disp函数比较特殊，这里可要分号，可不要分号哦</span></span><br><span class="line"></span><br><span class="line">A=input(<span class="string">&#x27;A=&#x27;</span>);</span><br><span class="line"><span class="comment">% 这里输入的就是我们的判断矩阵，其为n阶方阵（行数和列数相同）</span></span><br><span class="line"><span class="comment">% [1 3 1/3 1/3 1 1/3;1/3 1 1/4 1/5 1 1/5;3 4 1 1 2 3;3 5 1 1 2 1;1 1 1/2 1/2 1 1;3 5 1/3 1 1 1]</span></span><br><span class="line"><span class="comment">% [1 1 4 1/3 3;1 1 4 1/3 3;1/4 1/4 1 1/3 1/2;3 3 3 1 3;1/3 1/3 2 1/3 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 在开始下面正式的步骤之前，我们有必要检验下A是否因为粗心而输入有误</span></span><br><span class="line">ERROR = <span class="number">0</span>;  <span class="comment">% 默认输入是没有错误的</span></span><br><span class="line"><span class="comment">%(1)检查矩阵A的维数是否不大于1或不是方阵</span></span><br><span class="line">[r,c]=<span class="built_in">size</span>(A);</span><br><span class="line"><span class="comment">%size(A)函数是用来求矩阵的大小的,返回一个行向量，第一个元素是矩阵的行数，第二个元素是矩阵的列数</span></span><br><span class="line"><span class="comment">%[r,c]=size(A)  %将矩阵A的行数返回到第一个输出变量r，将矩阵的列数返回到第二个输出变量c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r ~= c  || r &lt;= <span class="number">1</span></span><br><span class="line">    <span class="comment">% 注意哦，不等号是 ~=  (~是键盘Tab上面那个键，要和Shift键同时按才会出来)，别和C语言里面的!=搞混了</span></span><br><span class="line">    <span class="comment">% ||表示逻辑运算符‘或’（在键盘Enter上面，也要和Shift键一起按） 逻辑运算符且是 &amp;&amp; （&amp;读and，连接符号，是and的缩写。 ）</span></span><br><span class="line">    ERROR = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% Matlab的判断语句，if所在的行不需要冒号，语句的最后一定要以end结尾 ；中间的语句要注意缩进。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%(2)检验是否为正互反矩阵  a_ij &gt; 0 且 a_ij * a_ji = 1</span></span><br><span class="line"><span class="keyword">if</span> ERROR == <span class="number">0</span></span><br><span class="line">    [n,n] = <span class="built_in">size</span>(A);</span><br><span class="line">    <span class="comment">% 因为我们的判断矩阵A是一个非零方阵，所以这里的r和c相同，我们可以就用同一个字母n表示</span></span><br><span class="line">    <span class="comment">% 判断是否有元素小于0</span></span><br><span class="line">    <span class="comment">%    for i = 1:n</span></span><br><span class="line">    <span class="comment">%        for j = 1:n</span></span><br><span class="line">    <span class="comment">%            if A(i,j)&lt;=0</span></span><br><span class="line">    <span class="comment">%                ERROR = 2;</span></span><br><span class="line">    <span class="comment">%            end</span></span><br><span class="line">    <span class="comment">%        end</span></span><br><span class="line">    <span class="comment">%    end</span></span><br><span class="line">    <span class="keyword">if</span> sum(sum(A &lt;= <span class="number">0</span>)) &gt; <span class="number">0</span></span><br><span class="line">        ERROR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%顺便检验n是否超过了15，因为RI向量为15维</span></span><br><span class="line"><span class="keyword">if</span> ERROR == <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">15</span></span><br><span class="line">        ERROR = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ERROR == <span class="number">0</span></span><br><span class="line">    <span class="comment">% 判断  a_ij * a_ji = 1 是否成立</span></span><br><span class="line">    <span class="keyword">if</span> sum(sum(A&#x27; .* A ~=  <span class="built_in">ones</span>(n))) &gt; <span class="number">0</span></span><br><span class="line">        ERROR = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% A&#x27; 表示求出 A 的转置矩阵，即将a_ij和a_ji互换位置</span></span><br><span class="line">    <span class="comment">% ones(n)函数生成一个n*n的全为1的方阵, zeros(n)函数生成一个n*n的全为0的方阵</span></span><br><span class="line">    <span class="comment">% ones(m,n)函数生成一个m*n的全为1的矩阵</span></span><br><span class="line">    <span class="comment">% MATLAB在矩阵的运算中，“/”号和“*”号代表矩阵之间的乘法与除法，对应元素之间的乘除法需要使用“./”和“.*”</span></span><br><span class="line">    <span class="comment">% 如果a_ij * a_ji = 1 满足， 那么A和A&#x27;对应元素相乘应该为1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ERROR == <span class="number">0</span></span><br><span class="line">    <span class="comment">% % % % % % % % % % % % %方法1： 算术平均法求权重% % % % % % % % % % % % %</span></span><br><span class="line">    <span class="comment">% 第一步：将判断矩阵按照列归一化（每一个元素除以其所在列的和）</span></span><br><span class="line">    <span class="comment">% 第二步：将归一化的各列相加</span></span><br><span class="line">    <span class="comment">% 第三步：将相加后的向量除以n即可得到权重向量</span></span><br><span class="line">    </span><br><span class="line">    Sum_A = sum(A);</span><br><span class="line">    <span class="comment">% matlab中的sum函数的用法</span></span><br><span class="line">    <span class="comment">% a=sum(x);%按列求和</span></span><br><span class="line">    <span class="comment">% a=sum(x,2);%按行求和</span></span><br><span class="line">    <span class="comment">% a=sum(x(:));%对整个矩阵求和</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% % 基础：matlab中如何提取矩阵中指定位置的元素？</span></span><br><span class="line">    <span class="comment">% % （1）取指定行和列的一个元素（输出的是一个值）</span></span><br><span class="line">    <span class="comment">% %     A(2,1)  A(3,2)</span></span><br><span class="line">    <span class="comment">% % （2）取指定的某一行的全部元素（输出的是一个行向量）</span></span><br><span class="line">    <span class="comment">% %     A(2,:)  A(5,:)</span></span><br><span class="line">    <span class="comment">% % （3）取指定的某一列的全部元素（输出的是一个列向量）</span></span><br><span class="line">    <span class="comment">% %     A(:,1)  A(:,3)</span></span><br><span class="line">    <span class="comment">% % （4）取指定的某些行的全部元素（输出的是一个矩阵）</span></span><br><span class="line">    <span class="comment">% %    A([2,5],:)      只取第二行和第五行（一共2行）</span></span><br><span class="line">    <span class="comment">% %    A(2:5,:)        取第二行到第五行（一共4行）</span></span><br><span class="line">    <span class="comment">% % （5）取全部元素(按列拼接的，最终输出的是一个列向量)</span></span><br><span class="line">    <span class="comment">% %    A(:)</span></span><br><span class="line">    </span><br><span class="line">    SUM_A = <span class="built_in">repmat</span>(Sum_A,n,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">% B = repmat(A,m,n):将矩阵A复制m×n块，即把A作为B的元素，B由m×n个A平铺而成。</span></span><br><span class="line">    <span class="comment">% 另外一种替代的方法如下：</span></span><br><span class="line">    <span class="comment">% SUM_A = [];</span></span><br><span class="line">    <span class="comment">% for i = 1:n  %循环哦，不需要加冒号，这里表示循环n次</span></span><br><span class="line">    <span class="comment">%     SUM_A = [SUM_A;Sum_A];</span></span><br><span class="line">    <span class="comment">% end</span></span><br><span class="line">    </span><br><span class="line">    Stand_A = A ./ SUM_A;</span><br><span class="line">    <span class="comment">% MATLAB在矩阵的运算中，“*”号和“/”号代表矩阵之间的乘法与除法，对应元素之间的乘除法需要使用“./”和“.*”</span></span><br><span class="line">    <span class="comment">% 这里我们直接将两个矩阵对应的元素相除即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;算术平均法求权重的结果为：&#x27;</span>);</span><br><span class="line">    <span class="built_in">disp</span>(sum(Stand_A,<span class="number">2</span>) / n)</span><br><span class="line">    <span class="comment">% 首先对标准化后的矩阵按照行求和，得到一个列向量，然后再将这个列向量的每个元素同时除以n即可（注意这里也可以用./哦）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% % % % % % % % % % % % %方法2： 几何平均法求权重% % % % % % % % % % % % %</span></span><br><span class="line">    <span class="comment">% 第一步：将A的元素按照行相乘得到一个新的列向量</span></span><br><span class="line">    Prduct_A = prod(A,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">% prod函数和sum函数类似，一个用于乘，一个用于加</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 第二步：将新的向量的每个分量开n次方</span></span><br><span class="line">    Prduct_n_A = Prduct_A .^ (<span class="number">1</span>/n);</span><br><span class="line">    <span class="comment">% 这里对元素操作，因此要加.号哦。  ^符号表示乘方哦  这里是开n次方，所以我们等价求1/n次方</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 第三步：对该列向量进行归一化即可得到权重向量</span></span><br><span class="line">    <span class="comment">% 将这个列向量中的每一个元素除以这一个向量的和即可</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;几何平均法求权重的结果为：&#x27;</span>);</span><br><span class="line">    <span class="built_in">disp</span>(Prduct_n_A ./ sum(Prduct_n_A))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% % % % % % % % % % % % %方法3： 特征值法求权重% % % % % % % % % % % % %</span></span><br><span class="line">    <span class="comment">% 计算矩阵A的特征值和特征向量的函数是eig(A),其中最常用的两个用法：</span></span><br><span class="line">    <span class="comment">% （1）E=eig(A)：求矩阵A的全部特征值，构成向量E。</span></span><br><span class="line">    <span class="comment">% （2）[V,D]=eig(A)：求矩阵A的全部特征值，构成对角阵D，并求A的特征向量构成V的列向量。（V的每一列都是D中与之相同列的特征值的特征向量）</span></span><br><span class="line">    [V,D] = eig(A);    <span class="comment">%V是特征向量, D是由特征值构成的对角矩阵（除了对角线元素外，其余位置元素全为0）</span></span><br><span class="line">    Max_eig = <span class="built_in">max</span>(<span class="built_in">max</span>(D)); <span class="comment">%也可以写成max(D(:))哦~</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 那么怎么找到最大特征值所在的位置了？ 需要用到find函数，它可以用来返回向量或者矩阵中不为0的元素的位置索引。</span></span><br><span class="line">    <span class="comment">% 下面例子来自博客：https://www.cnblogs.com/anzhiwu815/p/5907033.html</span></span><br><span class="line">    <span class="comment">% 关于find函数的更加深入的用法可参考原文</span></span><br><span class="line">    <span class="comment">% &gt;&gt; X = [1 0 4 -3 0 0 0 8 6];</span></span><br><span class="line">    <span class="comment">% &gt;&gt; ind = find(X)</span></span><br><span class="line">    <span class="comment">% ind =</span></span><br><span class="line">    <span class="comment">%    1     3     4     8     9</span></span><br><span class="line">    <span class="comment">% 其有多种用法，比如返回前2个不为0的元素的位置：</span></span><br><span class="line">    <span class="comment">% &gt;&gt; ind = find(X,2)</span></span><br><span class="line">    <span class="comment">% &gt;&gt; ind =</span></span><br><span class="line">    <span class="comment">%     1     3</span></span><br><span class="line">    <span class="comment">%若X是一个矩阵，索引该如何返回呢？</span></span><br><span class="line">    <span class="comment">%  &gt;&gt; X = [1 -3 0;0 0 8;4 0 6]</span></span><br><span class="line">    <span class="comment">%  X =</span></span><br><span class="line">    <span class="comment">%   1    -3     0</span></span><br><span class="line">    <span class="comment">%   0     0     8</span></span><br><span class="line">    <span class="comment">%   4     0     6</span></span><br><span class="line">    <span class="comment">%  &gt;&gt; ind = find(X)</span></span><br><span class="line">    <span class="comment">% ind =</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    <span class="comment">%      3</span></span><br><span class="line">    <span class="comment">%      4</span></span><br><span class="line">    <span class="comment">%      8</span></span><br><span class="line">    <span class="comment">%      9</span></span><br><span class="line">    <span class="comment">% 这是因为在Matlab在存储矩阵时，是一列一列存储的，我们可以做一下验证：</span></span><br><span class="line">    <span class="comment">%  &gt;&gt; X(4)</span></span><br><span class="line">    <span class="comment">%  ans =</span></span><br><span class="line">    <span class="comment">%     -3</span></span><br><span class="line">    <span class="comment">% 假如你需要按照行列的信息输出该怎么办呢？</span></span><br><span class="line">    <span class="comment">% [r,c] = find(X)</span></span><br><span class="line">    <span class="comment">% r =</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    <span class="comment">%      3</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    <span class="comment">%      2</span></span><br><span class="line">    <span class="comment">%      3</span></span><br><span class="line">    <span class="comment">% c =</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    <span class="comment">%      2</span></span><br><span class="line">    <span class="comment">%      3</span></span><br><span class="line">    <span class="comment">%      3</span></span><br><span class="line">    <span class="comment">% [r,c] = find(X,1) %只找第一个非0元素</span></span><br><span class="line">    <span class="comment">% r =</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    <span class="comment">% c =</span></span><br><span class="line">    <span class="comment">%      1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 那么问题来了，我们要得到最大特征值的位置，就需要将包含所有特征值的这个对角矩阵D中，不等于最大特征值的位置全变为0</span></span><br><span class="line">    <span class="comment">% 这时候可以用到矩阵与常数的大小判断运算，共有三种运算符：大于&gt; ;小于&lt; ;等于 ==  （一个等号表示赋值；两个等号表示判断）</span></span><br><span class="line">    <span class="comment">% 例如：A &gt; 2 会生成一个和A相同大小的矩阵，矩阵元素要么为0，要么为1（A中每个元素和2比较，如果大于2则为1，否则为0）</span></span><br><span class="line">    [r,c]=<span class="built_in">find</span>(D == Max_eig , <span class="number">1</span>);</span><br><span class="line">    <span class="comment">% 找到D中第一个与最大特征值相等的元素的位置，记录它的行和列。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;特征值法求权重的结果为：&#x27;</span>);</span><br><span class="line">    <span class="built_in">disp</span>( V(:,c) ./ sum(V(:,c)) )</span><br><span class="line">    <span class="comment">% 我们先根据上面找到的最大特征值的列数c找到对应的特征向量，然后再进行标准化。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% % % % % % % % % % % % %下面是计算一致性比例CR的环节% % % % % % % % % % % % %</span></span><br><span class="line">    <span class="comment">% 当CR&lt;0.10时，我们认为判断矩阵的一致性可以接受；否则应对其进行修正。</span></span><br><span class="line">    CI = (Max_eig - n) / (n<span class="number">-1</span>);</span><br><span class="line">    RI=[<span class="number">0</span> <span class="number">0.00001</span> <span class="number">0.52</span> <span class="number">0.89</span> <span class="number">1.12</span> <span class="number">1.26</span> <span class="number">1.36</span> <span class="number">1.41</span> <span class="number">1.46</span> <span class="number">1.49</span> <span class="number">1.52</span> <span class="number">1.54</span> <span class="number">1.56</span> <span class="number">1.58</span> <span class="number">1.59</span>];  <span class="comment">%注意哦，这里的RI最多支持 n = 15</span></span><br><span class="line">    <span class="comment">% 这里n=2时，一定是一致矩阵，所以CI = 0，我们为了避免分母为0，将这里的第二个元素改为了很接近0的正数</span></span><br><span class="line">    CR=CI/RI(n);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;一致性指标CI=&#x27;</span>);<span class="built_in">disp</span>(CI);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;一致性比例CR=&#x27;</span>);<span class="built_in">disp</span>(CR);</span><br><span class="line">    <span class="keyword">if</span> CR&lt;<span class="number">0.10</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;因为CR&lt;0.10，所以该判断矩阵A的一致性可以接受!&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;注意：CR &gt;= 0.10，因此该判断矩阵A需要进行修改!&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">elseif</span> ERROR == <span class="number">1</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请检查矩阵A的维数是否不大于1或不是方阵&#x27;</span>)</span><br><span class="line"><span class="keyword">elseif</span> ERROR == <span class="number">2</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请检查矩阵A中有元素小于等于0&#x27;</span>)</span><br><span class="line"><span class="keyword">elseif</span> ERROR == <span class="number">3</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;A的维数n超过了15，请减少准则层的数量&#x27;</span>)</span><br><span class="line"><span class="keyword">elseif</span> ERROR == <span class="number">4</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请检查矩阵A中存在i、j不满足A_ij * A_ji = 1&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h3 id="F4锁定单元格"><a href="#F4锁定单元格" class="headerlink" title="F4锁定单元格"></a>F4锁定单元格</h3><h2 id="优劣解距离法"><a href="#优劣解距离法" class="headerlink" title="优劣解距离法"></a>优劣解距离法</h2><h3 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol>
<li><p>正向化</p>
<p>将所有的指标转化为极大型指标</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751421.png" style="zoom:80%;" />
</li>
<li><p>正向化矩阵标准化</p>
<p>标准化的目的是为了消除量纲的影响</p>
</li>
<li><p>计算得分</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751548.png" style="zoom:80%;" />
</li>
<li><p>归一化</p>
</li>
<li><p>用excel对数据进行可视化</p>
</li>
</ol>
<h3 id="算法代码-1"><a href="#算法代码-1" class="headerlink" title="算法代码"></a>算法代码</h3><p>主函数：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  第一步：把数据复制到工作区，并将这个矩阵命名为X</span></span><br><span class="line"><span class="comment">% （1）在工作区右键，点击新建（Ctrl+N)，输入变量名称为X</span></span><br><span class="line"><span class="comment">% （2）在Excel中复制数据，再回到Excel中右键，点击粘贴Excel数据（Ctrl+Shift+V）</span></span><br><span class="line"><span class="comment">% （3）关掉这个窗口，点击X变量，右键另存为，保存为mat文件（下次就不用复制粘贴了，只需使用load命令即可加载数据）</span></span><br><span class="line"><span class="comment">% （4）注意，代码和数据要放在同一个目录下哦，且Matlab的当前文件夹也要是这个目录。</span></span><br><span class="line">clear;clc</span><br><span class="line">load data_water_quality.mat</span><br><span class="line"><span class="comment">%% 注意：如果提示: 错误使用 load，无法读取文件 &#x27;data_water_quality.mat&#x27;。没有此类文件或目录。</span></span><br><span class="line"><span class="comment">% 那么原因是因为你的Matlab的当前文件夹中不存在这个文件</span></span><br><span class="line"><span class="comment">% 可以使用cd函数修改Matlab的当前文件夹</span></span><br><span class="line"><span class="comment">% 比如说，我的代码和数据放在了: D:第2讲.TOPSIS法（优劣解距离法）\代码和例题数据</span></span><br><span class="line"><span class="comment">% 那么我就可以输入命令：</span></span><br><span class="line"><span class="comment">% cd &#x27;D:第2讲.TOPSIS法（优劣解距离法）\代码和例题数据&#x27;</span></span><br><span class="line"><span class="comment">% 也可以看我更新的视频：“更新9_Topsis代码为什么运行失败_得分结果怎么可视化以及权重的确定如何更加准确”，里面有介绍</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  第二步：判断是否需要正向化</span></span><br><span class="line">[n,m] = <span class="built_in">size</span>(X);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;共有&#x27;</span> num2str(n) <span class="string">&#x27;个评价对象, &#x27;</span> num2str(m) <span class="string">&#x27;个评价指标&#x27;</span>]) </span><br><span class="line">Judge = input([<span class="string">&#x27;这&#x27;</span> num2str(m) <span class="string">&#x27;个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  &#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">    Position = input(<span class="string">&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： &#x27;</span>); <span class="comment">%[2,3,4]</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） &#x27;</span>)</span><br><span class="line">    Type = input(<span class="string">&#x27;例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  &#x27;</span>); <span class="comment">%[2,1,3]</span></span><br><span class="line">    <span class="comment">% 注意，Position和Type是两个同维度的行向量</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(Position,<span class="number">2</span>)  <span class="comment">%这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数</span></span><br><span class="line">        X(:,Position(<span class="built_in">i</span>)) = Positivization(X(:,Position(<span class="built_in">i</span>)),Type(<span class="built_in">i</span>),Position(<span class="built_in">i</span>));</span><br><span class="line">    <span class="comment">% Positivization是我们自己定义的函数，其作用是进行正向化，其一共接收三个参数</span></span><br><span class="line">    <span class="comment">% 第一个参数是要正向化处理的那一列向量 X(:,Position(i))   回顾上一讲的知识，X(:,n)表示取第n列的全部元素</span></span><br><span class="line">    <span class="comment">% 第二个参数是对应的这一列的指标类型（1：极小型， 2：中间型， 3：区间型）</span></span><br><span class="line">    <span class="comment">% 第三个参数是告诉函数我们正在处理的是原始矩阵中的哪一列</span></span><br><span class="line">    <span class="comment">% 该函数有一个返回值，它返回正向化之后的指标，我们可以将其直接赋值给我们原始要处理的那一列向量</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;正向化后的矩阵 X =  &#x27;</span>)</span><br><span class="line">    <span class="built_in">disp</span>(X)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 第三步：对正向化后的矩阵进行标准化</span></span><br><span class="line">Z = X ./ <span class="built_in">repmat</span>(sum(X.*X) .^ <span class="number">0.5</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;标准化矩阵 Z = &#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(Z)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 第四步：计算与最大值的距离和最小值的距离，并算出得分</span></span><br><span class="line">D_P = sum([(Z - <span class="built_in">repmat</span>(<span class="built_in">max</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ],<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D+ 与最大值的距离向量</span></span><br><span class="line">D_N = sum([(Z - <span class="built_in">repmat</span>(<span class="built_in">min</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ],<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D- 与最小值的距离向量</span></span><br><span class="line">S = D_N ./ (D_P+D_N);    <span class="comment">% 未归一化的得分</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最后的得分为：&#x27;</span>)</span><br><span class="line">stand_S = S / sum(S)</span><br><span class="line">[sorted_S,index] = <span class="built_in">sort</span>(stand_S ,<span class="string">&#x27;descend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% A = magic(5)  % 幻方矩阵</span></span><br><span class="line"><span class="comment">% M = magic(n)返回由1到n^2的整数构成并且总行数和总列数相等的n×n矩阵。阶次n必须为大于或等于3的标量。</span></span><br><span class="line"><span class="comment">% sort(A)若A是向量不管是列还是行向量，默认都是对A进行升序排列。sort(A)是默认的升序，而sort(A,&#x27;descend&#x27;)是降序排序。</span></span><br><span class="line"><span class="comment">% sort(A)若A是矩阵，默认对A的各列进行升序排列</span></span><br><span class="line"><span class="comment">% sort(A,dim)</span></span><br><span class="line"><span class="comment">% dim=1时等效sort(A)</span></span><br><span class="line"><span class="comment">% dim=2时表示对A中的各行元素升序排列</span></span><br><span class="line"><span class="comment">% A = [2,1,3,8]</span></span><br><span class="line"><span class="comment">% Matlab中给一维向量排序是使用sort函数：sort（A），排序是按升序进行的，其中A为待排序的向量；</span></span><br><span class="line"><span class="comment">% 若欲保留排列前的索引，则可用 [sA,index] = sort(A,&#x27;descend&#x27;) ，排序后，sA是排序好的向量，index是向量sA中对A的索引。</span></span><br><span class="line"><span class="comment">% sA  =  8     3     2     1</span></span><br><span class="line"><span class="comment">% index =  4     3     1     2</span></span><br></pre></td></tr></table></figure>

<p>Positivization 函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% function [输出变量] = 函数名称(输入变量）  </span></span><br><span class="line"><span class="comment">% 函数的中间部分都是函数体</span></span><br><span class="line"><span class="comment">% 函数的最后要用end结尾</span></span><br><span class="line"><span class="comment">% 输出变量和输入变量可以有多个，用逗号隔开</span></span><br><span class="line"><span class="comment">% function [a,b,c]=test(d,e,f)</span></span><br><span class="line"><span class="comment">%     a=d+e;</span></span><br><span class="line"><span class="comment">%     b=e+f;</span></span><br><span class="line"><span class="comment">%     c=f+d;</span></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"><span class="comment">% 自定义的函数要单独放在一个m文件中，不可以直接放在主函数里面（和其他大多数语言不同）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[posit_x]</span> = <span class="title">Positivization</span><span class="params">(x,type,i)</span></span></span><br><span class="line"><span class="comment">% 输入变量有三个：</span></span><br><span class="line"><span class="comment">% x：需要正向化处理的指标对应的原始列向量</span></span><br><span class="line"><span class="comment">% type： 指标的类型（1：极小型， 2：中间型， 3：区间型）</span></span><br><span class="line"><span class="comment">% i: 正在处理的是原始矩阵中的哪一列</span></span><br><span class="line"><span class="comment">% 输出变量posit_x表示：正向化后的列向量</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>  <span class="comment">%极小型</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span> num2str(<span class="built_in">i</span>) <span class="string">&#x27;列是极小型，正在正向化&#x27;</span>] )</span><br><span class="line">        posit_x = Min2Max(x);  <span class="comment">%调用Min2Max函数来正向化</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span> num2str(<span class="built_in">i</span>) <span class="string">&#x27;列极小型正向化处理完成&#x27;</span>] )</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="number">2</span>  <span class="comment">%中间型</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span> num2str(<span class="built_in">i</span>) <span class="string">&#x27;列是中间型&#x27;</span>] )</span><br><span class="line">        best = input(<span class="string">&#x27;请输入最佳的那一个值： &#x27;</span>);</span><br><span class="line">        posit_x = Mid2Max(x,best);</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span> num2str(<span class="built_in">i</span>) <span class="string">&#x27;列中间型正向化处理完成&#x27;</span>] )</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">type</span> == <span class="number">3</span>  <span class="comment">%区间型</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span> num2str(<span class="built_in">i</span>) <span class="string">&#x27;列是区间型&#x27;</span>] )</span><br><span class="line">        a = input(<span class="string">&#x27;请输入区间的下界： &#x27;</span>);</span><br><span class="line">        b = input(<span class="string">&#x27;请输入区间的上界： &#x27;</span>); </span><br><span class="line">        posit_x = Inter2Max(x,a,b);</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span> num2str(<span class="built_in">i</span>) <span class="string">&#x27;列区间型正向化处理完成&#x27;</span>] )</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;没有这种类型的指标，请检查Type向量中是否有除了1、2、3之外的其他值&#x27;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>正向化函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[posit_x]</span> = <span class="title">Inter2Max</span><span class="params">(x,a,b)</span></span></span><br><span class="line">    r_x = <span class="built_in">size</span>(x,<span class="number">1</span>);  <span class="comment">% row of x </span></span><br><span class="line">    M = <span class="built_in">max</span>([a-<span class="built_in">min</span>(x),<span class="built_in">max</span>(x)-b]);</span><br><span class="line">    posit_x = <span class="built_in">zeros</span>(r_x,<span class="number">1</span>);   <span class="comment">%zeros函数用法: zeros(3)  zeros(3,1)  ones(3)</span></span><br><span class="line">    <span class="comment">% 初始化posit_x全为0  初始化的目的是节省处理时间</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: r_x</span><br><span class="line">        <span class="keyword">if</span> x(<span class="built_in">i</span>) &lt; a</span><br><span class="line">           posit_x(<span class="built_in">i</span>) = <span class="number">1</span>-(a-x(<span class="built_in">i</span>))/M;</span><br><span class="line">        <span class="keyword">elseif</span> x(<span class="built_in">i</span>) &gt; b</span><br><span class="line">           posit_x(<span class="built_in">i</span>) = <span class="number">1</span>-(x(<span class="built_in">i</span>)-b)/M;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           posit_x(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[posit_x]</span> = <span class="title">Mid2Max</span><span class="params">(x,best)</span></span></span><br><span class="line">    M = <span class="built_in">max</span>(<span class="built_in">abs</span>(x-best));</span><br><span class="line">    posit_x = <span class="number">1</span> - <span class="built_in">abs</span>(x-best) / M;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[posit_x]</span> = <span class="title">Min2Max</span><span class="params">(x)</span></span></span><br><span class="line">    posit_x = <span class="built_in">max</span>(x) - x;</span><br><span class="line">     <span class="comment">%posit_x = 1 ./ x;    %如果x全部都大于0，也可以这样正向化</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h3 id="自输入权重代码"><a href="#自输入权重代码" class="headerlink" title="自输入权重代码"></a>自输入权重代码</h3><p>主函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  第一步：把数据复制到工作区，并将这个矩阵命名为X</span></span><br><span class="line"><span class="comment">% （1）在工作区右键，点击新建（Ctrl+N)，输入变量名称为X</span></span><br><span class="line"><span class="comment">% （2）在Excel中复制数据，再回到Excel中右键，点击粘贴Excel数据（Ctrl+Shift+V）</span></span><br><span class="line"><span class="comment">% （3）关掉这个窗口，点击X变量，右键另存为，保存为mat文件（下次就不用复制粘贴了，只需使用load命令即可加载数据）</span></span><br><span class="line"><span class="comment">% （4）注意，代码和数据要放在同一个目录下哦，且Matlab的当前文件夹也要是这个目录。</span></span><br><span class="line">clear;clc</span><br><span class="line">load data_water_quality.mat</span><br><span class="line"><span class="comment">%% 注意：如果提示: 错误使用 load，无法读取文件 &#x27;data_water_quality.mat&#x27;。没有此类文件或目录。</span></span><br><span class="line"><span class="comment">% 那么原因是因为你的Matlab的当前文件夹中不存在这个文件</span></span><br><span class="line"><span class="comment">% 可以使用cd函数修改Matlab的当前文件夹</span></span><br><span class="line"><span class="comment">% 比如说，我的代码和数据放在了: D:第2讲.TOPSIS法（优劣解距离法）\代码和例题数据</span></span><br><span class="line"><span class="comment">% 那么我就可以输入命令：</span></span><br><span class="line"><span class="comment">% cd &#x27;D:第2讲.TOPSIS法（优劣解距离法）\代码和例题数据&#x27;</span></span><br><span class="line"><span class="comment">% 也可以看我更新的视频：“更新9_Topsis代码为什么运行失败_得分结果怎么可视化以及权重的确定如何更加准确”，里面有介绍</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  第二步：判断是否需要正向化</span></span><br><span class="line">[n,m] = <span class="built_in">size</span>(X);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;共有&#x27;</span> num2str(n) <span class="string">&#x27;个评价对象, &#x27;</span> num2str(m) <span class="string">&#x27;个评价指标&#x27;</span>]) </span><br><span class="line">Judge = input([<span class="string">&#x27;这&#x27;</span> num2str(m) <span class="string">&#x27;个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  &#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">    Position = input(<span class="string">&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： &#x27;</span>); <span class="comment">%[2,3,4]</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） &#x27;</span>)</span><br><span class="line">    Type = input(<span class="string">&#x27;例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  &#x27;</span>); <span class="comment">%[2,1,3]</span></span><br><span class="line">    <span class="comment">% 注意，Position和Type是两个同维度的行向量</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(Position,<span class="number">2</span>)  <span class="comment">%这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数</span></span><br><span class="line">        X(:,Position(<span class="built_in">i</span>)) = Positivization(X(:,Position(<span class="built_in">i</span>)),Type(<span class="built_in">i</span>),Position(<span class="built_in">i</span>));</span><br><span class="line">    <span class="comment">% Positivization是我们自己定义的函数，其作用是进行正向化，其一共接收三个参数</span></span><br><span class="line">    <span class="comment">% 第一个参数是要正向化处理的那一列向量 X(:,Position(i))   回顾上一讲的知识，X(:,n)表示取第n列的全部元素</span></span><br><span class="line">    <span class="comment">% 第二个参数是对应的这一列的指标类型（1：极小型， 2：中间型， 3：区间型）</span></span><br><span class="line">    <span class="comment">% 第三个参数是告诉函数我们正在处理的是原始矩阵中的哪一列</span></span><br><span class="line">    <span class="comment">% 该函数有一个返回值，它返回正向化之后的指标，我们可以将其直接赋值给我们原始要处理的那一列向量</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;正向化后的矩阵 X =  &#x27;</span>)</span><br><span class="line">    <span class="built_in">disp</span>(X)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 作业：在这里增加是否需要算加权</span></span><br><span class="line"><span class="comment">% 补充一个基础知识：m*n维的矩阵A 点乘 n维行向量B，等于这个A的每一行都点乘B</span></span><br><span class="line"><span class="comment">% （注意：2017以及之后版本的Matlab才支持，老版本Matlab会报错）</span></span><br><span class="line"><span class="comment">% % 假如原始数据为：</span></span><br><span class="line"><span class="comment">%   A=[1, 2, 3;</span></span><br><span class="line"><span class="comment">%        2, 4, 6] </span></span><br><span class="line"><span class="comment">% % 权重矩阵为：</span></span><br><span class="line"><span class="comment">%   B=[ 0.2, 0.5 ,0.3 ] </span></span><br><span class="line"><span class="comment">% % 加权后为：</span></span><br><span class="line"><span class="comment">%   C=A .* B</span></span><br><span class="line"><span class="comment">%     0.2000    1.0000    0.9000</span></span><br><span class="line"><span class="comment">%     0.4000    2.0000    1.8000</span></span><br><span class="line"><span class="comment">% 类似的，还有矩阵和向量的点除， 大家可以自己试试计算A ./ B</span></span><br><span class="line"><span class="comment">% 注意，矩阵和向量没有 .- 和 .+ 哦 ，大家可以试试，如果计算A.+B 和 A.-B会报什么错误。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 这里补充一个小插曲</span></span><br><span class="line"><span class="comment">% % 在上一讲层次分析法的代码中，我们可以优化以下的语句：</span></span><br><span class="line"><span class="comment">% % Sum_A = sum(A);</span></span><br><span class="line"><span class="comment">% % SUM_A = repmat(Sum_A,n,1);</span></span><br><span class="line"><span class="comment">% % Stand_A = A ./ SUM_A;</span></span><br><span class="line"><span class="comment">% % 事实上，我们把第三行换成：Stand_A = A ./ Sum_A; 也是可以的哦 </span></span><br><span class="line"><span class="comment">% % (再次强调，新版本的Matlab才能运行哦)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 让用户判断是否需要增加权重</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;请输入是否需要增加权重向量，需要输入1，不需要输入0&#x27;</span>)</span><br><span class="line">Judge = input(<span class="string">&#x27;请输入是否需要增加权重： &#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;如果你有3个指标，你就需要输入3个权重，例如它们分别为0.25,0.25,0.5, 则你需要输入[0.25,0.25,0.5]&#x27;</span>]);</span><br><span class="line">    weigh = input([<span class="string">&#x27;你需要输入&#x27;</span> num2str(m) <span class="string">&#x27;个权数。&#x27;</span> <span class="string">&#x27;请以行向量的形式输入这&#x27;</span> num2str(m) <span class="string">&#x27;个权重: &#x27;</span>]);</span><br><span class="line">    OK = <span class="number">0</span>;  <span class="comment">% 用来判断用户的输入格式是否正确</span></span><br><span class="line">    <span class="keyword">while</span> OK == <span class="number">0</span> </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(sum(weigh) - <span class="number">1</span>)&lt;<span class="number">0.000001</span> &amp;&amp; <span class="built_in">size</span>(weigh,<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">size</span>(weigh,<span class="number">2</span>) == m   <span class="comment">% 这里要注意浮点数的运算是不精准的。</span></span><br><span class="line">             OK =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            weigh = input(<span class="string">&#x27;你输入的有误，请重新输入权重行向量: &#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    weigh = <span class="built_in">ones</span>(<span class="number">1</span>,m) ./ m ; <span class="comment">%如果不需要加权重就默认权重都相同，即都为1/m</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 第三步：对正向化后的矩阵进行标准化</span></span><br><span class="line">Z = X ./ <span class="built_in">repmat</span>(sum(X.*X) .^ <span class="number">0.5</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;标准化矩阵 Z = &#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(Z)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 第四步：计算与最大值的距离和最小值的距离，并算出得分</span></span><br><span class="line">D_P = sum(((Z - <span class="built_in">repmat</span>(<span class="built_in">max</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ) .* <span class="built_in">repmat</span>(weigh,n,<span class="number">1</span>) ,<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D+ 与最大值的距离向量</span></span><br><span class="line">D_N = sum(((Z - <span class="built_in">repmat</span>(<span class="built_in">min</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ) .* <span class="built_in">repmat</span>(weigh,n,<span class="number">1</span>) ,<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D- 与最小值的距离向量</span></span><br><span class="line">S = D_N ./ (D_P+D_N);    <span class="comment">% 未归一化的得分</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最后的得分为：&#x27;</span>)</span><br><span class="line">stand_S = S / sum(S)</span><br><span class="line">[sorted_S,index] = <span class="built_in">sort</span>(stand_S ,<span class="string">&#x27;descend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% A = magic(5)  % 幻方矩阵</span></span><br><span class="line"><span class="comment">% M = magic(n)返回由1到n^2的整数构成并且总行数和总列数相等的n×n矩阵。阶次n必须为大于或等于3的标量。</span></span><br><span class="line"><span class="comment">% sort(A)若A是向量不管是列还是行向量，默认都是对A进行升序排列。sort(A)是默认的升序，而sort(A,&#x27;descend&#x27;)是降序排序。</span></span><br><span class="line"><span class="comment">% sort(A)若A是矩阵，默认对A的各列进行升序排列</span></span><br><span class="line"><span class="comment">% sort(A,dim)</span></span><br><span class="line"><span class="comment">% dim=1时等效sort(A)</span></span><br><span class="line"><span class="comment">% dim=2时表示对A中的各行元素升序排列</span></span><br><span class="line"><span class="comment">% A = [2,1,3,8]</span></span><br><span class="line"><span class="comment">% Matlab中给一维向量排序是使用sort函数：sort（A），排序是按升序进行的，其中A为待排序的向量；</span></span><br><span class="line"><span class="comment">% 若欲保留排列前的索引，则可用 [sA,index] = sort(A,&#x27;descend&#x27;) ，排序后，sA是排序好的向量，index是向量sA中对A的索引。</span></span><br><span class="line"><span class="comment">% sA  =  8     3     2     1</span></span><br><span class="line"><span class="comment">% index =  4     3     1     2</span></span><br></pre></td></tr></table></figure>



<h3 id="基于熵权法权重的代码"><a href="#基于熵权法权重的代码" class="headerlink" title="基于熵权法权重的代码"></a>基于熵权法权重的代码</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  第一步：把数据复制到工作区，并将这个矩阵命名为X</span></span><br><span class="line"><span class="comment">% （1）在工作区右键，点击新建（Ctrl+N)，输入变量名称为X</span></span><br><span class="line"><span class="comment">% （2）在Excel中复制数据，再回到Excel中右键，点击粘贴Excel数据（Ctrl+Shift+V）</span></span><br><span class="line"><span class="comment">% （3）关掉这个窗口，点击X变量，右键另存为，保存为mat文件（下次就不用复制粘贴了，只需使用load命令即可加载数据）</span></span><br><span class="line"><span class="comment">% （4）注意，代码和数据要放在同一个目录下哦。</span></span><br><span class="line"><span class="comment">% clear;clc</span></span><br><span class="line"><span class="comment">% load data_water_quality.mat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  第二步：判断是否需要正向化</span></span><br><span class="line">[n,m] = <span class="built_in">size</span>(X);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;共有&#x27;</span> num2str(n) <span class="string">&#x27;个评价对象, &#x27;</span> num2str(m) <span class="string">&#x27;个评价指标&#x27;</span>]) </span><br><span class="line">Judge = input([<span class="string">&#x27;这&#x27;</span> num2str(m) <span class="string">&#x27;个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  &#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">    Position = input(<span class="string">&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： &#x27;</span>); <span class="comment">%[2,3,4]</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） &#x27;</span>)</span><br><span class="line">    Type = input(<span class="string">&#x27;例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  &#x27;</span>); <span class="comment">%[2,1,3]</span></span><br><span class="line">    <span class="comment">% 注意，Position和Type是两个同维度的行向量</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(Position,<span class="number">2</span>)  <span class="comment">%这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数</span></span><br><span class="line">        X(:,Position(<span class="built_in">i</span>)) = Positivization(X(:,Position(<span class="built_in">i</span>)),Type(<span class="built_in">i</span>),Position(<span class="built_in">i</span>));</span><br><span class="line">    <span class="comment">% Positivization是我们自己定义的函数，其作用是进行正向化，其一共接收三个参数</span></span><br><span class="line">    <span class="comment">% 第一个参数是要正向化处理的那一列向量 X(:,Position(i))   回顾上一讲的知识，X(:,n)表示取第n列的全部元素</span></span><br><span class="line">    <span class="comment">% 第二个参数是对应的这一列的指标类型（1：极小型， 2：中间型， 3：区间型）</span></span><br><span class="line">    <span class="comment">% 第三个参数是告诉函数我们正在处理的是原始矩阵中的哪一列</span></span><br><span class="line">    <span class="comment">% 该函数有一个返回值，它返回正向化之后的指标，我们可以将其直接赋值给我们原始要处理的那一列向量</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;正向化后的矩阵 X =  &#x27;</span>)</span><br><span class="line">    <span class="built_in">disp</span>(X)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 作业：在这里增加是否需要算加权</span></span><br><span class="line"><span class="comment">% 补充一个基础知识：m*n维的矩阵A 点乘 n维行向量B，等于这个A的每一行都点乘B</span></span><br><span class="line"><span class="comment">% （注意：2017以及之后版本的Matlab才支持，老版本Matlab会报错）</span></span><br><span class="line"><span class="comment">% % 假如原始数据为：</span></span><br><span class="line"><span class="comment">%   A=[1, 2, 3;</span></span><br><span class="line"><span class="comment">%        2, 4, 6] </span></span><br><span class="line"><span class="comment">% % 权重矩阵为：</span></span><br><span class="line"><span class="comment">%   B=[ 0.2, 0.5 ,0.3 ] </span></span><br><span class="line"><span class="comment">% % 加权后为：</span></span><br><span class="line"><span class="comment">%   C=A .* B</span></span><br><span class="line"><span class="comment">%     0.2000    1.0000    0.9000</span></span><br><span class="line"><span class="comment">%     0.4000    2.0000    1.8000</span></span><br><span class="line"><span class="comment">% 类似的，还有矩阵和向量的点除， 大家可以自己试试计算A ./ B</span></span><br><span class="line"><span class="comment">% 注意，矩阵和向量没有 .- 和 .+ 哦 ，大家可以试试，如果计算A.+B 和 A.-B会报什么错误。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 这里补充一个小插曲</span></span><br><span class="line"><span class="comment">% % 在上一讲层次分析法的代码中，我们可以优化以下的语句：</span></span><br><span class="line"><span class="comment">% % Sum_A = sum(A);</span></span><br><span class="line"><span class="comment">% % SUM_A = repmat(Sum_A,n,1);</span></span><br><span class="line"><span class="comment">% % Stand_A = A ./ SUM_A;</span></span><br><span class="line"><span class="comment">% % 事实上，我们把第三行换成：Stand_A = A ./ Sum_A; 也是可以的哦 </span></span><br><span class="line"><span class="comment">% % (再次强调，新版本的Matlab才能运行哦)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 第三步：对正向化后的矩阵进行标准化</span></span><br><span class="line">Z = X ./ <span class="built_in">repmat</span>(sum(X.*X) .^ <span class="number">0.5</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;标准化矩阵 Z = &#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(Z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 让用户判断是否需要增加权重</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;请输入是否需要增加权重向量，需要输入1，不需要输入0&quot;</span>)</span><br><span class="line">Judge = input(<span class="string">&#x27;请输入是否需要增加权重： &#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">    Judge = input(<span class="string">&#x27;使用熵权法确定权重请输入1，否则输入0： &#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> sum(sum(Z&lt;<span class="number">0</span>)) &gt;<span class="number">0</span>   <span class="comment">% 如果之前标准化后的Z矩阵中存在负数，则重新对X进行标准化</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;原来标准化得到的Z矩阵中存在负数，所以需要对X重新标准化&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:m</span><br><span class="line">                    Z(<span class="built_in">i</span>,<span class="built_in">j</span>) = [X(<span class="built_in">i</span>,<span class="built_in">j</span>) - <span class="built_in">min</span>(X(:,<span class="built_in">j</span>))] / [<span class="built_in">max</span>(X(:,<span class="built_in">j</span>)) - <span class="built_in">min</span>(X(:,<span class="built_in">j</span>))];</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;X重新进行标准化得到的标准化矩阵Z为:  &#x27;</span>)</span><br><span class="line">            <span class="built_in">disp</span>(Z)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        weight = Entropy_Method(Z);</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;熵权法确定的权重为：&#x27;</span>)</span><br><span class="line">        <span class="built_in">disp</span>(weight)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;如果你有3个指标，你就需要输入3个权重，例如它们分别为0.25,0.25,0.5, 则你需要输入[0.25,0.25,0.5]&#x27;</span>]);</span><br><span class="line">        weight = input([<span class="string">&#x27;你需要输入&#x27;</span> num2str(m) <span class="string">&#x27;个权数。&#x27;</span> <span class="string">&#x27;请以行向量的形式输入这&#x27;</span> num2str(m) <span class="string">&#x27;个权重: &#x27;</span>]);</span><br><span class="line">        OK = <span class="number">0</span>;  <span class="comment">% 用来判断用户的输入格式是否正确</span></span><br><span class="line">        <span class="keyword">while</span> OK == <span class="number">0</span> </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(sum(weight) <span class="number">-1</span>)&lt;<span class="number">0.000001</span> &amp;&amp; <span class="built_in">size</span>(weight,<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">size</span>(weight,<span class="number">2</span>) == m  <span class="comment">% 注意，Matlab中浮点数的比较要小心</span></span><br><span class="line">                OK =<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                weight = input(<span class="string">&#x27;你输入的有误，请重新输入权重行向量: &#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    weight = <span class="built_in">ones</span>(<span class="number">1</span>,m) ./ m ; <span class="comment">%如果不需要加权重就默认权重都相同，即都为1/m</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 第四步：计算与最大值的距离和最小值的距离，并算出得分</span></span><br><span class="line">D_P = sum([(Z - <span class="built_in">repmat</span>(<span class="built_in">max</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ] .* <span class="built_in">repmat</span>(weight,n,<span class="number">1</span>) ,<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D+ 与最大值的距离向量</span></span><br><span class="line">D_N = sum([(Z - <span class="built_in">repmat</span>(<span class="built_in">min</span>(Z),n,<span class="number">1</span>)) .^ <span class="number">2</span> ] .* <span class="built_in">repmat</span>(weight,n,<span class="number">1</span>) ,<span class="number">2</span>) .^ <span class="number">0.5</span>;   <span class="comment">% D- 与最小值的距离向量</span></span><br><span class="line">S = D_N ./ (D_P+D_N);    <span class="comment">% 未归一化的得分</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最后的得分为：&#x27;</span>)</span><br><span class="line">stand_S = S / sum(S)</span><br><span class="line">[sorted_S,index] = <span class="built_in">sort</span>(stand_S ,<span class="string">&#x27;descend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% A = magic(5)  % 幻方矩阵</span></span><br><span class="line"><span class="comment">% M = magic(n)返回由1到n^2的整数构成并且总行数和总列数相等的n×n矩阵。阶次n必须为大于或等于3的标量。</span></span><br><span class="line"><span class="comment">% sort(A)若A是向量不管是列还是行向量，默认都是对A进行升序排列。sort(A)是默认的升序，而sort(A,&#x27;descend&#x27;)是降序排序。</span></span><br><span class="line"><span class="comment">% sort(A)若A是矩阵，默认对A的各列进行升序排列</span></span><br><span class="line"><span class="comment">% sort(A,dim)</span></span><br><span class="line"><span class="comment">% dim=1时等效sort(A)</span></span><br><span class="line"><span class="comment">% dim=2时表示对A中的各行元素升序排列</span></span><br><span class="line"><span class="comment">% A = [2,1,3,8]</span></span><br><span class="line"><span class="comment">% Matlab中给一维向量排序是使用sort函数：sort（A），排序是按升序进行的，其中A为待排序的向量；</span></span><br><span class="line"><span class="comment">% 若欲保留排列前的索引，则可用 [sA,index] = sort(A,&#x27;descend&#x27;) ，排序后，sA是排序好的向量，index是向量sA中对A的索引。</span></span><br><span class="line"><span class="comment">% sA  =  8     3     2     1</span></span><br><span class="line"><span class="comment">% index =  4     3     1     2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>增添功能函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[W]</span> = <span class="title">Entropy_Method</span><span class="params">(Z)</span></span></span><br><span class="line"><span class="comment">% 计算有n个样本，m个指标的样本所对应的的熵权</span></span><br><span class="line"><span class="comment">% 输入</span></span><br><span class="line"><span class="comment">% Z ： n*m的矩阵（要经过正向化和标准化处理，且元素中不存在负数）</span></span><br><span class="line"><span class="comment">% 输出</span></span><br><span class="line"><span class="comment">% W：熵权，1*m的行向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算熵权</span></span><br><span class="line">    [n,m] = <span class="built_in">size</span>(Z);</span><br><span class="line">    D = <span class="built_in">zeros</span>(<span class="number">1</span>,m);  <span class="comment">% 初始化保存信息效用值的行向量</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">        x = Z(:,<span class="built_in">i</span>);  <span class="comment">% 取出第i列的指标</span></span><br><span class="line">        p = x / sum(x);</span><br><span class="line">        <span class="comment">% 注意，p有可能为0，此时计算ln(p)*p时，Matlab会返回NaN，所以这里我们自己定义一个函数</span></span><br><span class="line">        e = -sum(p .* mylog(p)) / <span class="built_in">log</span>(n); <span class="comment">% 计算信息熵</span></span><br><span class="line">        D(<span class="built_in">i</span>) = <span class="number">1</span>- e; <span class="comment">% 计算信息效用值</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    W = D ./ sum(D);  <span class="comment">% 将信息效用值归一化，得到权重</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 重新定义一个mylog函数，当输入的p中元素为0时，返回0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[lnp]</span> =  <span class="title">mylog</span><span class="params">(p)</span></span></span><br><span class="line">n = <span class="built_in">length</span>(p);   <span class="comment">% 向量的长度</span></span><br><span class="line">lnp = <span class="built_in">zeros</span>(n,<span class="number">1</span>);   <span class="comment">% 初始化最后的结果</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n   <span class="comment">% 开始循环</span></span><br><span class="line">        <span class="keyword">if</span> p(<span class="built_in">i</span>) == <span class="number">0</span>   <span class="comment">% 如果第i个元素为0</span></span><br><span class="line">            lnp(<span class="built_in">i</span>) = <span class="number">0</span>;  <span class="comment">% 那么返回的第i个结果也为0</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lnp(<span class="built_in">i</span>) = <span class="built_in">log</span>(p(<span class="built_in">i</span>));  </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>





<h2 id="灰色关联分析"><a href="#灰色关联分析" class="headerlink" title="灰色关联分析"></a>灰色关联分析</h2><h3 id="传统数理统计的不足之处"><a href="#传统数理统计的不足之处" class="headerlink" title="传统数理统计的不足之处"></a>传统数理统计的不足之处</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751231.png" style="zoom:80%;" />

<h3 id="该方法的好处"><a href="#该方法的好处" class="headerlink" title="该方法的好处"></a>该方法的好处</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751261.png" style="zoom:80%;" />





<h3 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol>
<li>画统计图（excel）</li>
<li>确定分析数列（即确定参考数列（母序列）和比较数列（子序列））</li>
<li>对变量进行预处理（目的：1.去量纲；2.缩小变量范围简化计算）</li>
<li>计算子序列中多个指标与母序列的关联系数</li>
<li>求每个指标对于母指标的关联度（关联系数求平均）</li>
<li>比较关联度大小得出结论（关联度越大表示联系越紧密）</li>
</ol>
<h3 id="算法代码-2"><a href="#算法代码-2" class="headerlink" title="算法代码"></a>算法代码</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 灰色关联分析用于系统分析例题的讲解</span></span><br><span class="line">clear;clc</span><br><span class="line">load gdp.mat  <span class="comment">% 导入数据 一个6*4的矩阵</span></span><br><span class="line"><span class="comment">% 不会导入数据的同学可以看看第二讲topsis模型，我们也可以自己在工作区新建变量，并把Excel的数据粘贴过来</span></span><br><span class="line"><span class="comment">% 注意Matlab的当前文件夹一定要切换到有数据文件的这个文件夹内</span></span><br><span class="line">Mean = <span class="built_in">mean</span>(gdp);  <span class="comment">% 求出每一列的均值以供后续的数据预处理</span></span><br><span class="line">gdp = gdp ./ <span class="built_in">repmat</span>(Mean,<span class="built_in">size</span>(gdp,<span class="number">1</span>),<span class="number">1</span>);  <span class="comment">%size(gdp,1)=6, repmat(Mean,6,1)可以将矩阵进行复制，复制为和gdp同等大小，然后使用点除（对应元素相除），这些在第一讲层次分析法都讲过</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;预处理后的矩阵为：&#x27;</span>); <span class="built_in">disp</span>(gdp)</span><br><span class="line">Y = gdp(:,<span class="number">1</span>);  <span class="comment">% 母序列：这里默认第一列为母序列</span></span><br><span class="line">X = gdp(:,<span class="number">2</span>:<span class="keyword">end</span>); <span class="comment">% 子序列：第二列到最后一列为子序列</span></span><br><span class="line">absX0_Xi = <span class="built_in">abs</span>(X - <span class="built_in">repmat</span>(Y,<span class="number">1</span>,<span class="built_in">size</span>(X,<span class="number">2</span>)))  <span class="comment">% 计算|X0-Xi|矩阵(在这里我们把X0定义为了Y)</span></span><br><span class="line">a = <span class="built_in">min</span>(<span class="built_in">min</span>(absX0_Xi))    <span class="comment">% 计算两级最小差a</span></span><br><span class="line">b = <span class="built_in">max</span>(<span class="built_in">max</span>(absX0_Xi))  <span class="comment">% 计算两级最大差b</span></span><br><span class="line">rho = <span class="number">0.5</span>; <span class="comment">% 分辨系数取0.5</span></span><br><span class="line"><span class="built_in">gamma</span> = (a+rho*b) ./ (absX0_Xi  + rho*b)  <span class="comment">% 计算子序列中各个指标与母序列的关联系数</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;子序列中各个指标的灰色关联度分别为：&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(<span class="built_in">mean</span>(<span class="built_in">gamma</span>))</span><br></pre></td></tr></table></figure>





<h3 id="基于灰色关联度权重的代码"><a href="#基于灰色关联度权重的代码" class="headerlink" title="基于灰色关联度权重的代码"></a>基于灰色关联度权重的代码</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 灰色关联分析用于综合评价模型例题的讲解</span></span><br><span class="line">clear;clc</span><br><span class="line">load data_water_quality.mat</span><br><span class="line"><span class="comment">% 不会导入数据的同学可以看看第二讲topsis模型，我们也可以自己在工作区新建变量，并把Excel的数据粘贴过来</span></span><br><span class="line"><span class="comment">% 注意Matlab的当前文件夹一定要切换到有数据文件的这个文件夹内</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  判断是否需要正向化</span></span><br><span class="line">[n,m] = <span class="built_in">size</span>(X);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;共有&#x27;</span> num2str(n) <span class="string">&#x27;个评价对象, &#x27;</span> num2str(m) <span class="string">&#x27;个评价指标&#x27;</span>]) </span><br><span class="line">Judge = input([<span class="string">&#x27;这&#x27;</span> num2str(m) <span class="string">&#x27;个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  &#x27;</span>]);   <span class="comment">%1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Judge == <span class="number">1</span></span><br><span class="line">    Position = input(<span class="string">&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： &#x27;</span>); <span class="comment">%[2,3,4]</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;请输入需要处理的这些列的指  标类型（1：极小型， 2：中间型， 3：区间型） &#x27;</span>)</span><br><span class="line">    Type = input(<span class="string">&#x27;例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  &#x27;</span>); <span class="comment">%[2,1,3]</span></span><br><span class="line">    <span class="comment">% 注意，Position和Type是两个同维度的行向量</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(Position,<span class="number">2</span>)  <span class="comment">%这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数</span></span><br><span class="line">        X(:,Position(<span class="built_in">i</span>)) = Positivization(X(:,Position(<span class="built_in">i</span>)),Type(<span class="built_in">i</span>),Position(<span class="built_in">i</span>));</span><br><span class="line">    <span class="comment">% Positivization是我们自己定义的函数，其作用是进行正向化，其一共接收三个参数</span></span><br><span class="line">    <span class="comment">% 第一个参数是要正向化处理的那一列向量 X(:,Position(i))   回顾上一讲的知识，X(:,n)表示取第n列的全部元素</span></span><br><span class="line">    <span class="comment">% 第二个参数是对应的这一列的指标类型（1：极小型， 2：中间型， 3：区间型）</span></span><br><span class="line">    <span class="comment">% 第三个参数是告诉函数我们正在处理的是原始矩阵中的哪一列</span></span><br><span class="line">    <span class="comment">% 该函数有一个返回值，它返回正向化之后的指标，我们可以将其直接赋值给我们原始要处理的那一列向量</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;正向化后的矩阵 X =  &#x27;</span>)</span><br><span class="line">    <span class="built_in">disp</span>(X)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 对正向化后的矩阵进行预处理</span></span><br><span class="line">Mean = <span class="built_in">mean</span>(X);  <span class="comment">% 求出每一列的均值以供后续的数据预处理</span></span><br><span class="line">Z = X ./ <span class="built_in">repmat</span>(Mean,<span class="built_in">size</span>(X,<span class="number">1</span>),<span class="number">1</span>);  </span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;预处理后的矩阵为：&#x27;</span>); <span class="built_in">disp</span>(Z)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 构造母序列和子序列</span></span><br><span class="line">Y = <span class="built_in">max</span>(Z,[],<span class="number">2</span>);  <span class="comment">% 母序列为虚拟的，用每一行的最大值构成的列向量表示母序列</span></span><br><span class="line">X = Z; <span class="comment">% 子序列就是预处理后的数据矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算得分</span></span><br><span class="line">absX0_Xi = <span class="built_in">abs</span>(X - <span class="built_in">repmat</span>(Y,<span class="number">1</span>,<span class="built_in">size</span>(X,<span class="number">2</span>)))  <span class="comment">% 计算|X0-Xi|矩阵</span></span><br><span class="line">a = <span class="built_in">min</span>(<span class="built_in">min</span>(absX0_Xi))    <span class="comment">% 计算两级最小差a</span></span><br><span class="line">b = <span class="built_in">max</span>(<span class="built_in">max</span>(absX0_Xi))  <span class="comment">% 计算两级最大差b</span></span><br><span class="line">rho = <span class="number">0.5</span>; <span class="comment">% 分辨系数取0.5</span></span><br><span class="line"><span class="built_in">gamma</span> = (a+rho*b) ./ (absX0_Xi  + rho*b)  <span class="comment">% 计算子序列中各个指标与母序列的关联系数</span></span><br><span class="line">weight = <span class="built_in">mean</span>(<span class="built_in">gamma</span>) / sum(<span class="built_in">mean</span>(<span class="built_in">gamma</span>));  <span class="comment">% 利用子序列中各个指标的灰色关联度计算权重</span></span><br><span class="line">score = sum(X .* <span class="built_in">repmat</span>(weight,<span class="built_in">size</span>(X,<span class="number">1</span>),<span class="number">1</span>),<span class="number">2</span>);   <span class="comment">% 未归一化的得分</span></span><br><span class="line">stand_S = score / sum(score);   <span class="comment">% 归一化后的得分</span></span><br><span class="line">[sorted_S,index] = <span class="built_in">sort</span>(stand_S ,<span class="string">&#x27;descend&#x27;</span>) <span class="comment">% 进行排序</span></span><br></pre></td></tr></table></figure>





<h2 id="模糊综合评价"><a href="#模糊综合评价" class="headerlink" title="模糊综合评价"></a>模糊综合评价</h2><h3 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol>
<li>确定因素集（评价指标）（分类来划分层级），评语集（评价度量），因素集权重（指标权重）</li>
<li>确定模糊综合判断矩阵（分别建立每个指标的隶属函数（指标正向化））</li>
<li>模糊向量&#x3D;权重集 * 模糊综合判断矩阵</li>
<li>综合评判得出结果</li>
</ol>
<h2 id="用excel绘制图形"><a href="#用excel绘制图形" class="headerlink" title="用excel绘制图形"></a>用excel绘制图形</h2><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751245.png" style="zoom:80%;" />





<h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751374.png" style="zoom:80%;" />



<h3 id="双向柱状图"><a href="#双向柱状图" class="headerlink" title="双向柱状图"></a>双向柱状图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751308.png" style="zoom:80%;" />





<h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751316.png" style="zoom:80%;" />

<h3 id="双向条形图"><a href="#双向条形图" class="headerlink" title="双向条形图"></a>双向条形图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751938.png" style="zoom:80%;" />



<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751123.png" style="zoom:80%;" />





<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751199.png"></p>
<h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751132.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751143.png" style="zoom:80%;" />





<h3 id="双轴折线图"><a href="#双轴折线图" class="headerlink" title="双轴折线图"></a>双轴折线图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751218.png" style="zoom:80%;" />



<h3 id="类别折线图"><a href="#类别折线图" class="headerlink" title="类别折线图"></a>类别折线图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751608.png" style="zoom:80%;" />





<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751007.png" style="zoom:80%;" />



<h3 id="分类散点图"><a href="#分类散点图" class="headerlink" title="分类散点图"></a>分类散点图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751883.png" style="zoom:80%;" />





<h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751936.png" style="zoom:80%;" />



<h3 id="excel技巧"><a href="#excel技巧" class="headerlink" title="excel技巧"></a>excel技巧</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751950.png" style="zoom:80%;" />





<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751944.png" style="zoom:80%;" />



<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751278.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751406.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751474.png"></p>
<h4 id="数据透视表（便于数据交互分析）"><a href="#数据透视表（便于数据交互分析）" class="headerlink" title="数据透视表（便于数据交互分析）"></a>数据透视表（便于数据交互分析）</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751491.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751504.png" style="zoom:80%;" />

<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751584.png" style="zoom:80%;" />

<h5 id="1-数据透视表有空白"><a href="#1-数据透视表有空白" class="headerlink" title="1.数据透视表有空白"></a>1.数据透视表有空白</h5><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751695.png" style="zoom:80%;" />

<h5 id="2-日期或时刻为文本型"><a href="#2-日期或时刻为文本型" class="headerlink" title="2.日期或时刻为文本型"></a>2.日期或时刻为文本型</h5><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751740.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751864.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751882.png" style="zoom:80%;" />



<h5 id="3-数值为文本型"><a href="#3-数值为文本型" class="headerlink" title="3.数值为文本型"></a>3.数值为文本型</h5><p>解决方法：</p>
<ol>
<li>分列功能</li>
<li>用.txt文件</li>
</ol>
<h4 id="强大的工具"><a href="#强大的工具" class="headerlink" title="强大的工具"></a>强大的工具</h4><p>方方格子：可以用于多文件处理</p>
<p>VBA</p>
<h2 id="插值算法（常用于数据缺失值处理）"><a href="#插值算法（常用于数据缺失值处理）" class="headerlink" title="插值算法（常用于数据缺失值处理）"></a>插值算法（常用于数据缺失值处理）</h2><h3 id="低阶插值方法"><a href="#低阶插值方法" class="headerlink" title="低阶插值方法"></a>低阶插值方法</h3><ul>
<li><p>分段插值（低级但好用）</p>
</li>
<li><p>分段多项式插值</p>
</li>
<li><p>多项式插值（不好用）</p>
</li>
</ul>
<h3 id="中阶插值方法（龙格现象）（导数不符合）"><a href="#中阶插值方法（龙格现象）（导数不符合）" class="headerlink" title="中阶插值方法（龙格现象）（导数不符合）"></a>中阶插值方法（龙格现象）（导数不符合）</h3><ul>
<li>拉格朗日插值</li>
<li>牛顿插值</li>
</ul>
<h3 id="高阶插值方法（导数保持一致）"><a href="#高阶插值方法（导数保持一致）" class="headerlink" title="高阶插值方法（导数保持一致）"></a>高阶插值方法（导数保持一致）</h3><ul>
<li>埃尔米特插值（一般为三次）</li>
<li>样条插值（一般为三次）</li>
</ul>
<h3 id="算法代码-3"><a href="#算法代码-3" class="headerlink" title="算法代码"></a>算法代码</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 分段三次埃尔米特插值</span></span><br><span class="line">x = -<span class="built_in">pi</span>:<span class="built_in">pi</span>; y = <span class="built_in">sin</span>(x); </span><br><span class="line">new_x = -<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line">p = pchip(x,y,new_x);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>); <span class="comment">% 在同一个脚本文件里面，要想画多个图，需要给每个图编号，否则只会显示最后一个图哦~</span></span><br><span class="line"><span class="built_in">plot</span>(x, y, <span class="string">&#x27;-o&#x27;</span>, new_x, p, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% plot函数用法:</span></span><br><span class="line"><span class="comment">% plot(x1,y1,x2,y2) </span></span><br><span class="line"><span class="comment">% 线方式： - 实线 :点线 -. 虚点线 - - 波折线 </span></span><br><span class="line"><span class="comment">% 点方式： . 圆点  +加号  * 星号  x x形  o 小圆</span></span><br><span class="line"><span class="comment">% 颜色： y黄； r红； g绿； b蓝； w白； k黑； m紫； c青</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 三次样条插值和分段三次埃尔米特插值的对比</span></span><br><span class="line">x = -<span class="built_in">pi</span>:<span class="built_in">pi</span>; </span><br><span class="line">y = <span class="built_in">sin</span>(x); </span><br><span class="line">new_x = -<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line">p1 = pchip(x,y,new_x);   <span class="comment">%分段三次埃尔米特插值</span></span><br><span class="line">p2 = spline(x,y,new_x);  <span class="comment">%三次样条插值</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;o&#x27;</span>,new_x,p1,<span class="string">&#x27;r-&#x27;</span>,new_x,p2,<span class="string">&#x27;b-&#x27;</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;样本点&#x27;</span>,<span class="string">&#x27;三次埃尔米特插值&#x27;</span>,<span class="string">&#x27;三次样条插值&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;SouthEast&#x27;</span>)   <span class="comment">%标注显示在东南方向</span></span><br><span class="line"><span class="comment">% 说明：</span></span><br><span class="line"><span class="comment">% LEGEND(string1,string2,string3, …)</span></span><br><span class="line"><span class="comment">% 分别将字符串1、字符串2、字符串3……标注到图中，每个字符串对应的图标为画图时的图标。</span></span><br><span class="line"><span class="comment">% ‘Location’用来指定标注显示的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% n维数据的插值</span></span><br><span class="line">x = -<span class="built_in">pi</span>:<span class="built_in">pi</span>; y = <span class="built_in">sin</span>(x); </span><br><span class="line">new_x = -<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line">p = interpn (x, y, new_x, <span class="string">&#x27;spline&#x27;</span>);</span><br><span class="line"><span class="comment">% 等价于 p = spline(x, y, new_x);</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">plot</span>(x, y, <span class="string">&#x27;o&#x27;</span>, new_x, p, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 人口预测（注意：一般我们很少使用插值算法来预测数据，随着课程的深入，后面的章节会有更适合预测的算法供大家选择，例如灰色预测、拟合预测等）</span></span><br><span class="line">population=[<span class="number">133126</span>,<span class="number">133770</span>,<span class="number">134413</span>,<span class="number">135069</span>,<span class="number">135738</span>,<span class="number">136427</span>,<span class="number">137122</span>,<span class="number">137866</span>,<span class="number">138639</span>, <span class="number">139538</span>];</span><br><span class="line">year = <span class="number">2009</span>:<span class="number">2018</span>;</span><br><span class="line">p1 = pchip(year, population, <span class="number">2019</span>:<span class="number">2021</span>)  <span class="comment">%分段三次埃尔米特插值预测</span></span><br><span class="line">p2 = spline(year, population, <span class="number">2019</span>:<span class="number">2021</span>) <span class="comment">%三次样条插值预测</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">plot</span>(year, population,<span class="string">&#x27;o&#x27;</span>,<span class="number">2019</span>:<span class="number">2021</span>,p1,<span class="string">&#x27;r*-&#x27;</span>,<span class="number">2019</span>:<span class="number">2021</span>,p2,<span class="string">&#x27;bx-&#x27;</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;样本点&#x27;</span>,<span class="string">&#x27;三次埃尔米特插值预测&#x27;</span>,<span class="string">&#x27;三次样条插值预测&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;SouthEast&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="插值方法可以进行短期预测"><a href="#插值方法可以进行短期预测" class="headerlink" title="插值方法可以进行短期预测"></a>插值方法可以进行短期预测</h3><h3 id="数据缺失值处理"><a href="#数据缺失值处理" class="headerlink" title="数据缺失值处理"></a>数据缺失值处理</h3><p><a href="https://www.bilibili.com/video/BV1mR4y1A741?vd_source=21929b71ec58f67534148e5c4050348c">【缺失值处理】如何利用spss做均值替代、中位数替代与多重插补？</a> </p>
<p><a href="https://www.bilibili.com/video/BV1YZ4y1f7pk?vd_source=21929b71ec58f67534148e5c4050348c">【6.缺失值与多重插补】</a> </p>
<h2 id="拟合算法"><a href="#拟合算法" class="headerlink" title="拟合算法"></a>拟合算法</h2><h3 id="拟合优度（线性函数的评价指标）"><a href="#拟合优度（线性函数的评价指标）" class="headerlink" title="拟合优度（线性函数的评价指标）"></a>拟合优度（线性函数的评价指标）</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751895.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751948.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751083.png" style="zoom:80%;" />



<h3 id="算法代码-4"><a href="#算法代码-4" class="headerlink" title="算法代码"></a>算法代码</h3><h4 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">load  data1</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"><span class="comment">% 给x和y轴加上标签</span></span><br><span class="line">xlabel(<span class="string">&#x27;x的值&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y的值&#x27;</span>)</span><br><span class="line">n = <span class="built_in">size</span>(x,<span class="number">1</span>);</span><br><span class="line">k = (n*sum(x.*y)-sum(x)*sum(y))/(n*sum(x.*x)-sum(x)*sum(x))</span><br><span class="line">b = (sum(x.*x)*sum(y)-sum(x)*sum(x.*y))/(n*sum(x.*x)-sum(x)*sum(x))</span><br><span class="line"><span class="built_in">hold</span> on <span class="comment">% 继续在之前的图形上来画图形</span></span><br><span class="line">grid on <span class="comment">% 显示网格线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% % 画出y=kx+b的函数图像 plot(x,y)</span></span><br><span class="line"><span class="comment">% % 传统的画法：模拟生成x和y的序列，比如要画出[0,5]上的图形</span></span><br><span class="line"><span class="comment">% xx = 2.5: 0.1 :7  % 间隔设置的越小画出来的图形越准确</span></span><br><span class="line"><span class="comment">% yy = k * xx + b  % k和b都是已知值</span></span><br><span class="line"><span class="comment">% plot(xx,yy,&#x27;-&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 匿名函数的基本用法。</span></span><br><span class="line"><span class="comment">% handle = @(arglist) anonymous_function</span></span><br><span class="line"><span class="comment">% 其中handle为调用匿名函数时使用的名字。</span></span><br><span class="line"><span class="comment">% arglist为匿名函数的输入参数，可以是一个，也可以是多个，用逗号分隔。</span></span><br><span class="line"><span class="comment">% anonymous_function为匿名函数的表达式。</span></span><br><span class="line"><span class="comment">% 举个小例子</span></span><br><span class="line"><span class="comment">%  z=@(x,y) x^2+y^2; </span></span><br><span class="line"><span class="comment">%  z(1,2) </span></span><br><span class="line"><span class="comment">% % ans =  5</span></span><br><span class="line"><span class="comment">% fplot函数可用于画出匿名一元函数的图形。</span></span><br><span class="line"><span class="comment">% fplot(f,xinterval) 将匿名函数f在指定区间xinterval绘图。xinterval =  [xmin xmax] 表示定义域的范围</span></span><br><span class="line"></span><br><span class="line">f=@(x) k*x+b;</span><br><span class="line">fplot(f,[<span class="number">2.5</span>,<span class="number">7</span>]);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;样本数据&#x27;</span>,<span class="string">&#x27;拟合函数&#x27;</span>,<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;SouthEast&#x27;</span>)</span><br><span class="line"></span><br><span class="line">y_hat = k*x+b; <span class="comment">% y的拟合值</span></span><br><span class="line">SSR = sum((y_hat-<span class="built_in">mean</span>(y)).^<span class="number">2</span>)  <span class="comment">% 回归平方和</span></span><br><span class="line">SSE = sum((y_hat-y).^<span class="number">2</span>) <span class="comment">% 误差平方和</span></span><br><span class="line">SST = sum((y-<span class="built_in">mean</span>(y)).^<span class="number">2</span>) <span class="comment">% 总体平方和</span></span><br><span class="line">SST-SSE-SSR   <span class="comment">% 5.6843e-14  =   5.6843*10^-14   matlab浮点数计算的一个误差</span></span><br><span class="line">R_2 = SSR / SST</span><br></pre></td></tr></table></figure>





<h4 id="拟合工具箱使用"><a href="#拟合工具箱使用" class="headerlink" title="拟合工具箱使用"></a>拟合工具箱使用</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">population = [<span class="number">3.9</span>,<span class="number">5.3</span>,<span class="number">7.2</span>,<span class="number">9.6</span>,<span class="number">12.9</span>,<span class="number">17.1</span>,<span class="number">23.2</span>,<span class="number">31.4</span>,<span class="number">38.6</span>,<span class="number">50.2</span>,<span class="number">62.9</span>,<span class="number">76.0</span>,<span class="number">92.0</span>,<span class="number">106.5</span>,<span class="number">123.2</span>,<span class="number">131.7</span>,<span class="number">150.7</span>,<span class="number">179.3</span>,<span class="number">204.0</span>,<span class="number">226.5</span>,<span class="number">251.4</span>,<span class="number">281.4</span>];</span><br><span class="line"><span class="built_in">plot</span>(year,population,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">cftool  <span class="comment">% 拟合工具箱</span></span><br><span class="line"><span class="comment">% (1) X data 选择 year</span></span><br><span class="line"><span class="comment">% (2) Y data 选择 population</span></span><br><span class="line"><span class="comment">% (3) 拟合方式选择：Custom Equation (自定义方程)</span></span><br><span class="line"><span class="comment">% (4) 修改下方的方框为：x = f(t) = xm/(1+(xm/3.9-1)*exp(-r*(t-1790)))</span></span><br><span class="line"><span class="comment">% (5) 左边的result一栏最上面显示：Fit computation did not converge:即没有找到收敛解，右边的拟合图形也表明拟合结果不理想</span></span><br><span class="line"><span class="comment">% (6) 点击Fit Options，修改非线性最小二乘估计法拟合的初始值(StartPoint), r修改为0.02，xm修改为500 </span></span><br><span class="line"><span class="comment">% 有很多同学有疑惑，初始值为什么要这样设置？我们在未来学习微分方程模型和智能算法的课程时再来给大家介绍这里面蕴含的技巧。</span></span><br><span class="line"><span class="comment">% (7) 此时左边的result一览得到了拟合结果：r = 0.02735, xm = 342.4</span></span><br><span class="line"><span class="comment">% (8) 依次点击拟合工具箱的菜单栏最左边的文件-Point to figure(生成图像);—Generate Code(导出代码到时候可以放在你的论文附录)，可以得到一个未命名的脚本文件</span></span><br><span class="line"><span class="comment">% (9) 在这个打开的脚本中按快捷键Ctrl+S，将这个文件保存到当前文件夹。</span></span><br><span class="line"><span class="comment">% (10) 在现在这个文件中调用这个函数得到参数的拟合值和预测的效果</span></span><br><span class="line">[fitresult, gof] = createFit(year, population)</span><br><span class="line">t = <span class="number">2001</span>:<span class="number">2030</span>;</span><br><span class="line">xm = <span class="number">342.4</span>;   </span><br><span class="line">r =  <span class="number">0.02735</span>;</span><br><span class="line">predictions = xm./(<span class="number">1</span>+(xm./<span class="number">3.9</span><span class="number">-1</span>).*<span class="built_in">exp</span>(-r.*(t<span class="number">-1790</span>)));  <span class="comment">% 计算预测值（注意这里要写成点乘和点除,这样可以保证按照对应元素进行计算）</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(year,population,<span class="string">&#x27;.&#x27;</span>,t,predictions,<span class="string">&#x27;.&#x27;</span>)  <span class="comment">% 绘制预测结果图</span></span><br></pre></td></tr></table></figure>

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751104.png" style="zoom:80%;" />

<h5 id="相关学术名词解释-word文件"><a href="#相关学术名词解释-word文件" class="headerlink" title="相关学术名词解释 (word文件)"></a><strong><a href="C:\Users\86134\Desktop\数学建模资料\清风数学建模资料\正课配套课件和代码\正课配套的课件和代码\第4讲.拟合\拓展资料\工具箱曲线拟合类型+评价解释.doc" alt="链接">相关学术名词解释</a></strong> (word文件)</h5><h2 id="相关分析"><a href="#相关分析" class="headerlink" title="相关分析"></a>相关分析</h2><h3 id="Pearson相关系数"><a href="#Pearson相关系数" class="headerlink" title="Pearson相关系数"></a>Pearson相关系数</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751252.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751280.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751293.png" style="zoom:80%;" />

<h4 id="算法代码-5"><a href="#算法代码-5" class="headerlink" title="算法代码"></a>算法代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">load <span class="string">&#x27;physical fitness test.mat&#x27;</span>  <span class="comment">%文件名如果有空格隔开，那么需要加引号</span></span><br><span class="line"><span class="comment">% https://ww2.mathworks.cn/help/matlab/ref/corrcoef.html</span></span><br><span class="line"><span class="comment">%% 统计描述</span></span><br><span class="line">MIN = <span class="built_in">min</span>(Test);  <span class="comment">% 每一列的最小值</span></span><br><span class="line">MAX = <span class="built_in">max</span>(Test);   <span class="comment">% 每一列的最大值</span></span><br><span class="line">MEAN = <span class="built_in">mean</span>(Test);  <span class="comment">% 每一列的均值</span></span><br><span class="line">MEDIAN = median(Test);  <span class="comment">%每一列的中位数</span></span><br><span class="line">SKEWNESS = skewness(Test); <span class="comment">%每一列的偏度</span></span><br><span class="line">KURTOSIS = kurtosis(Test);  <span class="comment">%每一列的峰度</span></span><br><span class="line">STD = std(Test);  <span class="comment">% 每一列的标准差</span></span><br><span class="line">RESULT = [MIN;MAX;MEAN;MEDIAN;SKEWNESS;KURTOSIS;STD]  <span class="comment">%将这些统计量放到一个矩阵中表示</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算各列之间的相关系数</span></span><br><span class="line"><span class="comment">% 在计算皮尔逊相关系数之前,一定要做出散点图来看两组变量之间是否有线性关系</span></span><br><span class="line"><span class="comment">% 这里使用Spss比较方便: 图形 - 旧对话框 - 散点图/点图 - 矩阵散点图</span></span><br><span class="line"></span><br><span class="line">R = corrcoef(Test)   <span class="comment">% correlation coefficient</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 假设检验部分</span></span><br><span class="line">x = <span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>;</span><br><span class="line">y = tpdf(x,<span class="number">28</span>);  <span class="comment">%求t分布的概率密度值 28是自由度  </span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">grid on  <span class="comment">% 在画出的图上加上网格线</span></span><br><span class="line"><span class="built_in">hold</span> on  <span class="comment">% 保留原来的图，以便继续在上面操作</span></span><br><span class="line"><span class="comment">% matlab可以求出临界值，函数如下</span></span><br><span class="line">tinv(<span class="number">0.975</span>,<span class="number">28</span>)    <span class="comment">%    2.0484</span></span><br><span class="line"><span class="comment">% 这个函数是累积密度函数cdf的反函数</span></span><br><span class="line"><span class="built_in">plot</span>([<span class="number">-2.048</span>,<span class="number">-2.048</span>],[<span class="number">0</span>,tpdf(<span class="number">-2.048</span>,<span class="number">28</span>)],<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">2.048</span>,<span class="number">2.048</span>],[<span class="number">0</span>,tpdf(<span class="number">2.048</span>,<span class="number">28</span>)],<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算p值</span></span><br><span class="line">x = <span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>;</span><br><span class="line">y = tpdf(x,<span class="number">28</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">grid on </span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="comment">% 画线段的方法</span></span><br><span class="line"><span class="built_in">plot</span>([<span class="number">-3.055</span>,<span class="number">-3.055</span>],[<span class="number">0</span>,tpdf(<span class="number">-3.055</span>,<span class="number">28</span>)],<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">3.055</span>,<span class="number">3.055</span>],[<span class="number">0</span>,tpdf(<span class="number">3.055</span>,<span class="number">28</span>)],<span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;该检验值对应的p值为：&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>((<span class="number">1</span>-tcdf(<span class="number">3.055</span>,<span class="number">28</span>))*<span class="number">2</span>)  <span class="comment">%双侧检验的p值要乘以2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算各列之间的相关系数以及p值</span></span><br><span class="line">[R,P] = corrcoef(Test)</span><br><span class="line"><span class="comment">% 在EXCEL表格中给数据右上角标上显著性符号吧</span></span><br><span class="line">P &lt; <span class="number">0.01</span>  <span class="comment">% 标记3颗星的位置</span></span><br><span class="line">(P &lt; <span class="number">0.05</span>) .* (P &gt; <span class="number">0.01</span>)  <span class="comment">% 标记2颗星的位置</span></span><br><span class="line">(P &lt; <span class="number">0.1</span>) .* (P &gt; <span class="number">0.05</span>) <span class="comment">% % 标记1颗星的位置</span></span><br><span class="line"><span class="comment">% 也可以使用Spss操作哦 看我演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 正态分布检验</span></span><br><span class="line"><span class="comment">% 正态分布的偏度和峰度</span></span><br><span class="line">x = normrnd(<span class="number">2</span>,<span class="number">3</span>,<span class="number">100</span>,<span class="number">1</span>);   <span class="comment">% 生成100*1的随机向量，每个元素是均值为2，标准差为3的正态分布</span></span><br><span class="line">skewness(x)  <span class="comment">%偏度</span></span><br><span class="line">kurtosis(x)  <span class="comment">%峰度</span></span><br><span class="line">qqplot(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment">% 检验第一列数据是否为正态分布</span></span><br><span class="line">[h,p] = jbtest(Test(:,<span class="number">1</span>),<span class="number">0.05</span>)</span><br><span class="line">[h,p] = jbtest(Test(:,<span class="number">1</span>),<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 用循环检验所有列的数据</span></span><br><span class="line">n_c = <span class="built_in">size</span>(Test,<span class="number">2</span>);  <span class="comment">% number of column 数据的列数</span></span><br><span class="line">H = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);  <span class="comment">% 初始化节省时间和消耗</span></span><br><span class="line">P = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n_c</span><br><span class="line">    [h,p] = jbtest(Test(:,<span class="built_in">i</span>),<span class="number">0.05</span>);</span><br><span class="line">    H(<span class="built_in">i</span>)=h;</span><br><span class="line">    P(<span class="built_in">i</span>)=p;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(H)</span><br><span class="line"><span class="built_in">disp</span>(P)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Q-Q图</span></span><br><span class="line">qqplot(Test(:,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 斯皮尔曼相关系数</span></span><br><span class="line">X = [<span class="number">3</span> <span class="number">8</span> <span class="number">4</span> <span class="number">7</span> <span class="number">2</span>]&#x27;  <span class="comment">% 一定要是列向量哦，一撇&#x27;表示求转置</span></span><br><span class="line">Y = [<span class="number">5</span> <span class="number">10</span> <span class="number">9</span> <span class="number">10</span> <span class="number">6</span>]&#x27;</span><br><span class="line"><span class="comment">% 第一种计算方法</span></span><br><span class="line"><span class="number">1</span><span class="number">-6</span>*(<span class="number">1</span>+<span class="number">0.25</span>+<span class="number">0.25</span>+<span class="number">1</span>)/<span class="number">5</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 第二种计算方法</span></span><br><span class="line">coeff = corr(X , Y , <span class="string">&#x27;type&#x27;</span> , <span class="string">&#x27;Spearman&#x27;</span>)</span><br><span class="line"><span class="comment">% 等价于：</span></span><br><span class="line">RX = [<span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span>]</span><br><span class="line">RY = [<span class="number">1</span> <span class="number">4.5</span> <span class="number">3</span> <span class="number">4.5</span> <span class="number">2</span>]</span><br><span class="line">R = corrcoef(RX,RY)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 计算矩阵各列的斯皮尔曼相关系数</span></span><br><span class="line">R = corr(Test, <span class="string">&#x27;type&#x27;</span> , <span class="string">&#x27;Spearman&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 大样本下的假设检验</span></span><br><span class="line"><span class="comment">% 计算检验值</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="built_in">sqrt</span>(<span class="number">590</span>)*<span class="number">0.0301</span>)</span><br><span class="line"><span class="comment">% 计算p值</span></span><br><span class="line"><span class="built_in">disp</span>((<span class="number">1</span>-normcdf(<span class="number">0.7311</span>))*<span class="number">2</span>) <span class="comment">% normcdf用来计算标准正态分布的累积概率密度函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 直接给出相关系数和p值</span></span><br><span class="line">[R,P]=corr(Test, <span class="string">&#x27;type&#x27;</span> , <span class="string">&#x27;Spearman&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="SPSS"><a href="#SPSS" class="headerlink" title="SPSS"></a>SPSS</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751316.png" style="zoom:80%;" />







<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751453.png" style="zoom:80%;" />





<h3 id="分析统计"><a href="#分析统计" class="headerlink" title="分析统计"></a>分析统计</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751508.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751611.png" style="zoom:80%;" />



<h3 id="矩阵散点图"><a href="#矩阵散点图" class="headerlink" title="矩阵散点图"></a>矩阵散点图</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751658.png" style="zoom:80%;" />



<h3 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>原假设H<del>0</del></li>
<li>备择假设H<del>1</del></li>
<li>置信水平β</li>
<li>显著性水平α</li>
<li>P值</li>
</ul>
<p>等式：α+β&#x3D;1</p>
<p>双侧检验的P值是单侧检验P值的两倍</p>
<p>当计算出的P值小于对应的显著性水平的时候，<strong>拒绝原假设</strong>，选择备择假设</p>
<p>置信水平一般取95%，显著性水平一般为5%</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751684.jpeg" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751711.jpeg" style="zoom:80%;" />





<h4 id="Pearson相关系数假设检验"><a href="#Pearson相关系数假设检验" class="headerlink" title="Pearson相关系数假设检验"></a>Pearson相关系数假设检验</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751890.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751898.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751005.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751028.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751134.png" style="zoom:80%;" />



<h4 id="Pearson假设检验条件"><a href="#Pearson假设检验条件" class="headerlink" title="Pearson假设检验条件"></a>Pearson假设检验条件</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751142.png" style="zoom:80%;" />



<h3 id="正态分布检验"><a href="#正态分布检验" class="headerlink" title="正态分布检验"></a>正态分布检验</h3><p><strong><a href="https://www.bilibili.com/video/BV11A411q7CQ?vd_source=21929b71ec58f67534148e5c4050348c">【SPSS教程】检验正态分布的几种方法及释义】</a></strong></p>
<h4 id="JB检验"><a href="#JB检验" class="headerlink" title="JB检验"></a>JB检验</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751296.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751322.png" style="zoom:80%;" />



<h4 id="夏皮洛—威尔克检验"><a href="#夏皮洛—威尔克检验" class="headerlink" title="夏皮洛—威尔克检验"></a>夏皮洛—威尔克检验</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751414.png" style="zoom:80%;" />



<h4 id="Q—Q图检验"><a href="#Q—Q图检验" class="headerlink" title="Q—Q图检验"></a>Q—Q图检验</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751406.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751504.png" style="zoom:80%;" />





<h3 id="Spearman相关系数"><a href="#Spearman相关系数" class="headerlink" title="Spearman相关系数"></a>Spearman相关系数</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751526.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751628.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751668.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751753.png" style="zoom:80%;" />

<h4 id="假设检验-1"><a href="#假设检验-1" class="headerlink" title="假设检验"></a>假设检验</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751763.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751897.png" style="zoom:80%;" />







<h3 id="两种相关系数的比较"><a href="#两种相关系数的比较" class="headerlink" title="两种相关系数的比较"></a>两种相关系数的比较</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751905.png" style="zoom:80%;" />





<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p><strong><a href="https://csacademy.com/app/graph_editor/">在线作图</a></strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751001.png" style="zoom:80%;" />

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Matlab作无向图</span></span><br><span class="line"><span class="comment">% （1）无权重（每条边的权重默认为1）</span></span><br><span class="line"><span class="comment">% 函数graph(s,t)：可在 s 和 t 中的对应节点之间创建边，并生成一个图</span></span><br><span class="line"><span class="comment">% s 和 t 都必须具有相同的元素数；这些节点必须都是从1开始的正整数，或都是字符串元胞数组。</span></span><br><span class="line">s1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">t1 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">G1 = graph(s1, t1);</span><br><span class="line"><span class="built_in">plot</span>(G1)</span><br><span class="line"><span class="comment">% 注意哦，编号最好是从1开始连续编号，不要自己随便定义编号</span></span><br><span class="line">s1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">t1 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">G1 = graph(s1, t1);</span><br><span class="line"><span class="built_in">plot</span>(G1)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 注意字符串元胞数组是用大括号包起来的哦</span></span><br><span class="line">s2 = &#123;<span class="string">&#x27;学校&#x27;</span>,<span class="string">&#x27;电影院&#x27;</span>,<span class="string">&#x27;网吧&#x27;</span>,<span class="string">&#x27;酒店&#x27;</span>&#125;;</span><br><span class="line">t2 = &#123;<span class="string">&#x27;电影院&#x27;</span>,<span class="string">&#x27;酒店&#x27;</span>,<span class="string">&#x27;酒店&#x27;</span>,<span class="string">&#x27;KTV&#x27;</span>&#125;;</span><br><span class="line">G2 = graph(s2, t2);</span><br><span class="line"><span class="built_in">plot</span>(G2, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">2</span>)  <span class="comment">% 设置线的宽度</span></span><br><span class="line"><span class="comment">% 下面的命令是在画图后不显示坐标</span></span><br><span class="line">set( gca, <span class="string">&#x27;XTick&#x27;</span>, [], <span class="string">&#x27;YTick&#x27;</span>, [] );  </span><br><span class="line"></span><br><span class="line"><span class="comment">% （2）有权重</span></span><br><span class="line"><span class="comment">% 函数graph(s,t,w)：可在 s 和 t 中的对应节点之间以w的权重创建边，并生成一个图</span></span><br><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">t = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">w = [<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>];</span><br><span class="line">G = graph(s, t, w);</span><br><span class="line"><span class="built_in">plot</span>(G, <span class="string">&#x27;EdgeLabel&#x27;</span>, G.Edges.Weight, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">2</span>) </span><br><span class="line">set( gca, <span class="string">&#x27;XTick&#x27;</span>, [], <span class="string">&#x27;YTick&#x27;</span>, [] );  </span><br><span class="line"></span><br><span class="line"><span class="comment">%% Matlab作有向图</span></span><br><span class="line"><span class="comment">% 无权图 digraph(s,t)</span></span><br><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>];</span><br><span class="line">t = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>];</span><br><span class="line">G = digraph(s, t);</span><br><span class="line"><span class="built_in">plot</span>(G)</span><br><span class="line">set( gca, <span class="string">&#x27;XTick&#x27;</span>, [], <span class="string">&#x27;YTick&#x27;</span>, [] );  </span><br><span class="line"></span><br><span class="line"><span class="comment">% 有权图 digraph(s,t,w)</span></span><br><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">t = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">w = [<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>];</span><br><span class="line">G = digraph(s, t, w);</span><br><span class="line"><span class="built_in">plot</span>(G, <span class="string">&#x27;EdgeLabel&#x27;</span>, G.Edges.Weight, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">3</span>) </span><br><span class="line">set( gca, <span class="string">&#x27;XTick&#x27;</span>, [], <span class="string">&#x27;YTick&#x27;</span>, [] );  </span><br></pre></td></tr></table></figure>



<h3 id="迪杰斯特拉算法（广度优先算法）"><a href="#迪杰斯特拉算法（广度优先算法）" class="headerlink" title="迪杰斯特拉算法（广度优先算法）"></a>迪杰斯特拉算法（广度优先算法）</h3><p><strong><a href="https://www.bilibili.com/video/av54668527">算法理论视频</a></strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751057.png" style="zoom:80%;" />



<h3 id="贝尔曼福特算法"><a href="#贝尔曼福特算法" class="headerlink" title="贝尔曼福特算法"></a>贝尔曼福特算法</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751142.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751132.png" style="zoom:80%;" />





<h3 id="算法代码-6"><a href="#算法代码-6" class="headerlink" title="算法代码"></a>算法代码</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751284.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751295.png" style="zoom:80%;" />



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">% 注意哦，Matlab中的图节点要从<span class="number">1</span>开始编号，所以这里把<span class="number">0</span>全部改为了<span class="number">9</span></span><br><span class="line">% 编号最好是从<span class="number">1</span>开始连续编号，不要自己随便定义编号</span><br><span class="line">s = [<span class="number">9</span> <span class="number">9</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">7</span> <span class="number">7</span> <span class="number">6</span> <span class="number">6</span>  <span class="number">5</span>  <span class="number">5</span> <span class="number">4</span>];</span><br><span class="line">t = [<span class="number">1</span> <span class="number">7</span> <span class="number">7</span> <span class="number">2</span> <span class="number">8</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">6</span> <span class="number">8</span> <span class="number">5</span>  <span class="number">3</span>  <span class="number">4</span> <span class="number">3</span>];</span><br><span class="line">w = [<span class="number">4</span> <span class="number">8</span> <span class="number">3</span> <span class="number">8</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">6</span> <span class="number">6</span> <span class="number">2</span> <span class="number">14</span> <span class="number">10</span> <span class="number">9</span>];</span><br><span class="line">G = graph(s,t,w);</span><br><span class="line">plot(G, <span class="string">&#x27;EdgeLabel&#x27;</span>, G.Edges.Weight, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">2</span>) </span><br><span class="line"><span class="built_in">set</span>( gca, <span class="string">&#x27;XTick&#x27;</span>, [], <span class="string">&#x27;YTick&#x27;</span>, [] );  </span><br><span class="line">[P,d] = shortestpath(G, <span class="number">9</span>, <span class="number">4</span>)  %注意：该函数matlab2015b之后才有哦</span><br><span class="line"></span><br><span class="line">% 在图中高亮我们的最短路径</span><br><span class="line">myplot = plot(G, <span class="string">&#x27;EdgeLabel&#x27;</span>, G.Edges.Weight, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">2</span>);  %首先将图赋给一个变量</span><br><span class="line">highlight(myplot, P, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)   %对这个变量即我们刚刚绘制的图形进行高亮处理（给边加上r红色）</span><br><span class="line"></span><br><span class="line">% 求出任意两点的最短路径矩阵</span><br><span class="line">D = distances(G)   %注意：该函数matlab2015b之后才有哦</span><br><span class="line">D(<span class="number">1</span>,<span class="number">2</span>)  % <span class="number">1</span> -&gt; <span class="number">2</span>的最短路径</span><br><span class="line">D(<span class="number">9</span>,<span class="number">4</span>)  % <span class="number">9</span> -&gt; <span class="number">4</span>的最短路径</span><br><span class="line"></span><br><span class="line">% 找出给定范围内的所有点  nearest(G,s,d)</span><br><span class="line">% 返回图形 G 中与节点 s 的距离在 d 之内的所有节点</span><br><span class="line">[nodeIDs,dist] = nearest(G, <span class="number">2</span>, <span class="number">10</span>)   %注意：该函数matlab2016a之后才有哦</span><br></pre></td></tr></table></figure>





<h3 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h3><p><strong><a href="https://www.bilibili.com/video/av54668527">算法理论视频</a></strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751382.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751391.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751549.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751542.png" style="zoom:80%;" />



<h4 id="算法代码-7"><a href="#算法代码-7" class="headerlink" title="算法代码"></a>算法代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[dist,path]</span> = <span class="title">Floyd_algorithm</span><span class="params">(D)</span></span></span><br><span class="line"><span class="comment">%% 该函数用于求解一个权重邻接矩阵任意两个节点之间的最短路径</span></span><br><span class="line"><span class="comment">% 输入：</span></span><br><span class="line"><span class="comment">%        D是权重邻接矩阵</span></span><br><span class="line"><span class="comment">% 输出：</span></span><br><span class="line"><span class="comment">%        dist是最短距离矩阵，其元素dist_ij表示表示i,j两个节点的最短距离</span></span><br><span class="line"><span class="comment">%        path是路径矩阵，其元素path_ij表示起点为i，终点为j的两个节点之间的最短路径要经过的节点</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">size</span>(D,<span class="number">1</span>);  <span class="comment">% 计算节点的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化dist矩阵</span></span><br><span class="line">dist = D;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 下面我们来初始化path矩阵</span></span><br><span class="line">path = <span class="built_in">zeros</span>(n);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:n</span><br><span class="line">    path(:,<span class="built_in">j</span>) = <span class="built_in">j</span>;   <span class="comment">% 将第j列的元素变为j</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    path(<span class="built_in">i</span>,<span class="built_in">i</span>) = <span class="number">-1</span>;  <span class="comment">% 将主对角线元素变为-1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 下面开始三个循环</span></span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:n    <span class="comment">% 中间节点k从1- n 循环</span></span><br><span class="line">   <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n     <span class="comment">% 起始节点i从1- n 循环</span></span><br><span class="line">      <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n    <span class="comment">% 终点节点j从1-n 循环</span></span><br><span class="line">          <span class="keyword">if</span> dist(<span class="built_in">i</span>,<span class="built_in">j</span>)&gt;dist(<span class="built_in">i</span>,k)+dist(k,<span class="built_in">j</span>)  <span class="comment">% 如果i,j两个节点间的最短距离大于i和k的最短距离+k和j的最短距离</span></span><br><span class="line">             dist(<span class="built_in">i</span>,<span class="built_in">j</span>)=dist(<span class="built_in">i</span>,k)+dist(k,<span class="built_in">j</span>);  <span class="comment">% 那么我们就令这两个较短的距离之和取代i,j两点之间的最短距离</span></span><br><span class="line">             path(<span class="built_in">i</span>,<span class="built_in">j</span>)=path(<span class="built_in">i</span>,k);   <span class="comment">% 起点为i，终点为j的两个节点之间的最短路径要经过的节点更新为path(i,k)</span></span><br><span class="line">             <span class="comment">% 注意，上面一行语句不能写成path(i,j) = k; 这是网上很多地方都容易犯的错误，在PPT11页中会告诉大家为什么不能这么写</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[]</span> = <span class="title">print_path</span><span class="params">(path,dist,i,j)</span></span></span><br><span class="line"><span class="comment">%% 该函数的作用是打印从i到j经过的最短路径</span></span><br><span class="line"><span class="comment">% 输入：</span></span><br><span class="line"><span class="comment">%        path是使用floyd算法求出来的路径矩阵</span></span><br><span class="line"><span class="comment">%        dist是使用floyd算法求出来的最短距离矩阵</span></span><br><span class="line"><span class="comment">%        i是起始节点的编号</span></span><br><span class="line"><span class="comment">%        j是终点节点的编号</span></span><br><span class="line"><span class="comment">% 输出：无</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">i</span> == <span class="built_in">j</span></span><br><span class="line">    warning(<span class="string">&#x27;起点和终点相同，请检查后重新输入&#x27;</span>)  <span class="comment">% 在屏幕中提示警告信息</span></span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">% 不运行下面的语句，直接退出函数</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> path(<span class="built_in">i</span>,<span class="built_in">j</span>) == <span class="built_in">j</span>   <span class="comment">% 如果path(i,j) = j，则有两种可能：</span></span><br><span class="line"><span class="comment">% （1）如果dist(i,j) 为 Inf , 则说明从i到j没有路径可以到达</span></span><br><span class="line">    <span class="keyword">if</span> dist(<span class="built_in">i</span>,<span class="built_in">j</span>) == Inf</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;从&#x27;</span>,num2str(<span class="built_in">i</span>),<span class="string">&#x27;到&#x27;</span>,num2str(<span class="built_in">j</span>),<span class="string">&#x27;没有路径可以到达&#x27;</span>])</span><br><span class="line"><span class="comment">% （2）如果dist(i,j) 不为 Inf , 则说明从i到j可直接到达，且为最短路径</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;从&#x27;</span>,num2str(<span class="built_in">i</span>),<span class="string">&#x27;到&#x27;</span>,num2str(<span class="built_in">j</span>),<span class="string">&#x27;的最短路径为&#x27;</span>])</span><br><span class="line">        <span class="built_in">disp</span>([num2str(<span class="built_in">i</span>),<span class="string">&#x27; ---&gt; &#x27;</span>,num2str(<span class="built_in">j</span>)])</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;最短距离为&#x27;</span>,num2str(dist(<span class="built_in">i</span>,<span class="built_in">j</span>))])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span>  <span class="comment">% 如果path(i,j) ~= j，则说明中间经过了其他节点：</span></span><br><span class="line">    k = path(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">    result = [num2str(<span class="built_in">i</span>),<span class="string">&#x27; ---&gt; &#x27;</span>];  <span class="comment">% 初始化要打印的这个字符串</span></span><br><span class="line">    <span class="keyword">while</span> k ~= <span class="built_in">j</span>  <span class="comment">% 只要k不等于j, 就一直循环下去</span></span><br><span class="line">        result = [result , num2str(k) , <span class="string">&#x27; ---&gt; &#x27;</span> ];  <span class="comment">% i先走到k这个节点处</span></span><br><span class="line">        k = path(k,<span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result = [result , num2str(k)];</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;从&#x27;</span>,num2str(<span class="built_in">i</span>),<span class="string">&#x27;到&#x27;</span>,num2str(<span class="built_in">j</span>),<span class="string">&#x27;的最短路径为&#x27;</span>])</span><br><span class="line">    <span class="built_in">disp</span>(result)</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;最短距离为&#x27;</span>,num2str(dist(<span class="built_in">i</span>,<span class="built_in">j</span>))])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[]</span> = <span class="title">print_all_path</span><span class="params">(D)</span></span></span><br><span class="line"><span class="comment">%% 该函数的作用是求解一个权重邻接矩阵任意两个节点之间的最短路径,并打印所有的结果出来</span></span><br><span class="line"><span class="comment">% 输入：</span></span><br><span class="line"><span class="comment">%        D是权重邻接矩阵</span></span><br><span class="line"><span class="comment">% 输出：无</span></span><br><span class="line"></span><br><span class="line">[dist,path] = Floyd_algorithm(D);   <span class="comment">% 调用之前的Floyd_algorithm函数</span></span><br><span class="line">n = <span class="built_in">size</span>(D,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line">    warning(<span class="string">&#x27;请输入至少两阶以上的权重邻接矩阵&#x27;</span>)   <span class="comment">% 在屏幕中提示警告信息</span></span><br><span class="line">    <span class="keyword">return</span>;   <span class="comment">% 不运行下面的语句，直接退出函数</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:n</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span> ~= <span class="built_in">j</span>  <span class="comment">% 不等号用~=表示</span></span><br><span class="line">            print_path(path,dist,<span class="built_in">i</span>,<span class="built_in">j</span>);   <span class="comment">% 调用之前的print_path函数</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;-------------------------------------------&#x27;</span>)</span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;  &#x27;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>主函数</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% PPT第七页的例子</span></span><br><span class="line"><span class="comment">%% 首先将图转换为权重邻接矩阵D</span></span><br><span class="line">n = <span class="number">5</span>;  <span class="comment">%一共五个节点</span></span><br><span class="line">D = <span class="built_in">ones</span>(n) ./ <span class="built_in">zeros</span>(n);  <span class="comment">% 全部元素初始化为Inf</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    D(<span class="built_in">i</span>,<span class="built_in">i</span>) = <span class="number">0</span>;  <span class="comment">% 主对角线元素为0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">D(<span class="number">1</span>,<span class="number">2</span>) = <span class="number">3</span>;</span><br><span class="line">D(<span class="number">1</span>,<span class="number">3</span>) = <span class="number">8</span>;</span><br><span class="line">D(<span class="number">1</span>,<span class="number">5</span>) = <span class="number">-4</span>;</span><br><span class="line">D(<span class="number">2</span>,<span class="number">5</span>) = <span class="number">7</span>;</span><br><span class="line">D(<span class="number">2</span>,<span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line">D(<span class="number">3</span>,<span class="number">2</span>) = <span class="number">4</span>;</span><br><span class="line">D(<span class="number">4</span>,<span class="number">3</span>) = <span class="number">-5</span>;</span><br><span class="line">D(<span class="number">5</span>,<span class="number">4</span>) = <span class="number">6</span>;</span><br><span class="line">D(<span class="number">4</span>,<span class="number">1</span>) = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 调用Floyd_algorithm函数求解</span></span><br><span class="line">[dist,path] = Floyd_algorithm(D)</span><br><span class="line"></span><br><span class="line">print_path(path,dist,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">print_path(path,dist,<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">print_path(path,dist,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">clc</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;下面我们打印任意两点之间的最短距离：&#x27;</span>)</span><br><span class="line">print_all_path(D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 思考题的参考答案</span></span><br><span class="line"><span class="comment">%% 首先将图转换为权重邻接矩阵D</span></span><br><span class="line">n = <span class="number">9</span>;  <span class="comment">%一共九个节点</span></span><br><span class="line">D = <span class="built_in">zeros</span>(n);  <span class="comment">% 全部元素初始化为0, 等会你们就知道为什么这样设置啦</span></span><br><span class="line"><span class="comment">% 因为是无向图，所以权重邻接矩阵是一个对称矩阵</span></span><br><span class="line">D(<span class="number">1</span>,<span class="number">2</span>) = <span class="number">4</span>; D(<span class="number">1</span>,<span class="number">8</span>) = <span class="number">8</span>; </span><br><span class="line">D(<span class="number">2</span>,<span class="number">8</span>) = <span class="number">3</span>; D(<span class="number">2</span>,<span class="number">3</span>) = <span class="number">8</span>;</span><br><span class="line">D(<span class="number">8</span>,<span class="number">9</span>) = <span class="number">1</span>; D(<span class="number">8</span>,<span class="number">7</span>) = <span class="number">6</span>; </span><br><span class="line">D(<span class="number">9</span>,<span class="number">7</span>) = <span class="number">6</span>; D(<span class="number">9</span>,<span class="number">3</span>) = <span class="number">2</span>;</span><br><span class="line">D(<span class="number">7</span>,<span class="number">6</span>) = <span class="number">2</span>; D(<span class="number">3</span>,<span class="number">4</span>) = <span class="number">7</span>; </span><br><span class="line">D(<span class="number">3</span>,<span class="number">6</span>) = <span class="number">4</span>; D(<span class="number">6</span>,<span class="number">4</span>) = <span class="number">14</span>;</span><br><span class="line">D(<span class="number">4</span>,<span class="number">5</span>) = <span class="number">9</span>; D(<span class="number">6</span>,<span class="number">5</span>) = <span class="number">10</span>;</span><br><span class="line">D = D+D&#x27;;   <span class="comment">% 这个操作可以得到对称矩阵的另一半</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:n</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">i</span> ~= <span class="built_in">j</span>) &amp;&amp; (D(<span class="built_in">i</span>,<span class="built_in">j</span>) == <span class="number">0</span>)  </span><br><span class="line">            D(<span class="built_in">i</span>,<span class="built_in">j</span>) = Inf;   <span class="comment">% 将非主对角线上的0元素全部变为Inf</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 调用Floyd_algorithm函数求解</span></span><br><span class="line">[dist,path] = Floyd_algorithm(D)</span><br><span class="line">print_all_path(D)</span><br></pre></td></tr></table></figure>





<h2 id="多元回归分析"><a href="#多元回归分析" class="headerlink" title="多元回归分析"></a>多元回归分析</h2><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751646.png" alt="Snipaste_2023-01-10_20-44-23" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751735.png" alt="Snipaste_2023-01-10_20-44-36" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751756.png" alt="Snipaste_2023-01-10_20-43-53" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751777.png" alt="Snipaste_2023-01-10_20-44-15" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751925.png" alt="Snipaste_2023-01-10_20-44-48" style="zoom:80%;" />











<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751955.png" alt="Snipaste_2023-01-10_20-46-58" style="zoom:80%;" />



<h3 id="回归分析的分类"><a href="#回归分析的分类" class="headerlink" title="回归分析的分类"></a>回归分析的分类</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751989.png" style="zoom:80%;" />



<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751145.png" alt="Snipaste_2023-01-10_20-53-22" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751187.png" alt="Snipaste_2023-01-10_20-53-28" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751221.png" alt="Snipaste_2023-01-10_20-53-41" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751336.png" style="zoom:80%;" />





<h3 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751368.png" style="zoom:80%;" />







<h3 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751377.png" alt="Snipaste_2023-01-10_21-09-47" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751542.png" alt="Snipaste_2023-01-10_21-12-33" style="zoom:80%;" />

<h4 id="解释变量模型"><a href="#解释变量模型" class="headerlink" title="解释变量模型"></a>解释变量模型</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751611.png" alt="Snipaste_2023-01-10_21-49-52" style="zoom:80%;" />

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751645.png" alt="Snipaste_2023-01-10_21-53-03" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751724.png" alt="Snipaste_2023-01-10_21-53-13" style="zoom:80%;" />



<h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751765.png" alt="Snipaste_2023-01-10_21-20-56" style="zoom:80%;" />



<h4 id="自变量不充分产生内生性"><a href="#自变量不充分产生内生性" class="headerlink" title="自变量不充分产生内生性"></a>自变量不充分产生内生性</h4><p><strong>内生性：因为自变量个数不充分引起的</strong></p>
<p><strong>外生性：自变量个数恰好可以完全解释因变量</strong></p>
<p><strong>多重共线性：自变量过多，引起自变量之间存在相关性</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751744.png" alt="Snipaste_2023-01-10_21-24-45" style="zoom:80%;" />



<h4 id="核心解释变量和控制变量解救内生性"><a href="#核心解释变量和控制变量解救内生性" class="headerlink" title="核心解释变量和控制变量解救内生性"></a>核心解释变量和控制变量解救内生性</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751927.png" style="zoom:80%;" />



<h4 id="回归模型解释"><a href="#回归模型解释" class="headerlink" title="回归模型解释"></a>回归模型解释</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751960.png" alt="Snipaste_2023-01-10_21-49-44" style="zoom:80%;" />



<h4 id="交互项"><a href="#交互项" class="headerlink" title="交互项"></a>交互项</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751048.png" style="zoom:80%;" />



<h3 id="回归方法"><a href="#回归方法" class="headerlink" title="回归方法"></a>回归方法</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751142.png" alt="Snipaste_2023-01-11_18-47-52" style="zoom:80%;" />

<h4 id="处理语法"><a href="#处理语法" class="headerlink" title="处理语法"></a>处理语法</h4><p><strong>数据描述</strong></p>
<ul>
<li>summarize	定量数据</li>
<li>tabulate         定性数据</li>
<li>regress  y  x1  x2  …  x<del>k</del></li>
</ul>
<p><strong>原假设：回归系数不显著异于0</strong></p>
<p><strong>当P&lt;0.05时拒绝原假设，认为回归系数显著异于0，回归系数有效</strong></p>
<p><strong>联合显著性检验：验证回归模型的正确性</strong></p>
<p><strong>原假设同上</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751178.png" alt="Snipaste_2023-01-11_19-23-50" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751184.png" alt="Snipaste_2023-01-11_20-01-23" style="zoom:80%;" />



<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">﻿<span class="comment">// 按键盘上的PageUp可以使用上一次输入的代码（Matleb中是上箭头）</span></span><br><span class="line"><span class="comment">// 清除所有变量</span></span><br><span class="line"><span class="keyword">clear</span></span><br><span class="line"><span class="comment">// 清屏 和 matlab的clc类似</span></span><br><span class="line">cls </span><br><span class="line"><span class="comment">// 导入数据（其实是我们直接在界面上粘贴过来的，我们用鼠标点界面导入更方便 本条请删除后再复制到论文中，如果评委老师看到了就知道这不是你写的了）</span></span><br><span class="line"><span class="comment">// import excel &quot;C:\Users\hc_lzp\Desktop\数学建模视频录制\第7讲.多元回归分析\代码和例题数据\课堂中讲解的奶粉数据.xlsx&quot;, sheet(&quot;Sheet1&quot;) firstrow</span></span><br><span class="line">import excel <span class="string">&quot;课堂中讲解的奶粉数据.xlsx&quot;</span>, sheet(<span class="string">&quot;Sheet1&quot;</span>) firstrow</span><br><span class="line"><span class="comment">// 定量变量的描述性统计</span></span><br><span class="line"><span class="keyword">summarize</span> 团购价元 评价量 商品毛重kg  <span class="comment">// 对定量数据进行描述性统计</span></span><br><span class="line"><span class="comment">// 定性变量的频数分布，并得到相应字母开头的虚拟变量</span></span><br><span class="line"><span class="keyword">tabulate</span> 配方,<span class="keyword">gen</span>(A)	<span class="comment">// 对定性数据进行描述性统计</span></span><br><span class="line"><span class="keyword">tabulate</span> 奶源产地 ,<span class="keyword">gen</span>(B)</span><br><span class="line"><span class="keyword">tabulate</span> 国产或进口 ,<span class="keyword">gen</span>(C)</span><br><span class="line"><span class="keyword">tabulate</span> 适用年龄岁 ,<span class="keyword">gen</span>(<span class="keyword">D</span>)</span><br><span class="line"><span class="keyword">tabulate</span> 包装单位 ,<span class="keyword">gen</span>(<span class="keyword">E</span>)</span><br><span class="line"><span class="keyword">tabulate</span> 分类 ,<span class="keyword">gen</span>(F)</span><br><span class="line"><span class="keyword">tabulate</span> 段位 ,<span class="keyword">gen</span>(<span class="keyword">G</span>)</span><br><span class="line"><span class="comment">// 下面进行回归</span></span><br><span class="line"><span class="keyword">regress</span> 评价量 团购价元 商品毛重kg	<span class="comment">// 默认OLS：最小二乘法</span></span><br><span class="line"><span class="comment">// 下面的语句可帮助我们把回归结果保存在Word文档中</span></span><br><span class="line"><span class="comment">// 在使用之前需要运行下面这个代码来安装下这个功能包（运行一次之后就可以注释掉了）</span></span><br><span class="line"><span class="comment">// ssc install reg2docx, all replace</span></span><br><span class="line"><span class="comment">// 如果安装出现connection timed out的错误，可以尝试换成手机热点联网，如果手机热点也不能下载，就不用这个命令吧，可以自己做一个回归结果表，如果觉得麻烦就直接把回归结果截图。</span></span><br><span class="line"><span class="keyword">est</span> store m1</span><br><span class="line">reg2docx m1 using m1.docx, <span class="keyword">replace</span></span><br><span class="line"><span class="comment">// *** p&lt;0.01  ** p&lt;0.05 * p&lt;0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stata会自动剔除多重共线性的变量</span></span><br><span class="line"><span class="keyword">regress</span> 评价量 团购价元 商品毛重kg A1 A2 A3 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 D1 D2 D3 D4 D5 E1 E2 E3 E4 F1 F2 G1 G2 G3 G4</span><br><span class="line"><span class="keyword">est</span> store m2</span><br><span class="line">reg2docx m2 using m2.docx, <span class="keyword">replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到标准化回归系数</span></span><br><span class="line"><span class="keyword">regress</span> 评价量 团购价元 商品毛重kg, b </span><br><span class="line"></span><br><span class="line"><span class="comment">// 画出残差图</span></span><br><span class="line"><span class="keyword">regress</span> 评价量 团购价元 商品毛重kg A1 A2 A3 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 D1 D2 D3 D4 D5 E1 E2 E3 E4 F1 F2 G1 G2 G3 G4</span><br><span class="line"><span class="keyword">rvfplot</span> </span><br><span class="line"><span class="comment">// 残差与拟合值的散点图</span></span><br><span class="line"><span class="keyword">graph</span> export a1.png ,<span class="keyword">replace</span></span><br><span class="line"><span class="comment">// 残差与自变量团购价的散点图</span></span><br><span class="line"><span class="keyword">rvpplot</span>  团购价元</span><br><span class="line"><span class="keyword">graph</span> export a2.png ,<span class="keyword">replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么评价量的拟合值会出现负数？</span></span><br><span class="line"><span class="comment">// 描述性统计并给出分位数对应的数值</span></span><br><span class="line"><span class="keyword">summarize</span> 评价量,<span class="keyword">d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作评价量的概率密度估计图</span></span><br><span class="line"><span class="keyword">kdensity</span> 评价量 </span><br><span class="line"><span class="keyword">graph</span> export a3.png ,<span class="keyword">replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异方差BP检验</span></span><br><span class="line"><span class="keyword">estat</span> <span class="keyword">hettest</span> ,rhs iid</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异方差怀特检验</span></span><br><span class="line"><span class="keyword">estat</span> <span class="keyword">imtest</span>,white</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用OLS + 稳健的标准误</span></span><br><span class="line"><span class="keyword">regress</span> 评价量 团购价元 商品毛重kg A1 A2 A3 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 D1 D2 D3 D4 D5 E1 E2 E3 E4 F1 F2 G1 G2 G3 G4, r</span><br><span class="line"><span class="keyword">est</span> store m3</span><br><span class="line">reg2docx m3 using m3.docx, <span class="keyword">replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算VIF</span></span><br><span class="line"><span class="keyword">estat</span>  <span class="keyword">vif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐步回归（一定要注意完全多重共线性的影响）</span></span><br><span class="line"><span class="comment">// 向前逐步回归（后面的r表示稳健的标准误）</span></span><br><span class="line"><span class="keyword">stepwise</span> <span class="keyword">reg</span> 评价量 团购价元 商品毛重kg A1 A3 B1 B2 B3 B4 B5 B6 B7 B9 C1 D1 D2 D3 D4 E1 E2 E3 F1 G1 G2 G3,  r pe(0.05)</span><br><span class="line"><span class="comment">// 向后逐步回归（后面的r表示稳健的标准误）</span></span><br><span class="line"><span class="keyword">stepwise</span> <span class="keyword">reg</span> 评价量 团购价元 商品毛重kg A1 A3 B1 B2 B3 B4 B5 B6 B7 B9 C1 D1 D2 D3 D4 E1 E2 E3 F1 G1 G2 G3,  r <span class="keyword">pr</span>(0.05)</span><br><span class="line"><span class="comment">// 向后逐步回归的同时使用标准化回归系数（在r后面跟上一个b即可）</span></span><br><span class="line"><span class="keyword">stepwise</span> <span class="keyword">reg</span> 评价量 团购价元 商品毛重kg A1 A3 B1 B2 B3 B4 B5 B6 B7 B9 C1 D1 D2 D3 D4 E1 E2 E3 F1 G1 G2 G3,  r b <span class="keyword">pr</span>(0.05)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充语法 (大家不需要具体的去学Stata软件，掌握我课堂上教给大家的一些命令应对数学建模比赛就可以啦)</span></span><br><span class="line"><span class="comment">// 事实上大家学好Excel，学好后应对90%的数据预处理问题都能解决</span></span><br><span class="line"><span class="comment">// (1) 用已知变量生成新的变量 </span></span><br><span class="line"><span class="keyword">generate</span> lny = <span class="built_in">log</span>(评价量)  </span><br><span class="line"><span class="keyword">generate</span> price_square = 团购价元 ^2</span><br><span class="line"><span class="keyword">generate</span> interaction_term = 团购价元*商品毛重kg</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 修改变量名称，因为用中文命名变量名称有时候可能容易出现未知Bug</span></span><br><span class="line"><span class="keyword">rename</span> 团购价元 price</span><br></pre></td></tr></table></figure>



<p><strong>虚变量</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751341.png" alt="Snipaste_2023-01-11_19-31-20" style="zoom:80%;" />

<h3 id="R-2-较低处理方法"><a href="#R-2-较低处理方法" class="headerlink" title="R^2^较低处理方法"></a>R^2^较低处理方法</h3><ul>
<li><strong>预测性回归看重R^2^、解释性回归不看重R^2^</strong></li>
<li><strong>调整模型，将自变量或者因变量取对数，或者交互项（解释不清楚）</strong></li>
<li><strong>数据存在异常值，或者数据分布不均匀。调整数据</strong></li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751386.png" alt="Snipaste_2023-01-11_19-51-12" style="zoom:80%;" />



<h3 id="标准化回归消除量纲（度量影响力）"><a href="#标准化回归消除量纲（度量影响力）" class="headerlink" title="标准化回归消除量纲（度量影响力）"></a>标准化回归消除量纲（度量影响力）</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751450.png" alt="Snipaste_2023-01-11_20-00-36" style="zoom:80%;" />



<h3 id="异方差"><a href="#异方差" class="headerlink" title="异方差"></a>异方差</h3><p><strong>异方差：扰动项方差不一致</strong></p>
<p><strong>截面数据容易出现异方差</strong></p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751549.png" alt="Snipaste_2023-01-11_20-46-28" style="zoom:80%;" />

<h4 id="异方差的影响和解决"><a href="#异方差的影响和解决" class="headerlink" title="异方差的影响和解决"></a>异方差的影响和解决</h4><p><strong>影响</strong></p>
<ul>
<li>导致回归系数失效</li>
<li>假设检验无法使用</li>
<li>OLS估计量不是最优线性无偏估计量</li>
</ul>
<p><strong>解决方法</strong></p>
<ul>
<li>使用OLS+稳健标准误（推荐）</li>
<li>广义最小二乘法GLS</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751584.png" alt="Snipaste_2023-01-11_20-46-36" style="zoom:80%;" />



<h4 id="检验异方差存在"><a href="#检验异方差存在" class="headerlink" title="检验异方差存在"></a>检验异方差存在</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751739.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751752.png" alt="Snipaste_2023-01-11_23-35-40" style="zoom:80%;" />

<h5 id="BP检验"><a href="#BP检验" class="headerlink" title="BP检验"></a>BP检验</h5><p><strong>原假设：不存在异方差</strong></p>
<p><strong>P&gt;0.05时说明在95%的置信水平下扰动项不存在异方差</strong></p>
<p><strong>即不拒绝原假设</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751804.png" alt="Snipaste_2023-01-11_23-35-47" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751852.png" alt="Snipaste_2023-01-11_23-35-54" style="zoom:80%;" />



<h5 id="怀特检验"><a href="#怀特检验" class="headerlink" title="怀特检验"></a>怀特检验</h5><p><strong>原假设同上</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751979.png" alt="Snipaste_2023-01-11_23-36-01" style="zoom:80%;" />



<h4 id="异方差的解决"><a href="#异方差的解决" class="headerlink" title="异方差的解决"></a>异方差的解决</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751026.png" alt="Snipaste_2023-01-11_23-36-08" style="zoom:80%;" />

<h5 id="稳健标准误（推荐）"><a href="#稳健标准误（推荐）" class="headerlink" title="稳健标准误（推荐）"></a>稳健标准误（推荐）</h5><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751157.png" alt="Snipaste_2023-01-11_23-36-15" style="zoom:80%;" />



<h3 id="多重共线性"><a href="#多重共线性" class="headerlink" title="多重共线性"></a>多重共线性</h3><p><strong>自变量之间存在相关性引起</strong></p>
<p><strong>影响：</strong></p>
<ul>
<li><strong>多重共线性会使得回归系数估计不准确</strong></li>
<li><strong>总体F检验显著，但单个系数t检验不显著</strong></li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751200.png" alt="Snipaste_2023-01-11_23-36-21" style="zoom:80%;" />



<h4 id="多重共线性检验"><a href="#多重共线性检验" class="headerlink" title="多重共线性检验"></a>多重共线性检验</h4><p><strong>VIF&gt;10认为存在严重的多重共线性</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751187.png" alt="Snipaste_2023-01-11_23-36-29" style="zoom:80%;" />



<h4 id="多重共线性处理方法"><a href="#多重共线性处理方法" class="headerlink" title="多重共线性处理方法"></a>多重共线性处理方法</h4><ul>
<li>预测回归不关注多重共线性问题，解释回归关注</li>
<li>当多重共线性不影响解释变量时，可以不考虑多重共线性的影响</li>
<li>当多重共线性影响解释变量时，增大样本容量，剔除导致严重共线性的变量或者修改模型</li>
<li>逐步回归法</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751238.png" alt="Snipaste_2023-01-11_23-36-35" style="zoom:80%;" />

<h5 id="逐步回归"><a href="#逐步回归" class="headerlink" title="逐步回归"></a>逐步回归</h5><p><strong>向后逐步回归更好</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751364.png" alt="Snipaste_2023-01-11_23-36-42" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751459.png" style="zoom: 80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751539.png" alt="Snipaste_2023-01-11_23-36-49" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751564.png" alt="Snipaste_2023-01-11_23-36-59" style="zoom:80%;" />









<h2 id="岭回归和lasso回归（逐步回归升级版）（解决多重共线性）"><a href="#岭回归和lasso回归（逐步回归升级版）（解决多重共线性）" class="headerlink" title="岭回归和lasso回归（逐步回归升级版）（解决多重共线性）"></a>岭回归和lasso回归（逐步回归升级版）（解决多重共线性）</h2><ul>
<li><strong>逐步回归升级版</strong></li>
<li><strong>解决多重共线性</strong></li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751692.png" style="zoom:80%;" />





<h3 id="古典回归模型"><a href="#古典回归模型" class="headerlink" title="古典回归模型"></a>古典回归模型</h3><p>瞒住四个假定：</p>
<ul>
<li>线性假定</li>
<li>严格外生性</li>
<li>无多重共线性</li>
<li>球形扰动项</li>
</ul>
<h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><p><strong>适用于样本数量n小于指标数量的情况</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751714.png" style="zoom:80%;" />



<h4 id="λ选取"><a href="#λ选取" class="headerlink" title="λ选取"></a>λ选取</h4><p><strong>方法</strong></p>
<ul>
<li><strong>岭迹分析</strong></li>
<li><strong>VIF法（方差膨胀因子）</strong></li>
<li><strong>最小化均方误差（MPSE）</strong></li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751775.png" alt="Snipaste_2023-01-12_20-53-19" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751885.png" alt="Snipaste_2023-01-12_20-55-44" style="zoom:80%;" />



<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p><strong><a href="https://zhuanlan.zhihu.com/p/53905488">知乎链接</a></strong></p>
<h3 id="lasso回归（推荐）"><a href="#lasso回归（推荐）" class="headerlink" title="lasso回归（推荐）"></a>lasso回归（推荐）</h3><p><strong>优点</strong></p>
<ul>
<li><strong>可以将不重要的回归系数压缩至0</strong></li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li><strong>没有显示解，只能使用近似估计算法</strong></li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751949.png" alt="Snipaste_2023-01-12_20-56-06" style="zoom:80%;" />



<h4 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证"></a>K折交叉验证</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751976.png" style="zoom:80%;" />



<h4 id="压缩不重要的自变量"><a href="#压缩不重要的自变量" class="headerlink" title="压缩不重要的自变量"></a>压缩不重要的自变量</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751112.png" alt="Snipaste_2023-01-12_21-13-40" style="zoom:80%;" />



<h4 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751274.png" style="zoom:80%;" />



<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751146.png" style="zoom:80%;" />

<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空工作区数据</span></span><br><span class="line"><span class="keyword">clear</span></span><br><span class="line"><span class="comment">// 安装lassopack命令,见课件</span></span><br><span class="line"><span class="comment">// findit lassopack   </span></span><br><span class="line"><span class="comment">// 导入数据，注意修改Excel文件的地址</span></span><br><span class="line">import excel <span class="string">&quot;C:\Users\hc_lzp\Desktop\数学建模视频录制\A01更新\岭回归和lasso回归\数据和拓展资料\棉花产量论文作业的数据.xlsx&quot;</span>, sheet(<span class="string">&quot;data&quot;</span>) firstrow</span><br><span class="line"><span class="comment">// 注意：这里自变量的量纲相同所以不用标准化，如果需要标准化，那么可以借助Matlab的zscore函数，或者直接使用SPSS（分析-描述统计-描述：在描述列表的方框左下角，看到“将标准化得分另存为变量（Z）之后点击打勾，然后确定。）</span></span><br><span class="line"><span class="comment">// Stata中也有相应的标准化变量的命令，不过一次只能标准化一个变量，例如： egen Y = std(单产)   这个代码就表示将单产标准化，得到的变量记为Y</span></span><br><span class="line">cvlasso 单产 种子费 化肥费 农药费 机械费 灌溉费, lopt seed(520)</span><br></pre></td></tr></table></figure>



<h2 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h2><p>方法</p>
<ul>
<li>逻辑回归（logistic regression）</li>
<li>费希尔线性回归（Fisher线性判别）</li>
</ul>
<h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><h4 id="二分类"><a href="#二分类" class="headerlink" title="二分类"></a>二分类</h4><p><strong>首先：</strong>将决策变量转化为虚拟变量0-1</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751694.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751706.png" style="zoom:80%;" />



<p>如果<strong>自变量是定性变量</strong>，需要对自变量<strong>进行虚拟化</strong></p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751006.png" alt="Snipaste_2023-01-26_21-59-25" style="zoom:80%;" />



<p><strong>提高预测精度的方法</strong></p>
<ul>
<li>加入平方项或交互项（可能会造成过拟合现象）</li>
<li>交叉验证</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751020.png" alt="Snipaste_2023-01-26_22-00-00" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751127.png" alt="Snipaste_2023-01-26_22-00-53" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751382.png" style="zoom:80%;" />



<h4 id="多分类"><a href="#多分类" class="headerlink" title="多分类"></a>多分类</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751432.png" alt="Snipaste_2023-01-26_22-33-11" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751460.png" alt="Snipaste_2023-01-26_22-33-21" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751501.png" alt="Snipaste_2023-01-26_22-33-29" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751537.png" alt="Snipaste_2023-01-26_22-34-20" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751581.png" style="zoom:80%;" />





<h3 id="Fisher线性判别分析"><a href="#Fisher线性判别分析" class="headerlink" title="Fisher线性判别分析"></a>Fisher线性判别分析</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751732.png" style="zoom:80%;" />



<h4 id="二分类-1"><a href="#二分类-1" class="headerlink" title="二分类"></a>二分类</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751832.png" alt="Snipaste_2023-01-26_22-20-09" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751839.png" style="zoom:80%;" />



<h4 id="多分类-1"><a href="#多分类-1" class="headerlink" title="多分类"></a>多分类</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751864.png" alt="Snipaste_2023-01-26_22-30-33" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751945.png" style="zoom:80%;" />



<h2 id="聚类模型"><a href="#聚类模型" class="headerlink" title="聚类模型"></a>聚类模型</h2><p><strong>注意：</strong>需要对数据进行标准化</p>
<h3 id="K-means聚类算法（基于距离）"><a href="#K-means聚类算法（基于距离）" class="headerlink" title="K-means聚类算法（基于距离）"></a>K-means聚类算法（基于距离）</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751992.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751139.png" alt="Snipaste_2023-01-29_20-16-30"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751197.png" alt="Snipaste_2023-01-29_20-15-54"></p>
<h4 id="算法优劣"><a href="#算法优劣" class="headerlink" title="算法优劣"></a>算法优劣</h4><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751217.png" alt="Snipaste_2023-01-29_20-16-42"></p>
<h3 id="K-means-改进算法（基于距离）"><a href="#K-means-改进算法（基于距离）" class="headerlink" title="K-means++改进算法（基于距离）"></a>K-means++改进算法（基于距离）</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751268.png" alt="Snipaste_2023-01-29_20-17-03"></p>
<h4 id="spss操作"><a href="#spss操作" class="headerlink" title="spss操作"></a>spss操作</h4><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751331.png" alt="Snipaste_2023-01-29_20-22-35"></p>
<h3 id="系统（层次）聚类（基于距离）（推荐）"><a href="#系统（层次）聚类（基于距离）（推荐）" class="headerlink" title="系统（层次）聚类（基于距离）（推荐）"></a>系统（层次）聚类（基于距离）（推荐）</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751416.png" style="zoom:80%;" />

<h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751483.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751532.png" alt="Snipaste_2023-01-29_20-40-35" style="zoom:80%;" />

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751540.png" alt="Snipaste_2023-01-29_20-45-56" style="zoom:80%;" />



<h4 id="spss操作-1"><a href="#spss操作-1" class="headerlink" title="spss操作"></a>spss操作</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751660.png" alt="Snipaste_2023-01-29_20-50-11" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751742.png" alt="Snipaste_2023-01-29_20-50-38" style="zoom:80%;" />



<h4 id="肘部图（估计k）"><a href="#肘部图（估计k）" class="headerlink" title="肘部图（估计k）"></a>肘部图（估计k）</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751815.png" alt="Snipaste_2023-01-29_20-51-43" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751845.png" alt="Snipaste_2023-01-29_20-53-05" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751874.png" alt="Snipaste_2023-01-29_20-57-47" style="zoom:80%;" />





<h3 id="DBSCAN算法（基于密度）"><a href="#DBSCAN算法（基于密度）" class="headerlink" title="DBSCAN算法（基于密度）"></a>DBSCAN算法（基于密度）</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751949.png" alt="Snipaste_2023-01-29_21-04-04" style="zoom:80%;" />

<h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751084.png" alt="Snipaste_2023-01-29_21-05-52" style="zoom:80%;" />



<h4 id="算法优劣-1"><a href="#算法优劣-1" class="headerlink" title="算法优劣"></a>算法优劣</h4><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751153.png" alt="Snipaste_2023-01-29_21-10-32"></p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[IDX, isnoise]</span>=<span class="title">DBSCAN</span><span class="params">(X,epsilon,MinPts)</span></span></span><br><span class="line"></span><br><span class="line">    C=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    n=<span class="built_in">size</span>(X,<span class="number">1</span>);</span><br><span class="line">    IDX=<span class="built_in">zeros</span>(n,<span class="number">1</span>);  <span class="comment">% 初始化全部为0，即全部为噪音点</span></span><br><span class="line">    </span><br><span class="line">    D=pdist2(X,X);</span><br><span class="line">    </span><br><span class="line">    visited=<span class="built_in">false</span>(n,<span class="number">1</span>);</span><br><span class="line">    isnoise=<span class="built_in">false</span>(n,<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">        <span class="keyword">if</span> ~visited(<span class="built_in">i</span>)</span><br><span class="line">            visited(<span class="built_in">i</span>)=<span class="built_in">true</span>;</span><br><span class="line">            </span><br><span class="line">            Neighbors=RegionQuery(<span class="built_in">i</span>);</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">numel</span>(Neighbors)&lt;MinPts</span><br><span class="line">                <span class="comment">% X(i,:) is NOISE</span></span><br><span class="line">                isnoise(<span class="built_in">i</span>)=<span class="built_in">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                C=C+<span class="number">1</span>;</span><br><span class="line">                ExpandCluster(<span class="built_in">i</span>,Neighbors,C);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ExpandCluster</span><span class="params">(i,Neighbors,C)</span></span></span><br><span class="line">        IDX(<span class="built_in">i</span>)=C;</span><br><span class="line">        </span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">true</span></span><br><span class="line">            <span class="built_in">j</span> = Neighbors(k);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ~visited(<span class="built_in">j</span>)</span><br><span class="line">                visited(<span class="built_in">j</span>)=<span class="built_in">true</span>;</span><br><span class="line">                Neighbors2=RegionQuery(<span class="built_in">j</span>);</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">numel</span>(Neighbors2)&gt;=MinPts</span><br><span class="line">                    Neighbors=[Neighbors Neighbors2];   <span class="comment">%#ok</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> IDX(<span class="built_in">j</span>)==<span class="number">0</span></span><br><span class="line">                IDX(<span class="built_in">j</span>)=C;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            k = k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> k &gt; <span class="built_in">numel</span>(Neighbors)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Neighbors</span>=<span class="title">RegionQuery</span><span class="params">(i)</span></span></span><br><span class="line">        Neighbors=<span class="built_in">find</span>(D(<span class="built_in">i</span>,:)&lt;=epsilon);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PlotClusterinResult</span><span class="params">(X, IDX)</span></span></span><br><span class="line"></span><br><span class="line">    k=<span class="built_in">max</span>(IDX);</span><br><span class="line"></span><br><span class="line">    Colors=hsv(k);</span><br><span class="line"></span><br><span class="line">    Legends = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">0</span>:k</span><br><span class="line">        Xi=X(IDX==<span class="built_in">i</span>,:);</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span>~=<span class="number">0</span></span><br><span class="line">            Style = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">            MarkerSize = <span class="number">8</span>;</span><br><span class="line">            Color = Colors(<span class="built_in">i</span>,:);</span><br><span class="line">            Legends&#123;<span class="keyword">end</span>+<span class="number">1</span>&#125; = [<span class="string">&#x27;Cluster #&#x27;</span> num2str(<span class="built_in">i</span>)];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Style = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">            MarkerSize = <span class="number">6</span>;</span><br><span class="line">            Color = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> ~<span class="built_in">isempty</span>(Xi)</span><br><span class="line">                Legends&#123;<span class="keyword">end</span>+<span class="number">1</span>&#125; = <span class="string">&#x27;Noise&#x27;</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(Xi)</span><br><span class="line">            <span class="built_in">plot</span>(Xi(:,<span class="number">1</span>),Xi(:,<span class="number">2</span>),Style,<span class="string">&#x27;MarkerSize&#x27;</span>,MarkerSize,<span class="string">&#x27;Color&#x27;</span>,Color);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">hold</span> on;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">hold</span> off;</span><br><span class="line">    axis equal;</span><br><span class="line">    grid on;</span><br><span class="line">    <span class="built_in">legend</span>(Legends);</span><br><span class="line">    <span class="built_in">legend</span>(<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;NorthEastOutside&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% Load Data</span></span><br><span class="line"></span><br><span class="line">load mydata;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Run DBSCAN Clustering Algorithm</span></span><br><span class="line"></span><br><span class="line">epsilon=<span class="number">0.5</span>;</span><br><span class="line">MinPts=<span class="number">10</span>;</span><br><span class="line">IDX=DBSCAN(X,epsilon,MinPts);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Plot Results</span></span><br><span class="line"><span class="comment">% 如果只要两个指标的话就可以画图啦</span></span><br><span class="line">PlotClusterinResult(X, IDX);</span><br><span class="line">title([<span class="string">&#x27;DBSCAN Clustering (\epsilon = &#x27;</span> num2str(epsilon) <span class="string">&#x27;, MinPts = &#x27;</span> num2str(MinPts) <span class="string">&#x27;)&#x27;</span>]);</span><br></pre></td></tr></table></figure>









<h2 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751215.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751231.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751338.png" alt="Snipaste_2023-01-31_22-23-15" style="zoom:80%;" />



<h3 id="时间序列分解"><a href="#时间序列分解" class="headerlink" title="时间序列分解"></a>时间序列分解</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751367.png" alt="Snipaste_2023-01-31_22-23-47" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751539.png" alt="Snipaste_2023-01-31_22-23-55" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751534.png" alt="Snipaste_2023-01-31_22-24-04" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751570.png" alt="Snipaste_2023-01-31_22-24-12" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751622.png" alt="Snipaste_2023-01-31_22-24-23" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751699.png" alt="Snipaste_2023-01-31_22-26-03" style="zoom:80%;" />



<h3 id="spss缺失值处理"><a href="#spss缺失值处理" class="headerlink" title="spss缺失值处理"></a>spss缺失值处理</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751758.png" alt="Snipaste_2023-01-31_22-27-58" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751879.png" alt="Snipaste_2023-01-31_22-28-11" style="zoom:80%;" />



<h3 id="spss数据处理（时间序列图）"><a href="#spss数据处理（时间序列图）" class="headerlink" title="spss数据处理（时间序列图）"></a>spss数据处理（时间序列图）</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751900.png" alt="Snipaste_2023-01-31_22-28-24" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751954.png" alt="Snipaste_2023-01-31_22-28-48" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751007.png" alt="Snipaste_2023-01-31_22-29-11" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751068.png" alt="Snipaste_2023-01-31_22-40-44" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751101.png" alt="Snipaste_2023-01-31_22-44-52" style="zoom:80%;" />



<h3 id="操作用途和步骤"><a href="#操作用途和步骤" class="headerlink" title="操作用途和步骤"></a>操作用途和步骤</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751248.png" alt="Snipaste_2023-01-31_22-45-06" style="zoom:80%;" />



<h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751305.png" alt="Snipaste_2023-01-31_22-46-27" style="zoom:80%;" />





<h4 id="指数平滑模型"><a href="#指数平滑模型" class="headerlink" title="指数平滑模型"></a>指数平滑模型</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751342.png" alt="Snipaste_2023-01-31_22-51-45" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751464.png" alt="Snipaste_2023-01-31_22-54-28" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751446.png" alt="Snipaste_2023-01-31_22-57-01" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751486.png" alt="Snipaste_2023-01-31_22-57-48" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751637.png" alt="Snipaste_2023-01-31_22-59-15" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751751.png" alt="Snipaste_2023-01-31_22-59-26" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751781.png" alt="Snipaste_2023-01-31_23-00-52" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751788.png" alt="Snipaste_2023-01-31_23-01-33" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751837.png" alt="Snipaste_2023-01-31_23-01-46" style="zoom:80%;" />



<h4 id="一元时间序列分析模型"><a href="#一元时间序列分析模型" class="headerlink" title="一元时间序列分析模型"></a>一元时间序列分析模型</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751905.png" style="zoom:80%;" />



<h3 id="建模思路和实例"><a href="#建模思路和实例" class="headerlink" title="建模思路和实例"></a>建模思路和实例</h3><h4 id="季节性数据"><a href="#季节性数据" class="headerlink" title="季节性数据"></a>季节性数据</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751072.png" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751135.png" alt="Snipaste_2023-02-01_00-25-56" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751142.png" alt="Snipaste_2023-02-01_00-26-07" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751218.png" alt="Snipaste_2023-02-01_00-26-25" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751236.png" alt="Snipaste_2023-02-01_00-27-37" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751273.png" alt="Snipaste_2023-02-01_00-27-51" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751489.png" alt="Snipaste_2023-02-01_00-29-38" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751505.png" alt="Snipaste_2023-02-01_00-30-22" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751530.png" alt="Snipaste_2023-02-01_00-31-18" style="zoom:80%;" />



<h4 id="人口预测"><a href="#人口预测" class="headerlink" title="人口预测"></a>人口预测</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751615.png" alt="Snipaste_2023-02-01_00-38-01" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751659.png" alt="Snipaste_2023-02-01_00-38-11" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751680.png" alt="Snipaste_2023-02-01_00-38-20" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751870.png" alt="Snipaste_2023-02-01_00-38-30" style="zoom:80%;" />



<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751072.png"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751135.png" alt="Snipaste_2023-02-01_00-25-56"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751142.png" alt="Snipaste_2023-02-01_00-26-07"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751218.png" alt="Snipaste_2023-02-01_00-26-25"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751236.png" alt="Snipaste_2023-02-01_00-27-37"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751273.png" alt="Snipaste_2023-02-01_00-27-51"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751489.png" alt="Snipaste_2023-02-01_00-29-38"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751505.png" alt="Snipaste_2023-02-01_00-30-22"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751530.png" alt="Snipaste_2023-02-01_00-31-18"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751615.png" alt="Snipaste_2023-02-01_00-38-01"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751659.png" alt="Snipaste_2023-02-01_00-38-11"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751680.png" alt="Snipaste_2023-02-01_00-38-20"></p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751870.png" alt="Snipaste_2023-02-01_00-38-30"></p>
<h4 id="股票上证指数预测"><a href="#股票上证指数预测" class="headerlink" title="股票上证指数预测"></a>股票上证指数预测</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751913.png" alt="Snipaste_2023-02-01_23-14-44" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751903.png" alt="Snipaste_2023-02-01_23-15-05" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751964.png" alt="Snipaste_2023-02-01_23-15-33" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751011.png" alt="Snipaste_2023-02-01_23-15-44" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751045.png" alt="Snipaste_2023-02-01_23-15-56" style="zoom:80%;" />



<h4 id="GDP增速预测"><a href="#GDP增速预测" class="headerlink" title="GDP增速预测"></a>GDP增速预测</h4><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751283.png" alt="Snipaste_2023-02-01_23-16-13" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751302.png" alt="Snipaste_2023-02-01_23-16-21" style="zoom:80%;" />

<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751326.png" alt="Snipaste_2023-02-01_23-16-32" style="zoom:80%;" />



<h1 id="优化类方法"><a href="#优化类方法" class="headerlink" title="优化类方法"></a>优化类方法</h1><h2 id="蒙特卡洛模拟"><a href="#蒙特卡洛模拟" class="headerlink" title="蒙特卡洛模拟"></a>蒙特卡洛模拟</h2><h3 id="引例：浦丰投针实验"><a href="#引例：浦丰投针实验" class="headerlink" title="引例：浦丰投针实验"></a>引例：浦丰投针实验</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751409.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751466.png" style="zoom:80%;" />



<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗用于布丰投针实验</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">%  rand(m,n)函数产生由在[0,1]之间均匀分布的随机数组成的m行n列的矩阵（或称为数组）。</span></span><br><span class="line"><span class="built_in">rand</span>(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">%     0.8300    0.1048    0.2396    0.4398</span></span><br><span class="line"><span class="comment">%     0.5663    0.1196    0.8559    0.5817</span></span><br><span class="line"><span class="comment">%     0.9281    0.2574    0.3013    0.9355</span></span><br><span class="line"><span class="comment">%     0.3910    0.3173    0.2108    0.1676</span></span><br><span class="line"><span class="comment">%     0.3645    0.4372    0.8819    0.9232</span></span><br><span class="line"><span class="built_in">rand</span>(<span class="number">3</span>) <span class="comment">% 若只给一个输入，则会生成一个方阵</span></span><br><span class="line"><span class="comment">%     0.1709    0.4951    0.0541</span></span><br><span class="line"><span class="comment">%     0.9374    0.8500    0.6155</span></span><br><span class="line"><span class="comment">%     0.2400    0.3156    0.5741</span></span><br><span class="line"><span class="comment">% a + rand(m,n)*(b-a) 可以输出在[a,b]之间均匀分布的随机数组成的m行n列的矩阵。</span></span><br><span class="line"><span class="number">-2</span> + <span class="built_in">rand</span>(<span class="number">3</span>,<span class="number">2</span>) * (<span class="number">2</span> - (<span class="number">-2</span>))  <span class="comment">% 输出在[-2,2]之间均匀分布的随机数组成的3行2列的矩阵。</span></span><br><span class="line"><span class="comment">%    -1.2743    0.6013</span></span><br><span class="line"><span class="comment">%    -1.3084    0.0766</span></span><br><span class="line"><span class="comment">%     1.5075    0.7563</span></span><br><span class="line"><span class="comment">% a + rand(m,n)*(b-a)等价于unifrnd(a,b,m,n)</span></span><br><span class="line">unifrnd(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）代码部分</span></span><br><span class="line">l =  <span class="number">0.520</span>;     <span class="comment">% 针的长度（任意给的）</span></span><br><span class="line">a = <span class="number">1.314</span>;    <span class="comment">% 平行线的宽度(大于针的长度l即可)</span></span><br><span class="line">n = <span class="number">10000</span>;    <span class="comment">% 做n次投针试验，n越大求出来的pi越准确</span></span><br><span class="line">m = <span class="number">0</span>;    <span class="comment">% 记录针与平行线相交的次数</span></span><br><span class="line">x = <span class="built_in">rand</span>(<span class="number">1</span>, n) * a / <span class="number">2</span> ;   <span class="comment">% 在[0, a/2]内服从均匀分布随机产生n个数， x中每一个元素表示针的中点和最近的一条平行线的距离</span></span><br><span class="line">phi = <span class="built_in">rand</span>(<span class="number">1</span>, n) * <span class="built_in">pi</span>;    <span class="comment">% 在[0, pi]内服从均匀分布随机产生n个数，phi中的每一个元素表示针和最近的一条平行线的夹角</span></span><br><span class="line"><span class="comment">% axis([0,pi, 0,a/2]);   box on;  % 画一个坐标轴的框架，x轴位于0-pi，y轴位于0-a/2， 并打开图形的边框</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n  <span class="comment">% 开始循环，依次看每根针是否和直线相交</span></span><br><span class="line">    <span class="keyword">if</span> x(<span class="built_in">i</span>) &lt;= l / <span class="number">2</span> * <span class="built_in">sin</span>(phi (<span class="built_in">i</span>))     <span class="comment">% 如果针和平行线相交</span></span><br><span class="line">        m = m + <span class="number">1</span>;    <span class="comment">% 那么m就要加1</span></span><br><span class="line">        <span class="built_in">plot</span>(phi(<span class="built_in">i</span>), x(<span class="built_in">i</span>), <span class="string">&#x27;r.&#x27;</span>)   <span class="comment">% 模仿书上的那个图，横坐标为phi，纵坐标为x , 用红色的小点进行标记</span></span><br><span class="line">        <span class="built_in">hold</span> on  <span class="comment">% 在原来的图形上继续绘制</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p = m / n;    <span class="comment">% 针和平行线相交出现的频率</span></span><br><span class="line">mypi = (<span class="number">2</span> * l) / (a * p);  <span class="comment">% 我们根据公式计算得到的pi</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到pi为：&#x27;</span>, num2str(mypi)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （3） 由于一次模拟的结果具有偶然性，因此我们可以重复100次后再来求一个平均的pi</span></span><br><span class="line">result = <span class="built_in">zeros</span>(<span class="number">100</span>,<span class="number">1</span>);  <span class="comment">% 初始化保存100次结果的矩阵</span></span><br><span class="line">l =  <span class="number">0.520</span>;     a = <span class="number">1.314</span>;</span><br><span class="line">n = <span class="number">1000000</span>;    </span><br><span class="line"><span class="keyword">for</span> num = <span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    m = <span class="number">0</span>;  </span><br><span class="line">    x = <span class="built_in">rand</span>(<span class="number">1</span>, n) * a / <span class="number">2</span> ;</span><br><span class="line">    phi = <span class="built_in">rand</span>(<span class="number">1</span>, n) * <span class="built_in">pi</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">        <span class="keyword">if</span> x(<span class="built_in">i</span>) &lt;= l / <span class="number">2</span> * <span class="built_in">sin</span>(phi (<span class="built_in">i</span>))</span><br><span class="line">            m = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    p = m / n;</span><br><span class="line">    mypi = (<span class="number">2</span> * l) / (a * p);</span><br><span class="line">    result(num) = mypi;  <span class="comment">% 把求出来的myphi保存到结果矩阵中</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">mymeanpi = <span class="built_in">mean</span>(result);  <span class="comment">% 计算result矩阵中保存的100次结果的均值</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到pi为：&#x27;</span>, num2str(mymeanpi)])</span><br></pre></td></tr></table></figure>



<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>蒙特卡罗⽅法⼜称统计模拟法，是⼀种<strong>随机模拟⽅法</strong></p>
<p>蒙特卡洛模拟是一种算法思想，不是直接的算法</p>
<h3 id="三门问题"><a href="#三门问题" class="headerlink" title="三门问题"></a>三门问题</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751494.png" style="zoom:80%;" />

<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗用于模拟三门问题</span></span><br><span class="line">clear;clc</span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% randi([a,b],m,n)函数可在指定区间[a,b]内随机取出大小为m*n的整数矩阵</span></span><br><span class="line">randi([<span class="number">1</span>,<span class="number">5</span>],<span class="number">5</span>,<span class="number">8</span>) <span class="comment">%在区间[1,5]内随机取出大小为5*8的整数矩阵</span></span><br><span class="line"><span class="comment">%      2     5     4     5     3     1     4     2</span></span><br><span class="line"><span class="comment">%      3     3     1     5     4     2     1     2</span></span><br><span class="line"><span class="comment">%      4     1     3     3     2     2     5     1</span></span><br><span class="line"><span class="comment">%      5     3     3     4     4     5     4     4</span></span><br><span class="line"><span class="comment">%      4     2     3     4     2     4     2     4</span></span><br><span class="line">randi([<span class="number">1</span>,<span class="number">5</span>])   <span class="comment">%在区间[1,5]内随机取出1个整数</span></span><br><span class="line"><span class="comment">%     3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 字符串的连接方式：(1)[&#x27;字符串1&#x27;,&#x27;字符串2&#x27;] (2)strcat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;) （第一期视频第一讲）</span></span><br><span class="line">[<span class="string">&#x27;数学建模&#x27;</span>,<span class="string">&#x27;学习交流&#x27;</span>]</span><br><span class="line">strcat(<span class="string">&#x27;数学建模&#x27;</span>,<span class="string">&#x27;学习交流&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% num2str函数：将数值转换为字符串 （第一期视频第一讲）</span></span><br><span class="line">mystr = num2str(<span class="number">1224</span>)  <span class="comment">% 注意观察工作区的mystr这个变量的值</span></span><br><span class="line"><span class="built_in">disp</span>([num2str(<span class="number">1224</span>),<span class="string">&#x27;祝大家平安夜平平安安&#x27;</span>])  <span class="comment">% disp函数是输出函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）代码部分（在成功的条件下的概率）</span></span><br><span class="line">n = <span class="number">100000</span>;  <span class="comment">% n代表蒙特卡罗模拟重复次数</span></span><br><span class="line">a = <span class="number">0</span>;  <span class="comment">% a表示不改变主意时能赢得汽车的次数</span></span><br><span class="line">b = <span class="number">0</span>;  <span class="comment">% b表示改变主意时能赢得汽车的次数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>= <span class="number">1</span> : n  <span class="comment">% 开始模拟n次</span></span><br><span class="line">    x = randi([<span class="number">1</span>,<span class="number">3</span>]);  <span class="comment">% 随机生成一个1-3之间的整数x表示汽车出现在第x扇门后</span></span><br><span class="line">    y = randi([<span class="number">1</span>,<span class="number">3</span>]);  <span class="comment">% 随机生成一个1-3之间的整数y表示自己选的门</span></span><br><span class="line">    <span class="comment">% 下面分为两种情况讨论：x=y和x~=y</span></span><br><span class="line">    <span class="keyword">if</span> x == y   <span class="comment">% 如果x和y相同，那么我们只有不改变主意时才能赢</span></span><br><span class="line">        a = a + <span class="number">1</span>;     b = b + <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">% x ~= y ，如果x和y不同，那么我们只有改变主意时才能赢</span></span><br><span class="line">        a = a + <span class="number">0</span>;     b = b +<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到的不改变主意时的获奖概率为：&#x27;</span>, num2str(a/n)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到的改变主意时的获奖概率为：&#x27;</span>, num2str(b/n)]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （3）考虑失败情况的代码(无条件概率)</span></span><br><span class="line">n = <span class="number">100000</span>;  <span class="comment">% n代表蒙特卡罗模拟重复次数</span></span><br><span class="line">a = <span class="number">0</span>;  <span class="comment">% a表示不改变主意时能赢得汽车的次数</span></span><br><span class="line">b = <span class="number">0</span>;  <span class="comment">% b表示改变主意时能赢得汽车的次数</span></span><br><span class="line">c = <span class="number">0</span>;  <span class="comment">% c表示没有获奖的次数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>= <span class="number">1</span> : n  <span class="comment">% 开始模拟n次</span></span><br><span class="line">    x = randi([<span class="number">1</span>,<span class="number">3</span>]);  <span class="comment">% 随机生成一个1-3之间的整数x表示汽车出现在第x扇门后</span></span><br><span class="line">    y = randi([<span class="number">1</span>,<span class="number">3</span>]);  <span class="comment">% 随机生成一个1-3之间的整数y表示自己选的门</span></span><br><span class="line">    change = randi([<span class="number">0</span>, <span class="number">1</span>]); <span class="comment">% change =0  不改变主意，change = 1 改变主意</span></span><br><span class="line">    <span class="comment">% 下面分为两种情况讨论：x=y和x~=y</span></span><br><span class="line">    <span class="keyword">if</span> x == y   <span class="comment">% 如果x和y相同，那么我们只有不改变主意时才能赢</span></span><br><span class="line">        <span class="keyword">if</span> change == <span class="number">0</span>  <span class="comment">% 不改变主意</span></span><br><span class="line">        	a = a + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">% 改变了主意</span></span><br><span class="line">            c= c+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">% x ~= y ，如果x和y不同，那么我们只有改变主意时才能赢</span></span><br><span class="line">         <span class="keyword">if</span> change == <span class="number">0</span>  <span class="comment">% 不改变主意</span></span><br><span class="line">        	c = c + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">% 改变了主意</span></span><br><span class="line">            b= b + <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到的不改变主意时的获奖概率为：&#x27;</span>, num2str(a/n)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到的改变主意时的获奖概率为：&#x27;</span>, num2str(b/n)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;蒙特卡罗方法得到的没有获奖的概率为：&#x27;</span>, num2str(c/n)]);</span><br></pre></td></tr></table></figure>



<h3 id="排队问题"><a href="#排队问题" class="headerlink" title="排队问题"></a>排队问题</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751684.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751051.png" style="zoom:80%;" />



<h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗模拟排队问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% normrnd(MU,SIGMA):生成一个服从正态分布(MU参数代表均值,SIGMA参数代表标准差,方差开根号是标准差)的随机数</span></span><br><span class="line">normrnd(<span class="number">10</span>,<span class="number">2</span>)  <span class="comment">% 均值为10 标准差为2（方差为4）的正态分布随机数</span></span><br><span class="line"><span class="comment">% exprnd(M)表示生成一个均值为M的指数分布随机数(其对应的参数为1/M)</span></span><br><span class="line">exprnd(<span class="number">5</span>)  <span class="comment">% 均值为5的指数分布随机数（对应的参数为0.2）</span></span><br><span class="line"><span class="comment">% mean函数是用来求解均值的函数（第一期视频第五讲）</span></span><br><span class="line"><span class="built_in">mean</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">% tic函数和toc函数可以用来返回代码运行的时间，例如我们要计算一段代码的运行时间，就可以在这段代码前加上tic，在这段代码后加上toc (我的微信公众号&quot;数学建模学习交流&quot;中有一篇推送《为什么要对代码初始化》中使用过这对函数)</span></span><br><span class="line">tic</span><br><span class="line">a = <span class="number">2</span>^<span class="number">100</span></span><br><span class="line">toc</span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）模型中出现的变量的说明</span></span><br><span class="line"><span class="comment">% x(i)表示第i-1个客户和第i个客户到达的间隔时间，服从参数为0.1的指数分布</span></span><br><span class="line"><span class="comment">% y(i)表示第i个客户的服务持续时间，服从均值为10方差为4(标准差为2)的正态分布 (若小于1则按1计算)</span></span><br><span class="line"><span class="comment">% c(i)表示第i个客户的到达时间，那么c(i) = c(i-1) + x(i)，初始值c0=0</span></span><br><span class="line"><span class="comment">% b(i)表示第i个客户开始服务的时间</span></span><br><span class="line"><span class="comment">% e(i)表示第i个客户结束服务的时间，初始值e0=0</span></span><br><span class="line"><span class="comment">% 第i个客户结束服务的时间 = 第i个客户开始服务的时间 + 第i个客户的服务持续时间</span></span><br><span class="line"><span class="comment">% 即：e(i) = b(i) + y(i）</span></span><br><span class="line"><span class="comment">% 第i个客户开始服务的时间取决于该客户的到达时间和上一个客户结束服务的时间</span></span><br><span class="line"><span class="comment">% 即：b(i) = max(c(i),e(i-1))，初始值b1=c1;</span></span><br><span class="line"><span class="comment">% 第i个客户等待的时间 = 第i个客户开始服务的时间 - 第i个客户到达银行的时间</span></span><br><span class="line"><span class="comment">% 即：wait(i) = b(i) - c(i)</span></span><br><span class="line"><span class="comment">% w表示所有客户等待时间的总和</span></span><br><span class="line"><span class="comment">% 假设一天内银行最终服务了n个顾客，那么客户的平均等待时间t = w/n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （3）问题1的代码</span></span><br><span class="line">clear</span><br><span class="line">tic  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line"><span class="built_in">i</span> = <span class="number">1</span>;  <span class="comment">% i表示第i个客户，最开始取i=1</span></span><br><span class="line">w = <span class="number">0</span>;  <span class="comment">% w用来表示所有客户等待的总时间，初始化为0</span></span><br><span class="line">e0 = <span class="number">0</span>;  c0 = <span class="number">0</span>;   <span class="comment">% 初始化e0和c0为0</span></span><br><span class="line">x(<span class="number">1</span>) = exprnd(<span class="number">10</span>);  <span class="comment">% 第0个客户(假想的)和第1个客户到达的时间间隔</span></span><br><span class="line">c(<span class="number">1</span>) = c0 + x(<span class="number">1</span>);  <span class="comment">% 第1个客户到达的时间</span></span><br><span class="line">b(<span class="number">1</span>) = c(<span class="number">1</span>); <span class="comment">% 第1个客户的开始服务的时间</span></span><br><span class="line"><span class="keyword">while</span> b(<span class="built_in">i</span>) &lt;= <span class="number">480</span>  <span class="comment">% 开始设置循环，只要第i个顾客开始服务的时间(时刻)小于480，就可以对其服务（银行每天工作8小时，折换为分钟就是480分钟）</span></span><br><span class="line">    y(<span class="built_in">i</span>) = normrnd(<span class="number">10</span>,<span class="number">2</span>); <span class="comment">% 第i个客户的服务持续时间，服从均值为10方差为4(标准差为2)的正态分布</span></span><br><span class="line">    <span class="keyword">if</span> y(<span class="built_in">i</span>) &lt; <span class="number">1</span>  <span class="comment">% 根据题目的意思：若服务持续时间不足一分钟，则按照一分钟计算</span></span><br><span class="line">        y(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    e(<span class="built_in">i</span>) = b(<span class="built_in">i</span>) + y(<span class="built_in">i</span>); <span class="comment">% 第i个客户结束服务的时间 = 第i个客户开始服务的时间 + 第i个客户的服务持续时间</span></span><br><span class="line">    wait(<span class="built_in">i</span>) = b(<span class="built_in">i</span>) - c(<span class="built_in">i</span>); <span class="comment">% 第i个客户等待的时间 = 第i个客户开始服务的时间 - 第i个客户到达银行的时间</span></span><br><span class="line">    w = w + wait(<span class="built_in">i</span>); <span class="comment">% 更新所有客户等待的总时间</span></span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> + <span class="number">1</span>; <span class="comment">% 增加一名新的客户</span></span><br><span class="line">    x(<span class="built_in">i</span>) = exprnd(<span class="number">10</span>); <span class="comment">% 这位新客户和上一个客户到达的时间间隔</span></span><br><span class="line">    c(<span class="built_in">i</span>) = c(<span class="built_in">i</span><span class="number">-1</span>) + x(<span class="built_in">i</span>); <span class="comment">% 这位新客户到达银行的时间 = 上一个客户到达银行的时间 + 这位新客户和上一个客户到达的时间间隔</span></span><br><span class="line">    b(<span class="built_in">i</span>) = <span class="built_in">max</span>(c(<span class="built_in">i</span>),e(<span class="built_in">i</span><span class="number">-1</span>)); <span class="comment">% 这个新客户开始服务的时间取决于其到达时间和上一个客户结束服务的时间</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">n = <span class="built_in">i</span><span class="number">-1</span>; <span class="comment">% n表示银行一天8小时一共服务的客户人数</span></span><br><span class="line">t = w/n; <span class="comment">% 客户的平均等待时间</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;银行一天8小时一共服务的客户人数为: &#x27;</span>,num2str(n)])</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;客户的平均等待时间为: &#x27;</span>,num2str(t)])</span><br><span class="line">toc  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （4）问题2的代码</span></span><br><span class="line">clear</span><br><span class="line">tic  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line">day = <span class="number">100</span>;  <span class="comment">% 假设模拟100天</span></span><br><span class="line">n = <span class="built_in">zeros</span>(day,<span class="number">1</span>); <span class="comment">% 初始化用来保存每日接待客户数结果的矩阵</span></span><br><span class="line">t = <span class="built_in">zeros</span>(day,<span class="number">1</span>); <span class="comment">% 初始化用来保存每日客户平均等待时长的矩阵</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:day</span><br><span class="line">    <span class="built_in">i</span> = <span class="number">1</span>;  <span class="comment">% i表示第i个客户，最开始取i=1</span></span><br><span class="line">    w = <span class="number">0</span>;  <span class="comment">% w用来表示所有客户等待的总时间，初始化为0</span></span><br><span class="line">    e0 = <span class="number">0</span>;  c0 = <span class="number">0</span>;   <span class="comment">% 初始化e0和c0为0</span></span><br><span class="line">    x(<span class="number">1</span>) = exprnd(<span class="number">10</span>);  <span class="comment">% 第0个客户(假想的)和第1个客户到达的时间间隔</span></span><br><span class="line">    c(<span class="number">1</span>) = c0 + x(<span class="number">1</span>);  <span class="comment">% 第1个客户到达的时间</span></span><br><span class="line">    b(<span class="number">1</span>) = c(<span class="number">1</span>); <span class="comment">% 第1个客户的开始服务的时间</span></span><br><span class="line">    <span class="keyword">while</span> b(<span class="built_in">i</span>) &lt;= <span class="number">480</span>  <span class="comment">% 开始设置循环，只要第i个顾客开始服务的时间(时刻)小于480，就可以对其服务（银行每天工作8小时，折换为分钟就是480分钟）</span></span><br><span class="line">        y(<span class="built_in">i</span>) = normrnd(<span class="number">10</span>,<span class="number">2</span>); <span class="comment">% 第i个客户的服务持续时间，服从均值为10方差为4(标准差为2)的正态分布</span></span><br><span class="line">        <span class="keyword">if</span> y(<span class="built_in">i</span>) &lt; <span class="number">1</span>  <span class="comment">% 根据题目的意思：若服务持续时间不足一分钟，则按照一分钟计算</span></span><br><span class="line">            y(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        e(<span class="built_in">i</span>) = b(<span class="built_in">i</span>) + y(<span class="built_in">i</span>); <span class="comment">% 第i个客户结束服务的时间 = 第i个客户开始服务的时间 + 第i个客户的服务持续时间</span></span><br><span class="line">        wait(<span class="built_in">i</span>) = b(<span class="built_in">i</span>) - c(<span class="built_in">i</span>); <span class="comment">% 第i个客户等待的时间 = 第i个客户开始服务的时间 - 第i个客户到达银行的时间</span></span><br><span class="line">        w = w + wait(<span class="built_in">i</span>); <span class="comment">% 更新所有客户等待的总时间</span></span><br><span class="line">        <span class="built_in">i</span> = <span class="built_in">i</span> + <span class="number">1</span>; <span class="comment">% 增加一名新的客户</span></span><br><span class="line">        x(<span class="built_in">i</span>) = exprnd(<span class="number">10</span>); <span class="comment">% 这位新客户和上一个客户到达的时间间隔</span></span><br><span class="line">        c(<span class="built_in">i</span>) = c(<span class="built_in">i</span><span class="number">-1</span>) + x(<span class="built_in">i</span>); <span class="comment">% 这位新客户到达银行的时间 = 上一个客户到达银行的时间 + 这位新客户和上一个客户到达的时间间隔</span></span><br><span class="line">        b(<span class="built_in">i</span>) = <span class="built_in">max</span>(c(<span class="built_in">i</span>),e(<span class="built_in">i</span><span class="number">-1</span>)); <span class="comment">% 这个新客户开始服务的时间取决于其到达时间和上一个客户结束服务的时间</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    n(k) = <span class="built_in">i</span><span class="number">-1</span>; <span class="comment">% n(k)表示银行第k天服务的客户人数</span></span><br><span class="line">    t(k) = w/n(k); <span class="comment">% t(k)表示该银行第k天客户的平均等待时间</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([num2str(day),<span class="string">&#x27;个工作日中，银行每日平均服务的客户人数为: &#x27;</span>,num2str(<span class="built_in">mean</span>(n))])</span><br><span class="line"><span class="built_in">disp</span>([num2str(day),<span class="string">&#x27;个工作日中，银行每日客户的平均等待时间为: &#x27;</span>,num2str(<span class="built_in">mean</span>(t))])</span><br><span class="line">toc  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br></pre></td></tr></table></figure>



<h3 id="非线性约束问题"><a href="#非线性约束问题" class="headerlink" title="非线性约束问题"></a>非线性约束问题</h3><ol>
<li>写出各个自变量的大致范围</li>
<li>用随机数模拟</li>
<li>找出符合条件的最大值</li>
</ol>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751863.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751888.png" style="zoom:80%;" />



<h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗求解有约束的非线性规划问题</span></span><br><span class="line"><span class="comment">% max f(x) = x1*x2*x3</span></span><br><span class="line"><span class="comment">% s.t.</span></span><br><span class="line"><span class="comment">% (1) -x1+2*x2+2*x3&gt;=0</span></span><br><span class="line"><span class="comment">% (2) x1+2*x2+2*x3&lt;=72</span></span><br><span class="line"><span class="comment">% (3) x2&lt;=20 &amp; x2&gt;=10</span></span><br><span class="line"><span class="comment">% (4) x1-x2 == 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">%  (1) format long g  可以将Matlab的计算结果显示为一般的长数字格式（默认会保留四位小数，或使用科学计数法）</span></span><br><span class="line"><span class="number">5</span>/<span class="number">7</span></span><br><span class="line"><span class="number">5895</span>*<span class="number">514100</span></span><br><span class="line">format long g</span><br><span class="line"><span class="number">5</span>/<span class="number">7</span></span><br><span class="line"><span class="number">5895</span>*<span class="number">514100</span></span><br><span class="line"><span class="comment">%  (2)unifrnd(a,b,m,n)可以输出在[a,b]之间均匀分布的随机数组成的m行n列的矩阵。(等价于 a + rand(m,n)*(b-a))</span></span><br><span class="line">unifrnd(<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">%           4.07361843196589          3.16179623112705          4.78753417717149</span></span><br><span class="line"><span class="comment">%            4.5289596853781         0.487702024997048          4.82444267599638</span></span><br><span class="line"><span class="comment">%           0.63493408146753          1.39249109433524         0.788065408387741</span></span><br><span class="line"><span class="comment">%            4.5668792806951          2.73440759602492          4.85296390880308</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）代码部分</span></span><br><span class="line">clc,clear;</span><br><span class="line">tic <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line">n=<span class="number">10000000</span>; <span class="comment">%生成的随机数组数</span></span><br><span class="line">x1=unifrnd(<span class="number">20</span>,<span class="number">30</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[20,30]之间均匀分布的随机数组成的n行1列的向量构成x1</span></span><br><span class="line">x2=x1 - <span class="number">10</span>;</span><br><span class="line">x3=unifrnd(<span class="number">-10</span>,<span class="number">16</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[-10,16]之间均匀分布的随机数组成的n行1列的向量构成x3</span></span><br><span class="line">fmax=-<span class="built_in">inf</span>; <span class="comment">% 初始化函数f的最大值为负无穷（后续只要找到一个比它大的我们就对其更新）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    x = [x1(<span class="built_in">i</span>), x2(<span class="built_in">i</span>), x3(<span class="built_in">i</span>)];  <span class="comment">%构造x向量, 这里千万别写成了：x =[x1, x2, x3]</span></span><br><span class="line">    <span class="keyword">if</span> (-x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)+<span class="number">2</span>*x(<span class="number">3</span>)&gt;=<span class="number">0</span>)  &amp;  (x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)+<span class="number">2</span>*x(<span class="number">3</span>)&lt;=<span class="number">72</span>)     <span class="comment">% 判断是否满足条件</span></span><br><span class="line">        result = x(<span class="number">1</span>)*x(<span class="number">2</span>)*x(<span class="number">3</span>);  <span class="comment">% 如果满足条件就计算函数值</span></span><br><span class="line">        <span class="keyword">if</span>  result  &gt; fmax  <span class="comment">% 如果这个函数值大于我们之前计算出来的最大值</span></span><br><span class="line">            fmax = result;  <span class="comment">% 那么就更新这个函数值为新的最大值</span></span><br><span class="line">            X = x;  <span class="comment">% 并且将此时的x1 x2 x3保存到一个变量中</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(strcat(<span class="string">&#x27;蒙特卡罗模拟得到的最大值为&#x27;</span>,num2str(fmax)))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最大值处x1 x2 x3的取值为：&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(X)</span><br><span class="line">toc <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （3）缩小范围重新模拟得到更加精确的取值</span></span><br><span class="line">clc,clear;</span><br><span class="line">tic <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line">n=<span class="number">10000000</span>; <span class="comment">%生成的随机数组数</span></span><br><span class="line">x1=unifrnd(<span class="number">22</span>,<span class="number">23</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[22,23]之间均匀分布的随机数组成的n行1列的向量构成x1</span></span><br><span class="line">x2=x1 - <span class="number">10</span>;</span><br><span class="line">x3=unifrnd(<span class="number">11</span>,<span class="number">13</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[11,13]之间均匀分布的随机数组成的n行1列的向量构成x3</span></span><br><span class="line">fmax=-<span class="built_in">inf</span>; <span class="comment">% 初始化函数f的最大值为负无穷（后续只要找到一个比它大的我们就对其更新）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    x = [x1(<span class="built_in">i</span>), x2(<span class="built_in">i</span>), x3(<span class="built_in">i</span>)];  <span class="comment">%构造x向量, 这里千万别写成了：x =[x1, x2, x3]</span></span><br><span class="line">    <span class="keyword">if</span> (-x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)+<span class="number">2</span>*x(<span class="number">3</span>)&gt;=<span class="number">0</span>)  &amp;  (x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)+<span class="number">2</span>*x(<span class="number">3</span>)&lt;=<span class="number">72</span>)     <span class="comment">% 判断是否满足条件</span></span><br><span class="line">        result = x(<span class="number">1</span>)*x(<span class="number">2</span>)*x(<span class="number">3</span>);  <span class="comment">% 如果满足条件就计算函数值</span></span><br><span class="line">        <span class="keyword">if</span>  result  &gt; fmax  <span class="comment">% 如果这个函数值大于我们之前计算出来的最大值</span></span><br><span class="line">            fmax = result;  <span class="comment">% 那么就更新这个函数值为新的最大值</span></span><br><span class="line">            X = x;  <span class="comment">% 并且将此时的x1 x2 x3保存到一个变量中</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(strcat(<span class="string">&#x27;蒙特卡罗模拟得到的最大值为&#x27;</span>,num2str(fmax)))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最大值处x1 x2 x3的取值为：&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(X)</span><br><span class="line">toc <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br></pre></td></tr></table></figure>



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751114.png" style="zoom:80%;" />

<h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗求解非线性规划问题</span></span><br><span class="line"><span class="comment">% min f(x) =2*(x1^2)+x2^2-x1*x2-8*x1-3*x2</span></span><br><span class="line"><span class="comment">% s.t.</span></span><br><span class="line"><span class="comment">% (1) 3*x1+x2&gt;9</span></span><br><span class="line"><span class="comment">% (2) x1+2*x2&lt;16</span></span><br><span class="line"><span class="comment">% (3) x1&gt;0 &amp; x2&gt;0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （1）初次寻找最小值的代码</span></span><br><span class="line">clc,clear;</span><br><span class="line">format long g   <span class="comment">%可以将Matlab的计算结果显示为一般的长数字格式（默认会保留四位小数，或使用科学计数法）</span></span><br><span class="line">tic <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line">n=<span class="number">10000000</span>; <span class="comment">%生成的随机数组数</span></span><br><span class="line">x1=unifrnd(<span class="number">0</span>,<span class="number">16</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[0,16]之间均匀分布的随机数组成的n行1列的向量构成x1</span></span><br><span class="line">x2=unifrnd(<span class="number">0</span>,<span class="number">8</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[0,8]之间均匀分布的随机数组成的n行1列的向量构成x2</span></span><br><span class="line">fmin=+<span class="built_in">inf</span>; <span class="comment">% 初始化函数f的最小值为正无穷（后续只要找到一个比它小的我们就对其更新）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    x = [x1(<span class="built_in">i</span>), x2(<span class="built_in">i</span>)];  <span class="comment">%构造x向量, 这里千万别写成了：x =[x1, x2]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span>*x(<span class="number">1</span>)+x(<span class="number">2</span>)&gt;<span class="number">9</span>)&amp;&amp;(x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)&lt;<span class="number">16</span>)     <span class="comment">% 判断是否满足条件</span></span><br><span class="line">        result = <span class="number">2</span>*(x(<span class="number">1</span>)^<span class="number">2</span>)+x(<span class="number">2</span>)^<span class="number">2</span>-x(<span class="number">1</span>)*x(<span class="number">2</span>)<span class="number">-8</span>*x(<span class="number">1</span>)<span class="number">-3</span>*x(<span class="number">2</span>);  <span class="comment">% 如果满足条件就计算函数值</span></span><br><span class="line">        <span class="keyword">if</span>  result  &lt; fmin  <span class="comment">% 如果这个函数值小于我们之前计算出来的最小值</span></span><br><span class="line">            fmin = result;  <span class="comment">% 那么就更新这个函数值为新的最小值</span></span><br><span class="line">            X = x;  <span class="comment">% 并且将此时的x1 x2 保存到相应的变量中</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(strcat(<span class="string">&#x27;蒙特卡罗模拟得到的最小值为&#x27;</span>,num2str(fmin)))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最小值处x1 x2的取值为：&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(X)</span><br><span class="line">toc <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）缩小范围重新模拟得到更加精确的取值</span></span><br><span class="line">clc,clear;</span><br><span class="line">tic <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line">n=<span class="number">10000000</span>; <span class="comment">%生成的随机数组数</span></span><br><span class="line">x1=unifrnd(<span class="number">2</span>,<span class="number">3</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[2,3]之间均匀分布的随机数组成的n行1列的向量构成x1</span></span><br><span class="line">x2=unifrnd(<span class="number">2</span>,<span class="number">3</span>,n,<span class="number">1</span>);  <span class="comment">% 生成在[2,3]之间均匀分布的随机数组成的n行1列的向量构成x2</span></span><br><span class="line">fmin=+<span class="built_in">inf</span>; <span class="comment">% 初始化函数f的最小值为正无穷（后续只要找到一个比它小的我们就对其更新）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    x = [x1(<span class="built_in">i</span>), x2(<span class="built_in">i</span>)];  <span class="comment">%构造x向量, 这里千万别写成了：x =[x1, x2]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span>*x(<span class="number">1</span>)+x(<span class="number">2</span>)&gt;<span class="number">9</span>)  &amp;  (x(<span class="number">1</span>)+<span class="number">2</span>*x(<span class="number">2</span>)&lt;<span class="number">16</span>)     <span class="comment">% 判断是否满足条件</span></span><br><span class="line">        result = <span class="number">2</span>*(x(<span class="number">1</span>)^<span class="number">2</span>)+x(<span class="number">2</span>)^<span class="number">2</span>-x(<span class="number">1</span>)*x(<span class="number">2</span>)<span class="number">-8</span>*x(<span class="number">1</span>)<span class="number">-3</span>*x(<span class="number">2</span>);  <span class="comment">% 如果满足条件就计算函数值</span></span><br><span class="line">        <span class="keyword">if</span>  result  &lt; fmin  <span class="comment">% 如果这个函数值小于我们之前计算出来的最小值</span></span><br><span class="line">            fmin = result;  <span class="comment">% 那么就更新这个函数值为新的最小值</span></span><br><span class="line">            X = x;  <span class="comment">% 并且将此时的x1 x2 保存到相应的变量中</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(strcat(<span class="string">&#x27;蒙特卡罗模拟得到的最小值为&#x27;</span>,num2str(fmin)))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最小值处x1 x2的取值为：&#x27;</span>)</span><br><span class="line"><span class="built_in">disp</span>(X)</span><br><span class="line">toc <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br></pre></td></tr></table></figure>



<h3 id="0-1规划问题"><a href="#0-1规划问题" class="headerlink" title="0-1规划问题"></a>0-1规划问题</h3><ul>
<li>类似暴力搜索</li>
<li>当穷举次数远远大于模拟次数的时候，结果不正确</li>
<li>但是它比穷举法要稳定的多</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751142.png" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751594.png" style="zoom:80%;" />



<h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 书店买书问题的蒙特卡罗的模拟</span></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% (1)unique函数: 剔除一个矩阵或者向量的重复值，并将结果按照从小到大的顺序排列  </span></span><br><span class="line"><span class="comment">% adj.	唯一的; 独一无二的   [ju&#x27;ni:k]</span></span><br><span class="line">unique([<span class="number">1</span> <span class="number">2</span> <span class="number">5</span>; <span class="number">6</span> <span class="number">8</span> <span class="number">9</span>;<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>])   </span><br><span class="line">unique([<span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">8</span> <span class="number">4</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">% (2)randi([a,b],m,n)函数可在指定区间[a,b]内随机取出大小为m*n的整数矩阵</span></span><br><span class="line">randi([<span class="number">-5</span>,<span class="number">5</span>],<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）代码求解</span></span><br><span class="line">min_money = +Inf;  <span class="comment">% 初始化最小的花费为无穷大，后续只要找到比它小的就更新</span></span><br><span class="line">min_result = randi([<span class="number">1</span>, <span class="number">6</span>],<span class="number">1</span>,<span class="number">5</span>);  <span class="comment">% 初始化五本书都在哪一家书店购买，后续我们不断对其更新</span></span><br><span class="line"><span class="comment">%若min_result = [5 3 6 2 3]，则解释为：第1本书在第5家店买，第2本书在第3家店买，第3本书在第6家店买，第4本书在第2家店买，第5本书在第3家店买  </span></span><br><span class="line">n = <span class="number">100000</span>;  <span class="comment">% 蒙特卡罗模拟的次数</span></span><br><span class="line">M = [<span class="number">18</span>	 <span class="number">39</span>	<span class="number">29</span>	<span class="number">48</span>	<span class="number">59</span></span><br><span class="line">        <span class="number">24</span>	<span class="number">45</span>	<span class="number">23</span>	<span class="number">54</span>	<span class="number">44</span></span><br><span class="line">        <span class="number">22</span>	<span class="number">45</span>	<span class="number">23</span>	<span class="number">53</span>	<span class="number">53</span></span><br><span class="line">        <span class="number">28</span>	<span class="number">47</span>	<span class="number">17</span>	<span class="number">57</span>	<span class="number">47</span></span><br><span class="line">        <span class="number">24</span>	<span class="number">42</span>	<span class="number">24</span>	<span class="number">47</span>	<span class="number">59</span></span><br><span class="line">        <span class="number">27</span>	<span class="number">48</span>	<span class="number">20</span>	<span class="number">55</span>	<span class="number">53</span>];  <span class="comment">% m_ij  第j本书在第i家店的售价</span></span><br><span class="line">freight = [<span class="number">10</span> <span class="number">15</span> <span class="number">15</span> <span class="number">10</span> <span class="number">10</span> <span class="number">15</span>];  <span class="comment">% 第i家店的运费</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:n  <span class="comment">% 开始循环</span></span><br><span class="line">    result = randi([<span class="number">1</span>, <span class="number">6</span>],<span class="number">1</span>,<span class="number">5</span>); <span class="comment">% 在1-6这些整数中随机抽取一个1*5的向量，表示这五本书分别在哪家书店购买</span></span><br><span class="line">    index = unique(result);  <span class="comment">% 在哪些商店购买了商品，因为我们等下要计算运费</span></span><br><span class="line">    money = sum(freight(index)); <span class="comment">% 计算买书花费的运费</span></span><br><span class="line">    <span class="comment">% 计算总花费：刚刚计算出来的运费 + 五本书的售价</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">5</span>   </span><br><span class="line">        money = money + M(result(<span class="built_in">i</span>),<span class="built_in">i</span>);  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> money &lt; min_money  <span class="comment">% 判断刚刚随机生成的这组数据的花费是否小于最小花费，如果小于的话</span></span><br><span class="line">        min_money = money;<span class="comment">% 我们更新最小的花费</span></span><br><span class="line">        min_result = result; <span class="comment">% 用这组数据更新最小花费的结果</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">min_money   <span class="comment">% 18+39+48+17+47+20</span></span><br><span class="line">min_result</span><br></pre></td></tr></table></figure>





<h3 id="导弹追踪问题"><a href="#导弹追踪问题" class="headerlink" title="导弹追踪问题"></a>导弹追踪问题</h3><ul>
<li>这类似一个差分模型</li>
<li>取时间间隔t趋近于0</li>
<li>当导弹与B船的距离小于某一值的（一般较小）时，认为它们已经相撞</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751471.png" alt="Snipaste_2023-01-19_21-24-18" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751505.png" alt="Snipaste_2023-01-19_21-26-55" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751729.png" alt="Snipaste_2023-01-19_21-27-28" style="zoom:80%;" />



<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751970.png" style="zoom:80%;" />



<h4 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗用于模拟导弹追击问题</span></span><br><span class="line"><span class="comment">% 注意，模拟导弹追击问题更像是一种仿真模拟的方法。这里本质上没有用到随机数，因此严格意义上不能称为蒙特卡罗。</span></span><br><span class="line">clear;clc</span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% mod(m,n)表示求m/n的余数</span></span><br><span class="line"><span class="built_in">mod</span>(<span class="number">8</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">mod</span>(<span class="number">1000</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设置横纵坐标的范围并标上字符</span></span><br><span class="line">x = <span class="number">1</span>:<span class="number">0.01</span>:<span class="number">3</span>;</span><br><span class="line">y = x .^ <span class="number">2</span>;</span><br><span class="line"><span class="built_in">plot</span>(x,y)  <span class="comment">% 画出x和y的图形</span></span><br><span class="line">axis([<span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">10</span>])  <span class="comment">% 设置横坐标范围为[0, 3] 纵坐标范围为[0, 10]</span></span><br><span class="line">pause(<span class="number">3</span>)  <span class="comment">% 暂停3秒后再继续接下来的命令</span></span><br><span class="line">text(<span class="number">2</span>,<span class="number">4</span>,<span class="string">&#x27;清风&#x27;</span>)  <span class="comment">% 在坐标为(2,4)的点上标上字符串：清风</span></span><br><span class="line">close <span class="comment">% 关闭图形窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% (2) 代码求解</span></span><br><span class="line"><span class="comment">% 1. 不画追击的示意图</span></span><br><span class="line">clear;clc</span><br><span class="line">v=<span class="number">200</span>; <span class="comment">% 任意给定B船的速度（后期我们可以再改的）</span></span><br><span class="line">dt=<span class="number">0.0000001</span>; <span class="comment">% 定义时间间隔</span></span><br><span class="line">x=[<span class="number">0</span>,<span class="number">20</span>]; <span class="comment">% 定义导弹和B船的横坐标分别为x(1)和x(2)</span></span><br><span class="line">y=[<span class="number">0</span>,<span class="number">0</span>]; <span class="comment">% 定义导弹和B船的纵坐标分别为y(1)和y(2)</span></span><br><span class="line">t=<span class="number">0</span>; <span class="comment">% 初始化导弹击落B船的时间</span></span><br><span class="line">d=<span class="number">0</span>; <span class="comment">% 初始化导弹飞行的距离</span></span><br><span class="line">m=<span class="built_in">sqrt</span>(<span class="number">2</span>)/<span class="number">2</span>;   <span class="comment">% 将sqrt(2)/2定义为一个常量，使后面看起来很简洁</span></span><br><span class="line">dd=<span class="built_in">sqrt</span>((x(<span class="number">2</span>)-x(<span class="number">1</span>))^<span class="number">2</span>+(y(<span class="number">2</span>)-y(<span class="number">1</span>))^<span class="number">2</span>); <span class="comment">% 导弹与B船的距离</span></span><br><span class="line"><span class="keyword">while</span>(dd&gt;=<span class="number">0.001</span>)  <span class="comment">% 只要两者的距离足够大，就一直循环下去。（两者距离足够小时表示导弹击中，这里的临界值要结合dt来取，否则可能导致错过交界处的情况）</span></span><br><span class="line">    t=t+dt; <span class="comment">% 更新导弹击落B船的时间</span></span><br><span class="line">    d=d+<span class="number">3</span>*v*dt; <span class="comment">% 更新导弹飞行的距离</span></span><br><span class="line">    x(<span class="number">2</span>)=<span class="number">20</span>+t*v*m;  y(<span class="number">2</span>)=t*v*m;   <span class="comment">% 计算新的B船的位置 （注：m=sqrt(2)/2）</span></span><br><span class="line">    dd=<span class="built_in">sqrt</span>((x(<span class="number">2</span>)-x(<span class="number">1</span>))^<span class="number">2</span>+(y(<span class="number">2</span>)-y(<span class="number">1</span>))^<span class="number">2</span>);  <span class="comment">% 更新导弹与B船的距离</span></span><br><span class="line">    tan_alpha=(y(<span class="number">2</span>)-y(<span class="number">1</span>))/(x(<span class="number">2</span>)-x(<span class="number">1</span>));   <span class="comment">% 计算斜率，即tan(α)</span></span><br><span class="line">    cos_alpha=<span class="built_in">sqrt</span>(<span class="number">1</span>/(<span class="number">1</span>+tan_alpha^<span class="number">2</span>));   <span class="comment">% sec(α)^2 = (1+tan(α)^2)</span></span><br><span class="line">    sin_alpha=<span class="built_in">sqrt</span>(<span class="number">1</span>-cos_alpha^<span class="number">2</span>);  <span class="comment">% sin(α)^2 +cos(α)^2 = 1</span></span><br><span class="line">    x(<span class="number">1</span>)=x(<span class="number">1</span>)+<span class="number">3</span>*v*dt*cos_alpha;   y(<span class="number">1</span>)=y(<span class="number">1</span>)+<span class="number">3</span>*v*dt*sin_alpha; <span class="comment">% 计算新的导弹的位置</span></span><br><span class="line">    <span class="keyword">if</span> d&gt;<span class="number">50</span>  <span class="comment">% 导弹的有效射程为50个单位</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;导弹没有击中B船&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">% 退出循环</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> d&lt;=<span class="number">50</span> &amp; dd&lt;<span class="number">0.001</span>   <span class="comment">% 导弹飞行的距离小于50个单位且导弹和B船的距离小于0.001（表示击中）</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;导弹飞行&#x27;</span>,num2str(d),<span class="string">&#x27;单位后击中B船&#x27;</span>])</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;导弹飞行的时间为&#x27;</span>,num2str(t*<span class="number">60</span>),<span class="string">&#x27;分钟&#x27;</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 2. 画追击的示意图</span></span><br><span class="line">clear;clc</span><br><span class="line">v=<span class="number">200</span>; <span class="comment">% 任意给定B船的速度（后期我们可以再改的）</span></span><br><span class="line">dt=<span class="number">0.0000001</span>; <span class="comment">% 定义时间间隔</span></span><br><span class="line">x=[<span class="number">0</span>,<span class="number">20</span>]; <span class="comment">% 定义导弹和B船的横坐标分别为x(1)和x(2)</span></span><br><span class="line">y=[<span class="number">0</span>,<span class="number">0</span>]; <span class="comment">% 定义导弹和B船的纵坐标分别为y(1)和y(2)</span></span><br><span class="line">t=<span class="number">0</span>; <span class="comment">% 初始化导弹击落B船的时间</span></span><br><span class="line">d=<span class="number">0</span>; <span class="comment">% 初始化导弹飞行的距离</span></span><br><span class="line">m=<span class="built_in">sqrt</span>(<span class="number">2</span>)/<span class="number">2</span>;   <span class="comment">% 将sqrt(2)/2定义为一个常量，使后面看起来很简洁</span></span><br><span class="line">dd=<span class="built_in">sqrt</span>((x(<span class="number">2</span>)-x(<span class="number">1</span>))^<span class="number">2</span>+(y(<span class="number">2</span>)-y(<span class="number">1</span>))^<span class="number">2</span>); <span class="comment">% 导弹与B船的距离</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">    <span class="built_in">plot</span>(x(<span class="built_in">i</span>),y(<span class="built_in">i</span>),<span class="string">&#x27;.k&#x27;</span>,<span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">1</span>);  <span class="comment">% 画出导弹和B船所在的坐标，点的大小为1，颜色为黑色(k)，用小点表示</span></span><br><span class="line">    grid on;  <span class="comment">% 打开网格线</span></span><br><span class="line">    <span class="built_in">hold</span> on;  <span class="comment">% 不关闭图形，继续画图</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">axis([<span class="number">0</span> <span class="number">30</span> <span class="number">0</span> <span class="number">10</span>])  <span class="comment">% 固定x轴的范围为0-30  固定y轴的范围为0-10</span></span><br><span class="line">k = <span class="number">0</span>;  <span class="comment">% 引入一个变量  为了控制画图的速度（因为Matlab中画图的速度超级慢）</span></span><br><span class="line"><span class="keyword">while</span>(dd&gt;=<span class="number">0.001</span>)  <span class="comment">% 只要两者的距离足够大，就一直循环下去。（两者距离足够小时表示导弹击中，这里的临界值要结合dt来取，否则可能导致错过交界处的情况）</span></span><br><span class="line">    t=t+dt; <span class="comment">% 更新导弹击落B船的时间</span></span><br><span class="line">    d=d+<span class="number">3</span>*v*dt; <span class="comment">% 更新导弹飞行的距离</span></span><br><span class="line">    x(<span class="number">2</span>)=<span class="number">20</span>+t*v*m;  y(<span class="number">2</span>)=t*v*m;   <span class="comment">% 计算新的B船的位置 （注：m=sqrt(2)/2）</span></span><br><span class="line">    dd=<span class="built_in">sqrt</span>((x(<span class="number">2</span>)-x(<span class="number">1</span>))^<span class="number">2</span>+(y(<span class="number">2</span>)-y(<span class="number">1</span>))^<span class="number">2</span>);  <span class="comment">% 更新导弹与B船的距离</span></span><br><span class="line">    tan_alpha=(y(<span class="number">2</span>)-y(<span class="number">1</span>))/(x(<span class="number">2</span>)-x(<span class="number">1</span>));   <span class="comment">% 计算斜率，即tan(α)</span></span><br><span class="line">    cos_alpha=<span class="built_in">sqrt</span>(<span class="number">1</span>/(<span class="number">1</span>+tan_alpha^<span class="number">2</span>));   <span class="comment">% 利用公式：sec(α)^2 = (1+tan(α)^2)  计算出cos(α)</span></span><br><span class="line">    sin_alpha=<span class="built_in">sqrt</span>(<span class="number">1</span>-cos_alpha^<span class="number">2</span>);  <span class="comment">% 利用公式： sin(α)^2 +cos(α)^2 = 1  计算出sin(α)</span></span><br><span class="line">    x(<span class="number">1</span>)=x(<span class="number">1</span>)+<span class="number">3</span>*v*dt*cos_alpha;   y(<span class="number">1</span>)=y(<span class="number">1</span>)+<span class="number">3</span>*v*dt*sin_alpha;   <span class="comment">% 计算新的导弹的位置</span></span><br><span class="line">    k = k +<span class="number">1</span> ;  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">mod</span>(k,<span class="number">500</span>) == <span class="number">0</span>   <span class="comment">% 每刷新500次时间就画出下一个导弹和B船所在的坐标  mod(m,n)表示求m/n的余数</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">            <span class="built_in">plot</span>(x(<span class="built_in">i</span>),y(<span class="built_in">i</span>),<span class="string">&#x27;.k&#x27;</span>,<span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">hold</span> on; <span class="comment">% 不关闭图形，继续画图</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        pause(<span class="number">0.001</span>);  <span class="comment">% 暂停0.001s后再继续下面的操作</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> d&gt;<span class="number">50</span>  <span class="comment">% 导弹的有效射程为50个单位</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;导弹没有击中B船&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">% 退出循环</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> d&lt;=<span class="number">50</span> &amp; dd&lt;<span class="number">0.001</span>   <span class="comment">% 导弹飞行的距离小于50个单位且导弹和B船的距离小于0.001（表示击中）</span></span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;导弹飞行&#x27;</span>,num2str(d),<span class="string">&#x27;个单位后击中B船&#x27;</span>])</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;导弹飞行的时间为&#x27;</span>,num2str(t*<span class="number">60</span>),<span class="string">&#x27;分钟&#x27;</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h3 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h3><ul>
<li>当地点过多时（大于15）蒙特卡洛模拟将很难得到比较好的结果</li>
<li>在这种情况下，<strong>智能算法</strong>更加适用问题的求解</li>
</ul>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751016.png" style="zoom:80%;" />



<h4 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% TSP(旅行商问题)</span></span><br><span class="line"><span class="comment">% （1）预备知识</span></span><br><span class="line"><span class="built_in">plot</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">5</span>,<span class="number">10</span>],<span class="string">&#x27;-o&#x27;</span>) <span class="comment">% 画出一条线段，x范围是[1, 2] ，y范围是[5,10]</span></span><br><span class="line">text(<span class="number">1.5</span>,<span class="number">7.5</span>,<span class="string">&#x27;清风&#x27;</span>) <span class="comment">% 在坐标(1.5,7.5)处标上文本：清风</span></span><br><span class="line">close</span><br><span class="line"></span><br><span class="line"><span class="comment">% randperm函数的用法</span></span><br><span class="line">randperm(<span class="number">5</span>)  <span class="comment">% 生成1-5组成的一个随机序列(类似于洗牌的操作)</span></span><br><span class="line"><span class="comment">%      3     5     1     2     4</span></span><br><span class="line"><span class="comment">%      1     4     5     3     2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）代码求解</span></span><br><span class="line">clear;clc</span><br><span class="line"><span class="comment">% 只有10个城市的简单情况</span></span><br><span class="line">coord =[<span class="number">0.6683</span> <span class="number">0.6195</span> <span class="number">0.4</span>    <span class="number">0.2439</span> <span class="number">0.1707</span> <span class="number">0.2293</span> <span class="number">0.5171</span> <span class="number">0.8732</span> <span class="number">0.6878</span> <span class="number">0.8488</span> ;</span><br><span class="line">        <span class="number">0.2536</span> <span class="number">0.2634</span> <span class="number">0.4439</span> <span class="number">0.1463</span> <span class="number">0.2293</span> <span class="number">0.761</span>  <span class="number">0.9414</span> <span class="number">0.6536</span> <span class="number">0.5219</span> <span class="number">0.3609</span>]&#x27; ;  <span class="comment">% 城市坐标矩阵，n行2列</span></span><br><span class="line"><span class="comment">% 38个城市，TSP数据集网站(http://www.tsp.gatech.edu/world/djtour.html) 上公测的最优结果6656。</span></span><br><span class="line"> <span class="comment">% coord = [11003.611100,42102.500000;11108.611100,42373.888900;11133.333300,42885.833300;11155.833300,42712.500000;11183.333300,42933.333300;11297.500000,42853.333300;11310.277800,42929.444400;11416.666700,42983.333300;11423.888900,43000.277800;11438.333300,42057.222200;11461.111100,43252.777800;11485.555600,43187.222200;11503.055600,42855.277800;11511.388900,42106.388900;11522.222200,42841.944400;11569.444400,43136.666700;11583.333300,43150.000000;11595.000000,43148.055600;11600.000000,43150.000000;11690.555600,42686.666700;11715.833300,41836.111100;11751.111100,42814.444400;11770.277800,42651.944400;11785.277800,42884.444400;11822.777800,42673.611100;11846.944400,42660.555600;11963.055600,43290.555600;11973.055600,43026.111100;12058.333300,42195.555600;12149.444400,42477.500000;12286.944400,43355.555600;12300.000000,42433.333300;12355.833300,43156.388900;12363.333300,43189.166700;12372.777800,42711.388900;12386.666700,43334.722200;12421.666700,42895.555600;12645.000000,42973.333300];</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">size</span>(coord,<span class="number">1</span>);  <span class="comment">% 城市的数目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)  <span class="comment">% 新建一个编号为1的图形窗口</span></span><br><span class="line"><span class="built_in">plot</span>(coord(:,<span class="number">1</span>),coord(:,<span class="number">2</span>),<span class="string">&#x27;o&#x27;</span>);   <span class="comment">% 画出城市的分布散点图</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    text(coord(<span class="built_in">i</span>,<span class="number">1</span>)+<span class="number">0.01</span>,coord(<span class="built_in">i</span>,<span class="number">2</span>)+<span class="number">0.01</span>,num2str(<span class="built_in">i</span>))   <span class="comment">% 在图上标上城市的编号（加上0.01表示把文字的标记往右上方偏移一点）</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">hold</span> on <span class="comment">% 等一下要接着在这个图形上画图的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">zeros</span>(n);   <span class="comment">% 初始化两个城市的距离矩阵全为0</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>:n  </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">i</span>  </span><br><span class="line">        coord_i = coord(<span class="built_in">i</span>,:);   x_i = coord_i(<span class="number">1</span>);     y_i = coord_i(<span class="number">2</span>);  <span class="comment">% 城市i的横坐标为x_i，纵坐标为y_i</span></span><br><span class="line">        coord_j = coord(<span class="built_in">j</span>,:);   x_j = coord_j(<span class="number">1</span>);     y_j = coord_j(<span class="number">2</span>);  <span class="comment">% 城市j的横坐标为x_j，纵坐标为y_j</span></span><br><span class="line">        d(<span class="built_in">i</span>,<span class="built_in">j</span>) = <span class="built_in">sqrt</span>((x_i-x_j)^<span class="number">2</span> + (y_i-y_j)^<span class="number">2</span>);   <span class="comment">% 计算城市i和j的距离</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">d = d+d&#x27;;   <span class="comment">% 生成距离矩阵的对称的一面</span></span><br><span class="line"></span><br><span class="line">min_result = +<span class="built_in">inf</span>;  <span class="comment">% 假设最短的距离为min_result，初始化为无穷大，后面只要找到比它小的就对其更新</span></span><br><span class="line">min_path = [<span class="number">1</span>:n];   <span class="comment">% 初始化最短的路径就是1-2-3-...-n</span></span><br><span class="line">N = <span class="number">10000000</span>;  <span class="comment">% 蒙特卡罗模拟的次数</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:N  <span class="comment">% 开始循环</span></span><br><span class="line">    result = <span class="number">0</span>;  <span class="comment">% 初始化走过的路程为0</span></span><br><span class="line">    path = randperm(n);  <span class="comment">% 生成一个1-n的随机打乱的序列</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n<span class="number">-1</span>  </span><br><span class="line">        result = d(path(<span class="built_in">i</span>),path(<span class="built_in">i</span>+<span class="number">1</span>)) + result;  <span class="comment">% 按照这个序列不断的更新走过的路程这个值</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    result = d(path(<span class="number">1</span>),path(n)) + result;  <span class="comment">% 别忘了加上从最后一个城市返回到最开始那个城市的距离</span></span><br><span class="line">    <span class="keyword">if</span> result &lt; min_result  <span class="comment">% 判断这次模拟走过的距离是否小于最短的距离，如果小于就更新最短距离和最短的路径</span></span><br><span class="line">        min_path = path;</span><br><span class="line">        min_result = result;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">min_path</span><br><span class="line">min_path = [min_path,min_path(<span class="number">1</span>)];   <span class="comment">% 在最短路径的最后面加上一个元素，即第一个点（我们要生成一个封闭的图形）</span></span><br><span class="line">n = n+<span class="number">1</span>;  <span class="comment">% 城市的个数加一个（紧随着上一步）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n<span class="number">-1</span> </span><br><span class="line">     <span class="built_in">j</span> = <span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">    coord_i = coord(min_path(<span class="built_in">i</span>),:);   x_i = coord_i(<span class="number">1</span>);     y_i = coord_i(<span class="number">2</span>); </span><br><span class="line">    coord_j = coord(min_path(<span class="built_in">j</span>),:);   x_j = coord_j(<span class="number">1</span>);     y_j = coord_j(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">plot</span>([x_i,x_j],[y_i,y_j],<span class="string">&#x27;-&#x27;</span>)    <span class="comment">% 每两个点就作出一条线段，直到所有的城市都走完</span></span><br><span class="line">    pause(<span class="number">0.5</span>)  <span class="comment">% 暂停0.5s再画下一条线段</span></span><br><span class="line">    <span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>





<h3 id="估计自然常数"><a href="#估计自然常数" class="headerlink" title="估计自然常数"></a>估计自然常数</h3><h4 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  作业参考答案：蒙特卡罗的方法去估计自然常数e</span></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% (1)randperm函数的用法</span></span><br><span class="line">randperm(<span class="number">5</span>)  <span class="comment">% 生成1-5组成的一个随机序列</span></span><br><span class="line"><span class="comment">%      3     5     1     2     4</span></span><br><span class="line"><span class="comment">%      1     4     5     3     2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% (2)find函数的用法 （第一期视频第一讲）</span></span><br><span class="line"><span class="comment">% 假设a是一个向量，那么find(a)可以用来返回这个向量中非零元素的下标，如果a中所有元素都为0，则返回空值</span></span><br><span class="line"><span class="built_in">find</span>([<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">-5</span>])  <span class="comment">%      1     2     3     5     7</span></span><br><span class="line"><span class="built_in">find</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])  <span class="comment">%   空的 1×0 double 行矢量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% (3) 矩阵（或向量）和常量的比较运算可返回逻辑矩阵（或向量）(元素全为0和1)</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">-5</span>] &gt; <span class="number">0</span>      <span class="comment">%    1   1   1   0   1   0   0</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">-5</span>] == <span class="number">0</span>    <span class="comment">%    0   0   0   1   0   1   0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% (4) isempty(A)函数可以用来判断A是否为空, 如果A为空， isempty(A) 返回逻辑值1(true)，否则返回逻辑值0(false)。</span></span><br><span class="line"><span class="built_in">isempty</span>(<span class="built_in">find</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]))   <span class="comment">%    1</span></span><br><span class="line"><span class="built_in">isempty</span>(<span class="built_in">find</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]))   <span class="comment">%    0</span></span><br><span class="line"><span class="built_in">isempty</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])  <span class="comment">% 注意，别搞错啦，它不是空矩阵（空矩阵是指里面没有元素）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）参考答案</span></span><br><span class="line">clear;clc</span><br><span class="line">tic  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line">n = <span class="number">1000000</span>;  <span class="comment">% 蒙特卡洛的次数（理论上n取得越大，计算出来的结果越精确）</span></span><br><span class="line">m = <span class="number">0</span>;   <span class="comment">% 每个人拿到的都不是自己卡片的次数（频数）</span></span><br><span class="line">people = <span class="number">100</span>;   <span class="comment">% 假设一共有100个人玩这个游戏 （任给的）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: n  <span class="comment">% 开始循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(<span class="built_in">find</span>(randperm(people) - [<span class="number">1</span>:people] == <span class="number">0</span>))  <span class="comment">% 如果每个人拿到的都不是自己的卡片</span></span><br><span class="line">        m = m + <span class="number">1</span>;  <span class="comment">% 那么次数就加1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">frequency = m / n;  <span class="comment">% 每个人拿到的都不是自己卡片的频率（概率）</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;自然常数e的蒙特卡罗模拟值为：&#x27;</span>, num2str(<span class="number">1</span> / frequency)])  <span class="comment">% 注：自然常数真实值约为2.7182</span></span><br><span class="line">toc  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br></pre></td></tr></table></figure>



<h3 id="武器升级"><a href="#武器升级" class="headerlink" title="武器升级"></a>武器升级</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202503011751167.png" style="zoom:80%;" />



<h4 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%  蒙特卡罗解决武器升级问题</span></span><br><span class="line"><span class="comment">% 现在有一把神器，初始为1级，可免费领取（即价值为0），可花费金币对其升级，每次10000金币，最多升到5级。</span></span><br><span class="line"><span class="comment">% 给定一个升级的概率表(见讲义)，问：5级神器价值多少金币？（即升级到5级神器平均的花费）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% 以一定的概率产生随机数  randsrc(m,n,[alphabet; prob])</span></span><br><span class="line"><span class="comment">% m和n表示生成的随机数矩阵的行数和列数</span></span><br><span class="line"><span class="comment">% alphabet表示需要产生的随机数的数字，用一个行向量表示</span></span><br><span class="line"><span class="comment">% prob表示这些数字出现的概率大小，用一个行向量表示，向量长度和alphabet向量要完全相同, 且这些概率的和要为1</span></span><br><span class="line"><span class="comment">% 比如：要产生1、4、 6这三个数。它们分别出现的概率为 0.1、0.2、0.7，如何设计程序使得按照这个概率产生10个随机数呢？</span></span><br><span class="line">alphabet = [<span class="number">1</span> <span class="number">4</span> <span class="number">6</span>]; prob = [<span class="number">0.1</span> <span class="number">0.2</span> <span class="number">0.7</span>];</span><br><span class="line">randsrc(<span class="number">10</span>,<span class="number">1</span>,[alphabet; prob])</span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）参考答案</span></span><br><span class="line"><span class="comment">% clear;clc</span></span><br><span class="line">tic  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br><span class="line"><span class="comment">% 升级的成功率储存在success矩阵中，以第一行和第三行为例，表格的解释：</span></span><br><span class="line"><span class="comment">%  1级武器强化时，有20%概率升到2级，10%概率升到3级，5%概率升到4级，65%概率不变。</span></span><br><span class="line"><span class="comment">%  3级武器强化时，10%概率跌到1级，20%概率跌到2级，20%概率升到4级，10%概率升到5级</span></span><br><span class="line">success = [<span class="number">0.65</span> <span class="number">0.2</span>  <span class="number">0.1</span>  <span class="number">0.05</span>  <span class="number">0</span>;</span><br><span class="line">                 <span class="number">0.25</span> <span class="number">0.4</span>  <span class="number">0.2</span>  <span class="number">0.1</span>    <span class="number">0.05</span>;</span><br><span class="line">                 <span class="number">0.1</span>   <span class="number">0.2</span>  <span class="number">0.4</span>  <span class="number">0.2</span>    <span class="number">0.1</span>;</span><br><span class="line">                 <span class="number">0</span>      <span class="number">0.1</span>  <span class="number">0.3</span>  <span class="number">0.4</span>    <span class="number">0.2</span>] ;</span><br><span class="line">n = <span class="number">10000</span>;  <span class="comment">% 蒙特卡罗模拟的次数</span></span><br><span class="line">MONEY = <span class="built_in">zeros</span>(n,<span class="number">1</span>);  <span class="comment">% 初始化用来存储每次蒙特卡罗计算出来的表示强化费用的向量</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    rank = <span class="number">1</span>; <span class="comment">% 武器的初始等级</span></span><br><span class="line">    money = <span class="number">0</span>;  <span class="comment">%花费的钱数，初始化为0</span></span><br><span class="line">    alphabet = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>];   <span class="comment">% 用来表示五个等级</span></span><br><span class="line">    <span class="keyword">while</span> rank ~= <span class="number">5</span>  <span class="comment">% 只要等级不是5级， 就一直循环下去</span></span><br><span class="line">        prob =success(rank,:);    <span class="comment">% 令生成随机数的概率为第rank行</span></span><br><span class="line">        rank = randsrc(<span class="number">1</span>,<span class="number">1</span>,[alphabet; prob]);   <span class="comment">% 生成一个在1-5中的随机数，表示强化后的等级</span></span><br><span class="line">        money = money + <span class="number">10000</span>;  <span class="comment">% 更新强化的费用</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    MONEY(<span class="built_in">i</span>) = money;  <span class="comment">% 将这次蒙特卡罗的结果保存到MONEY向量中</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;将武器升级到5级的平均花费为：&#x27;</span>,num2str(<span class="built_in">mean</span>(MONEY))])</span><br><span class="line">toc  <span class="comment">%计算tic和toc中间部分的代码的运行时间</span></span><br></pre></td></tr></table></figure>



<h3 id="选择决策方案模拟（换灯泡问题）"><a href="#选择决策方案模拟（换灯泡问题）" class="headerlink" title="选择决策方案模拟（换灯泡问题）"></a>选择决策方案模拟（换灯泡问题）</h3><h4 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 选择决策方案的模拟</span></span><br><span class="line"><span class="comment">% 某设备上安装有四只型号规格完全相同的电子管，已知电子管寿命为1000--2000小时之间的均匀分布(假定为整数)。</span></span><br><span class="line"><span class="comment">% 当电子管损坏时有两种维修方案，一是每次更换损坏的那一只；二是当其中一只损坏时四只同时更换。</span></span><br><span class="line"><span class="comment">% 已知更换时间为换一只时需1小时，4只同时换为2小时。</span></span><br><span class="line"><span class="comment">% 更换时机器因停止运转每小时的损失为20元，又每只电子管价格10元，</span></span><br><span class="line"><span class="comment">% 试用模拟方法决定哪一个方案经济合理？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （1）预备知识</span></span><br><span class="line"><span class="comment">% randi([a,b],m,n)  随机生成m*n的矩阵，矩阵中的每个元素都是[a,b]中的随机整数</span></span><br><span class="line">randi([<span class="number">1</span>, <span class="number">5</span>],<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">randi([<span class="number">1</span>, <span class="number">5</span>])  <span class="comment">% 不写m*n代表只生成1个随机数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% find函数的用法</span></span><br><span class="line"><span class="comment">% find函数的用法在第一期视频：层次分析法那一节讲过，我们当时找最大特征值的位置</span></span><br><span class="line">a = [<span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span>];</span><br><span class="line"><span class="built_in">find</span>(a)  <span class="comment">% 找到a中所有非0元素的位置</span></span><br><span class="line"><span class="built_in">find</span>(a == <span class="number">5</span>)  <span class="comment">% 找到a中等于5的元素的位置</span></span><br><span class="line"><span class="built_in">find</span>(a == <span class="number">5</span>,<span class="number">1</span>)  <span class="comment">% 找到a中第一个等于5的元素的位置</span></span><br><span class="line"><span class="built_in">find</span>(a == <span class="built_in">min</span>(a))   <span class="comment">% 找到a中最小元素的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% （2）代码部分</span></span><br><span class="line">clear;clc</span><br><span class="line">T = <span class="number">100000000</span>;   <span class="comment">% T表示模拟的总时间（单位为小时）</span></span><br><span class="line">t = <span class="number">0</span>;   <span class="comment">% 初始化当前时刻为0小时</span></span><br><span class="line">c1 = <span class="number">0</span>; c2 = <span class="number">0</span>;  <span class="comment">% 初始化两种方案的总花费都为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  方案一</span></span><br><span class="line">life = randi([<span class="number">1000</span>,<span class="number">2000</span>],<span class="number">1</span>,<span class="number">4</span>);  <span class="comment">% 随机生成四个电子管的寿命，假设为整数</span></span><br><span class="line"><span class="keyword">while</span> t &lt; T  <span class="comment">% 只要现在的时刻没有超过总时刻，就不断循环下去</span></span><br><span class="line">    result = <span class="built_in">min</span>(life);  <span class="comment">% 找出寿命最短的那一个电子管的寿命</span></span><br><span class="line">    t = t+result+<span class="number">1</span>;  <span class="comment">% 现在的时间更改到有电子管损坏的时刻（加上1表示更换电子管需要花费的时间）</span></span><br><span class="line">    c1 = c1 + <span class="number">20</span> * <span class="number">1</span> +<span class="number">10</span>;  <span class="comment">% 更新方案一的花费 </span></span><br><span class="line">    k = <span class="built_in">find</span>(life == result,<span class="number">1</span>);   <span class="comment">% 找到哪一个电子管是坏的</span></span><br><span class="line">    life = life - result <span class="number">-1</span>; <span class="comment">% 更新所有电子管的寿命（这里不减去1也是可以的，减少了1也无所谓，对结果的影响很小）    </span></span><br><span class="line">    life(k) = randi([<span class="number">1000</span>,<span class="number">2000</span>]);  <span class="comment">% 把坏掉的那个电子管的寿命重置</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  方案二</span></span><br><span class="line">t = <span class="number">0</span>;   <span class="comment">% 初始化当前时刻为0小时</span></span><br><span class="line"><span class="keyword">while</span> t &lt; T  <span class="comment">% 只要现在的时刻没有超过总时刻，就不断循环下去</span></span><br><span class="line">    life = randi([<span class="number">1000</span>,<span class="number">2000</span>],<span class="number">1</span>,<span class="number">4</span>); <span class="comment">% 随机生成四个电子管的寿命，假设为整数</span></span><br><span class="line">    result = <span class="built_in">min</span>(life); <span class="comment">% 找出寿命最小的那一个电子管的寿命</span></span><br><span class="line">    t = t+result+<span class="number">2</span>;  <span class="comment">% 现在的时间更改到有电子管损坏的时刻（加上2表示更换所有电子管需要花费的时间）</span></span><br><span class="line">    c2 =c2 + <span class="number">20</span> * <span class="number">2</span> +<span class="number">40</span>;  <span class="comment">% 更新方案二的花费 </span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 两种方案的花费</span></span><br><span class="line">c1</span><br><span class="line">c2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义博客网站搭建教程（2）</title>
    <url>/2025/03/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B2/</url>
    <content><![CDATA[<h1 id="自定义博客网站搭建教程（2）"><a href="#自定义博客网站搭建教程（2）" class="headerlink" title="自定义博客网站搭建教程（2）"></a>自定义博客网站搭建教程（2）</h1><p>上一篇内容讲到了如何搭建一个博客网站</p>
<p>这一篇内容来讲一下如何在本地撰写博客文稿</p>
<h2 id="后台撰写"><a href="#后台撰写" class="headerlink" title="后台撰写"></a>后台撰写</h2><p>你可以直接在博客后台撰写文档，它的富文本编辑器的用法摸索一下就会了很简单</p>
<p>这里给出地址：<a href="https://i.cnblogs.com/posts/edit">点击这里</a></p>
<h2 id="本地撰写"><a href="#本地撰写" class="headerlink" title="本地撰写"></a>本地撰写</h2><p>这里需要你下载<strong>VSCode</strong>这款源代码编辑器，开发过的伙伴肯定都用过，没用过也没关系，浏览器搜索下载即可</p>
<p>然后你需要在VSCode扩展中安装插件<strong>博客园 cnblogs 客户端</strong></p>
<p>如图：</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006212208247.png" alt="image-20241006212208247"></p>
<p>使用文档在这里：<a href="https://marketplace.visualstudio.com/items?itemName=cnblogs.vscode-cnb">点击这里</a></p>
<p>文档中有详细的使用方法</p>
<p>另外，你还需要添加一个用于编写markdown的插件，如图：</p>
<p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006213723067.png" alt="image-20241006213723067"></p>
<p>或者使用<strong>typora（一款专门编写markdown的软件）</strong>这款软件编写markdown文件，然后通过VSCode打开是一样的</p>
<p>这里只给出重要的几个步骤和方法</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>首先你需要登录，直接账号密码登录即可</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006212532831.png" alt="image-20241006212532831" style="zoom:50%;" />



<h3 id="创建博文随笔"><a href="#创建博文随笔" class="headerlink" title="创建博文随笔"></a>创建博文随笔</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006212804348.png" alt="image-20241006212804348"></p>
<h3 id="创建本地文件并关联博文"><a href="#创建本地文件并关联博文" class="headerlink" title="创建本地文件并关联博文"></a>创建本地文件并关联博文</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006212909936.png" alt="image-20241006212909936" style="zoom:50%;" />

<h3 id="撰写博文并上传"><a href="#撰写博文并上传" class="headerlink" title="撰写博文并上传"></a>撰写博文并上传</h3><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006213016151.png" alt="image-20241006213016151" style="zoom:67%;" />

<h3 id="上传博文引用的图片"><a href="#上传博文引用的图片" class="headerlink" title="上传博文引用的图片"></a>上传博文引用的图片</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006213350793.png" alt="image-20241006213350793"></p>
<p>你也可以在typora中配置自己的图床，没有使用过typora的朋友不需要了解。这样就不需要上传图片啦</p>
<p>关于图床的配置可以看这篇：<a href="https://zhuanlan.zhihu.com/p/142013180">点击这里</a></p>
<p>也可以开启自动上传功能，如图：</p>
<img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006214415354.png" alt="image-20241006214415354" style="zoom:80%;" />





<h3 id="最后发布"><a href="#最后发布" class="headerlink" title="最后发布"></a>最后发布</h3><p><img src="https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/image-20241006213142410.png" alt="image-20241006213142410"></p>
<p>最后点击确定即可发布成功，你就可以在你的博客界面上看到相应内容了</p>
<p>其他相关操作你可以通过文档学习</p>
<p>有什么疑问欢迎评论区评论或直接私信</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
