{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"938fbdffafbab977af55eb51b386103c322cd021","modified":1740735109446},{"_id":"source/_posts/123.md","hash":"00b494dc181cd7558c542eae2d6b3c00cd69dcee","modified":1740744905076},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1740708285640},{"_id":"source/_posts/213124234543.md","hash":"0ba03159f826aea505227c2cb0170cda8f149280","modified":1740758763962},{"_id":"source/_posts/second-test.md","hash":"17bc7efe8e6c3b9cfcb09301a212a169038d2782","modified":1740718187927},{"_id":"source/_posts/test.md","hash":"d6988606366a94502326e1f09a59908a699660ad","modified":1740717014504},{"_id":"source/categories/index.md","hash":"93d813b4419a16ebf79d179ae28ce7c279813b74","modified":1740741962600},{"_id":"source/link/index.md","hash":"1f5fa8c42f2a4e74cd6d513aca1861a1edd5dfd4","modified":1740742015882},{"_id":"source/_posts/测试.md","hash":"184f833ff5c52f71978e51c8c50486d72188f75e","modified":1740743100698},{"_id":"source/music/index.md","hash":"7be50eb9face959efca57c631a86b4be7bc9a573","modified":1740755465921},{"_id":"source/tags/index.md","hash":"a0670aeb8f983e133bfcf5ff3d3dbbabee6fc929","modified":1740741162157},{"_id":"source/_posts/2134.md","hash":"e259d86e278e57a95be23b681499f963447eb3fc","modified":1740751314796},{"_id":"themes/butterfly/.gitignore","hash":"1a22e577d9900e645b55d40d210e87c2a0d1221d","modified":1740732865248},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1740732865248},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1740732865248},{"_id":"themes/butterfly/_config.yml","hash":"43a79809413d030868af658a08ad62d12c938cf8","modified":1740760195320},{"_id":"themes/butterfly/package.json","hash":"9d57e4ef1e79d66d3561f2ce27c9a7083e34eadb","modified":1740732865276},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1740732865248},{"_id":"themes/butterfly/plugins.yml","hash":"772322fd6b31cc785b3d376f44e9e953f501cc32","modified":1740732865276},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1740732865246},{"_id":"themes/butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1740732865250},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1740732865249},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1740732865250},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1740732865250},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1740732865250},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1740732865250},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1740732865251},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1740732865251},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1740732865250},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1740732865275},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1740732865246},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1740732865276},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1740732865276},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1740732865276},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1740732865247},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1740732865247},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1740732865247},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1740732865247},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1740732865251},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1740732865252},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1740732865252},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1740732865256},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1740732865296},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1740732865259},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1740732865259},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1740732865295},{"_id":"themes/butterfly/source/css/var.styl","hash":"7dd98b0491ae97b1bf2b4c6b025c04a9eca35e5f","modified":1740732865295},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1740732865260},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1740732865300},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1740732865298},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1740732865299},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1740732865301},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1740732865298},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1740732865277},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1740732865301},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1740732865276},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1740732865277},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1740732865277},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1740732865278},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1740732865277},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1740732865278},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1740732865278},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1740732865278},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1740732865278},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1740732865279},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1740732865279},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1740732865280},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"088493dca2a157b49d232db482ef916207240b46","modified":1740732865279},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1740732865279},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1740732865280},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1740732865280},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1740732865281},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1740732865280},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1740732865281},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1740732865281},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1740732865281},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1740732865282},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1740732865282},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1740732865282},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1740732865282},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1740732865283},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1740732865283},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1740732865282},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1740732865283},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1740732865252},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1740732865253},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1740732865253},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1740732865253},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1740732865253},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1740732865255},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1740732865254},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1740732865254},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1740732865254},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1740732865255},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1740732865255},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1740732865255},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1740732865256},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1740732865257},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1740732865257},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1740732865257},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1740732865253},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1740732865257},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1740732865256},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1740732865258},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1740732865258},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1740732865255},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1740732865258},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1740732865259},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1740732865258},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1740732865258},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1740732865259},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1740732865259},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1740732865270},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1740732865267},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"e9b3d4d20e69e5051dded50c803c212946d443c0","modified":1740732865270},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"a11455e294d32d2795eb1ee9d54a2906f064a1cb","modified":1740732865272},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1740732865272},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1740732865273},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1740732865260},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1740732865273},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1740732865273},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1740732865273},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1740732865273},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1740732865274},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1740732865274},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1740732865274},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1740732865274},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1740732865274},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1740732865275},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1740732865284},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1740732865275},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1740732865275},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1740732865275},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"814053dd7499284a5c185382eb43c8f8db25baf2","modified":1740732865284},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1740732865284},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1740732865286},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1740732865286},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1740732865286},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1740732865286},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1740732865287},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1740732865287},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1740732865287},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1740732865287},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1740732865287},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1740732865288},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1740732865288},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1740732865289},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1740732865289},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1740732865288},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1740732865290},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1740732865290},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1740732865290},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1740732865290},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1740732865288},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1740732865290},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1740732865288},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"93fe5a7ed83ceb11b888f946be94cf1ee7648f8c","modified":1740732865289},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1740732865291},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1740732865289},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1740732865292},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1740732865291},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1740732865292},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1740732865291},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1740732865291},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1740732865292},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1740732865292},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1740732865293},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1740732865295},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1740732865292},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1740732865293},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1740732865293},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"dfbce718d528dd241664ff8fd28b37da92c29cef","modified":1740732865293},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1740732865300},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1740732865294},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"00b4073dbe0687a80e6d58c104c6f59ec01a84fd","modified":1740732865260},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1740732865260},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1740732865261},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1740732865261},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1740732865261},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1740732865261},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1740732865300},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1740732865261},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1740732865262},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1740732865263},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1740732865262},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1740732865263},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1740732865262},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1740732865263},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1740732865264},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1740732865263},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1740732865264},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1740732865264},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1740732865264},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1740732865265},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1740732865264},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1740732865265},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1740732865265},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1740732865265},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1740732865267},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1740732865266},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1740732865266},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1740732865267},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1740732865266},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1740732865268},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1740732865266},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1740732865268},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1740732865267},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1740732865268},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1740732865268},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1740732865269},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1740732865269},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1740732865271},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1740732865269},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1740732865269},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1740732865270},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1740732865271},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1740732865270},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1740732865270},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1740732865270},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1740732865271},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1740732865271},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"5c944052280c5ed046d2cfeb54b0da8876af0ec6","modified":1740732865272},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1740732865285},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1740732865272},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1740732865284},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1740732865272},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1740732865285},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1740732865285},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1740732865285},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1740732865298},{"_id":"public/search.xml","hash":"474c07ccc11f157a34541c0a7a54fed52757af9f","modified":1740760214791},{"_id":"public/link/index.html","hash":"ad557a7fcd87d33451cace4aab1f916c12013b1e","modified":1740760214791},{"_id":"public/tags/index.html","hash":"3a7b38681bc62e3b79fca1cdb6a41361ac66e5a3","modified":1740760214791},{"_id":"public/2025/02/28/hello-world/index.html","hash":"fb1e9875719e2b9503fb483c560ad1e532033a20","modified":1740760214791},{"_id":"public/2025/02/28/test/index.html","hash":"88f671cf8f5e70892e71c3a844c0e99a08c42e0e","modified":1740760214791},{"_id":"public/2025/02/28/second-test/index.html","hash":"53fc03f2c372bce2245b9be03ed44d1f82396a3a","modified":1740760214791},{"_id":"public/2025/02/28/测试/index.html","hash":"dbf0cc09600e6d4961fd68812c07f00a39c9725c","modified":1740760214791},{"_id":"public/categories/index.html","hash":"46e6cb46859604e7aab7ba87affb6cc2d10c6c8a","modified":1740760214791},{"_id":"public/2025/02/28/123/index.html","hash":"5428480aa23d011d4acbece978eb6099e8a6df12","modified":1740760214791},{"_id":"public/2025/02/28/2134/index.html","hash":"d784599564d6f5b276ea19ee905aea015125097a","modified":1740760214791},{"_id":"public/music/index.html","hash":"2b2abc9357a0f690c99034fbfbeb3f579102edfa","modified":1740760214791},{"_id":"public/2025/03/01/213124234543/index.html","hash":"ec9e815decd8e366e95f428140565ddeee8df0bb","modified":1740760214791},{"_id":"public/archives/index.html","hash":"7fbc6b1659af9d532e6e26add93690650c6cb23c","modified":1740760214791},{"_id":"public/archives/2025/index.html","hash":"71c317604501e88e0744e08c0a7e8f8f06eb6bd8","modified":1740760214791},{"_id":"public/archives/2025/02/index.html","hash":"777a9f9cc21d8fa3702534b1c4fdfea5718466f2","modified":1740760214791},{"_id":"public/archives/2025/03/index.html","hash":"f16e57aa99df61d7f4dd01eeeee33c81124e7ffe","modified":1740760214791},{"_id":"public/categories/Java/index.html","hash":"27bb45f3410c5ccd26631a3b86f887900e5f779d","modified":1740760214791},{"_id":"public/index.html","hash":"38315c6a7eb6f1d22f8fc6b912419a353f169570","modified":1740760214791},{"_id":"public/categories/web/index.html","hash":"19216e2c74c7cd3c4d449c6acf38f6dcca190a37","modified":1740760214791},{"_id":"public/categories/web/Java/index.html","hash":"173457688f57bdb64c4537f9afa227f672a68dff","modified":1740760214791},{"_id":"public/tags/算法/index.html","hash":"03f74b2f0744c9f0bb98b96aa26f59274e92c6e0","modified":1740760214791},{"_id":"public/tags/学习/index.html","hash":"ae24b7211e41508d3be70113c350d0487ff90f6c","modified":1740760214791},{"_id":"public/tags/Python/index.html","hash":"afab349ca2a2c653086e0c7a1ed215d3617dceb6","modified":1740760214791},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1740760214791},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1740760214791},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1740760214791},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1740760214791},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1740760214791},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1740760214791},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1740760214791},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1740760214791},{"_id":"public/css/index.css","hash":"b6f0beb8b914b280054f651bea303b24ebe920bb","modified":1740760214791},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1740760214791},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1740760214791},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1740760214791}],"Category":[{"name":"Java","_id":"cm7ozoqt30009doupe7aj8w71"},{"name":"web","_id":"cm7ozoqt7000jdoup2sevcyx9"},{"name":"Java","parent":"cm7ozoqt7000jdoup2sevcyx9","_id":"cm7ozoqt7000kdoupg1qtedr6"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"友情链接","date":"2025-02-28T09:30:17.000Z","type":"link","top_img":"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850640.jpg","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2025-02-28 17:30:17\ntype: 'link'\ntop_img: https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850640.jpg\n---\n","updated":"2025-02-28T11:26:55.882Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm7ozoqsu0000douph5z28hva","content":"","excerpt":"","more":""},{"title":"分类","date":"2025-02-28T09:28:45.000Z","type":"categories","top_img":"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850083.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-02-28 17:28:45\ntype: 'categories'\ntop_img: https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850083.jpg\n---\n","updated":"2025-02-28T11:26:02.600Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm7ozoqsz0002doup62y4gvie","content":"","excerpt":"","more":""},{"title":"标签","date":"2025-02-27T16:00:00.000Z","type":"tags","orderby":"random","order":1,"top_img":"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850288.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-02-28 00:00:00\ntype: 'tags'\norderby: random\norder: 1\ntop_img: https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850288.jpg\n---\n","updated":"2025-02-28T11:12:42.157Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm7ozoqt10004doup90yoejz0","content":"","excerpt":"","more":""},{"title":"music","date":"2025-02-28T13:50:21.000Z","top_img":"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850288.jpg","aplayer":true,"_content":"\n\n\n{% meting \"2685449094\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:auto\" \"theme:#ad7a86\"%}\n\n","source":"music/index.md","raw":"---\ntitle: music\ndate: 2025-02-28 21:50:21\ntop_img: https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502281850288.jpg\naplayer: true\n---\n\n\n\n{% meting \"2685449094\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:auto\" \"theme:#ad7a86\"%}\n\n","updated":"2025-02-28T15:11:05.921Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm7ozoqt20006doup567h5nbw","content":"\n    <div id=\"aplayer-fTwfuhkF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2685449094\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n\n","excerpt":"","more":"\n    <div id=\"aplayer-fTwfuhkF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2685449094\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n\n"}],"Post":[{"title":"123","date":"2025-02-28T12:13:58.000Z","_content":"\n# 在线代码测评系统\n\n## 开源地址\n\nhttps://gitee.com/xj-oj/oj-project/tree/master\n\n## 开发环境\n\n- Java版本：Jdk 17\n- 数据库：MySQL 8.0、Redis 6.2.6\n- 开发工具 ：IntelliJ IDEA、Maven 3.8.6\n\n\n\n## 采用技术\n\n- Spring Boot、MyBatis-Plus、redis\n- vue3、Axios、Element Plus\n  ![img.png](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014222.png)\n\n## 部署运行环境\n\n- Windows\n\n## 系统架构设计\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014199.gif)\n\n- 视图层包括网站主站点和后台管理系统，主站点负责向用户提供服务，是用户看到的系统页面。用户可以在上面进行登录注册、个人信息管理、查看题目、编写代码、提交代码、查看测评状态、查看排名、参加竞赛、查看竞赛结果以及发布文章等主要操作。后台管理系统是专门给系统管理员使用的管理后台，管理员可以在上面进行用户管理、题目管理、竞赛管理、日志管理以及查看系统运行状态等操作。视图层通过Ajax与后端接口进行数据交互。\n- 网络接口层的主要职责是接收用户的请求，根据请求参数的不同，做出不同的响应，响应数据的格式是JSON数据。\n- 业务层包括用户服务、题目服务、竞赛服务、代码服务、测评服务、文件服务、文章服务等功能模块。业务层主要是实现系统功能的代码部分，通过数据映射实现和数据层的交互，从而实现数据的持久化。\n- 数据层是系统最底层，也是最重要的一层，系统中所有的数据均保存在数据层的MySQL服务和Redis服务中。\n\n## 系统总体设计\n\n本系统主要分为用户和管理员两个主要的模块。用户模块主要包括登录注册、个人中心、题目浏览、代码评测、竞赛参与、文章发布等多个子功能模块。管理员的功能模块包括用户管理、题目管理、测评管理、竞赛管理、文章管理等。本系统详细的功能模块划分图如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014210.png)\n\n### 代码测评流程图\n\n![image-20230919193056867](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014220.png)\n\n测评结果设计：\n\nCompile Error：编译错误。用户提交的代码中有语法错误，无法通过编译器检查。\n\nPartial Accepted：部分测评用例通过。表面用户提交的源代码可以通过部分测评用例，还有一部分测评用例无法通过，需要用户考虑其他的可能性。\n\nAccepted：通过。用户提交的源代码经过测试后通过了所有的测评用例，表明用户解决了该题目。\n\nWrong Answer：答案错误。表示用户提交的源代码的输出结果错误，没有通过任何一个测评用例。\n\nRuntime Error：运行时错误。程序在运行时异常终止，可能的原因有段错误、除0、栈溢出或数组越界等多种错误。\n\nTime Limit Exceeded：超时。用户提交的源代码在测试运行时超出了题目设定的最大运行时间限制，不符合题目的要求。\n\nMemory Limit Exceeded：内存超限。程序在运行时使用的内存空间超出题目设定的内存限制。\n\nSystem Error：系统错误。在进行代码测评时，测评机器发送错误，这个错误与系统相关。\n\n### 编译器设置\n\n\n| 名称       | 版本             | 编译命令                                    |\n| ---------- | ---------------- | ------------------------------------------- |\n| C          | GCC  4.8.5       | /usr/bin/gcc  {src_path} -o {exe_path}      |\n| C++        | G++  4.8.5       | /usr/bin/g++  {src_path} -o {exe_path}      |\n| Java       | JDK  17.0.6      | /usr/bin/javac  {src_path} -d {exe_path}    |\n| Python     | Python  3.6.8    | /usr/bin/python3  {src_path}                |\n| Golang     | Golang  1.20.2   | /usr/bin/go  build -o {exe_path} {src_path} |\n| JavaScript | Node.js  16.19.1 | /usr/bin/node  {src_path}                   |\n\n## 主要功能实现\n\n(一) 用户模块\n\n1) 登录注册\n\n注册和登录是系统中其他功能的使用前提，进入注册页面后，用户需要输入用户名、电子邮箱、邮箱验证码、密码和确认密码，只有邮箱验证码和Redis缓存中保存的一致、邮箱未注册、两次输入的密码一致，用户才能注册成功。系统注册页面如图4.1所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014203.png)\n\n2) 个人中心\n\n个人中心主要用于向用户展示自己的个人信息。同时用户还可以进行个人资料的编辑和重置密码等操作。如图所示是系统个人中心页面。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014224.png)\n\n3) 查看题目\n\n用户可以在题目列表可以分页查看题目列表，包括题目名称、难度、提交次数、通过率等等信息。题目详情页可以查看题目详细信息和进行代码提交。如图4.3为题目列表页，图为题目详情页。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014727.png)\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014681.png)\n\n4) 代码测评\n\n代码测评在使用后在如上图4.4页面提交代码后进行的。代码测评的流程如下：\n\n1. 用户提交代码；\n2. 进行代码安全性检查，检查是否有危害系统运行的代码输入；\n3. 编译代码（不需要编译的语言没有这一步）；\n4. 逐一运行测评用例，判断输出结果是否和正确结果一致；\n5. 所有测试用例运行完成后，将结果返回给用户。\n\n5) 发布文章\n\n发布文章页面中用户需要填写标题、分类、正文等内容。发布文章页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014699.png)\n\n(二) 管理员模块\n\n1) 用户管理\n\n管理员可以对系统中的注册用户进行管理。用户管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014735.png)\n\n2) 题目管理\n\n管理员可以对当前系统中的题目进行管理。题目管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014759.png)\n\n3) 测评管理\n\n管理员进入测评管理模块后，可以查看题目测评记录。当然这些测评记录都是用户提交代码进行测评时生成的。测评管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014753.png)\n\n4) 竞赛管理\n\n管理员是系统中唯一可以对竞赛进行管理的角色。竞赛管理包括查看、创建和删除等操作。创建竞赛时需要设定竞赛的开始和结束时间。竞赛管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014181.png)\n\n5) 文章管理\n\n管理员可以对文章进行管理。实现了查看文章列表、删除文章等功能。文章管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014184.png)\n\n# 开发过程\n\n## 整体架构\n\n- 后端服务\n- 后端管理界面\n- 前端显示界面\n\n### 后端服务\n\n#### 技术选型\n\n- SpringBoot\n- MySql\n- Redis\n\n### 后端管理界面\n\n#### 技术选型\n\n- Html、Css、 JavaScript\n- thymeleaf\n- 组件库 [Layui](https://layui.dev/docs/2/base.html)\n\n### 前端显示界面\n\n#### 技术选型\n\n- Vue\n- 组件库 [Element-plus](https://element-plus.org/zh-CN/component/overview.html)\n- 文本编辑器 TODO\n\n## 人员分工（垂直分工）\n\n> 项目整体架构，有三端，前端显示界面，后端管理界面，后端代码逻辑\n>\n> 分工方式为，根据业务功能，完成相应三端代码的编写以及MySql表的设计\n>\n> **每个模块都会用到JavaScript、Css、Html、Vue、Java、Sql、MybatisPlus等技术**\n>\n> **另外每个模块均由自己完成单元测试**\n\n### 代码执行\n\n- 各个语言代码的执行逻辑环境和代码编写（C、C++、Python、Java、Go已经实现）\n- 前端首页、关于界面\n- 前端、后端代码脚手架编写\n- 代码执行逻辑解耦、完成代码沙箱\n- 代码执行安全管理\n- 接口文档接入\n- 功能测试\n\n使用到的技术：FileUtils、Runtime、Vue3、Element-Plus、thymeleaf、knife4j\n\n### 题目测评\n\n- 测评结果（Evaluation模块内容）\n- 解决跨域问题\n- 完成腾讯cos服务的接入\n- 代码编辑界面\n\n使用到的技术：\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014289.png\" alt=\"image-20240924112142857\" style=\"zoom:50%;\" />\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014305.png\" alt=\"image-20240924112223751\" style=\"zoom:50%;\" />\n\n代码编辑器 https://github.com/koca/vue-prism-editor/blob/master/README.md\n\n### 题目管理\n\n- 题目管理\n- 题目创建、题目测试用例添加\n\n使用到的技术：无特别技术\n\n### 文章管理\n\n- 博客创建\n- 个人对自己创建博客的管理（编辑和删除）\n- 博客的浏览\n- 博客的搜索\n\n使用到的技术：\n\n富文本编辑器 wangEditor\t文档地址https://www.wangeditor.com/\n\n### 登录逻辑\n\n- 前端显示界面登录\n- 后端管理界面登录、\n- 邮箱验证注册\n- 个人信息简介\n\n使用到的技术：\n\n前端登录：Cookies、Redis（不必要可以不讲）\n\n后端登录：拦截器 LoginInterceptor、Cookies\n\n邮箱配置：\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014471.png\" alt=\"image-20240924113300957\" style=\"zoom:50%;\" />\n\n### 用户管理\n\n- 用户管理\n- 用户排名设计\n\n使用到的技术：无特别技术\n","source":"_posts/123.md","raw":"---\ntitle: 123\ndate: 2025-02-28 20:13:58\n---\n\n# 在线代码测评系统\n\n## 开源地址\n\nhttps://gitee.com/xj-oj/oj-project/tree/master\n\n## 开发环境\n\n- Java版本：Jdk 17\n- 数据库：MySQL 8.0、Redis 6.2.6\n- 开发工具 ：IntelliJ IDEA、Maven 3.8.6\n\n\n\n## 采用技术\n\n- Spring Boot、MyBatis-Plus、redis\n- vue3、Axios、Element Plus\n  ![img.png](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014222.png)\n\n## 部署运行环境\n\n- Windows\n\n## 系统架构设计\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014199.gif)\n\n- 视图层包括网站主站点和后台管理系统，主站点负责向用户提供服务，是用户看到的系统页面。用户可以在上面进行登录注册、个人信息管理、查看题目、编写代码、提交代码、查看测评状态、查看排名、参加竞赛、查看竞赛结果以及发布文章等主要操作。后台管理系统是专门给系统管理员使用的管理后台，管理员可以在上面进行用户管理、题目管理、竞赛管理、日志管理以及查看系统运行状态等操作。视图层通过Ajax与后端接口进行数据交互。\n- 网络接口层的主要职责是接收用户的请求，根据请求参数的不同，做出不同的响应，响应数据的格式是JSON数据。\n- 业务层包括用户服务、题目服务、竞赛服务、代码服务、测评服务、文件服务、文章服务等功能模块。业务层主要是实现系统功能的代码部分，通过数据映射实现和数据层的交互，从而实现数据的持久化。\n- 数据层是系统最底层，也是最重要的一层，系统中所有的数据均保存在数据层的MySQL服务和Redis服务中。\n\n## 系统总体设计\n\n本系统主要分为用户和管理员两个主要的模块。用户模块主要包括登录注册、个人中心、题目浏览、代码评测、竞赛参与、文章发布等多个子功能模块。管理员的功能模块包括用户管理、题目管理、测评管理、竞赛管理、文章管理等。本系统详细的功能模块划分图如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014210.png)\n\n### 代码测评流程图\n\n![image-20230919193056867](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014220.png)\n\n测评结果设计：\n\nCompile Error：编译错误。用户提交的代码中有语法错误，无法通过编译器检查。\n\nPartial Accepted：部分测评用例通过。表面用户提交的源代码可以通过部分测评用例，还有一部分测评用例无法通过，需要用户考虑其他的可能性。\n\nAccepted：通过。用户提交的源代码经过测试后通过了所有的测评用例，表明用户解决了该题目。\n\nWrong Answer：答案错误。表示用户提交的源代码的输出结果错误，没有通过任何一个测评用例。\n\nRuntime Error：运行时错误。程序在运行时异常终止，可能的原因有段错误、除0、栈溢出或数组越界等多种错误。\n\nTime Limit Exceeded：超时。用户提交的源代码在测试运行时超出了题目设定的最大运行时间限制，不符合题目的要求。\n\nMemory Limit Exceeded：内存超限。程序在运行时使用的内存空间超出题目设定的内存限制。\n\nSystem Error：系统错误。在进行代码测评时，测评机器发送错误，这个错误与系统相关。\n\n### 编译器设置\n\n\n| 名称       | 版本             | 编译命令                                    |\n| ---------- | ---------------- | ------------------------------------------- |\n| C          | GCC  4.8.5       | /usr/bin/gcc  {src_path} -o {exe_path}      |\n| C++        | G++  4.8.5       | /usr/bin/g++  {src_path} -o {exe_path}      |\n| Java       | JDK  17.0.6      | /usr/bin/javac  {src_path} -d {exe_path}    |\n| Python     | Python  3.6.8    | /usr/bin/python3  {src_path}                |\n| Golang     | Golang  1.20.2   | /usr/bin/go  build -o {exe_path} {src_path} |\n| JavaScript | Node.js  16.19.1 | /usr/bin/node  {src_path}                   |\n\n## 主要功能实现\n\n(一) 用户模块\n\n1) 登录注册\n\n注册和登录是系统中其他功能的使用前提，进入注册页面后，用户需要输入用户名、电子邮箱、邮箱验证码、密码和确认密码，只有邮箱验证码和Redis缓存中保存的一致、邮箱未注册、两次输入的密码一致，用户才能注册成功。系统注册页面如图4.1所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014203.png)\n\n2) 个人中心\n\n个人中心主要用于向用户展示自己的个人信息。同时用户还可以进行个人资料的编辑和重置密码等操作。如图所示是系统个人中心页面。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014224.png)\n\n3) 查看题目\n\n用户可以在题目列表可以分页查看题目列表，包括题目名称、难度、提交次数、通过率等等信息。题目详情页可以查看题目详细信息和进行代码提交。如图4.3为题目列表页，图为题目详情页。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014727.png)\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014681.png)\n\n4) 代码测评\n\n代码测评在使用后在如上图4.4页面提交代码后进行的。代码测评的流程如下：\n\n1. 用户提交代码；\n2. 进行代码安全性检查，检查是否有危害系统运行的代码输入；\n3. 编译代码（不需要编译的语言没有这一步）；\n4. 逐一运行测评用例，判断输出结果是否和正确结果一致；\n5. 所有测试用例运行完成后，将结果返回给用户。\n\n5) 发布文章\n\n发布文章页面中用户需要填写标题、分类、正文等内容。发布文章页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014699.png)\n\n(二) 管理员模块\n\n1) 用户管理\n\n管理员可以对系统中的注册用户进行管理。用户管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014735.png)\n\n2) 题目管理\n\n管理员可以对当前系统中的题目进行管理。题目管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014759.png)\n\n3) 测评管理\n\n管理员进入测评管理模块后，可以查看题目测评记录。当然这些测评记录都是用户提交代码进行测评时生成的。测评管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014753.png)\n\n4) 竞赛管理\n\n管理员是系统中唯一可以对竞赛进行管理的角色。竞赛管理包括查看、创建和删除等操作。创建竞赛时需要设定竞赛的开始和结束时间。竞赛管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014181.png)\n\n5) 文章管理\n\n管理员可以对文章进行管理。实现了查看文章列表、删除文章等功能。文章管理页面如图所示。\n\n![img](https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014184.png)\n\n# 开发过程\n\n## 整体架构\n\n- 后端服务\n- 后端管理界面\n- 前端显示界面\n\n### 后端服务\n\n#### 技术选型\n\n- SpringBoot\n- MySql\n- Redis\n\n### 后端管理界面\n\n#### 技术选型\n\n- Html、Css、 JavaScript\n- thymeleaf\n- 组件库 [Layui](https://layui.dev/docs/2/base.html)\n\n### 前端显示界面\n\n#### 技术选型\n\n- Vue\n- 组件库 [Element-plus](https://element-plus.org/zh-CN/component/overview.html)\n- 文本编辑器 TODO\n\n## 人员分工（垂直分工）\n\n> 项目整体架构，有三端，前端显示界面，后端管理界面，后端代码逻辑\n>\n> 分工方式为，根据业务功能，完成相应三端代码的编写以及MySql表的设计\n>\n> **每个模块都会用到JavaScript、Css、Html、Vue、Java、Sql、MybatisPlus等技术**\n>\n> **另外每个模块均由自己完成单元测试**\n\n### 代码执行\n\n- 各个语言代码的执行逻辑环境和代码编写（C、C++、Python、Java、Go已经实现）\n- 前端首页、关于界面\n- 前端、后端代码脚手架编写\n- 代码执行逻辑解耦、完成代码沙箱\n- 代码执行安全管理\n- 接口文档接入\n- 功能测试\n\n使用到的技术：FileUtils、Runtime、Vue3、Element-Plus、thymeleaf、knife4j\n\n### 题目测评\n\n- 测评结果（Evaluation模块内容）\n- 解决跨域问题\n- 完成腾讯cos服务的接入\n- 代码编辑界面\n\n使用到的技术：\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014289.png\" alt=\"image-20240924112142857\" style=\"zoom:50%;\" />\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014305.png\" alt=\"image-20240924112223751\" style=\"zoom:50%;\" />\n\n代码编辑器 https://github.com/koca/vue-prism-editor/blob/master/README.md\n\n### 题目管理\n\n- 题目管理\n- 题目创建、题目测试用例添加\n\n使用到的技术：无特别技术\n\n### 文章管理\n\n- 博客创建\n- 个人对自己创建博客的管理（编辑和删除）\n- 博客的浏览\n- 博客的搜索\n\n使用到的技术：\n\n富文本编辑器 wangEditor\t文档地址https://www.wangeditor.com/\n\n### 登录逻辑\n\n- 前端显示界面登录\n- 后端管理界面登录、\n- 邮箱验证注册\n- 个人信息简介\n\n使用到的技术：\n\n前端登录：Cookies、Redis（不必要可以不讲）\n\n后端登录：拦截器 LoginInterceptor、Cookies\n\n邮箱配置：\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014471.png\" alt=\"image-20240924113300957\" style=\"zoom:50%;\" />\n\n### 用户管理\n\n- 用户管理\n- 用户排名设计\n\n使用到的技术：无特别技术\n","slug":"123","published":1,"updated":"2025-02-28T12:15:05.076Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqsw0001doupd0h058fm","content":"<h1 id=\"在线代码测评系统\"><a href=\"#在线代码测评系统\" class=\"headerlink\" title=\"在线代码测评系统\"></a>在线代码测评系统</h1><h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><p><a href=\"https://gitee.com/xj-oj/oj-project/tree/master\">https://gitee.com/xj-oj/oj-project/tree/master</a></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>Java版本：Jdk 17</li>\n<li>数据库：MySQL 8.0、Redis 6.2.6</li>\n<li>开发工具 ：IntelliJ IDEA、Maven 3.8.6</li>\n</ul>\n<h2 id=\"采用技术\"><a href=\"#采用技术\" class=\"headerlink\" title=\"采用技术\"></a>采用技术</h2><ul>\n<li>Spring Boot、MyBatis-Plus、redis</li>\n<li>vue3、Axios、Element Plus<br><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014222.png\" alt=\"img.png\"></li>\n</ul>\n<h2 id=\"部署运行环境\"><a href=\"#部署运行环境\" class=\"headerlink\" title=\"部署运行环境\"></a>部署运行环境</h2><ul>\n<li>Windows</li>\n</ul>\n<h2 id=\"系统架构设计\"><a href=\"#系统架构设计\" class=\"headerlink\" title=\"系统架构设计\"></a>系统架构设计</h2><p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014199.gif\" alt=\"img\"></p>\n<ul>\n<li>视图层包括网站主站点和后台管理系统，主站点负责向用户提供服务，是用户看到的系统页面。用户可以在上面进行登录注册、个人信息管理、查看题目、编写代码、提交代码、查看测评状态、查看排名、参加竞赛、查看竞赛结果以及发布文章等主要操作。后台管理系统是专门给系统管理员使用的管理后台，管理员可以在上面进行用户管理、题目管理、竞赛管理、日志管理以及查看系统运行状态等操作。视图层通过Ajax与后端接口进行数据交互。</li>\n<li>网络接口层的主要职责是接收用户的请求，根据请求参数的不同，做出不同的响应，响应数据的格式是JSON数据。</li>\n<li>业务层包括用户服务、题目服务、竞赛服务、代码服务、测评服务、文件服务、文章服务等功能模块。业务层主要是实现系统功能的代码部分，通过数据映射实现和数据层的交互，从而实现数据的持久化。</li>\n<li>数据层是系统最底层，也是最重要的一层，系统中所有的数据均保存在数据层的MySQL服务和Redis服务中。</li>\n</ul>\n<h2 id=\"系统总体设计\"><a href=\"#系统总体设计\" class=\"headerlink\" title=\"系统总体设计\"></a>系统总体设计</h2><p>本系统主要分为用户和管理员两个主要的模块。用户模块主要包括登录注册、个人中心、题目浏览、代码评测、竞赛参与、文章发布等多个子功能模块。管理员的功能模块包括用户管理、题目管理、测评管理、竞赛管理、文章管理等。本系统详细的功能模块划分图如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014210.png\" alt=\"img\"></p>\n<h3 id=\"代码测评流程图\"><a href=\"#代码测评流程图\" class=\"headerlink\" title=\"代码测评流程图\"></a>代码测评流程图</h3><p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014220.png\" alt=\"image-20230919193056867\"></p>\n<p>测评结果设计：</p>\n<p>Compile Error：编译错误。用户提交的代码中有语法错误，无法通过编译器检查。</p>\n<p>Partial Accepted：部分测评用例通过。表面用户提交的源代码可以通过部分测评用例，还有一部分测评用例无法通过，需要用户考虑其他的可能性。</p>\n<p>Accepted：通过。用户提交的源代码经过测试后通过了所有的测评用例，表明用户解决了该题目。</p>\n<p>Wrong Answer：答案错误。表示用户提交的源代码的输出结果错误，没有通过任何一个测评用例。</p>\n<p>Runtime Error：运行时错误。程序在运行时异常终止，可能的原因有段错误、除0、栈溢出或数组越界等多种错误。</p>\n<p>Time Limit Exceeded：超时。用户提交的源代码在测试运行时超出了题目设定的最大运行时间限制，不符合题目的要求。</p>\n<p>Memory Limit Exceeded：内存超限。程序在运行时使用的内存空间超出题目设定的内存限制。</p>\n<p>System Error：系统错误。在进行代码测评时，测评机器发送错误，这个错误与系统相关。</p>\n<h3 id=\"编译器设置\"><a href=\"#编译器设置\" class=\"headerlink\" title=\"编译器设置\"></a>编译器设置</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>版本</th>\n<th>编译命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C</td>\n<td>GCC  4.8.5</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;gcc  {src_path} -o {exe_path}</td>\n</tr>\n<tr>\n<td>C++</td>\n<td>G++  4.8.5</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;g++  {src_path} -o {exe_path}</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>JDK  17.0.6</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;javac  {src_path} -d {exe_path}</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>Python  3.6.8</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;python3  {src_path}</td>\n</tr>\n<tr>\n<td>Golang</td>\n<td>Golang  1.20.2</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;go  build -o {exe_path} {src_path}</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>Node.js  16.19.1</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;node  {src_path}</td>\n</tr>\n</tbody></table>\n<h2 id=\"主要功能实现\"><a href=\"#主要功能实现\" class=\"headerlink\" title=\"主要功能实现\"></a>主要功能实现</h2><p>(一) 用户模块</p>\n<ol>\n<li>登录注册</li>\n</ol>\n<p>注册和登录是系统中其他功能的使用前提，进入注册页面后，用户需要输入用户名、电子邮箱、邮箱验证码、密码和确认密码，只有邮箱验证码和Redis缓存中保存的一致、邮箱未注册、两次输入的密码一致，用户才能注册成功。系统注册页面如图4.1所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014203.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>个人中心</li>\n</ol>\n<p>个人中心主要用于向用户展示自己的个人信息。同时用户还可以进行个人资料的编辑和重置密码等操作。如图所示是系统个人中心页面。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014224.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>查看题目</li>\n</ol>\n<p>用户可以在题目列表可以分页查看题目列表，包括题目名称、难度、提交次数、通过率等等信息。题目详情页可以查看题目详细信息和进行代码提交。如图4.3为题目列表页，图为题目详情页。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014727.png\" alt=\"img\"></p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014681.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>代码测评</li>\n</ol>\n<p>代码测评在使用后在如上图4.4页面提交代码后进行的。代码测评的流程如下：</p>\n<ol>\n<li>用户提交代码；</li>\n<li>进行代码安全性检查，检查是否有危害系统运行的代码输入；</li>\n<li>编译代码（不需要编译的语言没有这一步）；</li>\n<li>逐一运行测评用例，判断输出结果是否和正确结果一致；</li>\n<li>所有测试用例运行完成后，将结果返回给用户。</li>\n</ol>\n<ol start=\"5\">\n<li>发布文章</li>\n</ol>\n<p>发布文章页面中用户需要填写标题、分类、正文等内容。发布文章页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014699.png\" alt=\"img\"></p>\n<p>(二) 管理员模块</p>\n<ol>\n<li>用户管理</li>\n</ol>\n<p>管理员可以对系统中的注册用户进行管理。用户管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014735.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>题目管理</li>\n</ol>\n<p>管理员可以对当前系统中的题目进行管理。题目管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014759.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>测评管理</li>\n</ol>\n<p>管理员进入测评管理模块后，可以查看题目测评记录。当然这些测评记录都是用户提交代码进行测评时生成的。测评管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014753.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>竞赛管理</li>\n</ol>\n<p>管理员是系统中唯一可以对竞赛进行管理的角色。竞赛管理包括查看、创建和删除等操作。创建竞赛时需要设定竞赛的开始和结束时间。竞赛管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014181.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>文章管理</li>\n</ol>\n<p>管理员可以对文章进行管理。实现了查看文章列表、删除文章等功能。文章管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014184.png\" alt=\"img\"></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h2><ul>\n<li>后端服务</li>\n<li>后端管理界面</li>\n<li>前端显示界面</li>\n</ul>\n<h3 id=\"后端服务\"><a href=\"#后端服务\" class=\"headerlink\" title=\"后端服务\"></a>后端服务</h3><h4 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h4><ul>\n<li>SpringBoot</li>\n<li>MySql</li>\n<li>Redis</li>\n</ul>\n<h3 id=\"后端管理界面\"><a href=\"#后端管理界面\" class=\"headerlink\" title=\"后端管理界面\"></a>后端管理界面</h3><h4 id=\"技术选型-1\"><a href=\"#技术选型-1\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h4><ul>\n<li>Html、Css、 JavaScript</li>\n<li>thymeleaf</li>\n<li>组件库 <a href=\"https://layui.dev/docs/2/base.html\">Layui</a></li>\n</ul>\n<h3 id=\"前端显示界面\"><a href=\"#前端显示界面\" class=\"headerlink\" title=\"前端显示界面\"></a>前端显示界面</h3><h4 id=\"技术选型-2\"><a href=\"#技术选型-2\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h4><ul>\n<li>Vue</li>\n<li>组件库 <a href=\"https://element-plus.org/zh-CN/component/overview.html\">Element-plus</a></li>\n<li>文本编辑器 TODO</li>\n</ul>\n<h2 id=\"人员分工（垂直分工）\"><a href=\"#人员分工（垂直分工）\" class=\"headerlink\" title=\"人员分工（垂直分工）\"></a>人员分工（垂直分工）</h2><blockquote>\n<p>项目整体架构，有三端，前端显示界面，后端管理界面，后端代码逻辑</p>\n<p>分工方式为，根据业务功能，完成相应三端代码的编写以及MySql表的设计</p>\n<p><strong>每个模块都会用到JavaScript、Css、Html、Vue、Java、Sql、MybatisPlus等技术</strong></p>\n<p><strong>另外每个模块均由自己完成单元测试</strong></p>\n</blockquote>\n<h3 id=\"代码执行\"><a href=\"#代码执行\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h3><ul>\n<li>各个语言代码的执行逻辑环境和代码编写（C、C++、Python、Java、Go已经实现）</li>\n<li>前端首页、关于界面</li>\n<li>前端、后端代码脚手架编写</li>\n<li>代码执行逻辑解耦、完成代码沙箱</li>\n<li>代码执行安全管理</li>\n<li>接口文档接入</li>\n<li>功能测试</li>\n</ul>\n<p>使用到的技术：FileUtils、Runtime、Vue3、Element-Plus、thymeleaf、knife4j</p>\n<h3 id=\"题目测评\"><a href=\"#题目测评\" class=\"headerlink\" title=\"题目测评\"></a>题目测评</h3><ul>\n<li>测评结果（Evaluation模块内容）</li>\n<li>解决跨域问题</li>\n<li>完成腾讯cos服务的接入</li>\n<li>代码编辑界面</li>\n</ul>\n<p>使用到的技术：</p>\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014289.png\" alt=\"image-20240924112142857\" style=\"zoom:50%;\" />\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014305.png\" alt=\"image-20240924112223751\" style=\"zoom:50%;\" />\n\n<p>代码编辑器 <a href=\"https://github.com/koca/vue-prism-editor/blob/master/README.md\">https://github.com/koca/vue-prism-editor/blob/master/README.md</a></p>\n<h3 id=\"题目管理\"><a href=\"#题目管理\" class=\"headerlink\" title=\"题目管理\"></a>题目管理</h3><ul>\n<li>题目管理</li>\n<li>题目创建、题目测试用例添加</li>\n</ul>\n<p>使用到的技术：无特别技术</p>\n<h3 id=\"文章管理\"><a href=\"#文章管理\" class=\"headerlink\" title=\"文章管理\"></a>文章管理</h3><ul>\n<li>博客创建</li>\n<li>个人对自己创建博客的管理（编辑和删除）</li>\n<li>博客的浏览</li>\n<li>博客的搜索</li>\n</ul>\n<p>使用到的技术：</p>\n<p>富文本编辑器 wangEditor\t文档地址<a href=\"https://www.wangeditor.com/\">https://www.wangeditor.com/</a></p>\n<h3 id=\"登录逻辑\"><a href=\"#登录逻辑\" class=\"headerlink\" title=\"登录逻辑\"></a>登录逻辑</h3><ul>\n<li>前端显示界面登录</li>\n<li>后端管理界面登录、</li>\n<li>邮箱验证注册</li>\n<li>个人信息简介</li>\n</ul>\n<p>使用到的技术：</p>\n<p>前端登录：Cookies、Redis（不必要可以不讲）</p>\n<p>后端登录：拦截器 LoginInterceptor、Cookies</p>\n<p>邮箱配置：</p>\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014471.png\" alt=\"image-20240924113300957\" style=\"zoom:50%;\" />\n\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li>用户管理</li>\n<li>用户排名设计</li>\n</ul>\n<p>使用到的技术：无特别技术</p>\n","excerpt":"","more":"<h1 id=\"在线代码测评系统\"><a href=\"#在线代码测评系统\" class=\"headerlink\" title=\"在线代码测评系统\"></a>在线代码测评系统</h1><h2 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h2><p><a href=\"https://gitee.com/xj-oj/oj-project/tree/master\">https://gitee.com/xj-oj/oj-project/tree/master</a></p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>Java版本：Jdk 17</li>\n<li>数据库：MySQL 8.0、Redis 6.2.6</li>\n<li>开发工具 ：IntelliJ IDEA、Maven 3.8.6</li>\n</ul>\n<h2 id=\"采用技术\"><a href=\"#采用技术\" class=\"headerlink\" title=\"采用技术\"></a>采用技术</h2><ul>\n<li>Spring Boot、MyBatis-Plus、redis</li>\n<li>vue3、Axios、Element Plus<br><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014222.png\" alt=\"img.png\"></li>\n</ul>\n<h2 id=\"部署运行环境\"><a href=\"#部署运行环境\" class=\"headerlink\" title=\"部署运行环境\"></a>部署运行环境</h2><ul>\n<li>Windows</li>\n</ul>\n<h2 id=\"系统架构设计\"><a href=\"#系统架构设计\" class=\"headerlink\" title=\"系统架构设计\"></a>系统架构设计</h2><p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014199.gif\" alt=\"img\"></p>\n<ul>\n<li>视图层包括网站主站点和后台管理系统，主站点负责向用户提供服务，是用户看到的系统页面。用户可以在上面进行登录注册、个人信息管理、查看题目、编写代码、提交代码、查看测评状态、查看排名、参加竞赛、查看竞赛结果以及发布文章等主要操作。后台管理系统是专门给系统管理员使用的管理后台，管理员可以在上面进行用户管理、题目管理、竞赛管理、日志管理以及查看系统运行状态等操作。视图层通过Ajax与后端接口进行数据交互。</li>\n<li>网络接口层的主要职责是接收用户的请求，根据请求参数的不同，做出不同的响应，响应数据的格式是JSON数据。</li>\n<li>业务层包括用户服务、题目服务、竞赛服务、代码服务、测评服务、文件服务、文章服务等功能模块。业务层主要是实现系统功能的代码部分，通过数据映射实现和数据层的交互，从而实现数据的持久化。</li>\n<li>数据层是系统最底层，也是最重要的一层，系统中所有的数据均保存在数据层的MySQL服务和Redis服务中。</li>\n</ul>\n<h2 id=\"系统总体设计\"><a href=\"#系统总体设计\" class=\"headerlink\" title=\"系统总体设计\"></a>系统总体设计</h2><p>本系统主要分为用户和管理员两个主要的模块。用户模块主要包括登录注册、个人中心、题目浏览、代码评测、竞赛参与、文章发布等多个子功能模块。管理员的功能模块包括用户管理、题目管理、测评管理、竞赛管理、文章管理等。本系统详细的功能模块划分图如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014210.png\" alt=\"img\"></p>\n<h3 id=\"代码测评流程图\"><a href=\"#代码测评流程图\" class=\"headerlink\" title=\"代码测评流程图\"></a>代码测评流程图</h3><p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014220.png\" alt=\"image-20230919193056867\"></p>\n<p>测评结果设计：</p>\n<p>Compile Error：编译错误。用户提交的代码中有语法错误，无法通过编译器检查。</p>\n<p>Partial Accepted：部分测评用例通过。表面用户提交的源代码可以通过部分测评用例，还有一部分测评用例无法通过，需要用户考虑其他的可能性。</p>\n<p>Accepted：通过。用户提交的源代码经过测试后通过了所有的测评用例，表明用户解决了该题目。</p>\n<p>Wrong Answer：答案错误。表示用户提交的源代码的输出结果错误，没有通过任何一个测评用例。</p>\n<p>Runtime Error：运行时错误。程序在运行时异常终止，可能的原因有段错误、除0、栈溢出或数组越界等多种错误。</p>\n<p>Time Limit Exceeded：超时。用户提交的源代码在测试运行时超出了题目设定的最大运行时间限制，不符合题目的要求。</p>\n<p>Memory Limit Exceeded：内存超限。程序在运行时使用的内存空间超出题目设定的内存限制。</p>\n<p>System Error：系统错误。在进行代码测评时，测评机器发送错误，这个错误与系统相关。</p>\n<h3 id=\"编译器设置\"><a href=\"#编译器设置\" class=\"headerlink\" title=\"编译器设置\"></a>编译器设置</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>版本</th>\n<th>编译命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C</td>\n<td>GCC  4.8.5</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;gcc  {src_path} -o {exe_path}</td>\n</tr>\n<tr>\n<td>C++</td>\n<td>G++  4.8.5</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;g++  {src_path} -o {exe_path}</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>JDK  17.0.6</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;javac  {src_path} -d {exe_path}</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>Python  3.6.8</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;python3  {src_path}</td>\n</tr>\n<tr>\n<td>Golang</td>\n<td>Golang  1.20.2</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;go  build -o {exe_path} {src_path}</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>Node.js  16.19.1</td>\n<td>&#x2F;usr&#x2F;bin&#x2F;node  {src_path}</td>\n</tr>\n</tbody></table>\n<h2 id=\"主要功能实现\"><a href=\"#主要功能实现\" class=\"headerlink\" title=\"主要功能实现\"></a>主要功能实现</h2><p>(一) 用户模块</p>\n<ol>\n<li>登录注册</li>\n</ol>\n<p>注册和登录是系统中其他功能的使用前提，进入注册页面后，用户需要输入用户名、电子邮箱、邮箱验证码、密码和确认密码，只有邮箱验证码和Redis缓存中保存的一致、邮箱未注册、两次输入的密码一致，用户才能注册成功。系统注册页面如图4.1所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014203.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>个人中心</li>\n</ol>\n<p>个人中心主要用于向用户展示自己的个人信息。同时用户还可以进行个人资料的编辑和重置密码等操作。如图所示是系统个人中心页面。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014224.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>查看题目</li>\n</ol>\n<p>用户可以在题目列表可以分页查看题目列表，包括题目名称、难度、提交次数、通过率等等信息。题目详情页可以查看题目详细信息和进行代码提交。如图4.3为题目列表页，图为题目详情页。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014727.png\" alt=\"img\"></p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014681.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>代码测评</li>\n</ol>\n<p>代码测评在使用后在如上图4.4页面提交代码后进行的。代码测评的流程如下：</p>\n<ol>\n<li>用户提交代码；</li>\n<li>进行代码安全性检查，检查是否有危害系统运行的代码输入；</li>\n<li>编译代码（不需要编译的语言没有这一步）；</li>\n<li>逐一运行测评用例，判断输出结果是否和正确结果一致；</li>\n<li>所有测试用例运行完成后，将结果返回给用户。</li>\n</ol>\n<ol start=\"5\">\n<li>发布文章</li>\n</ol>\n<p>发布文章页面中用户需要填写标题、分类、正文等内容。发布文章页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014699.png\" alt=\"img\"></p>\n<p>(二) 管理员模块</p>\n<ol>\n<li>用户管理</li>\n</ol>\n<p>管理员可以对系统中的注册用户进行管理。用户管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014735.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>题目管理</li>\n</ol>\n<p>管理员可以对当前系统中的题目进行管理。题目管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014759.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>测评管理</li>\n</ol>\n<p>管理员进入测评管理模块后，可以查看题目测评记录。当然这些测评记录都是用户提交代码进行测评时生成的。测评管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014753.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>竞赛管理</li>\n</ol>\n<p>管理员是系统中唯一可以对竞赛进行管理的角色。竞赛管理包括查看、创建和删除等操作。创建竞赛时需要设定竞赛的开始和结束时间。竞赛管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014181.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>文章管理</li>\n</ol>\n<p>管理员可以对文章进行管理。实现了查看文章列表、删除文章等功能。文章管理页面如图所示。</p>\n<p><img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014184.png\" alt=\"img\"></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h2><ul>\n<li>后端服务</li>\n<li>后端管理界面</li>\n<li>前端显示界面</li>\n</ul>\n<h3 id=\"后端服务\"><a href=\"#后端服务\" class=\"headerlink\" title=\"后端服务\"></a>后端服务</h3><h4 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h4><ul>\n<li>SpringBoot</li>\n<li>MySql</li>\n<li>Redis</li>\n</ul>\n<h3 id=\"后端管理界面\"><a href=\"#后端管理界面\" class=\"headerlink\" title=\"后端管理界面\"></a>后端管理界面</h3><h4 id=\"技术选型-1\"><a href=\"#技术选型-1\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h4><ul>\n<li>Html、Css、 JavaScript</li>\n<li>thymeleaf</li>\n<li>组件库 <a href=\"https://layui.dev/docs/2/base.html\">Layui</a></li>\n</ul>\n<h3 id=\"前端显示界面\"><a href=\"#前端显示界面\" class=\"headerlink\" title=\"前端显示界面\"></a>前端显示界面</h3><h4 id=\"技术选型-2\"><a href=\"#技术选型-2\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h4><ul>\n<li>Vue</li>\n<li>组件库 <a href=\"https://element-plus.org/zh-CN/component/overview.html\">Element-plus</a></li>\n<li>文本编辑器 TODO</li>\n</ul>\n<h2 id=\"人员分工（垂直分工）\"><a href=\"#人员分工（垂直分工）\" class=\"headerlink\" title=\"人员分工（垂直分工）\"></a>人员分工（垂直分工）</h2><blockquote>\n<p>项目整体架构，有三端，前端显示界面，后端管理界面，后端代码逻辑</p>\n<p>分工方式为，根据业务功能，完成相应三端代码的编写以及MySql表的设计</p>\n<p><strong>每个模块都会用到JavaScript、Css、Html、Vue、Java、Sql、MybatisPlus等技术</strong></p>\n<p><strong>另外每个模块均由自己完成单元测试</strong></p>\n</blockquote>\n<h3 id=\"代码执行\"><a href=\"#代码执行\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h3><ul>\n<li>各个语言代码的执行逻辑环境和代码编写（C、C++、Python、Java、Go已经实现）</li>\n<li>前端首页、关于界面</li>\n<li>前端、后端代码脚手架编写</li>\n<li>代码执行逻辑解耦、完成代码沙箱</li>\n<li>代码执行安全管理</li>\n<li>接口文档接入</li>\n<li>功能测试</li>\n</ul>\n<p>使用到的技术：FileUtils、Runtime、Vue3、Element-Plus、thymeleaf、knife4j</p>\n<h3 id=\"题目测评\"><a href=\"#题目测评\" class=\"headerlink\" title=\"题目测评\"></a>题目测评</h3><ul>\n<li>测评结果（Evaluation模块内容）</li>\n<li>解决跨域问题</li>\n<li>完成腾讯cos服务的接入</li>\n<li>代码编辑界面</li>\n</ul>\n<p>使用到的技术：</p>\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014289.png\" alt=\"image-20240924112142857\" style=\"zoom:50%;\" />\n\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014305.png\" alt=\"image-20240924112223751\" style=\"zoom:50%;\" />\n\n<p>代码编辑器 <a href=\"https://github.com/koca/vue-prism-editor/blob/master/README.md\">https://github.com/koca/vue-prism-editor/blob/master/README.md</a></p>\n<h3 id=\"题目管理\"><a href=\"#题目管理\" class=\"headerlink\" title=\"题目管理\"></a>题目管理</h3><ul>\n<li>题目管理</li>\n<li>题目创建、题目测试用例添加</li>\n</ul>\n<p>使用到的技术：无特别技术</p>\n<h3 id=\"文章管理\"><a href=\"#文章管理\" class=\"headerlink\" title=\"文章管理\"></a>文章管理</h3><ul>\n<li>博客创建</li>\n<li>个人对自己创建博客的管理（编辑和删除）</li>\n<li>博客的浏览</li>\n<li>博客的搜索</li>\n</ul>\n<p>使用到的技术：</p>\n<p>富文本编辑器 wangEditor\t文档地址<a href=\"https://www.wangeditor.com/\">https://www.wangeditor.com/</a></p>\n<h3 id=\"登录逻辑\"><a href=\"#登录逻辑\" class=\"headerlink\" title=\"登录逻辑\"></a>登录逻辑</h3><ul>\n<li>前端显示界面登录</li>\n<li>后端管理界面登录、</li>\n<li>邮箱验证注册</li>\n<li>个人信息简介</li>\n</ul>\n<p>使用到的技术：</p>\n<p>前端登录：Cookies、Redis（不必要可以不讲）</p>\n<p>后端登录：拦截器 LoginInterceptor、Cookies</p>\n<p>邮箱配置：</p>\n<img src=\"https://typora-1329750222.cos.ap-chengdu.myqcloud.com/img/202502282014471.png\" alt=\"image-20240924113300957\" style=\"zoom:50%;\" />\n\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li>用户管理</li>\n<li>用户排名设计</li>\n</ul>\n<p>使用到的技术：无特别技术</p>\n"},{"title":"213124234543","date":"2025-02-28T16:06:03.000Z","_content":"","source":"_posts/213124234543.md","raw":"---\ntitle: 213124234543\ndate: 2025-03-01 00:06:03\n---\n","slug":"213124234543","published":1,"updated":"2025-02-28T16:06:03.962Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqt00003doupgwfme78r","content":"","excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-02-28T04:28:39.506Z","updated":"2025-02-28T02:04:45.640Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqt10005doup6bx31pwh","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"2134","date":"2025-02-28T13:59:16.000Z","_content":"\n[TOC]\n\n\n\n# 绪论\n\n## 数据结构\n\n数据的两种结构**逻辑结构**和**存储结构（物理结构）**\n\n- 逻辑结构\n  - 线性结构\n    - 线性表\n    - 队列\n    - 栈\n  - 非线性结构\n    - 树形结构\n    - 图状结构\n    - 集合结构\n- 存储结构\n  - 顺序存储结构\n  - 链式存储结构\n\n## 算法\n\n算法是**解决某一特定问题的指定描述**\n\n### 算法的特征\n\n- 有穷性\n- 确定性（唯一性）\n- 可行性\n- 输入\n- 输出\n\n### 算法的评价\n\n- 正确性\n- 可读性\n- 健壮性\n- 效率和低存储\n\n#### 算法的时间复杂度\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003136951-1004055513.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003137847-1896422554.png\" style=\"zoom:80%;\" />\n\n\n\n#### 算法的空间复杂度\n\n和时间复杂度相比不那么重要，一般算法采取的措施为用空间换时间，即用一部分的空间消耗来缩短计算时间。\n\n\n\n\n\n# 递归\n\n## 汉诺塔问题（递归调用）\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003138540-1572386921.png\" style=\"zoom:60%;\" />\n\n```python\n# 汉诺塔算法\ndef HanNoTa(n, a, b, c):\n    if n > 0:\n        HanNoTa(n - 1, a, c, b)\n        print(f\"moving form {a} to {c}\")\n        HanNoTa(n - 1, b, a, c)\n\nHanNoTa(3,\"A\",\"B\",\"C\")\n```\n\n\n\n\n\n\n\n# 查找排序\n\n## 二分查找\n\n```python\n# 二分查找\ndef binary_search(li, val, key=1):\n    list_li = list(zip(list(range(len(li))), li))\n    if key == 1:\n        list_li = sorted(list_li, key=lambda x: x[1])\n    left = 0\n    right = len(list_li) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if list_li[mid][1] == val:\n            return list_li[mid][0]\n        elif list_li[mid][1] > val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    else:\n        return None\n\n\na = [1, 5, 6, 2, 1, 4, 2, 6, 2, 3]\nb = [1, 2, 3, 4, 5, 6, 7, 8]\nind = binary_search(a, 3)\nprint(ind)\nind = binary_search(b, 5, 0)\nprint(ind)\n```\n\n\n\n\n\n\n\n## 检查排序是否完成\n\n```python\ndef check(li, reverse=False):\n    if reverse == False:\n        for i in range(len(li) - 1):\n            if li[i] > li[i + 1]:\n                return False\n        else:\n            return True\n    elif reverse == True:\n        for i in range(len(li) - 1):\n            if li[i] < li[i + 1]:\n                return False\n        else:\n            return True\n```\n\n\n\n## 冒泡排序\n\n```python\n# 冒泡排序\nimport random\n\n\ndef bubble_sort(li: list):\n    for i in range(len(li) - 1):\n        exchange = False\n        for j in range(len(li) - i - 1):\n            if li[j] > li[j + 1]:\n                li[j], li[j + 1] = li[j + 1], li[j]\n                exchange = True\n        if not exchange:\n            return\n\n\nli = [random.randint(0, 10000) for _ in range(10)]\nprint(li)\nbubble_sort(li)\nprint(li)\n```\n\n\n\n## 选择排序\n\n```python\n# 选择排序\nimport random\n\n\ndef select_sort(li):\n    for i in range(len(li) - 1):\n        min_loc = i\n        for j in range(i + 1, len(li)):\n            if li[j] < li[min_loc]:\n                min_loc = j\n        if min_loc != i:\n            li[i], li[min_loc] = li[min_loc], li[i]\n\n\nli = [random.randint(0, 10000) for _ in range(10)]\nprint(li)\nselect_sort(li)\nprint(li)\n```\n\n\n\n## 插入排序\n\n```python\n# 插入排序\nimport random\n\n\ndef insert_sort(li):\n    for i in range(1, len(li)):\n        tmp = li[i]\n        j = i - 1\n        while j >= 0 and tmp < li[j]:\n            li[j + 1] = li[j]\n            j -= 1\n        li[j + 1] = tmp\n\n\nli = [random.randint(0, 10000) for _ in range(10)]\nprint(li)\ninsert_sort(li)\nprint(li)\n```\n\n\n\n## 希尔排序（高级版插入排序）\n\n```python\n# 希尔排序\nimport random\nimport copy\nimport time\n\n\ndef insert_sort_gap(li, gap):\n    for i in range(gap, len(li)):\n        tmp = li[i]\n        j = i - gap\n        while j >= 0 and tmp < li[j]:\n            li[j + gap] = li[j]\n            j -= gap\n        li[j + gap] = tmp\n\n\ndef shell_sort(li):\n    d = len(li) // 2\n    while d >= 1:\n        insert_sort_gap(li, d)\n        d //= 2\n\n\nli = list(range(10000))\nrandom.shuffle(li)\nli1 = copy.deepcopy(li)\nprint(li)\nprint(li1)\nstart = time.time()\nshell_sort(li)\nend = time.time()\nprint(end - start)\nprint(li1)\nstart = time.time()\ninsert_sort_gap(li1, 1)\nend = time.time()\nprint(end - start)\nprint(li)\nprint(li1)\n```\n\n\n\n## 快速排序\n\n```python\n# 快速排序\nimport random\nimport time\n# import sys\n# sys.setrecursionlimit(100000)     # 设置递归最大深度\n\n\ndef partition(li, left, right):\n    tmp = li[left]  # 记录下最左边的数\n    while left < right:  # 找到记录下的数的最合适的位置\n        while left < right and li[right] >= tmp:  # 从右边找比tmp小的数的位置\n            right -= 1\n        li[left] = li[right]  # 把右边较大的值写到左边的位置上\n        while left < right and li[left] <= tmp:  # 从左边找比tmp大的数的位置\n            left += 1\n        li[right] = li[left]  # 把左边较小的值写到右边的位置上\n    li[left] = tmp  # 把记录下的数写到合适的位置\n    return left  # 返回找到的位置\n\n\ndef _quick_sort(li, left, right):  # 递归调用\n    if left < right:  # 至少两个元素才进行递归调用\n        mid = partition(li, left, right)\n        _quick_sort(li, left, mid - 1)\n        _quick_sort(li, mid + 1, right)\n\n\ndef quick_sort(li):\n    _quick_sort(li, 0, len(li) - 1)\n\n\nli = [random.randint(0, 10000) for _ in range(10000)]\nprint(li)\nstart = time.time()\nquick_sort(li)\nend = time.time()\nprint(li)\nprint(end - start)\n```\n\n\n\n\n\n## 堆排序（二叉树）\n\n```python\n# 堆排序\nimport random\nimport time\ndef sift(li, low, high):\n    \"\"\"\n\n    :param li:列表\n    :param low: 堆的根节点的位置\n    :param high: 堆的最后一个元素的位置\n    :return: None\n    \"\"\"\n    i = low  # 最开始指向根节点\n    j = 2 * i + 1  # j为根节点的左孩子\n    tmp = li[low]  # 把堆顶元素存起来\n    while j <= high:\t# 建立大根堆\n        if j + 1 <= high and li[j + 1] > li[j]:  # 如果右孩子存在并且比左孩子大\n            j = j + 1  # j指向右孩子\n        if li[j] > tmp:  # 如果孩子节点大于父亲节点\n            li[i] = li[j]  # 孩子节点元素调整到父亲节点的位置\n            i = j  # 指针下移\n            j = 2 * i + 1\n        else:  # 因为tmp比孩子节点更大，找到合适的位置\n            li[i] = tmp  # 找到根节点合适的位置并放入\n            break\n    else:\n        li[i] = tmp  # 把tmp放到叶子节点上\n\n\ndef heap_sort(li):\n    n = len(li)\n    for i in range((n - 2) // 2, -1, -1):\n        # i表示建堆的时候调整的部分的根的下标\n        sift(li, i, n - 1)\n    # 建堆完成\n    for i in range(n - 1, -1, -1):\n        # i指向当前堆的最后一个元素\n        li[0], li[i] = li[i], li[0]  # 将最后一个元素与堆顶元素交换位置\n        sift(li, 0, i - 1)  # i-1是新的high\n\n\nli = [random.randint(0, 10000) for _ in range(10000)]\nprint(li)\nstart = time.time()\nheap_sort(li)\nend = time.time()\nprint(li)\nprint(end - start)\n```\n\n#### python中内置好的堆排序函数\n\n```python\n# python中内置好的堆排序\nimport heapq\nimport random\n\nli = [i for i in range(100)]\nrandom.shuffle(li)      # 打乱列表\nprint(li)\nheapq.heapify(li)       # 建堆\nfor i in range(len(li)):\n    print(heapq.heappop(li), end=\",\")       # 弹出一个堆中最小的元素\n```\n\n\n\n#### 利用堆排序解决topk问题\n\n```python\n# 利用堆排序解决topk问题\nimport random\nimport time\n\n\ndef sift(li, low, high):\n    \"\"\"\n\n    :param li:列表\n    :param low: 堆的根节点的位置\n    :param high: 堆的最后一个元素的位置\n    :return: None\n    \"\"\"\n    i = low  # 最开始指向根节点\n    j = 2 * i + 1  # j为根节点的左孩子\n    tmp = li[low]  # 把堆顶元素存起来\n    while j <= high:  # 建立小根堆\n        if j + 1 <= high and li[j + 1] < li[j]:  # 如果右孩子存在并且比左孩子小\n            j = j + 1  # j指向右孩子\n        if li[j] < tmp:  # 如果孩子节点小于父亲节点\n            li[i] = li[j]  # 孩子节点元素调整到父亲节点的位置\n            i = j  # 指针下移\n            j = 2 * i + 1\n        else:  # 因为tmp比孩子节点更小，找到合适的位置\n            li[i] = tmp  # 找到根节点合适的位置并放入\n            break\n    else:\n        li[i] = tmp  # 把tmp放到叶子节点上\n\n\ndef topk(li, k):\n    heap = li[0:k]\n    for i in range((k - 2) // 2, -1, -1):  # 建立小根堆\n        sift(heap, i, k - 1)\n    for i in range(k, len(li) - 1):  # 遍历\n        if li[i] > heap[0]:\n            heap[0] = li[i]\n            sift(heap, 0, k - 1)\n    for i in range(k - 1, -1, -1):  # 对结果排序\n        heap[0], heap[i] = heap[i], heap[0]\n        sift(heap, 0, i - 1)\n    return heap\n\n\nli = [i for i in range(10000)]\nrandom.shuffle(li)\nprint(topk(li, 10))\n```\n\n\n\n\n\n## 归并排序\n\n```python\n# 归并排序\nimport random\n\n\ndef merge(li, low, mid, high):  # 对列表中mid左右两边的子列表进行排序\n    i = low\n    j = mid + 1\n    ltmp = []\n    while i <= mid and j <= high:  # 左右两个子列表都有数\n        if li[i] < li[j]:\n            ltmp.append(li[i])\n            i += 1\n        else:\n            ltmp.append(li[j])\n            j += 1\n    while i <= mid:\n        ltmp.append(li[i])\n        i += 1\n    while j <= high:\n        ltmp.append(li[j])\n        j += 1\n    li[low:high + 1] = ltmp\n\n\ndef _merge_sort(li, low, high):\n    if low < high:  # 至少有两个元素，递归\n        mid = (low + high) // 2\n        _merge_sort(li, low, mid)\n        _merge_sort(li, mid + 1, high)\n        merge(li, low, mid, high)\n\n\ndef merge_sort(li):\n    _merge_sort(li, 0, len(li) - 1)\n\n\nli = [i for i in range(1000)]\nrandom.shuffle(li)\nprint(li)\nmerge_sort(li)\nprint(li)\n```\n\n\n\n\n\n\n\n## 六种排序方法的总结\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139244-909999252.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n## 计数排序\n\n```python\n# 计数排序\nimport random\n\n\ndef count_sort(li: list):\n    count = [0 for _ in range(min(li), max(li) + 1)]\n    min_num = min(li)\n    for val in li:\n        count[val - min_num] += 1\n    li.clear()\n    for ind, val in enumerate(count):\n        for i in range(val):\n            li.append(ind + min_num)\n\n\nli = list(range(-9, 21))\nrandom.shuffle(li)\nprint(li)\ncount_sort(li)\nprint(li)\n```\n\n\n\n\n\n## 桶排序（高级版计数排序）\n\n```python\n# 桶排序\nimport random\n\n\ndef bucket_sort(li: list):\n    max_num = max(li)\n    n = max_num // 100\n    if n == 0:\n        n = 1\n        buckets = [[]]\n    else:\n        buckets = [[] for _ in range(n)]\n    for var in li:\n        i = min(var // (max_num // n), n - 1)       # i表示var放到几号桶里\n        buckets[i].append(var)\n        for j in range(len(buckets[i]) - 1, 0, -1):     # 保持桶内的顺序\n            if buckets[i][j] < buckets[i][j - 1]:\n                buckets[i][j], buckets[i][j - 1] = buckets[i][j - 1], buckets[i][j]\n            else:\n                break\n    li.clear()\n    for buc in buckets:\n        li.extend(buc)\n    return li\n\n\nli = list(range(200))\nli1 = list(range(200))\nrandom.shuffle(li)\nprint(li == li1)\nbucket_sort(li)\nprint(li)\nprint(li == li1)\n```\n\n\n\n\n\n## 基数排序\n\n```python\n# 基数排序\nimport random\n\n\ndef radix_sort(li: list):\n    max_num = max(li)\n    it = 0\n    while 10 ** it <= max_num:  # 求最大数的位数\n        buckets = [[] for _ in range(10)]  # 创建桶\n        for var in li:  # 把数放入桶中\n            digit = (var // 10 ** it) % 10  # 依次取每个数的位数\n            buckets[digit].append(var)\n\n        li.clear()\n        for buc in buckets:\n            li.extend(buc)\n        it += 1\n\n\nli = [random.randint(0, 10000) for _ in range(1000)]\nprint(li)\nradix_sort(li)\nprint(li)\nprint(check(li))\n```\n\n\n\n\n\n# 数据结构\n\n## 线性表\n\n- **[顺序表](#列表（即顺序表）)**\n- **[链表](#链表)**\n\n## 列表（即顺序表）\n\n1. 列表内的每个节点储存的元素为地址，所以列表内部可以时任意数据类型\n2. 列表是动态分配存储空间，列表长度不够的时候，python底层会为列表重新开辟一个更大的空间，并把原先列表中存储的地址复制到新开辟的空间中\n\n\n\n## 栈（后进先出）\n\n### 顺序栈\n\n列表（li）结构可以实现栈\n\n- 进栈：li.append\n- 出栈：li.pop\n- 取栈顶：li[-1]\n\n```python\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if len(self.stack) > 0:\n            return self.stack.pop()\n        else:\n            return None\n\n    def get_pop(self):\n        if len(self.stack) > 0:\n            return self.stack[-1]\n        else:\n            return None\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(stack.pop())\nprint(stack.pop())\nprint(stack.is_empty())\nprint(stack.pop())\nprint(stack.is_empty())\nprint(stack.pop())\n```\n\n\n\n### 链式栈\n\n```python\nclass stack_linked():\n    def __init__(self, Node=None):\n        self.head = Node\n\n    def create(self, val):\n        if not self.head:\n            self.head = ListNode(val)\n\n    def push(self, val):\n        if not self.head:\n            self.head = ListNode(val)\n            return\n        node = ListNode(val)\n        node.next = self.head\n        self.head = node\n\n    def pop(self):\n        val = self.head\n        self.head = self.head.next\n        return val\n\n\nstack = stack_linked()\nstack.push(5)\nstack.push(6)\nprint(stack.pop().val)\nprint(stack.head.val)\n```\n\n\n\n### 栈的应用\n\n#### 迷宫问题（找的不一定是最短路径）\n\n```python\nmap = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\ndirs = [\n    lambda x, y: (x + 1, y),\n    lambda x, y: (x, y + 1),\n    lambda x, y: (x - 1, y),\n    lambda x, y: (x, y - 1)\n]\n\n\ndef map_path(x1, y1, x2, y2):\n    stack = []\n    stack.append((x1, y1))\n    map[x1][y1]=2\n    while len(stack) > 0:\n        curNode = stack[-1]\n        if curNode[0] == x2 and curNode[1] == y2:\n            for p in stack:\n                print(p)\n            return True\n\n        for dir in dirs:\n            nextNode = dir(curNode[0], curNode[1])\n            if map[nextNode[0]][nextNode[1]] == 0:\n                stack.append(nextNode)\n                map[nextNode[0]][nextNode[1]] = 2\n                break\n        else:\n            map[nextNode[0]][nextNode[1]] = 2\n            stack.pop()\n    else:\n        print(\"没有路\")\n        return False\n\n\nmap_path(1, 1, 8, 8)\nfor i in map:\n    print(i)\n```\n\n\n\n#### 十进制转化为其他进制\n\n```python\n# 十进制转化为其他进制\ndef base_conversion(val, base):\n    li = []\n    while val != 0:\n        li.append(val % base)\n        val = val // base\n\n    li.reverse()\n    s = ''.join(map(str,li))\n    return s\n\n\nprint(base_conversion(120, 2))\n```\n\n\n\n## 队列（先进先出）\n\n列表（li）可以实现队列\n\n- 入队：li.append\n- 出队：li.pop(0)\n- 取队头：li[0]\n\n### 顺序队列\n\n#### 基础队列类\n\n```python\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def push(self, element):\n        self.queue.append(element)\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def pop(self):\n        if not self.is_empty():\n            return self.queue.pop(0)\n        else:\n            return None\n\n    def get_top(self):\n        return self.queue[0]\n\n\nqueue = Queue()\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nprint(queue.is_empty())\nprint(queue.pop())\nprint(queue.get_top())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.is_empty())\n```\n\n\n\n#### 循环队列类\n\n```python\nclass Queue:\n    def __init__(self, size=100):\n        self.queue = [0 for _ in range(size)]\n        self.size = size\n        self.rear = 0\n        self.front = 0\n\n    def push(self, element):\n        if not self.is_filled():\n            self.rear = (self.rear + 1) % self.size\n            self.queue[self.rear] = element\n        else:\n            raise IndexError(\"Queue is filled\")\n\n    def pop(self):\n        if not self.is_empty():\n            self.front = (self.front + 1) % self.size\n            return self.queue[self.front]\n        raise IndexError(\"Queue is empty\")\n\n    def get_top(self):\n        if not self.is_empty():\n            return self.queue[self.rear]\n        else:\n            return None\n\n    def is_empty(self):\n        return self.rear == self.front\n\n    def is_filled(self):\n        return (self.rear + 1) % self.size == self.front\n\nqueue=Queue(5)\nprint(queue.is_empty())\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nqueue.push(4)\nprint(queue.is_filled())\nprint(queue.get_top())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\n```\n\n\n\n#### 内置队列\n\n```python\nfrom collections import deque  # 双向队列\n\nq = deque([1, 2, 3, 4], 4)\nq.append(5)  # 队尾进\nprint(q.popleft())  # 队首出\n\nq.clear()\nq.appendleft(1)  # 队首进\nq.appendleft(2)\nq.appendleft(3)\nprint(q.pop())  # 队尾出\nprint(q.pop())\nprint(q.pop())\n```\n\n\n\n### 链式队列\n\n```python\nclass Node():\n    def __init__(self, val=0):\n        self.val = val\n        self.next = None\n\n\nclass queue_linked():\n    def __init__(self):\n        self.front = None\n        self.rear = None\n\n    def push(self, val):\n        node = Node(val)\n        if self.front is None:\n            self.front = node\n            self.rear = node\n        else:\n            self.rear.next = node\n            self.rear = self.rear.next\n\n    def pop(self):\n        if self.front == self.rear and self.front:\n            node = self.front\n            self.front = self.rear = None\n            return node\n        else:\n            if not self.front:\n                return\n            node = self.front\n            self.front = self.front.next\n            return node\n\n    def peek(self):\n        if not self.is_empty():\n            return self.front.val\n        else:\n            return\n\n    def is_empty(self):\n        if self.front and self.rear:\n            return False\n        else:\n            return True\n\n    def show(self):\n        p = self.front\n        while p:\n            print(p.val, end=\" \")\n            p = p.next\n        print()\n\n\nqueue = queue_linked()\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nprint(queue.pop().val)\nprint(queue.pop().val)\nprint(queue.pop().val)\n# print(queue.peek())\nqueue.show()\n```\n\n\n\n### 队列的应用\n\n#### 迷宫问题（求的是最短路径）\n\n```python\nmap = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\n\ndirs = [\n    lambda x, y: (x + 1, y),\n    lambda x, y: (x, y + 1),\n    lambda x, y: (x - 1, y),\n    lambda x, y: (x, y - 1)\n]\n\n\ndef print_path(path, map):\n    curNode = path[-1]\n    realpath = []\n    while curNode[2] != -1:\n        realpath.append(curNode[0:2])\n        map[curNode[0]][curNode[1]] = 2\n        curNode = path[curNode[2]]\n    realpath.append(curNode[0:2])\n    map[curNode[0]][curNode[1]] = 2\n    realpath.reverse()\n    for node in realpath:\n        print(node)\n\n\nfrom collections import deque\nimport copy\n\n\ndef map_path_shortest(x1, y1, x2, y2, map):\n    map1 = copy.deepcopy(map)\n    queue = deque()\n    queue.append((x1, y1, -1))\n    path = []\n    while len(queue) > 0:\n        curNode = queue.popleft()\n        path.append(curNode)\n        if curNode[0] == x2 and curNode[1] == y2:\n            print_path(path, map)\n            return True\n        for di in dirs:\n            nextNode = di(curNode[0], curNode[1])\n            if map1[nextNode[0]][nextNode[1]] == 0:\n                queue.append((nextNode[0], nextNode[1], len(path) - 1))\n                map1[nextNode[0]][nextNode[1]] = 2\n    else:\n        print(\"没有路\")\n        return False\n\nmap_path_shortest(1, 1, 8, 8, map)\nfor i in map:\n    print(i)\n```\n\n\n\n\n\n\n\n## 链表\n\n### 单链表\n\n#### 单链表的创建\n\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n        \n        \nclass LinkedList:\n    class LinkListIterator:\n        def __init__(self, node):\n            self.node = node\n\n        def __next__(self):\n            if self.node:\n                cur_node = self.node\n                self.node = cur_node.next\n                return cur_node.val\n            else:\n                raise StopIteration\n\n        def __iter__(self):\n            return self\n\n    def __init__(self, iterable=None):\n        self.head = None\n        self.tail = None\n        if iterable:\n            self.extend(iterable)\n\n    def append(self, obj):\n        s = ListNode(obj)\n        if not self.head:\n            self.head = s\n            self.tail = s\n        else:\n            self.tail.next = s\n            self.tail = s\n\n    def extend(self, iterable):\n        for obj in iterable:\n            self.append(obj)\n\n    def find(self, obj):\n        for n in self:\n            if n == obj:\n                return True\n        else:\n            return False\n\n    def create(self, li: list):\n        self.head = ListNode(li[0])\n        self.tail = self.head\n        for element in li[1:]:\n            node = ListNode(element)\n            self.tail.next = node\n            self.tail = node\n        return self.head\n\n    def create_head(self, li: list):\n        self.head = ListNode(li[0])\n        self.tail = self.head\n        for element in li[1:]:\n            node = ListNode(element)\n            node.next = self.head\n            self.head = node\n        return self.head\n\n    def show(self):\n        Node = self.head\n        while Node != None:\n            print(Node.val, end='\\t')\n            Node = Node.next\n        print()\n\n    def get_length(self):\n        if self.head is None:\n            return 0\n        count = 1\n        node = self.head\n        while node != self.tail:\n            count += 1\n            node = node.next\n        return count\n\n    def get_value(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n        if index < 0 or index >= self.get_length():\n            return -1\n        cur = self.head.next\n        while index:\n            cur = cur.next\n            index -= 1\n        return cur.val\n\n    def get_index(self, value):\n        count = 0\n        cur = self.head\n        while cur:\n            if cur.val == value:\n                break\n            count += 1\n            cur = cur.next\n        else:\n            return -1\n        return count\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        if index <= 0:\n            node = ListNode(val)\n            node.next = self.head\n            self.head = node\n            return\n        elif index >= self.get_length():\n            self.tail.next = ListNode(val)\n            self.tail = self.tail.next\n            return\n\n        node = ListNode(val)\n        cur = self.head\n        pre = None\n        while index:\n            pre = cur\n            cur = cur.next\n            index -= 1\n        node.next = pre.next\n        pre.next = node\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        if index < 0 or index >= self.get_length():\n            return\n        if index == 0:\n            self.head = self.head.next\n            return\n        pre = self.head\n        while index > 1:\n            pre = pre.next\n            index -= 1\n        pre.next = pre.next.next\n\n    def deleteAtValue(self, value):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        if self.head.val == value:\n            self.head = self.head.next\n            return\n        cur = self.head\n        while cur.next:\n            if cur.next.val == value:\n                break\n            cur = cur.next\n        else:\n            return\n        cur.next = cur.next.next\n\n    def __iter__(self):\n        return self.LinkListIterator(self.head)\n\n    def __repr__(self):\n        return \"<<\" + \",\".join(map(str, self)) + \">>\"\n\n\nli = LinkedList([1, 2, 3, 5, 6, 3])\nli.show()\nprint(li.get_length())\nprint(li.get_index(6))\nli.addAtIndex(7, 4)\nli.show()\nli.deleteAtValue(3)\nli.show()\nprint(li.get_index(4))\n```\n\n\n\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \n\nclass MyLinkedList(object):\n\n    def __init__(self):\n        self.head = ListNode()\n        self.size = 0  # 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新\n\n    def get(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n        if index < 0 or index >= self.size:\n            return -1\n        cur = self.head.next\n        while (index):\n            cur = cur.next\n            index -= 1\n        return cur.val\n\n    def addAtHead(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        new_node = ListNode(val)\n        new_node.next = self.head.next\n        self.head.next = new_node\n        self.size += 1\n\n    def addAtTail(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        new_node = ListNode(val)\n        cur = self.head\n        while (cur.next):\n            cur = cur.next\n        cur.next = new_node\n        self.size += 1\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        if index < 0:\n            self.addAtHead(val)\n            return\n        elif index == self.size:\n            self.addAtTail(val)\n            return\n        elif index > self.size:\n            return\n\n        node = ListNode(val)\n        pre = self.head\n        while (index):\n            pre = pre.next\n            index -= 1\n        node.next = pre.next\n        pre.next = node\n        self.size += 1\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        if index < 0 or index >= self.size:\n            return\n        pre = self.head\n        while (index):\n            pre = pre.next\n            index -= 1\n        pre.next = pre.next.next\n        self.size -= 1\n```\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139985-802441053.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140429-1838041831.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 双链表\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140952-1508005939.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003141477-1809483299.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142022-1131773000.png\" style=\"zoom:80%;\" />\n\n#### 双链表的创建\n\n```python\nclass Node:\n\n    def __init__(self, val):\n        self.val = val\n        self.prev = None\n        self.next = None\n\n\nclass MyLinkedListDouble:\n\n    def __init__(self):\n        self._head, self._tail = Node(0), Node(0)  # 虚拟节点\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._count = 0  # 添加的节点数\n\n    def _get_node(self, index: int) -> Node:\n        # 当index小于_count//2时, 使用_head查找更快, 反之_tail更快\n        if index >= self._count // 2:\n            # 使用prev往前找\n            node = self._tail\n            for _ in range(self._count - index):\n                node = node.prev\n        else:\n            # 使用next往后找\n            node = self._head\n            for _ in range(index + 1):\n                node = node.next\n        return node\n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        \"\"\"\n        if 0 <= index < self._count:\n            node = self._get_node(index)\n            return node.val\n        else:\n            return -1\n\n    def addAtHead(self, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the first element of the linked list.\n         After the insertion, the new node will be the first node of the linked list.\n        \"\"\"\n        self._update(self._head, self._head.next, val)\n\n    def addAtTail(self, val: int) -> None:\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        \"\"\"\n        self._update(self._tail.prev, self._tail, val)\n\n    def addAtIndex(self, index: int, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list.\n        If index equals to the length of linked list, the node will be appended to the end of linked list.\n        If index is greater than the length, the node will not be inserted.\n        \"\"\"\n        if index < 0:\n            index = 0\n        elif index > self._count:\n            return\n        node = self._get_node(index)\n        self._update(node.prev, node, val)\n\n    def _update(self, prev: Node, next: Node, val: int) -> None:\n        \"\"\"\n            更新节点\n            :param prev: 相对于更新的前一个节点\n            :param next: 相对于更新的后一个节点\n            :param val:  要添加的节点值\n        \"\"\"\n        # 计数累加\n        self._count += 1\n        node = Node(val)\n        prev.next, next.prev = node, node\n        node.prev, node.next = prev, next\n\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        \"\"\"\n        if 0 <= index < self._count:\n            node = self._get_node(index)\n            # 计数-1\n            self._count -= 1\n            node.prev.next, node.next.prev = node.next, node.prev\n```\n\n\n\n\n\n### 链表与数组的差别\n\n- 链表\n  - 优点：插入删除操作较快，内存可以动态分配\n  - 缺点：查找操作较慢\n- 数组\n  - 优点：结构简单，查找操作快\n  - 缺点：插入删除操作较慢，内存不能动态分配\n\n\n\n# 哈希表\n\npython中的**集合**，**字典**结构在底层都是用的哈希表来实现的\n\n## 哈希表（开辟的一系列连续的地址即数组）\n\n\n\n## 哈希函数（计算输入的值在哈希表中对应下标的函数）\n\n\n\n## 哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\n\n- 解决哈希冲突的方法\n  - 线性探测法：如果地址冲突，那么它所存放的位置在哈希表中加一\n  - 二次探测法：利用二次函数，计算冲突时，应该存储的位置\n  - 拉链存储法：哈希表的每个节点存储的是链表\n    - <img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142551-437647432.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n\n\n# 树和二叉树\n\n## 基本概念\n\n- 根节点\n- 叶子节点\n- 树的深度\n- 节点的度\n- 树的度\n- 父亲节点\n- 孩子节点（左孩子/右孩子）\n- 子树\n\n## 二叉树（度为2的树）\n\n### 二叉树的性质\n\n1. **对于非空二叉树，如果叶子节点树为n~0~，度为2的节点数为n~2~，则有n~0~=n~2~+1**\n\n2. **对于非空二叉树的第i层上最多有2^i-1^个节点（满二叉树）**\n\n3. **一颗深度为k的二叉树中，最多有2^k^-1个节点（满二叉树）**\n\n4. **具有n个节点的完全二叉树的深度为：$\\lfloor log_2n \\rfloor+1$**\n\n5. **如果对于一颗有n个节点的完全二叉树的节点按层序编号，则对任意节点i（1<=i<=n）**\n\n   1. **如果i=1，则节点i时二叉树的根节点，如果i>1,则其父亲节点为$\\lfloor i/2 \\rfloor$**\n\n   1. **如果$2i\\leq n$，则其左孩子是节点2i，否则i无左孩子，为叶子节点**\n\n   1. **如果$2i+1\\leq n$，其右孩子是节点2i+1，否则节点i无右孩子**\n\n      \n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003143534-675539412.png\" alt=\"Snipaste_2023-01-26_11-05-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144113-2080533132.png\" alt=\"Snipaste_2023-01-26_11-08-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144872-1933819243.png\" alt=\"Snipaste_2023-01-26_11-08-32\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003145823-249465355.png\" alt=\"Snipaste_2023-01-26_11-09-15\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003146532-1929601304.png\" style=\"zoom:80%;\" />\n\n\n\n### 完全二叉树\n\n### 满二叉树\n\n### 存储方式\n\n- 顺序存储（用列表或者数组储存）（一般适用于完全二叉树）\n\n- 链式存储\n\n- 列表存储\n\n  <img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003147452-974457570.png\" style=\"zoom:80%;\" />\n\n### 二叉树的创建\n\n#### 层次按序创建\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Tree(object):\n\n    def __init__(self, li=None):\n        self.root = None\n        self.lt = []\n        if li:\n            self.extend(li)\n\n    def extend(self, li: list):  # 层次添加创建\n        for i in li:\n            self.add(i)\n        self.clear()\n\n    def add(self, number):\n        # if number is None:\n        #     self.lt.pop(0)\n        #     return\n        node = TreeNode(number)  # 将输入的数字节点化，使其具有左右孩子的属性\n        if self.root == None:\n            self.root = node\n            self.lt.append(self.root)\n        else:\n            while self.lt:\n                point = self.lt[0]  # 依次对左右孩子未满的节点分配孩子\n                if point.val == None:\n                    self.lt.pop(0)\n                    continue\n                if point.left == None:\n                    point.left = node\n                    self.lt.append(point.left)  # 该节点后面作为父节点也是未满的，也要加入到列表中。\n                    return\n                if point.right == None:\n                    point.right = node\n                    self.lt.append(point.right)  # 与左孩子同理\n                    self.lt.pop(0)  # 表示该节点已拥有左右孩子，从未满列表中去除\n                    return\n\n    def clear(self):  # 清除值为None的节点\n        def level_order_traversal(root: TreeNode):\n            queue = deque()\n            queue.append(root)\n            while len(queue) > 0:\n                node = queue.popleft()\n                if node.left and node.left.val == None:\n                    node.left = None\n                if node.left:\n                    queue.append(node.left)\n                if node.right and node.right.val == None:\n                    node.right = None\n                if node.right:\n                    queue.append(node.right)\n\n        level_order_traversal(self.root)\n\n    def show(self):  # 前序遍历输出\n\n        def dfs(root):\n            if not root:\n                return\n\n            print(root.val, end=\" \")\n            dfs(root.left)\n            dfs(root.right)\n\n        dfs(self.root)\n\n    def search(self, val):\n\n        def searchdata(T, val):\n            if T == None:\n                return None\n            if T.val == val:\n                return T\n            else:\n                p = searchdata(T.left, val)\n                if p != None:\n                    return p\n                p = searchdata(T.right, val)\n                if p != None:\n                    return p\n\n        return searchdata(self.root, val)\n```\n\n\n\n#### 函数前序创建\n\n```python\ndef creat_binary_tree(input_list=[]):\n    # 构建二叉树\n    # param input_list:输入数列\n    # 当我们在函数中传入的数列不存在或者传入的数列中元素的个数等于0时，表示是一棵空树\n    # 此时不需要操作，直接返回None即可\n    if input_list is None or len(input_list) == 0:\n        return None\n    # 结点中的数据等于列表中的第一个元素，每次pop出去一个元素，后面的元素会往前走一个位置\n    # 这样可以保证元素的一次弹出\n    val = input_list.pop(0)\n    # 当弹出的元素是None时，表示该节点为空，直接返回None\n    if val is None:\n        return None\n    # 通过刚才定义的TreeNode类新建node\n    node = TreeNode(val)\n    # node的左孩子等于弹出的结点，即input_list.pop(0)弹出的元素\n    node.left = creat_binary_tree(input_list)\n    # node的右孩子等于弹出的结点，即input_list.pop(0)弹出的元素\n    node.right = creat_binary_tree(input_list)\n    # 返回node结点\n    return node\n```\n\n\n\n### 二叉树的遍历\n\n1. 递归遍历\n2. 非递归遍历\n\n- 前序遍历\n- 中序遍历\n- 后序遍历\n- 层次遍历\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003148331-2135232511.png\" style=\"zoom:80%;\" />\n\n#### 递归遍历代码\n\n```python\ndef pre_order_traversal(node):\n    # 前序遍历\n    # param node:二叉树节点\n    # 当node为空表示为一棵空树，不需要进行前序遍历直接返回即可\n    if node is None:\n        return\n    # 此时node不为空，直接打印node的val域\n    print(node.val, end=\" \")\n    # 递归的先序遍历node的左孩子\n    pre_order_traversal(node.left)\n    # 递归的先序遍历node的左孩子\n    pre_order_traversal(node.right)\n    return node\n\n\n#\ndef in_order_traversal(node):\n    # 中序遍历\n    # param node:二叉树节点\n    if node is None:\n        return\n    # 递归的中序遍历node的左孩子\n    in_order_traversal(node.left)\n    # 打印节点的值\n    print(node.val, end=\" \")\n    # 递归的中序遍历node的左孩子\n    in_order_traversal(node.right)\n    return node\n\n\ndef post_order_traversal(node):\n    # 后序遍历\n    # param node:二叉树节点\n    if node is None:\n        return\n    # 递归的后序遍历node的左孩子\n    post_order_traversal(node.left)\n    # 递归的后序遍历node的左孩子\n    post_order_traversal(node.right)\n    # 打印节点的值\n    print(node.val, end=\" \")\n    return node\n\n\nfrom collections import deque, Counter\n\n\ndef level_order_traversal(root: TreeNode):\n    queue = deque()\n    queue.append(root)\n    while len(queue) > 0:\n        node = queue.popleft()\n        print(node.val, end=\" \")\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n```\n\n\n\n#### 非递归遍历代码\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003149366-1785461924.png\" style=\"zoom:80%;\" />\n\n```python\ndef preorderTraversal(root: TreeNode) -> List[int]:\n    # 根结点为空则返回空列表\n    if not root:\n        return []\n    stack = [root]\n    result = []\n    while stack:\n        node = stack.pop()\n        # 中结点先处理\n        result.append(node.val)\n        # 右孩子先入栈\n        if node.right:\n            stack.append(node.right)\n        # 左孩子后入栈\n        if node.left:\n            stack.append(node.left)\n    return result\n\n\n# 中序遍历-迭代-LC94_二叉树的中序遍历\n\ndef inorderTraversal(root: TreeNode) -> List[int]:\n    if not root:\n        return []\n    stack = []  # 不能提前将root结点加入stack中\n    result = []\n    cur = root\n    while cur or stack:\n        # 先迭代访问最底层的左子树结点\n        if cur:\n            stack.append(cur)\n            cur = cur.left\n        # 到达最左结点后处理栈顶结点\n        else:\n            cur = stack.pop()\n            result.append(cur.val)\n            # 取栈顶元素右结点\n            cur = cur.right\n    return result\n\n\n# 后序遍历-迭代-LC145_二叉树的后序遍历\n\ndef postorderTraversal(root: TreeNode) -> List[int]:\n    if not root:\n        return []\n    stack = [root]\n    result = []\n    while stack:\n        node = stack.pop()\n        # 中结点先处理\n        result.append(node.val)\n        # 左孩子先入栈\n        if node.left:\n            stack.append(node.left)\n        # 右孩子后入栈\n        if node.right:\n            stack.append(node.right)\n    # 将最终的数组翻转\n    return result[::-1]\n```\n\n\n\n\n\n## 哈夫曼树\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003150422-1241951893.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151230-137109831.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151864-1062009624.png\" style=\"zoom:80%;\" />\n\n![]()\n\n#### 哈夫曼编码\n\n#### 代码\n\n```python\nclass HuffmanNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\n\nclass HuffmanTree:\n    def __init__(self, head=None):\n        self.head = head\n        self.lst = []\n        self.huffman_code = None\n\n    def create(self, li: list):\n        res = []\n        for i in li:\n            res.append(HuffmanNode(i))\n        self.lst = res[:]\n        while len(res) > 1:\n            res.sort(key=lambda item: item.val)\n            node_left = res.pop(0)\n            node_right = res.pop(0)\n            node_father = HuffmanNode(node_left.val + node_right.val)\n            node_father.left = node_left\n            node_father.right = node_right\n            node_left.parent = node_father\n            node_right.parent = node_father\n            res.append(node_father)\n\n        res[0].parent = None\n        self.head = res[0]\n\n    def encoding(self):\n        if self.head is None:\n            return\n        huffman_code = [''] * len(self.lst)\n        for i in range(len(self.lst)):\n            node = self.lst[i]\n            while node != self.head:\n                if node.parent.left == node:\n                    huffman_code[i] = \"0\" + huffman_code[i]\n                else:\n                    huffman_code[i] = \"1\" + huffman_code[i]\n                node = node.parent\n        self.huffman_code = huffman_code\n\n\nhuffmantree = HuffmanTree()\nhuffmantree.create([2, 4, 5, 7])\nlevel_order_traversal(huffmantree.head)\nhuffmantree.encoding()\nprint(huffmantree.huffman_code)\n```\n\n\n\n\n\n## 二叉搜索树\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003152778-490328608.png\" style=\"zoom:80%;\" />\n\n\n\n### 基本操作\n\n- 插入\n- 查询\n- 删除\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003153588-922353087.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154127-989110491.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154644-1062126191.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 代码\n\n```python\nclass BiTreeNode:\n    def __init__(self, data):\n        self.val = data\n        self.left = None\n        self.right = None\n        self.parent = None\n\n\nclass BST:\n    def __init__(self, data: list):\n        self.root = None\n        if data:\n            # if self.root is None:\n            #     self.root=BiTreeNode(data[0])\n            #     data=data[1:]\n            # for i in data:\n            #     self.insert(self.root, i)\n            for i in data:\n                self.insert_no_rec(i)\n\n    def insert(self, node, val):\n        if not node:\n            node = BiTreeNode(val)\n        elif val <= node.val:\n            node.left = self.insert(node.left, val)\n        elif val > node.val:\n            node.right = self.insert(node.right, val)\n        return node\n\n    def insert_no_rec(self, val):\n        p = self.root\n        if not p:\n            self.root = BiTreeNode(val)\n            return\n        while True:\n            if val <= p.val:\n                if p.left:\n                    p = p.left\n                else:\n                    p.left = BiTreeNode(val)\n                    p.left.parent = p\n                    return\n            elif val > p.val:\n                if p.right:\n                    p = p.right\n                else:\n                    p.right = BiTreeNode(val)\n                    p.right.parent = p\n                    return\n\n    def query(self, node, val):\n        if not node:\n            return None\n        if node.val < val:\n            return self.query(node.right, val)\n        elif node.val > val:\n            return self.query(node.left, val)\n        else:\n            return node\n\n    def query_no_rec(self, val):\n        p = self.root\n        while p:\n            if p.val < val:\n                p = p.right\n            elif p.val > val:\n                p = p.left\n            else:\n                return p\n        return None\n\n    def __remove_node_1(self, node):\n        if not node.parent:\n            self.root = None\n        if node == node.parent.left:\n            node.parent.left = None\n        else:\n            node.parent.right = None\n\n    def __remove_node_21(self, node):\n        if not node.parent:\n            self.root = node.left\n            node.left.parent = None\n        elif node == node.parent.left:\n            node.parent.left = node.left\n            node.left.parent = node.parent\n        else:\n            node.parent.right = node.left\n            node.left.parent = node.parent\n\n    def __remove_node_22(self, node):\n        if not node.parent:\n            self.root = node.right\n        elif node == node.parent.left:\n            node.parent.left = node.right\n            node.right.parent = node.parent\n        else:\n            node.parent.right = node.right\n            node.right.parent = node.parent\n\n    def delete(self, val):\n        if self.root:\n            node = self.query_no_rec(val)\n            if not node:\n                return False\n            if not node.left and not node.right:\n                self.__remove_node_1(node)\n            elif not node.right:\n                self.__remove_node_21(node)\n            elif not node.left:\n                self.__remove_node_22(node)\n            else:\n                min_node = node.right\n                while min_node.left:\n                    min_node = min_node.left\n                node.val = min_node.val\n                if min_node.right:\n                    self.__remove_node_22(min_node)\n                else:\n                    self.__remove_node_1(min_node)\n\n\nT = BST([5, 1, 2, 3, 4, 1, 6, 2])\nin_order_traversal(T.root)\nT.delete(1)\nT.delete(1)\nT.delete(6)\nprint()\nin_order_traversal(T.root)\n```\n\n\n\n\n\n## AVL树（平衡二叉搜索树）\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155158-1066944240.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155688-884961537.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156322-127906496.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156892-1756837025.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003157549-2080550850.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003158464-610122918.png\" style=\"zoom: 80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003159072-1840188905.png\" style=\"zoom:80%;\" />\n\n\n\n旋转操作过于复杂，可以先将列表元素排好序，然后使用二分递归的方法\n\n代码如下：\n\n### 二分递归代码\n\n```python\ndef sortedArrayToBST(nums: list[int]) -> TreeNode:\n    def helper(left, right):\n        if left > right:\n            return None\n        mid = (left + right) // 2\n        root = TreeNode(nums[mid])\n        root.left = helper(left, mid - 1)\n        root.right = helper(mid + 1, right)\n        return root\n\n    return helper(0, len(nums) - 1)\n\n\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nroot = sortedArrayToBST(li)\nin_order_traversal(root)\nprint()\npre_order_traversal(root)\n```\n\n\n\n# 树和森林\n\n## 基本概念\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003200141-1341052574.png\" style=\"zoom:80%;\" />\n\n\n\n## 性质\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003201672-1580609190.png\" alt=\"Snipaste_2023-01-29_12-34-45\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003202403-279314825.png\" alt=\"Snipaste_2023-01-29_12-35-01\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203221-868073196.png\" alt=\"Snipaste_2023-01-29_12-35-20\" style=\"zoom:80%;\" />\n\n\n\n## 存储\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203861-1157806461.png\" alt=\"Snipaste_2023-01-29_12-35-47\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003204640-1744020770.png\" alt=\"Snipaste_2023-01-29_12-36-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003205278-1739834.png\" alt=\"Snipaste_2023-01-29_12-36-36\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206036-1784944727.png\" alt=\"Snipaste_2023-01-29_12-36-59\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206570-1588493395.png\" alt=\"Snipaste_2023-01-29_12-37-34\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png\" alt=\"Snipaste_2023-01-29_12-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png\" alt=\"Snipaste_2023-01-29_12-38-31\" style=\"zoom:80%;\" />\n\n\n\n## 二叉树的转换\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png\" alt=\"Snipaste_2023-01-29_12-42-06\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png\" alt=\"Snipaste_2023-01-29_12-42-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png\" alt=\"Snipaste_2023-01-29_12-42-43\" style=\"zoom:80%;\" />\n\n\n\n## 树和森林的转换\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png\" alt=\"Snipaste_2023-01-29_12-43-13\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png\" alt=\"Snipaste_2023-01-29_12-43-35\" style=\"zoom:80%;\" />\n\n\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png)\n\n![Snipaste_2023-01-29_12-38-31](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png)\n\n![Snipaste_2023-01-29_12-42-06](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png)\n\n![Snipaste_2023-01-29_12-42-19](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png)\n\n![Snipaste_2023-01-29_12-42-43](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png)\n\n![Snipaste_2023-01-29_12-43-13](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png)\n\n![Snipaste_2023-01-29_12-43-35](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png)\n\n\n\n## 树的遍历\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213366-1097965655.png\" alt=\"Snipaste_2023-01-29_12-53-48\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213974-555461917.png\" alt=\"Snipaste_2023-01-29_12-54-05\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003214649-1107760089.png\" alt=\"Snipaste_2023-01-29_12-54-16\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003215384-1593542650.png\" alt=\"Snipaste_2023-01-29_12-54-46\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003216741-1239051182.png\" alt=\"Snipaste_2023-01-29_12-55-05\" style=\"zoom:80%;\" />\n\n\n\n## 森林的遍历\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003217958-1656900174.png\" alt=\"Snipaste_2023-01-29_12-55-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003219485-415832396.png\" alt=\"Snipaste_2023-01-29_12-55-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n# KMP匹配算法\n\n```python\nclass Solution:\n    def strStr(self, s: str, t: str) -> int:\n        \n        '''KMP模板'''\n        def prefix_function(s):     \n            n = len(s)\n            pi = [0] * n\n\n            j = 0\n            for i in range(1, n):\n                while j>0 and s[i] != s[j]:     # 当前位置s[i]与s[j]不等\n                    j = pi[j-1]                 # j指向之前位置，s[i]与s[j]继续比较\n\n                if s[i] == s[j]:                # s[i]与s[j]相等，j+1，指向后一位\n                    j += 1\n                \n                pi[i] = j\n            return pi\n        \n\n        '''主程序'''\n        n, m = len(s), len(t)\n        pi = prefix_function(t)             # 预处理得到t的前缀函数\n\n        '''再次基于KMP的思想在s中匹配t'''\n        j = 0\n        for i in range(n):\n\n            while j>0 and s[i] != t[j]:\n                j = pi[j-1]\n\n            if s[i] == t[j]:\n                j += 1\n                if j == m:          # 匹配到了t，直接返回\n                    return i-m+1\n        return -1\n```\n\n\n\n# 图\n\n## 基本概念\n\n### 图的定义\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003220125-1474032413.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221102-1400626471.png\" alt=\"Snipaste_2023-01-30_21-23-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221760-951587005.png\" alt=\"Snipaste_2023-01-30_21-23-51\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003223080-1565255626.png\" alt=\"Snipaste_2023-01-30_21-24-05\" style=\"zoom:80%;\" />\n\n\n\n### 图的相关概念\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224084-979841846.png\" alt=\"Snipaste_2023-01-30_21-24-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224678-1822077730.png\" alt=\"Snipaste_2023-01-30_21-27-08\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003225334-754846157.png\" alt=\"Snipaste_2023-01-30_21-27-21\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003226064-2073402920.png\" alt=\"Snipaste_2023-01-30_21-28-02\" style=\"zoom:80%;\" />\n\n\n\n### 图的相关性质\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003227782-1734937726.png\" alt=\"Snipaste_2023-01-30_21-28-23\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003228360-914587659.png\" alt=\"Snipaste_2023-01-30_21-28-57\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003229809-1591759326.png\" alt=\"Snipaste_2023-01-30_21-29-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230414-1174857769.png\" alt=\"Snipaste_2023-01-30_21-30-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230901-753351247.png\" alt=\"Snipaste_2023-01-30_21-30-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232047-1465767147.png\" alt=\"Snipaste_2023-01-30_21-32-43\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232591-1535683489.png\" alt=\"Snipaste_2023-01-30_21-32-49\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003233903-1441000794.png\" alt=\"Snipaste_2023-01-30_21-35-23\" style=\"zoom:80%;\" />\n\n\n\n## 邻接矩阵\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003234489-1562431798.png\" alt=\"Snipaste_2023-01-30_21-37-04\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235002-186776549.png\" alt=\"Snipaste_2023-01-30_21-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235940-966594377.png\" alt=\"Snipaste_2023-01-30_21-38-52\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003236923-1957281841.png\" alt=\"Snipaste_2023-01-30_21-40-54\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003237832-290120583.png\" alt=\"Snipaste_2023-01-30_21-41-09\" style=\"zoom:80%;\" />\n\n\n\n### 邻接矩阵的实现\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003238610-1261452464.png\" alt=\"Snipaste_2023-01-30_21-44-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003239140-377931477.png\" alt=\"Snipaste_2023-01-30_21-44-57\" style=\"zoom:80%;\" />\n\n### 邻接矩阵的优劣\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240392-891512478.png\" alt=\"Snipaste_2023-01-30_21-45-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240971-599857625.png\" alt=\"Snipaste_2023-01-30_21-45-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003241646-615119159.png\" alt=\"Snipaste_2023-01-30_21-46-00\" style=\"zoom:80%;\" />\n\n\n\n## 邻接表\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242241-1455856646.png\" alt=\"Snipaste_2023-01-30_21-47-17\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242920-1071739990.png\" alt=\"Snipaste_2023-01-30_21-48-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244210-201636686.png\" alt=\"Snipaste_2023-01-30_21-49-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244800-1895554840.png\" alt=\"Snipaste_2023-01-30_21-51-13\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 邻接表的实现\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003245466-1236361989.png\" alt=\"Snipaste_2023-01-30_21-52-09\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003246047-1124627896.png\" alt=\"Snipaste_2023-01-30_21-52-42\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003247795-1194230170.png\" alt=\"Snipaste_2023-01-30_22-01-57\" style=\"zoom:80%;\" />\n\n\n\n### 特点\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003248572-1701553633.png\" alt=\"Snipaste_2023-01-30_22-02-13\" style=\"zoom:80%;\" />\n\n\n\n## 库的调用\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249097-1216946408.png\" alt=\"Snipaste_2023-01-30_22-02-38\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249555-896105563.png\" alt=\"Snipaste_2023-01-30_22-04-03\" style=\"zoom:80%;\" />\n\n\n\n## 图的遍历\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003250450-820535375.png\" alt=\"Snipaste_2023-01-30_22-04-28\" style=\"zoom:80%;\" />\n\n### 深度优先遍历\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327912-1791489249.png)\n\n![Snipaste_2023-02-28_16-08-42](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003328541-504477056.png)\n\n![Snipaste_2023-02-28_16-13-13](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003329403-1941220318.png)\n\n### 广度优先遍历\n\n![Snipaste_2023-02-28_16-19-30](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003330598-1653542503.png)\n\n![Snipaste_2023-02-28_16-21-29](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331313-1137883969.png)\n\n![Snipaste_2023-02-28_16-23-46](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331838-750586068.png)\n\n### BFS与DFS算法比较\n\n![Snipaste_2023-02-28_16-24-06](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003332467-729896859.png)\n\n\n\n## 最小生成树\n\n![Snipaste_2023-02-28_16-26-09](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003333918-1866209963.png)\n\n![Snipaste_2023-02-28_16-30-23](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003334742-393473291.png)\n\n\n\n### Prim算法\n\n![Snipaste_2023-02-28_16-44-11](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335324-58306181.png)\n\n\n\n### Kruskal算法\n\n![Snipaste_2023-02-28_16-44-51](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335897-1621272128.png)\n\n\n\n### 算法比较\n\n![Snipaste_2023-02-28_16-45-00](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003336585-2131642442.png)\n\n\n\n\n\n## 最短路径\n\n### 迪杰斯特拉算法\n\n![Snipaste_2023-02-28_17-03-13](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003337712-141859434.png)\n\n\n\n### 弗洛伊德算法\n\n![Snipaste_2023-02-28_17-10-57](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339292-402468428.png)\n\n\n\n## AOV网\n\n### 拓扑排序\n\n![Snipaste_2023-02-28_19-06-17](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339993-7971698.png)\n\n![Snipaste_2023-02-28_19-53-17](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003340535-1327013302.png)\n\n![Snipaste_2023-02-28_19-06-41](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003341740-1508867142.png)\n\n\n\n## AOE网\n\n### 关键路径\n\n![Snipaste_2023-02-28_19-54-05](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003342477-1005485536.png)\n\n![Snipaste_2023-02-28_19-53-51](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003343197-1311676865.png)\n\n![Snipaste_2023-02-28_19-54-39](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003344783-1167898578.png)\n\n![Snipaste_2023-02-28_19-55-12](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003345521-1452441577.png)\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003346601-1565523348.png)\n\n![Snipaste_2023-02-28_19-50-40](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003347998-887538165.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 贪心算法\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003251575-1640247239.png\" style=\"zoom:80%;\" />\n\n\n\n## 找零问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252277-1148509851.png\" style=\"zoom:80%;\" />\n\n### 代码\n\n```python\nt = [100, 50, 20, 5, 1]\n\n\ndef change(t, n):\n    m = [0 for _ in range(len(t))]\n    for i, money in enumerate(t):\n        m[i] = n // money\n        n = n % money\n    return m, n\n\n\nprint(change(t, 376))\n```\n\n\n\n\n\n\n\n## 分数背包问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252844-150015143.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253313-1442258686.png\" style=\"zoom:80%;\" />\n\n### 代码\n\n```python\ngoods=[(60,10),(100,20),(120,30)]\ngoods.sort(key=lambda  x:x[0]/x[1],reverse=True)\n\ndef fractional_backpack(goods,w):\n    m=[0 for _ in range(len(goods))]\n    total_v=0\n    for i,(prize,weight) in enumerate(goods):\n        if w>=weight:\n            m[i]=1\n            total_v+=prize\n            w-=weight\n        else:\n            m[i]=w/weight\n            total_v+=m[i]*prize\n            w=0\n            break\n    return total_v,m\n\n\nprint(fractional_backpack(goods,50))\n```\n\n\n\n\n\n## 拼接最大数字问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253781-1770455863.png\" style=\"zoom:80%;\" />\n\n\n\n### 代码\n\n```python\nfrom functools import cmp_to_key\n\nli = [32, 94, 128, 1286, 6, 71]\n\n\ndef xy_cmp(x, y):\n    if x + y < y + x:\n        return 1\n    elif x + y > y + x:\n        return -1\n    else:\n        return 0\n\n\ndef number_join(li):\n    li = list(map(str, li))\n    li.sort(key=cmp_to_key(xy_cmp))\n    return \"\".join(li)\n\n\nprint(number_join(li))\n```\n\n\n\n\n\n## 活动选择问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003254578-1413807720.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003255393-2021528861.png\" style=\"zoom:80%;\" />\n\n\n\n### 代码\n\n```python\nfrom operator import itemgetter\n\nactivities = [(1, 4), (3, 5), (0, 6), (5, 7), (5, 9), (3, 9), (6, 10), (8, 11), (8, 12), (2, 14), (12, 16)]\nactivities.sort(key=itemgetter(1, 0))\nprint(activities)\n\n\ndef activity_selection(a):\n    res = [a[0]]\n    for i in range(1, len(a)):\n        if a[i][0] >= res[-1][1]:\n            res.append(a[i])\n    return res\n\n\nprint(activity_selection(activities))\n```\n\n\n\n\n\n\n\n\n\n\n\n# 动态规划（DP算法）\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256037-686054189.png\" style=\"zoom:80%;\" />\n\n\n\n## 钢管切割问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256581-759536913.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003257430-1510450101.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258325-770199969.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258821-873262621.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259320-454356517.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259850-370054211.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 代码\n\n```python\ndef cut_rot_dp(p, n):\n    r = p.copy()\n    length = len(p)\n    solution_list = []\n    for i in range(1, length):\n        res = r[i]\n        solution = (i, 0)\n        for j in range(1, (i + 1) // 2 + 1):\n            res = max(res, r[j] + r[i - j])\n            if res == r[j] + r[i - j]:\n                solution = (j, i - j)\n\n        solution_list.append(solution)\n        r[i] = res\n    while n >= length:\n        res = 0\n        solution = tuple()\n        for j in range(1, (length + 1) // 2 + 1):\n            res = max(res, r[j] + r[length - j])\n            if res == r[j] + r[length - j]:\n                solution = (j, length - j)\n        solution_list.append(solution)\n        r.append(res)\n        length += 1\n    solution_list.insert(0, tuple())\n    return r[-1], solution_list\n\n\ndef find(li):\n    queue = [li[-1]]\n    res = []\n    while queue:\n        tmp = queue.pop(0)\n        if tmp[1] == 0:\n            res.append(tmp)\n        else:\n            queue.append(li[tmp[0]])\n            queue.append(li[tmp[1]])\n    return res\n\n\ndef cut_rot(p, n):\n    r, solution_list = cut_rot_dp(p, n)\n    res = find(solution_list)\n    return r, res\n\n\np = [0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30]\nprint(cut_rot(p,49))\n```\n\n\n\n\n\n\n\n\n\n## 最长公共子序列问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003300320-1875440287.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302210-1297330831.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302759-1918691034.png\" style=\"zoom:80%;\" />\n\n\n\n### 代码\n\n```python\ndef lcs(x, y):\n    m = len(x)\n    n = len(y)\n    c = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    b = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n                b[i][j] = 1\n            elif c[i - 1][j] > c[i][j - 1]:\n                c[i][j] = c[i - 1][j]\n                b[i][j] = 2\n            else:\n                c[i][j] = c[i][j - 1]\n                b[i][j] = 3\n    return c[m][n], b\n\n\ndef lcs_trackback(x, y):\n    c, b = lcs(x, y)\n    i = len(x)\n    j = len(y)\n    res = []\n    while i > 0 and j > 0:\n        if b[i][j] == 1:\n            res.append(x[i - 1])\n            i -= 1\n            j -= 1\n        elif b[i][j] == 2:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(res))\n\n\n\nprint(lcs_trackback(\"ABCBDAB\",\"BDCABA\"))\n```\n\n\n\n\n\n# 欧几里得算法（求最大公约数）\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303247-879832102.png\" style=\"zoom:80%;\" />\n\n\n\n```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd2(a, b):\n    while b > 0:\n        r = a % b\n        a = b\n        b = r\n    return a\n\n\nprint(gcd(12, 16))\nprint(gcd2(12, 16))\n```\n\n\n\n## 应用\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303671-24523928.png\" style=\"zoom:80%;\" />\n\n\n\n```python\nclass Fraction:\n    def __init__(self,a,b):\n        self.molecule=a\n        self.denominator=b\n        x=self.gcd(a,b)\n        self.molecule/=x\n        self.denominator/=x\n\n\n    def gcd(self,a,b):\n        while b > 0:\n            r = a % b\n            a = b\n            b = r\n        return a\n\n    def __add__(self, other):\n        denominator=self.zgs(self.denominator,other.denominator)\n        molecule=self.molecule*denominator/self.denominator+other.molecule*denominator/other.denominator\n        return Fraction(molecule,denominator)\n\n    def zgs(self,a,b):\n        x=self.gcd(a,b)\n        return a*b/x\n\n    def __str__(self):\n        return \"%d/%d\"%(self.molecule,self.denominator)\n\n\n\nnum1=Fraction(2,10)\nprint(num1)\nnum2=Fraction(1,6)\nprint(num1+num2)\n```\n\n\n\n\n\n\n\n# RSA加密算法\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304114-1449543961.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304589-1304774116.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305197-1886034459.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305618-318237693.png\" style=\"zoom:80%;\" />\n\n# 面向对象\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306185-1583924888.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306636-1961503250.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n# 设计模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307137-225997543.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307834-1722959623.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003308660-734490389.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309265-469661568.png\" style=\"zoom:80%;\" />\n\n\n\n## 创建型模式\n\n### 简单工厂模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309831-970662596.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310262-665839716.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 工厂方法模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310781-13662355.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003311241-1568389696.png\" style=\"zoom:80%;\" />\n\n\n\n### 抽象工厂模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312023-736659876.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312535-479714437.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313046-396414824.png\" style=\"zoom:80%;\" />\n\n### 建造者模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313487-715915219.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314040-471835656.png\" style=\"zoom:80%;\" />\n\n### 单例模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314566-1454255918.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003315019-438218292.png\" style=\"zoom:80%;\" />\n\n### 小结\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003316020-1263868583.png\" style=\"zoom:80%;\" />\n\n\n\n## 结构型模式\n\n### 适配器模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317015-2100024309.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317621-1181143597.png\" style=\"zoom:80%;\" />\n\n\n\n### 桥模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318427-1886468152.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318866-234284078.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319300-434134883.png\" style=\"zoom:80%;\" />\n\n\n\n### 组合模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319749-1583805141.png\" style=\"zoom:80%;\" />\n\n\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003348540-317771781.png)\n\n\n\n### 外观模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320248-760156051.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320739-907826483.png\" style=\"zoom:80%;\" />\n\n\n\n### 代理模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321202-1035783405.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321658-1470874291.png\" style=\"zoom:80%;\" />\n\n\n\n## 行为型模式\n\n### 责任链模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003322212-866246714.png\" alt=\"Snipaste_2023-01-11_10-40-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323017-394699248.png\" alt=\"Snipaste_2023-01-11_10-44-09\" style=\"zoom:80%;\" />\n\n\n\n### 观察者模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323959-1055100366.png\" alt=\"Snipaste_2023-01-11_10-44-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003324611-1326580995.png\" alt=\"Snipaste_2023-01-11_11-05-36\" style=\"zoom:80%;\" />\n\n\n\n### 模板方法模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003325672-1529465519.png\" alt=\"Snipaste_2023-01-11_11-12-14\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326296-584057204.png\" style=\"zoom:80%;\" />\n\n\n\n### 策略模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326910-962180721.png\" alt=\"Snipaste_2023-01-11_11-06-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327394-830844690.png\" alt=\"Snipaste_2023-01-11_11-11-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n","source":"_posts/2134.md","raw":"---\ntitle: 2134\ndate: 2025-02-28 21:59:16\ntags:\n- 算法\n- 学习\n- Python\ncategories:\n- Java\n---\n\n[TOC]\n\n\n\n# 绪论\n\n## 数据结构\n\n数据的两种结构**逻辑结构**和**存储结构（物理结构）**\n\n- 逻辑结构\n  - 线性结构\n    - 线性表\n    - 队列\n    - 栈\n  - 非线性结构\n    - 树形结构\n    - 图状结构\n    - 集合结构\n- 存储结构\n  - 顺序存储结构\n  - 链式存储结构\n\n## 算法\n\n算法是**解决某一特定问题的指定描述**\n\n### 算法的特征\n\n- 有穷性\n- 确定性（唯一性）\n- 可行性\n- 输入\n- 输出\n\n### 算法的评价\n\n- 正确性\n- 可读性\n- 健壮性\n- 效率和低存储\n\n#### 算法的时间复杂度\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003136951-1004055513.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003137847-1896422554.png\" style=\"zoom:80%;\" />\n\n\n\n#### 算法的空间复杂度\n\n和时间复杂度相比不那么重要，一般算法采取的措施为用空间换时间，即用一部分的空间消耗来缩短计算时间。\n\n\n\n\n\n# 递归\n\n## 汉诺塔问题（递归调用）\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003138540-1572386921.png\" style=\"zoom:60%;\" />\n\n```python\n# 汉诺塔算法\ndef HanNoTa(n, a, b, c):\n    if n > 0:\n        HanNoTa(n - 1, a, c, b)\n        print(f\"moving form {a} to {c}\")\n        HanNoTa(n - 1, b, a, c)\n\nHanNoTa(3,\"A\",\"B\",\"C\")\n```\n\n\n\n\n\n\n\n# 查找排序\n\n## 二分查找\n\n```python\n# 二分查找\ndef binary_search(li, val, key=1):\n    list_li = list(zip(list(range(len(li))), li))\n    if key == 1:\n        list_li = sorted(list_li, key=lambda x: x[1])\n    left = 0\n    right = len(list_li) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if list_li[mid][1] == val:\n            return list_li[mid][0]\n        elif list_li[mid][1] > val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    else:\n        return None\n\n\na = [1, 5, 6, 2, 1, 4, 2, 6, 2, 3]\nb = [1, 2, 3, 4, 5, 6, 7, 8]\nind = binary_search(a, 3)\nprint(ind)\nind = binary_search(b, 5, 0)\nprint(ind)\n```\n\n\n\n\n\n\n\n## 检查排序是否完成\n\n```python\ndef check(li, reverse=False):\n    if reverse == False:\n        for i in range(len(li) - 1):\n            if li[i] > li[i + 1]:\n                return False\n        else:\n            return True\n    elif reverse == True:\n        for i in range(len(li) - 1):\n            if li[i] < li[i + 1]:\n                return False\n        else:\n            return True\n```\n\n\n\n## 冒泡排序\n\n```python\n# 冒泡排序\nimport random\n\n\ndef bubble_sort(li: list):\n    for i in range(len(li) - 1):\n        exchange = False\n        for j in range(len(li) - i - 1):\n            if li[j] > li[j + 1]:\n                li[j], li[j + 1] = li[j + 1], li[j]\n                exchange = True\n        if not exchange:\n            return\n\n\nli = [random.randint(0, 10000) for _ in range(10)]\nprint(li)\nbubble_sort(li)\nprint(li)\n```\n\n\n\n## 选择排序\n\n```python\n# 选择排序\nimport random\n\n\ndef select_sort(li):\n    for i in range(len(li) - 1):\n        min_loc = i\n        for j in range(i + 1, len(li)):\n            if li[j] < li[min_loc]:\n                min_loc = j\n        if min_loc != i:\n            li[i], li[min_loc] = li[min_loc], li[i]\n\n\nli = [random.randint(0, 10000) for _ in range(10)]\nprint(li)\nselect_sort(li)\nprint(li)\n```\n\n\n\n## 插入排序\n\n```python\n# 插入排序\nimport random\n\n\ndef insert_sort(li):\n    for i in range(1, len(li)):\n        tmp = li[i]\n        j = i - 1\n        while j >= 0 and tmp < li[j]:\n            li[j + 1] = li[j]\n            j -= 1\n        li[j + 1] = tmp\n\n\nli = [random.randint(0, 10000) for _ in range(10)]\nprint(li)\ninsert_sort(li)\nprint(li)\n```\n\n\n\n## 希尔排序（高级版插入排序）\n\n```python\n# 希尔排序\nimport random\nimport copy\nimport time\n\n\ndef insert_sort_gap(li, gap):\n    for i in range(gap, len(li)):\n        tmp = li[i]\n        j = i - gap\n        while j >= 0 and tmp < li[j]:\n            li[j + gap] = li[j]\n            j -= gap\n        li[j + gap] = tmp\n\n\ndef shell_sort(li):\n    d = len(li) // 2\n    while d >= 1:\n        insert_sort_gap(li, d)\n        d //= 2\n\n\nli = list(range(10000))\nrandom.shuffle(li)\nli1 = copy.deepcopy(li)\nprint(li)\nprint(li1)\nstart = time.time()\nshell_sort(li)\nend = time.time()\nprint(end - start)\nprint(li1)\nstart = time.time()\ninsert_sort_gap(li1, 1)\nend = time.time()\nprint(end - start)\nprint(li)\nprint(li1)\n```\n\n\n\n## 快速排序\n\n```python\n# 快速排序\nimport random\nimport time\n# import sys\n# sys.setrecursionlimit(100000)     # 设置递归最大深度\n\n\ndef partition(li, left, right):\n    tmp = li[left]  # 记录下最左边的数\n    while left < right:  # 找到记录下的数的最合适的位置\n        while left < right and li[right] >= tmp:  # 从右边找比tmp小的数的位置\n            right -= 1\n        li[left] = li[right]  # 把右边较大的值写到左边的位置上\n        while left < right and li[left] <= tmp:  # 从左边找比tmp大的数的位置\n            left += 1\n        li[right] = li[left]  # 把左边较小的值写到右边的位置上\n    li[left] = tmp  # 把记录下的数写到合适的位置\n    return left  # 返回找到的位置\n\n\ndef _quick_sort(li, left, right):  # 递归调用\n    if left < right:  # 至少两个元素才进行递归调用\n        mid = partition(li, left, right)\n        _quick_sort(li, left, mid - 1)\n        _quick_sort(li, mid + 1, right)\n\n\ndef quick_sort(li):\n    _quick_sort(li, 0, len(li) - 1)\n\n\nli = [random.randint(0, 10000) for _ in range(10000)]\nprint(li)\nstart = time.time()\nquick_sort(li)\nend = time.time()\nprint(li)\nprint(end - start)\n```\n\n\n\n\n\n## 堆排序（二叉树）\n\n```python\n# 堆排序\nimport random\nimport time\ndef sift(li, low, high):\n    \"\"\"\n\n    :param li:列表\n    :param low: 堆的根节点的位置\n    :param high: 堆的最后一个元素的位置\n    :return: None\n    \"\"\"\n    i = low  # 最开始指向根节点\n    j = 2 * i + 1  # j为根节点的左孩子\n    tmp = li[low]  # 把堆顶元素存起来\n    while j <= high:\t# 建立大根堆\n        if j + 1 <= high and li[j + 1] > li[j]:  # 如果右孩子存在并且比左孩子大\n            j = j + 1  # j指向右孩子\n        if li[j] > tmp:  # 如果孩子节点大于父亲节点\n            li[i] = li[j]  # 孩子节点元素调整到父亲节点的位置\n            i = j  # 指针下移\n            j = 2 * i + 1\n        else:  # 因为tmp比孩子节点更大，找到合适的位置\n            li[i] = tmp  # 找到根节点合适的位置并放入\n            break\n    else:\n        li[i] = tmp  # 把tmp放到叶子节点上\n\n\ndef heap_sort(li):\n    n = len(li)\n    for i in range((n - 2) // 2, -1, -1):\n        # i表示建堆的时候调整的部分的根的下标\n        sift(li, i, n - 1)\n    # 建堆完成\n    for i in range(n - 1, -1, -1):\n        # i指向当前堆的最后一个元素\n        li[0], li[i] = li[i], li[0]  # 将最后一个元素与堆顶元素交换位置\n        sift(li, 0, i - 1)  # i-1是新的high\n\n\nli = [random.randint(0, 10000) for _ in range(10000)]\nprint(li)\nstart = time.time()\nheap_sort(li)\nend = time.time()\nprint(li)\nprint(end - start)\n```\n\n#### python中内置好的堆排序函数\n\n```python\n# python中内置好的堆排序\nimport heapq\nimport random\n\nli = [i for i in range(100)]\nrandom.shuffle(li)      # 打乱列表\nprint(li)\nheapq.heapify(li)       # 建堆\nfor i in range(len(li)):\n    print(heapq.heappop(li), end=\",\")       # 弹出一个堆中最小的元素\n```\n\n\n\n#### 利用堆排序解决topk问题\n\n```python\n# 利用堆排序解决topk问题\nimport random\nimport time\n\n\ndef sift(li, low, high):\n    \"\"\"\n\n    :param li:列表\n    :param low: 堆的根节点的位置\n    :param high: 堆的最后一个元素的位置\n    :return: None\n    \"\"\"\n    i = low  # 最开始指向根节点\n    j = 2 * i + 1  # j为根节点的左孩子\n    tmp = li[low]  # 把堆顶元素存起来\n    while j <= high:  # 建立小根堆\n        if j + 1 <= high and li[j + 1] < li[j]:  # 如果右孩子存在并且比左孩子小\n            j = j + 1  # j指向右孩子\n        if li[j] < tmp:  # 如果孩子节点小于父亲节点\n            li[i] = li[j]  # 孩子节点元素调整到父亲节点的位置\n            i = j  # 指针下移\n            j = 2 * i + 1\n        else:  # 因为tmp比孩子节点更小，找到合适的位置\n            li[i] = tmp  # 找到根节点合适的位置并放入\n            break\n    else:\n        li[i] = tmp  # 把tmp放到叶子节点上\n\n\ndef topk(li, k):\n    heap = li[0:k]\n    for i in range((k - 2) // 2, -1, -1):  # 建立小根堆\n        sift(heap, i, k - 1)\n    for i in range(k, len(li) - 1):  # 遍历\n        if li[i] > heap[0]:\n            heap[0] = li[i]\n            sift(heap, 0, k - 1)\n    for i in range(k - 1, -1, -1):  # 对结果排序\n        heap[0], heap[i] = heap[i], heap[0]\n        sift(heap, 0, i - 1)\n    return heap\n\n\nli = [i for i in range(10000)]\nrandom.shuffle(li)\nprint(topk(li, 10))\n```\n\n\n\n\n\n## 归并排序\n\n```python\n# 归并排序\nimport random\n\n\ndef merge(li, low, mid, high):  # 对列表中mid左右两边的子列表进行排序\n    i = low\n    j = mid + 1\n    ltmp = []\n    while i <= mid and j <= high:  # 左右两个子列表都有数\n        if li[i] < li[j]:\n            ltmp.append(li[i])\n            i += 1\n        else:\n            ltmp.append(li[j])\n            j += 1\n    while i <= mid:\n        ltmp.append(li[i])\n        i += 1\n    while j <= high:\n        ltmp.append(li[j])\n        j += 1\n    li[low:high + 1] = ltmp\n\n\ndef _merge_sort(li, low, high):\n    if low < high:  # 至少有两个元素，递归\n        mid = (low + high) // 2\n        _merge_sort(li, low, mid)\n        _merge_sort(li, mid + 1, high)\n        merge(li, low, mid, high)\n\n\ndef merge_sort(li):\n    _merge_sort(li, 0, len(li) - 1)\n\n\nli = [i for i in range(1000)]\nrandom.shuffle(li)\nprint(li)\nmerge_sort(li)\nprint(li)\n```\n\n\n\n\n\n\n\n## 六种排序方法的总结\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139244-909999252.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n## 计数排序\n\n```python\n# 计数排序\nimport random\n\n\ndef count_sort(li: list):\n    count = [0 for _ in range(min(li), max(li) + 1)]\n    min_num = min(li)\n    for val in li:\n        count[val - min_num] += 1\n    li.clear()\n    for ind, val in enumerate(count):\n        for i in range(val):\n            li.append(ind + min_num)\n\n\nli = list(range(-9, 21))\nrandom.shuffle(li)\nprint(li)\ncount_sort(li)\nprint(li)\n```\n\n\n\n\n\n## 桶排序（高级版计数排序）\n\n```python\n# 桶排序\nimport random\n\n\ndef bucket_sort(li: list):\n    max_num = max(li)\n    n = max_num // 100\n    if n == 0:\n        n = 1\n        buckets = [[]]\n    else:\n        buckets = [[] for _ in range(n)]\n    for var in li:\n        i = min(var // (max_num // n), n - 1)       # i表示var放到几号桶里\n        buckets[i].append(var)\n        for j in range(len(buckets[i]) - 1, 0, -1):     # 保持桶内的顺序\n            if buckets[i][j] < buckets[i][j - 1]:\n                buckets[i][j], buckets[i][j - 1] = buckets[i][j - 1], buckets[i][j]\n            else:\n                break\n    li.clear()\n    for buc in buckets:\n        li.extend(buc)\n    return li\n\n\nli = list(range(200))\nli1 = list(range(200))\nrandom.shuffle(li)\nprint(li == li1)\nbucket_sort(li)\nprint(li)\nprint(li == li1)\n```\n\n\n\n\n\n## 基数排序\n\n```python\n# 基数排序\nimport random\n\n\ndef radix_sort(li: list):\n    max_num = max(li)\n    it = 0\n    while 10 ** it <= max_num:  # 求最大数的位数\n        buckets = [[] for _ in range(10)]  # 创建桶\n        for var in li:  # 把数放入桶中\n            digit = (var // 10 ** it) % 10  # 依次取每个数的位数\n            buckets[digit].append(var)\n\n        li.clear()\n        for buc in buckets:\n            li.extend(buc)\n        it += 1\n\n\nli = [random.randint(0, 10000) for _ in range(1000)]\nprint(li)\nradix_sort(li)\nprint(li)\nprint(check(li))\n```\n\n\n\n\n\n# 数据结构\n\n## 线性表\n\n- **[顺序表](#列表（即顺序表）)**\n- **[链表](#链表)**\n\n## 列表（即顺序表）\n\n1. 列表内的每个节点储存的元素为地址，所以列表内部可以时任意数据类型\n2. 列表是动态分配存储空间，列表长度不够的时候，python底层会为列表重新开辟一个更大的空间，并把原先列表中存储的地址复制到新开辟的空间中\n\n\n\n## 栈（后进先出）\n\n### 顺序栈\n\n列表（li）结构可以实现栈\n\n- 进栈：li.append\n- 出栈：li.pop\n- 取栈顶：li[-1]\n\n```python\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if len(self.stack) > 0:\n            return self.stack.pop()\n        else:\n            return None\n\n    def get_pop(self):\n        if len(self.stack) > 0:\n            return self.stack[-1]\n        else:\n            return None\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(stack.pop())\nprint(stack.pop())\nprint(stack.is_empty())\nprint(stack.pop())\nprint(stack.is_empty())\nprint(stack.pop())\n```\n\n\n\n### 链式栈\n\n```python\nclass stack_linked():\n    def __init__(self, Node=None):\n        self.head = Node\n\n    def create(self, val):\n        if not self.head:\n            self.head = ListNode(val)\n\n    def push(self, val):\n        if not self.head:\n            self.head = ListNode(val)\n            return\n        node = ListNode(val)\n        node.next = self.head\n        self.head = node\n\n    def pop(self):\n        val = self.head\n        self.head = self.head.next\n        return val\n\n\nstack = stack_linked()\nstack.push(5)\nstack.push(6)\nprint(stack.pop().val)\nprint(stack.head.val)\n```\n\n\n\n### 栈的应用\n\n#### 迷宫问题（找的不一定是最短路径）\n\n```python\nmap = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\ndirs = [\n    lambda x, y: (x + 1, y),\n    lambda x, y: (x, y + 1),\n    lambda x, y: (x - 1, y),\n    lambda x, y: (x, y - 1)\n]\n\n\ndef map_path(x1, y1, x2, y2):\n    stack = []\n    stack.append((x1, y1))\n    map[x1][y1]=2\n    while len(stack) > 0:\n        curNode = stack[-1]\n        if curNode[0] == x2 and curNode[1] == y2:\n            for p in stack:\n                print(p)\n            return True\n\n        for dir in dirs:\n            nextNode = dir(curNode[0], curNode[1])\n            if map[nextNode[0]][nextNode[1]] == 0:\n                stack.append(nextNode)\n                map[nextNode[0]][nextNode[1]] = 2\n                break\n        else:\n            map[nextNode[0]][nextNode[1]] = 2\n            stack.pop()\n    else:\n        print(\"没有路\")\n        return False\n\n\nmap_path(1, 1, 8, 8)\nfor i in map:\n    print(i)\n```\n\n\n\n#### 十进制转化为其他进制\n\n```python\n# 十进制转化为其他进制\ndef base_conversion(val, base):\n    li = []\n    while val != 0:\n        li.append(val % base)\n        val = val // base\n\n    li.reverse()\n    s = ''.join(map(str,li))\n    return s\n\n\nprint(base_conversion(120, 2))\n```\n\n\n\n## 队列（先进先出）\n\n列表（li）可以实现队列\n\n- 入队：li.append\n- 出队：li.pop(0)\n- 取队头：li[0]\n\n### 顺序队列\n\n#### 基础队列类\n\n```python\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def push(self, element):\n        self.queue.append(element)\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def pop(self):\n        if not self.is_empty():\n            return self.queue.pop(0)\n        else:\n            return None\n\n    def get_top(self):\n        return self.queue[0]\n\n\nqueue = Queue()\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nprint(queue.is_empty())\nprint(queue.pop())\nprint(queue.get_top())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.is_empty())\n```\n\n\n\n#### 循环队列类\n\n```python\nclass Queue:\n    def __init__(self, size=100):\n        self.queue = [0 for _ in range(size)]\n        self.size = size\n        self.rear = 0\n        self.front = 0\n\n    def push(self, element):\n        if not self.is_filled():\n            self.rear = (self.rear + 1) % self.size\n            self.queue[self.rear] = element\n        else:\n            raise IndexError(\"Queue is filled\")\n\n    def pop(self):\n        if not self.is_empty():\n            self.front = (self.front + 1) % self.size\n            return self.queue[self.front]\n        raise IndexError(\"Queue is empty\")\n\n    def get_top(self):\n        if not self.is_empty():\n            return self.queue[self.rear]\n        else:\n            return None\n\n    def is_empty(self):\n        return self.rear == self.front\n\n    def is_filled(self):\n        return (self.rear + 1) % self.size == self.front\n\nqueue=Queue(5)\nprint(queue.is_empty())\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nqueue.push(4)\nprint(queue.is_filled())\nprint(queue.get_top())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\nprint(queue.pop())\n```\n\n\n\n#### 内置队列\n\n```python\nfrom collections import deque  # 双向队列\n\nq = deque([1, 2, 3, 4], 4)\nq.append(5)  # 队尾进\nprint(q.popleft())  # 队首出\n\nq.clear()\nq.appendleft(1)  # 队首进\nq.appendleft(2)\nq.appendleft(3)\nprint(q.pop())  # 队尾出\nprint(q.pop())\nprint(q.pop())\n```\n\n\n\n### 链式队列\n\n```python\nclass Node():\n    def __init__(self, val=0):\n        self.val = val\n        self.next = None\n\n\nclass queue_linked():\n    def __init__(self):\n        self.front = None\n        self.rear = None\n\n    def push(self, val):\n        node = Node(val)\n        if self.front is None:\n            self.front = node\n            self.rear = node\n        else:\n            self.rear.next = node\n            self.rear = self.rear.next\n\n    def pop(self):\n        if self.front == self.rear and self.front:\n            node = self.front\n            self.front = self.rear = None\n            return node\n        else:\n            if not self.front:\n                return\n            node = self.front\n            self.front = self.front.next\n            return node\n\n    def peek(self):\n        if not self.is_empty():\n            return self.front.val\n        else:\n            return\n\n    def is_empty(self):\n        if self.front and self.rear:\n            return False\n        else:\n            return True\n\n    def show(self):\n        p = self.front\n        while p:\n            print(p.val, end=\" \")\n            p = p.next\n        print()\n\n\nqueue = queue_linked()\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nprint(queue.pop().val)\nprint(queue.pop().val)\nprint(queue.pop().val)\n# print(queue.peek())\nqueue.show()\n```\n\n\n\n### 队列的应用\n\n#### 迷宫问题（求的是最短路径）\n\n```python\nmap = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n]\n\ndirs = [\n    lambda x, y: (x + 1, y),\n    lambda x, y: (x, y + 1),\n    lambda x, y: (x - 1, y),\n    lambda x, y: (x, y - 1)\n]\n\n\ndef print_path(path, map):\n    curNode = path[-1]\n    realpath = []\n    while curNode[2] != -1:\n        realpath.append(curNode[0:2])\n        map[curNode[0]][curNode[1]] = 2\n        curNode = path[curNode[2]]\n    realpath.append(curNode[0:2])\n    map[curNode[0]][curNode[1]] = 2\n    realpath.reverse()\n    for node in realpath:\n        print(node)\n\n\nfrom collections import deque\nimport copy\n\n\ndef map_path_shortest(x1, y1, x2, y2, map):\n    map1 = copy.deepcopy(map)\n    queue = deque()\n    queue.append((x1, y1, -1))\n    path = []\n    while len(queue) > 0:\n        curNode = queue.popleft()\n        path.append(curNode)\n        if curNode[0] == x2 and curNode[1] == y2:\n            print_path(path, map)\n            return True\n        for di in dirs:\n            nextNode = di(curNode[0], curNode[1])\n            if map1[nextNode[0]][nextNode[1]] == 0:\n                queue.append((nextNode[0], nextNode[1], len(path) - 1))\n                map1[nextNode[0]][nextNode[1]] = 2\n    else:\n        print(\"没有路\")\n        return False\n\nmap_path_shortest(1, 1, 8, 8, map)\nfor i in map:\n    print(i)\n```\n\n\n\n\n\n\n\n## 链表\n\n### 单链表\n\n#### 单链表的创建\n\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n        \n        \nclass LinkedList:\n    class LinkListIterator:\n        def __init__(self, node):\n            self.node = node\n\n        def __next__(self):\n            if self.node:\n                cur_node = self.node\n                self.node = cur_node.next\n                return cur_node.val\n            else:\n                raise StopIteration\n\n        def __iter__(self):\n            return self\n\n    def __init__(self, iterable=None):\n        self.head = None\n        self.tail = None\n        if iterable:\n            self.extend(iterable)\n\n    def append(self, obj):\n        s = ListNode(obj)\n        if not self.head:\n            self.head = s\n            self.tail = s\n        else:\n            self.tail.next = s\n            self.tail = s\n\n    def extend(self, iterable):\n        for obj in iterable:\n            self.append(obj)\n\n    def find(self, obj):\n        for n in self:\n            if n == obj:\n                return True\n        else:\n            return False\n\n    def create(self, li: list):\n        self.head = ListNode(li[0])\n        self.tail = self.head\n        for element in li[1:]:\n            node = ListNode(element)\n            self.tail.next = node\n            self.tail = node\n        return self.head\n\n    def create_head(self, li: list):\n        self.head = ListNode(li[0])\n        self.tail = self.head\n        for element in li[1:]:\n            node = ListNode(element)\n            node.next = self.head\n            self.head = node\n        return self.head\n\n    def show(self):\n        Node = self.head\n        while Node != None:\n            print(Node.val, end='\\t')\n            Node = Node.next\n        print()\n\n    def get_length(self):\n        if self.head is None:\n            return 0\n        count = 1\n        node = self.head\n        while node != self.tail:\n            count += 1\n            node = node.next\n        return count\n\n    def get_value(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n        if index < 0 or index >= self.get_length():\n            return -1\n        cur = self.head.next\n        while index:\n            cur = cur.next\n            index -= 1\n        return cur.val\n\n    def get_index(self, value):\n        count = 0\n        cur = self.head\n        while cur:\n            if cur.val == value:\n                break\n            count += 1\n            cur = cur.next\n        else:\n            return -1\n        return count\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        if index <= 0:\n            node = ListNode(val)\n            node.next = self.head\n            self.head = node\n            return\n        elif index >= self.get_length():\n            self.tail.next = ListNode(val)\n            self.tail = self.tail.next\n            return\n\n        node = ListNode(val)\n        cur = self.head\n        pre = None\n        while index:\n            pre = cur\n            cur = cur.next\n            index -= 1\n        node.next = pre.next\n        pre.next = node\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        if index < 0 or index >= self.get_length():\n            return\n        if index == 0:\n            self.head = self.head.next\n            return\n        pre = self.head\n        while index > 1:\n            pre = pre.next\n            index -= 1\n        pre.next = pre.next.next\n\n    def deleteAtValue(self, value):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        if self.head.val == value:\n            self.head = self.head.next\n            return\n        cur = self.head\n        while cur.next:\n            if cur.next.val == value:\n                break\n            cur = cur.next\n        else:\n            return\n        cur.next = cur.next.next\n\n    def __iter__(self):\n        return self.LinkListIterator(self.head)\n\n    def __repr__(self):\n        return \"<<\" + \",\".join(map(str, self)) + \">>\"\n\n\nli = LinkedList([1, 2, 3, 5, 6, 3])\nli.show()\nprint(li.get_length())\nprint(li.get_index(6))\nli.addAtIndex(7, 4)\nli.show()\nli.deleteAtValue(3)\nli.show()\nprint(li.get_index(4))\n```\n\n\n\n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n        \n\nclass MyLinkedList(object):\n\n    def __init__(self):\n        self.head = ListNode()\n        self.size = 0  # 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新\n\n    def get(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n        if index < 0 or index >= self.size:\n            return -1\n        cur = self.head.next\n        while (index):\n            cur = cur.next\n            index -= 1\n        return cur.val\n\n    def addAtHead(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        new_node = ListNode(val)\n        new_node.next = self.head.next\n        self.head.next = new_node\n        self.size += 1\n\n    def addAtTail(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        new_node = ListNode(val)\n        cur = self.head\n        while (cur.next):\n            cur = cur.next\n        cur.next = new_node\n        self.size += 1\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n        if index < 0:\n            self.addAtHead(val)\n            return\n        elif index == self.size:\n            self.addAtTail(val)\n            return\n        elif index > self.size:\n            return\n\n        node = ListNode(val)\n        pre = self.head\n        while (index):\n            pre = pre.next\n            index -= 1\n        node.next = pre.next\n        pre.next = node\n        self.size += 1\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n        if index < 0 or index >= self.size:\n            return\n        pre = self.head\n        while (index):\n            pre = pre.next\n            index -= 1\n        pre.next = pre.next.next\n        self.size -= 1\n```\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139985-802441053.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140429-1838041831.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 双链表\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140952-1508005939.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003141477-1809483299.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142022-1131773000.png\" style=\"zoom:80%;\" />\n\n#### 双链表的创建\n\n```python\nclass Node:\n\n    def __init__(self, val):\n        self.val = val\n        self.prev = None\n        self.next = None\n\n\nclass MyLinkedListDouble:\n\n    def __init__(self):\n        self._head, self._tail = Node(0), Node(0)  # 虚拟节点\n        self._head.next, self._tail.prev = self._tail, self._head\n        self._count = 0  # 添加的节点数\n\n    def _get_node(self, index: int) -> Node:\n        # 当index小于_count//2时, 使用_head查找更快, 反之_tail更快\n        if index >= self._count // 2:\n            # 使用prev往前找\n            node = self._tail\n            for _ in range(self._count - index):\n                node = node.prev\n        else:\n            # 使用next往后找\n            node = self._head\n            for _ in range(index + 1):\n                node = node.next\n        return node\n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        \"\"\"\n        if 0 <= index < self._count:\n            node = self._get_node(index)\n            return node.val\n        else:\n            return -1\n\n    def addAtHead(self, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the first element of the linked list.\n         After the insertion, the new node will be the first node of the linked list.\n        \"\"\"\n        self._update(self._head, self._head.next, val)\n\n    def addAtTail(self, val: int) -> None:\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        \"\"\"\n        self._update(self._tail.prev, self._tail, val)\n\n    def addAtIndex(self, index: int, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list.\n        If index equals to the length of linked list, the node will be appended to the end of linked list.\n        If index is greater than the length, the node will not be inserted.\n        \"\"\"\n        if index < 0:\n            index = 0\n        elif index > self._count:\n            return\n        node = self._get_node(index)\n        self._update(node.prev, node, val)\n\n    def _update(self, prev: Node, next: Node, val: int) -> None:\n        \"\"\"\n            更新节点\n            :param prev: 相对于更新的前一个节点\n            :param next: 相对于更新的后一个节点\n            :param val:  要添加的节点值\n        \"\"\"\n        # 计数累加\n        self._count += 1\n        node = Node(val)\n        prev.next, next.prev = node, node\n        node.prev, node.next = prev, next\n\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        \"\"\"\n        if 0 <= index < self._count:\n            node = self._get_node(index)\n            # 计数-1\n            self._count -= 1\n            node.prev.next, node.next.prev = node.next, node.prev\n```\n\n\n\n\n\n### 链表与数组的差别\n\n- 链表\n  - 优点：插入删除操作较快，内存可以动态分配\n  - 缺点：查找操作较慢\n- 数组\n  - 优点：结构简单，查找操作快\n  - 缺点：插入删除操作较慢，内存不能动态分配\n\n\n\n# 哈希表\n\npython中的**集合**，**字典**结构在底层都是用的哈希表来实现的\n\n## 哈希表（开辟的一系列连续的地址即数组）\n\n\n\n## 哈希函数（计算输入的值在哈希表中对应下标的函数）\n\n\n\n## 哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\n\n- 解决哈希冲突的方法\n  - 线性探测法：如果地址冲突，那么它所存放的位置在哈希表中加一\n  - 二次探测法：利用二次函数，计算冲突时，应该存储的位置\n  - 拉链存储法：哈希表的每个节点存储的是链表\n    - <img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142551-437647432.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n\n\n# 树和二叉树\n\n## 基本概念\n\n- 根节点\n- 叶子节点\n- 树的深度\n- 节点的度\n- 树的度\n- 父亲节点\n- 孩子节点（左孩子/右孩子）\n- 子树\n\n## 二叉树（度为2的树）\n\n### 二叉树的性质\n\n1. **对于非空二叉树，如果叶子节点树为n~0~，度为2的节点数为n~2~，则有n~0~=n~2~+1**\n\n2. **对于非空二叉树的第i层上最多有2^i-1^个节点（满二叉树）**\n\n3. **一颗深度为k的二叉树中，最多有2^k^-1个节点（满二叉树）**\n\n4. **具有n个节点的完全二叉树的深度为：$\\lfloor log_2n \\rfloor+1$**\n\n5. **如果对于一颗有n个节点的完全二叉树的节点按层序编号，则对任意节点i（1<=i<=n）**\n\n   1. **如果i=1，则节点i时二叉树的根节点，如果i>1,则其父亲节点为$\\lfloor i/2 \\rfloor$**\n\n   1. **如果$2i\\leq n$，则其左孩子是节点2i，否则i无左孩子，为叶子节点**\n\n   1. **如果$2i+1\\leq n$，其右孩子是节点2i+1，否则节点i无右孩子**\n\n      \n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003143534-675539412.png\" alt=\"Snipaste_2023-01-26_11-05-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144113-2080533132.png\" alt=\"Snipaste_2023-01-26_11-08-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144872-1933819243.png\" alt=\"Snipaste_2023-01-26_11-08-32\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003145823-249465355.png\" alt=\"Snipaste_2023-01-26_11-09-15\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003146532-1929601304.png\" style=\"zoom:80%;\" />\n\n\n\n### 完全二叉树\n\n### 满二叉树\n\n### 存储方式\n\n- 顺序存储（用列表或者数组储存）（一般适用于完全二叉树）\n\n- 链式存储\n\n- 列表存储\n\n  <img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003147452-974457570.png\" style=\"zoom:80%;\" />\n\n### 二叉树的创建\n\n#### 层次按序创建\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Tree(object):\n\n    def __init__(self, li=None):\n        self.root = None\n        self.lt = []\n        if li:\n            self.extend(li)\n\n    def extend(self, li: list):  # 层次添加创建\n        for i in li:\n            self.add(i)\n        self.clear()\n\n    def add(self, number):\n        # if number is None:\n        #     self.lt.pop(0)\n        #     return\n        node = TreeNode(number)  # 将输入的数字节点化，使其具有左右孩子的属性\n        if self.root == None:\n            self.root = node\n            self.lt.append(self.root)\n        else:\n            while self.lt:\n                point = self.lt[0]  # 依次对左右孩子未满的节点分配孩子\n                if point.val == None:\n                    self.lt.pop(0)\n                    continue\n                if point.left == None:\n                    point.left = node\n                    self.lt.append(point.left)  # 该节点后面作为父节点也是未满的，也要加入到列表中。\n                    return\n                if point.right == None:\n                    point.right = node\n                    self.lt.append(point.right)  # 与左孩子同理\n                    self.lt.pop(0)  # 表示该节点已拥有左右孩子，从未满列表中去除\n                    return\n\n    def clear(self):  # 清除值为None的节点\n        def level_order_traversal(root: TreeNode):\n            queue = deque()\n            queue.append(root)\n            while len(queue) > 0:\n                node = queue.popleft()\n                if node.left and node.left.val == None:\n                    node.left = None\n                if node.left:\n                    queue.append(node.left)\n                if node.right and node.right.val == None:\n                    node.right = None\n                if node.right:\n                    queue.append(node.right)\n\n        level_order_traversal(self.root)\n\n    def show(self):  # 前序遍历输出\n\n        def dfs(root):\n            if not root:\n                return\n\n            print(root.val, end=\" \")\n            dfs(root.left)\n            dfs(root.right)\n\n        dfs(self.root)\n\n    def search(self, val):\n\n        def searchdata(T, val):\n            if T == None:\n                return None\n            if T.val == val:\n                return T\n            else:\n                p = searchdata(T.left, val)\n                if p != None:\n                    return p\n                p = searchdata(T.right, val)\n                if p != None:\n                    return p\n\n        return searchdata(self.root, val)\n```\n\n\n\n#### 函数前序创建\n\n```python\ndef creat_binary_tree(input_list=[]):\n    # 构建二叉树\n    # param input_list:输入数列\n    # 当我们在函数中传入的数列不存在或者传入的数列中元素的个数等于0时，表示是一棵空树\n    # 此时不需要操作，直接返回None即可\n    if input_list is None or len(input_list) == 0:\n        return None\n    # 结点中的数据等于列表中的第一个元素，每次pop出去一个元素，后面的元素会往前走一个位置\n    # 这样可以保证元素的一次弹出\n    val = input_list.pop(0)\n    # 当弹出的元素是None时，表示该节点为空，直接返回None\n    if val is None:\n        return None\n    # 通过刚才定义的TreeNode类新建node\n    node = TreeNode(val)\n    # node的左孩子等于弹出的结点，即input_list.pop(0)弹出的元素\n    node.left = creat_binary_tree(input_list)\n    # node的右孩子等于弹出的结点，即input_list.pop(0)弹出的元素\n    node.right = creat_binary_tree(input_list)\n    # 返回node结点\n    return node\n```\n\n\n\n### 二叉树的遍历\n\n1. 递归遍历\n2. 非递归遍历\n\n- 前序遍历\n- 中序遍历\n- 后序遍历\n- 层次遍历\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003148331-2135232511.png\" style=\"zoom:80%;\" />\n\n#### 递归遍历代码\n\n```python\ndef pre_order_traversal(node):\n    # 前序遍历\n    # param node:二叉树节点\n    # 当node为空表示为一棵空树，不需要进行前序遍历直接返回即可\n    if node is None:\n        return\n    # 此时node不为空，直接打印node的val域\n    print(node.val, end=\" \")\n    # 递归的先序遍历node的左孩子\n    pre_order_traversal(node.left)\n    # 递归的先序遍历node的左孩子\n    pre_order_traversal(node.right)\n    return node\n\n\n#\ndef in_order_traversal(node):\n    # 中序遍历\n    # param node:二叉树节点\n    if node is None:\n        return\n    # 递归的中序遍历node的左孩子\n    in_order_traversal(node.left)\n    # 打印节点的值\n    print(node.val, end=\" \")\n    # 递归的中序遍历node的左孩子\n    in_order_traversal(node.right)\n    return node\n\n\ndef post_order_traversal(node):\n    # 后序遍历\n    # param node:二叉树节点\n    if node is None:\n        return\n    # 递归的后序遍历node的左孩子\n    post_order_traversal(node.left)\n    # 递归的后序遍历node的左孩子\n    post_order_traversal(node.right)\n    # 打印节点的值\n    print(node.val, end=\" \")\n    return node\n\n\nfrom collections import deque, Counter\n\n\ndef level_order_traversal(root: TreeNode):\n    queue = deque()\n    queue.append(root)\n    while len(queue) > 0:\n        node = queue.popleft()\n        print(node.val, end=\" \")\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n```\n\n\n\n#### 非递归遍历代码\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003149366-1785461924.png\" style=\"zoom:80%;\" />\n\n```python\ndef preorderTraversal(root: TreeNode) -> List[int]:\n    # 根结点为空则返回空列表\n    if not root:\n        return []\n    stack = [root]\n    result = []\n    while stack:\n        node = stack.pop()\n        # 中结点先处理\n        result.append(node.val)\n        # 右孩子先入栈\n        if node.right:\n            stack.append(node.right)\n        # 左孩子后入栈\n        if node.left:\n            stack.append(node.left)\n    return result\n\n\n# 中序遍历-迭代-LC94_二叉树的中序遍历\n\ndef inorderTraversal(root: TreeNode) -> List[int]:\n    if not root:\n        return []\n    stack = []  # 不能提前将root结点加入stack中\n    result = []\n    cur = root\n    while cur or stack:\n        # 先迭代访问最底层的左子树结点\n        if cur:\n            stack.append(cur)\n            cur = cur.left\n        # 到达最左结点后处理栈顶结点\n        else:\n            cur = stack.pop()\n            result.append(cur.val)\n            # 取栈顶元素右结点\n            cur = cur.right\n    return result\n\n\n# 后序遍历-迭代-LC145_二叉树的后序遍历\n\ndef postorderTraversal(root: TreeNode) -> List[int]:\n    if not root:\n        return []\n    stack = [root]\n    result = []\n    while stack:\n        node = stack.pop()\n        # 中结点先处理\n        result.append(node.val)\n        # 左孩子先入栈\n        if node.left:\n            stack.append(node.left)\n        # 右孩子后入栈\n        if node.right:\n            stack.append(node.right)\n    # 将最终的数组翻转\n    return result[::-1]\n```\n\n\n\n\n\n## 哈夫曼树\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003150422-1241951893.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151230-137109831.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151864-1062009624.png\" style=\"zoom:80%;\" />\n\n![]()\n\n#### 哈夫曼编码\n\n#### 代码\n\n```python\nclass HuffmanNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\n\nclass HuffmanTree:\n    def __init__(self, head=None):\n        self.head = head\n        self.lst = []\n        self.huffman_code = None\n\n    def create(self, li: list):\n        res = []\n        for i in li:\n            res.append(HuffmanNode(i))\n        self.lst = res[:]\n        while len(res) > 1:\n            res.sort(key=lambda item: item.val)\n            node_left = res.pop(0)\n            node_right = res.pop(0)\n            node_father = HuffmanNode(node_left.val + node_right.val)\n            node_father.left = node_left\n            node_father.right = node_right\n            node_left.parent = node_father\n            node_right.parent = node_father\n            res.append(node_father)\n\n        res[0].parent = None\n        self.head = res[0]\n\n    def encoding(self):\n        if self.head is None:\n            return\n        huffman_code = [''] * len(self.lst)\n        for i in range(len(self.lst)):\n            node = self.lst[i]\n            while node != self.head:\n                if node.parent.left == node:\n                    huffman_code[i] = \"0\" + huffman_code[i]\n                else:\n                    huffman_code[i] = \"1\" + huffman_code[i]\n                node = node.parent\n        self.huffman_code = huffman_code\n\n\nhuffmantree = HuffmanTree()\nhuffmantree.create([2, 4, 5, 7])\nlevel_order_traversal(huffmantree.head)\nhuffmantree.encoding()\nprint(huffmantree.huffman_code)\n```\n\n\n\n\n\n## 二叉搜索树\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003152778-490328608.png\" style=\"zoom:80%;\" />\n\n\n\n### 基本操作\n\n- 插入\n- 查询\n- 删除\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003153588-922353087.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154127-989110491.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154644-1062126191.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 代码\n\n```python\nclass BiTreeNode:\n    def __init__(self, data):\n        self.val = data\n        self.left = None\n        self.right = None\n        self.parent = None\n\n\nclass BST:\n    def __init__(self, data: list):\n        self.root = None\n        if data:\n            # if self.root is None:\n            #     self.root=BiTreeNode(data[0])\n            #     data=data[1:]\n            # for i in data:\n            #     self.insert(self.root, i)\n            for i in data:\n                self.insert_no_rec(i)\n\n    def insert(self, node, val):\n        if not node:\n            node = BiTreeNode(val)\n        elif val <= node.val:\n            node.left = self.insert(node.left, val)\n        elif val > node.val:\n            node.right = self.insert(node.right, val)\n        return node\n\n    def insert_no_rec(self, val):\n        p = self.root\n        if not p:\n            self.root = BiTreeNode(val)\n            return\n        while True:\n            if val <= p.val:\n                if p.left:\n                    p = p.left\n                else:\n                    p.left = BiTreeNode(val)\n                    p.left.parent = p\n                    return\n            elif val > p.val:\n                if p.right:\n                    p = p.right\n                else:\n                    p.right = BiTreeNode(val)\n                    p.right.parent = p\n                    return\n\n    def query(self, node, val):\n        if not node:\n            return None\n        if node.val < val:\n            return self.query(node.right, val)\n        elif node.val > val:\n            return self.query(node.left, val)\n        else:\n            return node\n\n    def query_no_rec(self, val):\n        p = self.root\n        while p:\n            if p.val < val:\n                p = p.right\n            elif p.val > val:\n                p = p.left\n            else:\n                return p\n        return None\n\n    def __remove_node_1(self, node):\n        if not node.parent:\n            self.root = None\n        if node == node.parent.left:\n            node.parent.left = None\n        else:\n            node.parent.right = None\n\n    def __remove_node_21(self, node):\n        if not node.parent:\n            self.root = node.left\n            node.left.parent = None\n        elif node == node.parent.left:\n            node.parent.left = node.left\n            node.left.parent = node.parent\n        else:\n            node.parent.right = node.left\n            node.left.parent = node.parent\n\n    def __remove_node_22(self, node):\n        if not node.parent:\n            self.root = node.right\n        elif node == node.parent.left:\n            node.parent.left = node.right\n            node.right.parent = node.parent\n        else:\n            node.parent.right = node.right\n            node.right.parent = node.parent\n\n    def delete(self, val):\n        if self.root:\n            node = self.query_no_rec(val)\n            if not node:\n                return False\n            if not node.left and not node.right:\n                self.__remove_node_1(node)\n            elif not node.right:\n                self.__remove_node_21(node)\n            elif not node.left:\n                self.__remove_node_22(node)\n            else:\n                min_node = node.right\n                while min_node.left:\n                    min_node = min_node.left\n                node.val = min_node.val\n                if min_node.right:\n                    self.__remove_node_22(min_node)\n                else:\n                    self.__remove_node_1(min_node)\n\n\nT = BST([5, 1, 2, 3, 4, 1, 6, 2])\nin_order_traversal(T.root)\nT.delete(1)\nT.delete(1)\nT.delete(6)\nprint()\nin_order_traversal(T.root)\n```\n\n\n\n\n\n## AVL树（平衡二叉搜索树）\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155158-1066944240.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155688-884961537.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156322-127906496.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156892-1756837025.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003157549-2080550850.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003158464-610122918.png\" style=\"zoom: 80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003159072-1840188905.png\" style=\"zoom:80%;\" />\n\n\n\n旋转操作过于复杂，可以先将列表元素排好序，然后使用二分递归的方法\n\n代码如下：\n\n### 二分递归代码\n\n```python\ndef sortedArrayToBST(nums: list[int]) -> TreeNode:\n    def helper(left, right):\n        if left > right:\n            return None\n        mid = (left + right) // 2\n        root = TreeNode(nums[mid])\n        root.left = helper(left, mid - 1)\n        root.right = helper(mid + 1, right)\n        return root\n\n    return helper(0, len(nums) - 1)\n\n\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nroot = sortedArrayToBST(li)\nin_order_traversal(root)\nprint()\npre_order_traversal(root)\n```\n\n\n\n# 树和森林\n\n## 基本概念\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003200141-1341052574.png\" style=\"zoom:80%;\" />\n\n\n\n## 性质\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003201672-1580609190.png\" alt=\"Snipaste_2023-01-29_12-34-45\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003202403-279314825.png\" alt=\"Snipaste_2023-01-29_12-35-01\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203221-868073196.png\" alt=\"Snipaste_2023-01-29_12-35-20\" style=\"zoom:80%;\" />\n\n\n\n## 存储\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203861-1157806461.png\" alt=\"Snipaste_2023-01-29_12-35-47\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003204640-1744020770.png\" alt=\"Snipaste_2023-01-29_12-36-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003205278-1739834.png\" alt=\"Snipaste_2023-01-29_12-36-36\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206036-1784944727.png\" alt=\"Snipaste_2023-01-29_12-36-59\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206570-1588493395.png\" alt=\"Snipaste_2023-01-29_12-37-34\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png\" alt=\"Snipaste_2023-01-29_12-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png\" alt=\"Snipaste_2023-01-29_12-38-31\" style=\"zoom:80%;\" />\n\n\n\n## 二叉树的转换\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png\" alt=\"Snipaste_2023-01-29_12-42-06\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png\" alt=\"Snipaste_2023-01-29_12-42-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png\" alt=\"Snipaste_2023-01-29_12-42-43\" style=\"zoom:80%;\" />\n\n\n\n## 树和森林的转换\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png\" alt=\"Snipaste_2023-01-29_12-43-13\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png\" alt=\"Snipaste_2023-01-29_12-43-35\" style=\"zoom:80%;\" />\n\n\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png)\n\n![Snipaste_2023-01-29_12-38-31](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png)\n\n![Snipaste_2023-01-29_12-42-06](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png)\n\n![Snipaste_2023-01-29_12-42-19](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png)\n\n![Snipaste_2023-01-29_12-42-43](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png)\n\n![Snipaste_2023-01-29_12-43-13](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png)\n\n![Snipaste_2023-01-29_12-43-35](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png)\n\n\n\n## 树的遍历\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213366-1097965655.png\" alt=\"Snipaste_2023-01-29_12-53-48\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213974-555461917.png\" alt=\"Snipaste_2023-01-29_12-54-05\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003214649-1107760089.png\" alt=\"Snipaste_2023-01-29_12-54-16\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003215384-1593542650.png\" alt=\"Snipaste_2023-01-29_12-54-46\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003216741-1239051182.png\" alt=\"Snipaste_2023-01-29_12-55-05\" style=\"zoom:80%;\" />\n\n\n\n## 森林的遍历\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003217958-1656900174.png\" alt=\"Snipaste_2023-01-29_12-55-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003219485-415832396.png\" alt=\"Snipaste_2023-01-29_12-55-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n# KMP匹配算法\n\n```python\nclass Solution:\n    def strStr(self, s: str, t: str) -> int:\n        \n        '''KMP模板'''\n        def prefix_function(s):     \n            n = len(s)\n            pi = [0] * n\n\n            j = 0\n            for i in range(1, n):\n                while j>0 and s[i] != s[j]:     # 当前位置s[i]与s[j]不等\n                    j = pi[j-1]                 # j指向之前位置，s[i]与s[j]继续比较\n\n                if s[i] == s[j]:                # s[i]与s[j]相等，j+1，指向后一位\n                    j += 1\n                \n                pi[i] = j\n            return pi\n        \n\n        '''主程序'''\n        n, m = len(s), len(t)\n        pi = prefix_function(t)             # 预处理得到t的前缀函数\n\n        '''再次基于KMP的思想在s中匹配t'''\n        j = 0\n        for i in range(n):\n\n            while j>0 and s[i] != t[j]:\n                j = pi[j-1]\n\n            if s[i] == t[j]:\n                j += 1\n                if j == m:          # 匹配到了t，直接返回\n                    return i-m+1\n        return -1\n```\n\n\n\n# 图\n\n## 基本概念\n\n### 图的定义\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003220125-1474032413.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221102-1400626471.png\" alt=\"Snipaste_2023-01-30_21-23-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221760-951587005.png\" alt=\"Snipaste_2023-01-30_21-23-51\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003223080-1565255626.png\" alt=\"Snipaste_2023-01-30_21-24-05\" style=\"zoom:80%;\" />\n\n\n\n### 图的相关概念\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224084-979841846.png\" alt=\"Snipaste_2023-01-30_21-24-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224678-1822077730.png\" alt=\"Snipaste_2023-01-30_21-27-08\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003225334-754846157.png\" alt=\"Snipaste_2023-01-30_21-27-21\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003226064-2073402920.png\" alt=\"Snipaste_2023-01-30_21-28-02\" style=\"zoom:80%;\" />\n\n\n\n### 图的相关性质\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003227782-1734937726.png\" alt=\"Snipaste_2023-01-30_21-28-23\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003228360-914587659.png\" alt=\"Snipaste_2023-01-30_21-28-57\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003229809-1591759326.png\" alt=\"Snipaste_2023-01-30_21-29-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230414-1174857769.png\" alt=\"Snipaste_2023-01-30_21-30-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230901-753351247.png\" alt=\"Snipaste_2023-01-30_21-30-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232047-1465767147.png\" alt=\"Snipaste_2023-01-30_21-32-43\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232591-1535683489.png\" alt=\"Snipaste_2023-01-30_21-32-49\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003233903-1441000794.png\" alt=\"Snipaste_2023-01-30_21-35-23\" style=\"zoom:80%;\" />\n\n\n\n## 邻接矩阵\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003234489-1562431798.png\" alt=\"Snipaste_2023-01-30_21-37-04\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235002-186776549.png\" alt=\"Snipaste_2023-01-30_21-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235940-966594377.png\" alt=\"Snipaste_2023-01-30_21-38-52\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003236923-1957281841.png\" alt=\"Snipaste_2023-01-30_21-40-54\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003237832-290120583.png\" alt=\"Snipaste_2023-01-30_21-41-09\" style=\"zoom:80%;\" />\n\n\n\n### 邻接矩阵的实现\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003238610-1261452464.png\" alt=\"Snipaste_2023-01-30_21-44-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003239140-377931477.png\" alt=\"Snipaste_2023-01-30_21-44-57\" style=\"zoom:80%;\" />\n\n### 邻接矩阵的优劣\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240392-891512478.png\" alt=\"Snipaste_2023-01-30_21-45-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240971-599857625.png\" alt=\"Snipaste_2023-01-30_21-45-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003241646-615119159.png\" alt=\"Snipaste_2023-01-30_21-46-00\" style=\"zoom:80%;\" />\n\n\n\n## 邻接表\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242241-1455856646.png\" alt=\"Snipaste_2023-01-30_21-47-17\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242920-1071739990.png\" alt=\"Snipaste_2023-01-30_21-48-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244210-201636686.png\" alt=\"Snipaste_2023-01-30_21-49-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244800-1895554840.png\" alt=\"Snipaste_2023-01-30_21-51-13\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 邻接表的实现\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003245466-1236361989.png\" alt=\"Snipaste_2023-01-30_21-52-09\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003246047-1124627896.png\" alt=\"Snipaste_2023-01-30_21-52-42\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003247795-1194230170.png\" alt=\"Snipaste_2023-01-30_22-01-57\" style=\"zoom:80%;\" />\n\n\n\n### 特点\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003248572-1701553633.png\" alt=\"Snipaste_2023-01-30_22-02-13\" style=\"zoom:80%;\" />\n\n\n\n## 库的调用\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249097-1216946408.png\" alt=\"Snipaste_2023-01-30_22-02-38\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249555-896105563.png\" alt=\"Snipaste_2023-01-30_22-04-03\" style=\"zoom:80%;\" />\n\n\n\n## 图的遍历\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003250450-820535375.png\" alt=\"Snipaste_2023-01-30_22-04-28\" style=\"zoom:80%;\" />\n\n### 深度优先遍历\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327912-1791489249.png)\n\n![Snipaste_2023-02-28_16-08-42](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003328541-504477056.png)\n\n![Snipaste_2023-02-28_16-13-13](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003329403-1941220318.png)\n\n### 广度优先遍历\n\n![Snipaste_2023-02-28_16-19-30](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003330598-1653542503.png)\n\n![Snipaste_2023-02-28_16-21-29](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331313-1137883969.png)\n\n![Snipaste_2023-02-28_16-23-46](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331838-750586068.png)\n\n### BFS与DFS算法比较\n\n![Snipaste_2023-02-28_16-24-06](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003332467-729896859.png)\n\n\n\n## 最小生成树\n\n![Snipaste_2023-02-28_16-26-09](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003333918-1866209963.png)\n\n![Snipaste_2023-02-28_16-30-23](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003334742-393473291.png)\n\n\n\n### Prim算法\n\n![Snipaste_2023-02-28_16-44-11](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335324-58306181.png)\n\n\n\n### Kruskal算法\n\n![Snipaste_2023-02-28_16-44-51](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335897-1621272128.png)\n\n\n\n### 算法比较\n\n![Snipaste_2023-02-28_16-45-00](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003336585-2131642442.png)\n\n\n\n\n\n## 最短路径\n\n### 迪杰斯特拉算法\n\n![Snipaste_2023-02-28_17-03-13](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003337712-141859434.png)\n\n\n\n### 弗洛伊德算法\n\n![Snipaste_2023-02-28_17-10-57](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339292-402468428.png)\n\n\n\n## AOV网\n\n### 拓扑排序\n\n![Snipaste_2023-02-28_19-06-17](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339993-7971698.png)\n\n![Snipaste_2023-02-28_19-53-17](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003340535-1327013302.png)\n\n![Snipaste_2023-02-28_19-06-41](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003341740-1508867142.png)\n\n\n\n## AOE网\n\n### 关键路径\n\n![Snipaste_2023-02-28_19-54-05](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003342477-1005485536.png)\n\n![Snipaste_2023-02-28_19-53-51](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003343197-1311676865.png)\n\n![Snipaste_2023-02-28_19-54-39](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003344783-1167898578.png)\n\n![Snipaste_2023-02-28_19-55-12](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003345521-1452441577.png)\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003346601-1565523348.png)\n\n![Snipaste_2023-02-28_19-50-40](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003347998-887538165.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 贪心算法\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003251575-1640247239.png\" style=\"zoom:80%;\" />\n\n\n\n## 找零问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252277-1148509851.png\" style=\"zoom:80%;\" />\n\n### 代码\n\n```python\nt = [100, 50, 20, 5, 1]\n\n\ndef change(t, n):\n    m = [0 for _ in range(len(t))]\n    for i, money in enumerate(t):\n        m[i] = n // money\n        n = n % money\n    return m, n\n\n\nprint(change(t, 376))\n```\n\n\n\n\n\n\n\n## 分数背包问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252844-150015143.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253313-1442258686.png\" style=\"zoom:80%;\" />\n\n### 代码\n\n```python\ngoods=[(60,10),(100,20),(120,30)]\ngoods.sort(key=lambda  x:x[0]/x[1],reverse=True)\n\ndef fractional_backpack(goods,w):\n    m=[0 for _ in range(len(goods))]\n    total_v=0\n    for i,(prize,weight) in enumerate(goods):\n        if w>=weight:\n            m[i]=1\n            total_v+=prize\n            w-=weight\n        else:\n            m[i]=w/weight\n            total_v+=m[i]*prize\n            w=0\n            break\n    return total_v,m\n\n\nprint(fractional_backpack(goods,50))\n```\n\n\n\n\n\n## 拼接最大数字问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253781-1770455863.png\" style=\"zoom:80%;\" />\n\n\n\n### 代码\n\n```python\nfrom functools import cmp_to_key\n\nli = [32, 94, 128, 1286, 6, 71]\n\n\ndef xy_cmp(x, y):\n    if x + y < y + x:\n        return 1\n    elif x + y > y + x:\n        return -1\n    else:\n        return 0\n\n\ndef number_join(li):\n    li = list(map(str, li))\n    li.sort(key=cmp_to_key(xy_cmp))\n    return \"\".join(li)\n\n\nprint(number_join(li))\n```\n\n\n\n\n\n## 活动选择问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003254578-1413807720.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003255393-2021528861.png\" style=\"zoom:80%;\" />\n\n\n\n### 代码\n\n```python\nfrom operator import itemgetter\n\nactivities = [(1, 4), (3, 5), (0, 6), (5, 7), (5, 9), (3, 9), (6, 10), (8, 11), (8, 12), (2, 14), (12, 16)]\nactivities.sort(key=itemgetter(1, 0))\nprint(activities)\n\n\ndef activity_selection(a):\n    res = [a[0]]\n    for i in range(1, len(a)):\n        if a[i][0] >= res[-1][1]:\n            res.append(a[i])\n    return res\n\n\nprint(activity_selection(activities))\n```\n\n\n\n\n\n\n\n\n\n\n\n# 动态规划（DP算法）\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256037-686054189.png\" style=\"zoom:80%;\" />\n\n\n\n## 钢管切割问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256581-759536913.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003257430-1510450101.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258325-770199969.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258821-873262621.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259320-454356517.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259850-370054211.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 代码\n\n```python\ndef cut_rot_dp(p, n):\n    r = p.copy()\n    length = len(p)\n    solution_list = []\n    for i in range(1, length):\n        res = r[i]\n        solution = (i, 0)\n        for j in range(1, (i + 1) // 2 + 1):\n            res = max(res, r[j] + r[i - j])\n            if res == r[j] + r[i - j]:\n                solution = (j, i - j)\n\n        solution_list.append(solution)\n        r[i] = res\n    while n >= length:\n        res = 0\n        solution = tuple()\n        for j in range(1, (length + 1) // 2 + 1):\n            res = max(res, r[j] + r[length - j])\n            if res == r[j] + r[length - j]:\n                solution = (j, length - j)\n        solution_list.append(solution)\n        r.append(res)\n        length += 1\n    solution_list.insert(0, tuple())\n    return r[-1], solution_list\n\n\ndef find(li):\n    queue = [li[-1]]\n    res = []\n    while queue:\n        tmp = queue.pop(0)\n        if tmp[1] == 0:\n            res.append(tmp)\n        else:\n            queue.append(li[tmp[0]])\n            queue.append(li[tmp[1]])\n    return res\n\n\ndef cut_rot(p, n):\n    r, solution_list = cut_rot_dp(p, n)\n    res = find(solution_list)\n    return r, res\n\n\np = [0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30]\nprint(cut_rot(p,49))\n```\n\n\n\n\n\n\n\n\n\n## 最长公共子序列问题\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003300320-1875440287.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302210-1297330831.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302759-1918691034.png\" style=\"zoom:80%;\" />\n\n\n\n### 代码\n\n```python\ndef lcs(x, y):\n    m = len(x)\n    n = len(y)\n    c = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    b = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n                b[i][j] = 1\n            elif c[i - 1][j] > c[i][j - 1]:\n                c[i][j] = c[i - 1][j]\n                b[i][j] = 2\n            else:\n                c[i][j] = c[i][j - 1]\n                b[i][j] = 3\n    return c[m][n], b\n\n\ndef lcs_trackback(x, y):\n    c, b = lcs(x, y)\n    i = len(x)\n    j = len(y)\n    res = []\n    while i > 0 and j > 0:\n        if b[i][j] == 1:\n            res.append(x[i - 1])\n            i -= 1\n            j -= 1\n        elif b[i][j] == 2:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(res))\n\n\n\nprint(lcs_trackback(\"ABCBDAB\",\"BDCABA\"))\n```\n\n\n\n\n\n# 欧几里得算法（求最大公约数）\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303247-879832102.png\" style=\"zoom:80%;\" />\n\n\n\n```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd2(a, b):\n    while b > 0:\n        r = a % b\n        a = b\n        b = r\n    return a\n\n\nprint(gcd(12, 16))\nprint(gcd2(12, 16))\n```\n\n\n\n## 应用\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303671-24523928.png\" style=\"zoom:80%;\" />\n\n\n\n```python\nclass Fraction:\n    def __init__(self,a,b):\n        self.molecule=a\n        self.denominator=b\n        x=self.gcd(a,b)\n        self.molecule/=x\n        self.denominator/=x\n\n\n    def gcd(self,a,b):\n        while b > 0:\n            r = a % b\n            a = b\n            b = r\n        return a\n\n    def __add__(self, other):\n        denominator=self.zgs(self.denominator,other.denominator)\n        molecule=self.molecule*denominator/self.denominator+other.molecule*denominator/other.denominator\n        return Fraction(molecule,denominator)\n\n    def zgs(self,a,b):\n        x=self.gcd(a,b)\n        return a*b/x\n\n    def __str__(self):\n        return \"%d/%d\"%(self.molecule,self.denominator)\n\n\n\nnum1=Fraction(2,10)\nprint(num1)\nnum2=Fraction(1,6)\nprint(num1+num2)\n```\n\n\n\n\n\n\n\n# RSA加密算法\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304114-1449543961.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304589-1304774116.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305197-1886034459.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305618-318237693.png\" style=\"zoom:80%;\" />\n\n# 面向对象\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306185-1583924888.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306636-1961503250.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n# 设计模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307137-225997543.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307834-1722959623.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003308660-734490389.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309265-469661568.png\" style=\"zoom:80%;\" />\n\n\n\n## 创建型模式\n\n### 简单工厂模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309831-970662596.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310262-665839716.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 工厂方法模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310781-13662355.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003311241-1568389696.png\" style=\"zoom:80%;\" />\n\n\n\n### 抽象工厂模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312023-736659876.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312535-479714437.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313046-396414824.png\" style=\"zoom:80%;\" />\n\n### 建造者模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313487-715915219.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314040-471835656.png\" style=\"zoom:80%;\" />\n\n### 单例模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314566-1454255918.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003315019-438218292.png\" style=\"zoom:80%;\" />\n\n### 小结\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003316020-1263868583.png\" style=\"zoom:80%;\" />\n\n\n\n## 结构型模式\n\n### 适配器模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317015-2100024309.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317621-1181143597.png\" style=\"zoom:80%;\" />\n\n\n\n### 桥模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318427-1886468152.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318866-234284078.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319300-434134883.png\" style=\"zoom:80%;\" />\n\n\n\n### 组合模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319749-1583805141.png\" style=\"zoom:80%;\" />\n\n\n\n![](https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003348540-317771781.png)\n\n\n\n### 外观模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320248-760156051.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320739-907826483.png\" style=\"zoom:80%;\" />\n\n\n\n### 代理模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321202-1035783405.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321658-1470874291.png\" style=\"zoom:80%;\" />\n\n\n\n## 行为型模式\n\n### 责任链模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003322212-866246714.png\" alt=\"Snipaste_2023-01-11_10-40-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323017-394699248.png\" alt=\"Snipaste_2023-01-11_10-44-09\" style=\"zoom:80%;\" />\n\n\n\n### 观察者模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323959-1055100366.png\" alt=\"Snipaste_2023-01-11_10-44-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003324611-1326580995.png\" alt=\"Snipaste_2023-01-11_11-05-36\" style=\"zoom:80%;\" />\n\n\n\n### 模板方法模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003325672-1529465519.png\" alt=\"Snipaste_2023-01-11_11-12-14\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326296-584057204.png\" style=\"zoom:80%;\" />\n\n\n\n### 策略模式\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326910-962180721.png\" alt=\"Snipaste_2023-01-11_11-06-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327394-830844690.png\" alt=\"Snipaste_2023-01-11_11-11-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n","slug":"2134","published":1,"updated":"2025-02-28T14:01:54.796Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqt20007doup83zl6g77","content":"<p>[TOC]</p>\n<h1 id=\"绪论\"><a href=\"#绪论\" class=\"headerlink\" title=\"绪论\"></a>绪论</h1><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>数据的两种结构<strong>逻辑结构</strong>和<strong>存储结构（物理结构）</strong></p>\n<ul>\n<li>逻辑结构<ul>\n<li>线性结构<ul>\n<li>线性表</li>\n<li>队列</li>\n<li>栈</li>\n</ul>\n</li>\n<li>非线性结构<ul>\n<li>树形结构</li>\n<li>图状结构</li>\n<li>集合结构</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>存储结构<ul>\n<li>顺序存储结构</li>\n<li>链式存储结构</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>算法是<strong>解决某一特定问题的指定描述</strong></p>\n<h3 id=\"算法的特征\"><a href=\"#算法的特征\" class=\"headerlink\" title=\"算法的特征\"></a>算法的特征</h3><ul>\n<li>有穷性</li>\n<li>确定性（唯一性）</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出</li>\n</ul>\n<h3 id=\"算法的评价\"><a href=\"#算法的评价\" class=\"headerlink\" title=\"算法的评价\"></a>算法的评价</h3><ul>\n<li>正确性</li>\n<li>可读性</li>\n<li>健壮性</li>\n<li>效率和低存储</li>\n</ul>\n<h4 id=\"算法的时间复杂度\"><a href=\"#算法的时间复杂度\" class=\"headerlink\" title=\"算法的时间复杂度\"></a>算法的时间复杂度</h4><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003136951-1004055513.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003137847-1896422554.png\" style=\"zoom:80%;\" />\n\n\n\n<h4 id=\"算法的空间复杂度\"><a href=\"#算法的空间复杂度\" class=\"headerlink\" title=\"算法的空间复杂度\"></a>算法的空间复杂度</h4><p>和时间复杂度相比不那么重要，一般算法采取的措施为用空间换时间，即用一部分的空间消耗来缩短计算时间。</p>\n<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><h2 id=\"汉诺塔问题（递归调用）\"><a href=\"#汉诺塔问题（递归调用）\" class=\"headerlink\" title=\"汉诺塔问题（递归调用）\"></a>汉诺塔问题（递归调用）</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003138540-1572386921.png\" style=\"zoom:60%;\" />\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 汉诺塔算法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HanNoTa</span>(<span class=\"params\">n, a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        HanNoTa(n - <span class=\"number\">1</span>, a, c, b)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;moving form <span class=\"subst\">&#123;a&#125;</span> to <span class=\"subst\">&#123;c&#125;</span>&quot;</span>)</span><br><span class=\"line\">        HanNoTa(n - <span class=\"number\">1</span>, b, a, c)</span><br><span class=\"line\"></span><br><span class=\"line\">HanNoTa(<span class=\"number\">3</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;B&quot;</span>,<span class=\"string\">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"查找排序\"><a href=\"#查找排序\" class=\"headerlink\" title=\"查找排序\"></a>查找排序</h1><h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二分查找</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binary_search</span>(<span class=\"params\">li, val, key=<span class=\"number\">1</span></span>):</span><br><span class=\"line\">    list_li = <span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li))), li))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key == <span class=\"number\">1</span>:</span><br><span class=\"line\">        list_li = <span class=\"built_in\">sorted</span>(list_li, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>])</span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(list_li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> list_li[mid][<span class=\"number\">1</span>] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list_li[mid][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list_li[mid][<span class=\"number\">1</span>] &gt; val:</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">ind = binary_search(a, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ind)</span><br><span class=\"line\">ind = binary_search(b, <span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ind)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"检查排序是否完成\"><a href=\"#检查排序是否完成\" class=\"headerlink\" title=\"检查排序是否完成\"></a>检查排序是否完成</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">li, reverse=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> reverse == <span class=\"literal\">False</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[i] &gt; li[i + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> reverse == <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[i] &lt; li[i + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 冒泡排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        exchange = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - i - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j + <span class=\"number\">1</span>] = li[j + <span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">                exchange = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> exchange:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">bubble_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_loc = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[min_loc]:</span><br><span class=\"line\">                min_loc = j</span><br><span class=\"line\">        <span class=\"keyword\">if</span> min_loc != i:</span><br><span class=\"line\">            li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">select_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]:</span><br><span class=\"line\">            li[j + <span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[j + <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">insert_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"希尔排序（高级版插入排序）\"><a href=\"#希尔排序（高级版插入排序）\" class=\"headerlink\" title=\"希尔排序（高级版插入排序）\"></a>希尔排序（高级版插入排序）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 希尔排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort_gap</span>(<span class=\"params\">li, gap</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - gap</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]:</span><br><span class=\"line\">            li[j + gap] = li[j]</span><br><span class=\"line\">            j -= gap</span><br><span class=\"line\">        li[j + gap] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">shell_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    d = <span class=\"built_in\">len</span>(li) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        insert_sort_gap(li, d)</span><br><span class=\"line\">        d //= <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10000</span>))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\">li1 = copy.deepcopy(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li1)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">shell_sort(li)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li1)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">insert_sort_gap(li1, <span class=\"number\">1</span>)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li1)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"comment\"># import sys</span></span><br><span class=\"line\"><span class=\"comment\"># sys.setrecursionlimit(100000)     # 设置递归最大深度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">partition</span>(<span class=\"params\">li, left, right</span>):</span><br><span class=\"line\">    tmp = li[left]  <span class=\"comment\"># 记录下最左边的数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:  <span class=\"comment\"># 找到记录下的数的最合适的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[right] &gt;= tmp:  <span class=\"comment\"># 从右边找比tmp小的数的位置</span></span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[left] = li[right]  <span class=\"comment\"># 把右边较大的值写到左边的位置上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[left] &lt;= tmp:  <span class=\"comment\"># 从左边找比tmp大的数的位置</span></span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        li[right] = li[left]  <span class=\"comment\"># 把左边较小的值写到右边的位置上</span></span><br><span class=\"line\">    li[left] = tmp  <span class=\"comment\"># 把记录下的数写到合适的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left  <span class=\"comment\"># 返回找到的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_quick_sort</span>(<span class=\"params\">li, left, right</span>):  <span class=\"comment\"># 递归调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:  <span class=\"comment\"># 至少两个元素才进行递归调用</span></span><br><span class=\"line\">        mid = partition(li, left, right)</span><br><span class=\"line\">        _quick_sort(li, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        _quick_sort(li, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    _quick_sort(li, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">quick_sort(li)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"堆排序（二叉树）\"><a href=\"#堆排序（二叉树）\" class=\"headerlink\" title=\"堆排序（二叉树）\"></a>堆排序（二叉树）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 堆排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sift</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param li:列表</span></span><br><span class=\"line\"><span class=\"string\">    :param low: 堆的根节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    :param high: 堆的最后一个元素的位置</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low  <span class=\"comment\"># 最开始指向根节点</span></span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>  <span class=\"comment\"># j为根节点的左孩子</span></span><br><span class=\"line\">    tmp = li[low]  <span class=\"comment\"># 把堆顶元素存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:\t<span class=\"comment\"># 建立大根堆</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt;= high <span class=\"keyword\">and</span> li[j + <span class=\"number\">1</span>] &gt; li[j]:  <span class=\"comment\"># 如果右孩子存在并且比左孩子大</span></span><br><span class=\"line\">            j = j + <span class=\"number\">1</span>  <span class=\"comment\"># j指向右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[j] &gt; tmp:  <span class=\"comment\"># 如果孩子节点大于父亲节点</span></span><br><span class=\"line\">            li[i] = li[j]  <span class=\"comment\"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class=\"line\">            i = j  <span class=\"comment\"># 指针下移</span></span><br><span class=\"line\">            j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 因为tmp比孩子节点更大，找到合适的位置</span></span><br><span class=\"line\">            li[i] = tmp  <span class=\"comment\"># 找到根节点合适的位置并放入</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        li[i] = tmp  <span class=\"comment\"># 把tmp放到叶子节点上</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heap_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(li)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((n - <span class=\"number\">2</span>) // <span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class=\"line\">        sift(li, i, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 建堆完成</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># i指向当前堆的最后一个元素</span></span><br><span class=\"line\">        li[<span class=\"number\">0</span>], li[i] = li[i], li[<span class=\"number\">0</span>]  <span class=\"comment\"># 将最后一个元素与堆顶元素交换位置</span></span><br><span class=\"line\">        sift(li, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)  <span class=\"comment\"># i-1是新的high</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">heap_sort(li)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"python中内置好的堆排序函数\"><a href=\"#python中内置好的堆排序函数\" class=\"headerlink\" title=\"python中内置好的堆排序函数\"></a>python中内置好的堆排序函数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python中内置好的堆排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">li = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\">random.shuffle(li)      <span class=\"comment\"># 打乱列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">heapq.heapify(li)       <span class=\"comment\"># 建堆</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(heapq.heappop(li), end=<span class=\"string\">&quot;,&quot;</span>)       <span class=\"comment\"># 弹出一个堆中最小的元素</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"利用堆排序解决topk问题\"><a href=\"#利用堆排序解决topk问题\" class=\"headerlink\" title=\"利用堆排序解决topk问题\"></a>利用堆排序解决topk问题</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用堆排序解决topk问题</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sift</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param li:列表</span></span><br><span class=\"line\"><span class=\"string\">    :param low: 堆的根节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    :param high: 堆的最后一个元素的位置</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low  <span class=\"comment\"># 最开始指向根节点</span></span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>  <span class=\"comment\"># j为根节点的左孩子</span></span><br><span class=\"line\">    tmp = li[low]  <span class=\"comment\"># 把堆顶元素存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:  <span class=\"comment\"># 建立小根堆</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt;= high <span class=\"keyword\">and</span> li[j + <span class=\"number\">1</span>] &lt; li[j]:  <span class=\"comment\"># 如果右孩子存在并且比左孩子小</span></span><br><span class=\"line\">            j = j + <span class=\"number\">1</span>  <span class=\"comment\"># j指向右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[j] &lt; tmp:  <span class=\"comment\"># 如果孩子节点小于父亲节点</span></span><br><span class=\"line\">            li[i] = li[j]  <span class=\"comment\"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class=\"line\">            i = j  <span class=\"comment\"># 指针下移</span></span><br><span class=\"line\">            j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 因为tmp比孩子节点更小，找到合适的位置</span></span><br><span class=\"line\">            li[i] = tmp  <span class=\"comment\"># 找到根节点合适的位置并放入</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        li[i] = tmp  <span class=\"comment\"># 把tmp放到叶子节点上</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">topk</span>(<span class=\"params\">li, k</span>):</span><br><span class=\"line\">    heap = li[<span class=\"number\">0</span>:k]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((k - <span class=\"number\">2</span>) // <span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):  <span class=\"comment\"># 建立小根堆</span></span><br><span class=\"line\">        sift(heap, i, k - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k, <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):  <span class=\"comment\"># 遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &gt; heap[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            heap[<span class=\"number\">0</span>] = li[i]</span><br><span class=\"line\">            sift(heap, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):  <span class=\"comment\"># 对结果排序</span></span><br><span class=\"line\">        heap[<span class=\"number\">0</span>], heap[i] = heap[i], heap[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(heap, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)]</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(topk(li, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 归并排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">li, low, mid, high</span>):  <span class=\"comment\"># 对列表中mid左右两边的子列表进行排序</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:  <span class=\"comment\"># 左右两个子列表都有数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &lt; li[j]:</span><br><span class=\"line\">            ltmp.append(li[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ltmp.append(li[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(li[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(li[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    li[low:high + <span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_merge_sort</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:  <span class=\"comment\"># 至少有两个元素，递归</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        _merge_sort(li, low, mid)</span><br><span class=\"line\">        _merge_sort(li, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        merge(li, low, mid, high)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    _merge_sort(li, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">merge_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"六种排序方法的总结\"><a href=\"#六种排序方法的总结\" class=\"headerlink\" title=\"六种排序方法的总结\"></a>六种排序方法的总结</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139244-909999252.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h2 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 计数排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">min</span>(li), <span class=\"built_in\">max</span>(li) + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    min_num = <span class=\"built_in\">min</span>(li)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        count[val - min_num] += <span class=\"number\">1</span></span><br><span class=\"line\">    li.clear()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind, val <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(val):</span><br><span class=\"line\">            li.append(ind + min_num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(-<span class=\"number\">9</span>, <span class=\"number\">21</span>))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">count_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"桶排序（高级版计数排序）\"><a href=\"#桶排序（高级版计数排序）\" class=\"headerlink\" title=\"桶排序（高级版计数排序）\"></a>桶排序（高级版计数排序）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 桶排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bucket_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    max_num = <span class=\"built_in\">max</span>(li)</span><br><span class=\"line\">    n = max_num // <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        n = <span class=\"number\">1</span></span><br><span class=\"line\">        buckets = [[]]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        buckets = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        i = <span class=\"built_in\">min</span>(var // (max_num // n), n - <span class=\"number\">1</span>)       <span class=\"comment\"># i表示var放到几号桶里</span></span><br><span class=\"line\">        buckets[i].append(var)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(buckets[i]) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):     <span class=\"comment\"># 保持桶内的顺序</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> buckets[i][j] &lt; buckets[i][j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                buckets[i][j], buckets[i][j - <span class=\"number\">1</span>] = buckets[i][j - <span class=\"number\">1</span>], buckets[i][j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    li.clear()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> buc <span class=\"keyword\">in</span> buckets:</span><br><span class=\"line\">        li.extend(buc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">200</span>))</span><br><span class=\"line\">li1 = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">200</span>))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li == li1)</span><br><span class=\"line\">bucket_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li == li1)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基数排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">radix_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    max_num = <span class=\"built_in\">max</span>(li)</span><br><span class=\"line\">    it = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">10</span> ** it &lt;= max_num:  <span class=\"comment\"># 求最大数的位数</span></span><br><span class=\"line\">        buckets = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]  <span class=\"comment\"># 创建桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> li:  <span class=\"comment\"># 把数放入桶中</span></span><br><span class=\"line\">            digit = (var // <span class=\"number\">10</span> ** it) % <span class=\"number\">10</span>  <span class=\"comment\"># 依次取每个数的位数</span></span><br><span class=\"line\">            buckets[digit].append(var)</span><br><span class=\"line\"></span><br><span class=\"line\">        li.clear()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> buc <span class=\"keyword\">in</span> buckets:</span><br><span class=\"line\">            li.extend(buc)</span><br><span class=\"line\">        it += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">radix_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(check(li))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"数据结构-1\"><a href=\"#数据结构-1\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><ul>\n<li><strong><a href=\"#%E5%88%97%E8%A1%A8%EF%BC%88%E5%8D%B3%E9%A1%BA%E5%BA%8F%E8%A1%A8%EF%BC%89\">顺序表</a></strong></li>\n<li><strong><a href=\"#%E9%93%BE%E8%A1%A8\">链表</a></strong></li>\n</ul>\n<h2 id=\"列表（即顺序表）\"><a href=\"#列表（即顺序表）\" class=\"headerlink\" title=\"列表（即顺序表）\"></a>列表（即顺序表）</h2><ol>\n<li>列表内的每个节点储存的元素为地址，所以列表内部可以时任意数据类型</li>\n<li>列表是动态分配存储空间，列表长度不够的时候，python底层会为列表重新开辟一个更大的空间，并把原先列表中存储的地址复制到新开辟的空间中</li>\n</ol>\n<h2 id=\"栈（后进先出）\"><a href=\"#栈（后进先出）\" class=\"headerlink\" title=\"栈（后进先出）\"></a>栈（后进先出）</h2><h3 id=\"顺序栈\"><a href=\"#顺序栈\" class=\"headerlink\" title=\"顺序栈\"></a>顺序栈</h3><p>列表（li）结构可以实现栈</p>\n<ul>\n<li>进栈：li.append</li>\n<li>出栈：li.pop</li>\n<li>取栈顶：li[-1]</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.stack = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, element</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.stack.append(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.stack.pop()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.stack) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack = Stack()</span><br><span class=\"line\">stack.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">stack.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">stack.push(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.is_empty())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.is_empty())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链式栈\"><a href=\"#链式栈\" class=\"headerlink\" title=\"链式栈\"></a>链式栈</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">stack_linked</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, Node=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = Node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = ListNode(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = ListNode(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        node = ListNode(val)</span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        val = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack = stack_linked()</span><br><span class=\"line\">stack.push(<span class=\"number\">5</span>)</span><br><span class=\"line\">stack.push(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop().val)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.head.val)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h3><h4 id=\"迷宫问题（找的不一定是最短路径）\"><a href=\"#迷宫问题（找的不一定是最短路径）\" class=\"headerlink\" title=\"迷宫问题（找的不一定是最短路径）\"></a>迷宫问题（找的不一定是最短路径）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span> = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x + <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x - <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y - <span class=\"number\">1</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">map_path</span>(<span class=\"params\">x1, y1, x2, y2</span>):</span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    stack.append((x1, y1))</span><br><span class=\"line\">    <span class=\"built_in\">map</span>[x1][y1]=<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        curNode = stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == x2 <span class=\"keyword\">and</span> curNode[<span class=\"number\">1</span>] == y2:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> stack:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">dir</span> <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = <span class=\"built_in\">dir</span>(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">map</span>[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                stack.append(nextNode)</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有路&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">map_path(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">map</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"十进制转化为其他进制\"><a href=\"#十进制转化为其他进制\" class=\"headerlink\" title=\"十进制转化为其他进制\"></a>十进制转化为其他进制</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 十进制转化为其他进制</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">base_conversion</span>(<span class=\"params\">val, base</span>):</span><br><span class=\"line\">    li = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> val != <span class=\"number\">0</span>:</span><br><span class=\"line\">        li.append(val % base)</span><br><span class=\"line\">        val = val // base</span><br><span class=\"line\"></span><br><span class=\"line\">    li.reverse()</span><br><span class=\"line\">    s = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>,li))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(base_conversion(<span class=\"number\">120</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"队列（先进先出）\"><a href=\"#队列（先进先出）\" class=\"headerlink\" title=\"队列（先进先出）\"></a>队列（先进先出）</h2><p>列表（li）可以实现队列</p>\n<ul>\n<li>入队：li.append</li>\n<li>出队：li.pop(0)</li>\n<li>取队头：li[0]</li>\n</ul>\n<h3 id=\"顺序队列\"><a href=\"#顺序队列\" class=\"headerlink\" title=\"顺序队列\"></a>顺序队列</h3><h4 id=\"基础队列类\"><a href=\"#基础队列类\" class=\"headerlink\" title=\"基础队列类\"></a>基础队列类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.queue = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, element</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.queue.append(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.queue) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_top</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">queue = Queue()</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_empty())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.get_top())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_empty())</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"循环队列类\"><a href=\"#循环队列类\" class=\"headerlink\" title=\"循环队列类\"></a>循环队列类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">100</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.queue = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size)]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = size</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rear = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.front = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, element</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_filled():</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear = (<span class=\"variable language_\">self</span>.rear + <span class=\"number\">1</span>) % <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.queue[<span class=\"variable language_\">self</span>.rear] = element</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is filled&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = (<span class=\"variable language_\">self</span>.front + <span class=\"number\">1</span>) % <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue[<span class=\"variable language_\">self</span>.front]</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is empty&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_top</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue[<span class=\"variable language_\">self</span>.rear]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.rear == <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_filled</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"variable language_\">self</span>.rear + <span class=\"number\">1</span>) % <span class=\"variable language_\">self</span>.size == <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\"></span><br><span class=\"line\">queue=Queue(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_empty())</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">3</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_filled())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.get_top())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"内置队列\"><a href=\"#内置队列\" class=\"headerlink\" title=\"内置队列\"></a>内置队列</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque  <span class=\"comment\"># 双向队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">q = deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">4</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">5</span>)  <span class=\"comment\"># 队尾进</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.popleft())  <span class=\"comment\"># 队首出</span></span><br><span class=\"line\"></span><br><span class=\"line\">q.clear()</span><br><span class=\"line\">q.appendleft(<span class=\"number\">1</span>)  <span class=\"comment\"># 队首进</span></span><br><span class=\"line\">q.appendleft(<span class=\"number\">2</span>)</span><br><span class=\"line\">q.appendleft(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())  <span class=\"comment\"># 队尾出</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链式队列\"><a href=\"#链式队列\" class=\"headerlink\" title=\"链式队列\"></a>链式队列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">queue_linked</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.front = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rear = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        node = Node(val)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.front <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear = node</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear = <span class=\"variable language_\">self</span>.rear.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.front == <span class=\"variable language_\">self</span>.rear <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.front:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = <span class=\"variable language_\">self</span>.rear = <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.front:</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = <span class=\"variable language_\">self</span>.front.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">peek</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.front.val</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.front <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rear:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        p = <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(p.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">            p = p.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">queue = queue_linked()</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop().val)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop().val)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop().val)</span><br><span class=\"line\"><span class=\"comment\"># print(queue.peek())</span></span><br><span class=\"line\">queue.show()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"队列的应用\"><a href=\"#队列的应用\" class=\"headerlink\" title=\"队列的应用\"></a>队列的应用</h3><h4 id=\"迷宫问题（求的是最短路径）\"><a href=\"#迷宫问题（求的是最短路径）\" class=\"headerlink\" title=\"迷宫问题（求的是最短路径）\"></a>迷宫问题（求的是最短路径）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span> = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x + <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x - <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y - <span class=\"number\">1</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_path</span>(<span class=\"params\">path, <span class=\"built_in\">map</span></span>):</span><br><span class=\"line\">    curNode = path[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    realpath = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> curNode[<span class=\"number\">2</span>] != -<span class=\"number\">1</span>:</span><br><span class=\"line\">        realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">map</span>[curNode[<span class=\"number\">0</span>]][curNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">        curNode = path[curNode[<span class=\"number\">2</span>]]</span><br><span class=\"line\">    realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"built_in\">map</span>[curNode[<span class=\"number\">0</span>]][curNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">    realpath.reverse()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> realpath:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">map_path_shortest</span>(<span class=\"params\">x1, y1, x2, y2, <span class=\"built_in\">map</span></span>):</span><br><span class=\"line\">    map1 = copy.deepcopy(<span class=\"built_in\">map</span>)</span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    queue.append((x1, y1, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    path = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        curNode = queue.popleft()</span><br><span class=\"line\">        path.append(curNode)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == x2 <span class=\"keyword\">and</span> curNode[<span class=\"number\">1</span>] == y2:</span><br><span class=\"line\">            print_path(path, <span class=\"built_in\">map</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> di <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = di(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> map1[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append((nextNode[<span class=\"number\">0</span>], nextNode[<span class=\"number\">1</span>], <span class=\"built_in\">len</span>(path) - <span class=\"number\">1</span>))</span><br><span class=\"line\">                map1[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有路&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">map_path_shortest(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"built_in\">map</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">map</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3><h4 id=\"单链表的创建\"><a href=\"#单链表的创建\" class=\"headerlink\" title=\"单链表的创建\"></a>单链表的创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span>, <span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span>:</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">LinkListIterator</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.node = node</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.node:</span><br><span class=\"line\">                cur_node = <span class=\"variable language_\">self</span>.node</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.node = cur_node.<span class=\"built_in\">next</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur_node.val</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, iterable=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tail = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> iterable:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.extend(iterable)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">append</span>(<span class=\"params\">self, obj</span>):</span><br><span class=\"line\">        s = ListNode(obj)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = s</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = s</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span> = s</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = s</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">extend</span>(<span class=\"params\">self, iterable</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.append(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">self, obj</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n == obj:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = ListNode(li[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tail = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">            node = ListNode(element)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = node</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_head</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = ListNode(li[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tail = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">            node = ListNode(element)</span><br><span class=\"line\">            node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = node</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        Node = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> Node != <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(Node.val, end=<span class=\"string\">&#x27;\\t&#x27;</span>)</span><br><span class=\"line\">            Node = Node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_length</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node != <span class=\"variable language_\">self</span>.tail:</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_value</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.get_length():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur.val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_index</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> cur:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.val == value:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtIndex</span>(<span class=\"params\">self, index, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            node = ListNode(val)</span><br><span class=\"line\">            node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = node</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index &gt;= <span class=\"variable language_\">self</span>.get_length():</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span> = ListNode(val)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        node = ListNode(val)</span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        pre = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">            pre = cur</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtIndex</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.get_length():</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        pre = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> index &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            pre = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtValue</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.head.val == value:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> cur.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.<span class=\"built_in\">next</span>.val == value:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        cur.<span class=\"built_in\">next</span> = cur.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.LinkListIterator(<span class=\"variable language_\">self</span>.head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;&lt;&quot;</span> + <span class=\"string\">&quot;,&quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, <span class=\"variable language_\">self</span>)) + <span class=\"string\">&quot;&gt;&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = LinkedList([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">li.show()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li.get_length())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li.get_index(<span class=\"number\">6</span>))</span><br><span class=\"line\">li.addAtIndex(<span class=\"number\">7</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">li.show()</span><br><span class=\"line\">li.deleteAtValue(<span class=\"number\">3</span>)</span><br><span class=\"line\">li.show()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li.get_index(<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span>, <span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"built_in\">next</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = ListNode()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = <span class=\"number\">0</span>  <span class=\"comment\"># 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index):</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur.val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtHead</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        new_node = ListNode(val)</span><br><span class=\"line\">        new_node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span> = new_node</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtTail</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        new_node = ListNode(val)</span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur.<span class=\"built_in\">next</span>):</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        cur.<span class=\"built_in\">next</span> = new_node</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtIndex</span>(<span class=\"params\">self, index, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.addAtHead(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index == <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.addAtTail(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index &gt; <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        node = ListNode(val)</span><br><span class=\"line\">        pre = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index):</span><br><span class=\"line\">            pre = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtIndex</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        pre = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index):</span><br><span class=\"line\">            pre = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139985-802441053.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140429-1838041831.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"双链表\"><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140952-1508005939.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003141477-1809483299.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142022-1131773000.png\" style=\"zoom:80%;\" />\n\n<h4 id=\"双链表的创建\"><a href=\"#双链表的创建\" class=\"headerlink\" title=\"双链表的创建\"></a>双链表的创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.prev = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedListDouble</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._head, <span class=\"variable language_\">self</span>._tail = Node(<span class=\"number\">0</span>), Node(<span class=\"number\">0</span>)  <span class=\"comment\"># 虚拟节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._head.<span class=\"built_in\">next</span>, <span class=\"variable language_\">self</span>._tail.prev = <span class=\"variable language_\">self</span>._tail, <span class=\"variable language_\">self</span>._head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._count = <span class=\"number\">0</span>  <span class=\"comment\"># 添加的节点数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_get_node</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span></span>) -&gt; Node:</span><br><span class=\"line\">        <span class=\"comment\"># 当index小于_count//2时, 使用_head查找更快, 反之_tail更快</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &gt;= <span class=\"variable language_\">self</span>._count // <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 使用prev往前找</span></span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._tail</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"variable language_\">self</span>._count - index):</span><br><span class=\"line\">                node = node.prev</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 使用next往后找</span></span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._head</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(index + <span class=\"number\">1</span>):</span><br><span class=\"line\">                node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Get the value of the index-th node in the linked list. If the index is invalid, return -1.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= index &lt; <span class=\"variable language_\">self</span>._count:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._get_node(index)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.val</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtHead</span>(<span class=\"params\">self, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Add a node of value val before the first element of the linked list.</span></span><br><span class=\"line\"><span class=\"string\">         After the insertion, the new node will be the first node of the linked list.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update(<span class=\"variable language_\">self</span>._head, <span class=\"variable language_\">self</span>._head.<span class=\"built_in\">next</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtTail</span>(<span class=\"params\">self, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Append a node of value val to the last element of the linked list.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update(<span class=\"variable language_\">self</span>._tail.prev, <span class=\"variable language_\">self</span>._tail, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtIndex</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Add a node of value val before the index-th node in the linked list.</span></span><br><span class=\"line\"><span class=\"string\">        If index equals to the length of linked list, the node will be appended to the end of linked list.</span></span><br><span class=\"line\"><span class=\"string\">        If index is greater than the length, the node will not be inserted.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index &gt; <span class=\"variable language_\">self</span>._count:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>._get_node(index)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update(node.prev, node, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_update</span>(<span class=\"params\">self, prev: Node, <span class=\"built_in\">next</span>: Node, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            更新节点</span></span><br><span class=\"line\"><span class=\"string\">            :param prev: 相对于更新的前一个节点</span></span><br><span class=\"line\"><span class=\"string\">            :param next: 相对于更新的后一个节点</span></span><br><span class=\"line\"><span class=\"string\">            :param val:  要添加的节点值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 计数累加</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._count += <span class=\"number\">1</span></span><br><span class=\"line\">        node = Node(val)</span><br><span class=\"line\">        prev.<span class=\"built_in\">next</span>, <span class=\"built_in\">next</span>.prev = node, node</span><br><span class=\"line\">        node.prev, node.<span class=\"built_in\">next</span> = prev, <span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtIndex</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Delete the index-th node in the linked list, if the index is valid.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= index &lt; <span class=\"variable language_\">self</span>._count:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._get_node(index)</span><br><span class=\"line\">            <span class=\"comment\"># 计数-1</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._count -= <span class=\"number\">1</span></span><br><span class=\"line\">            node.prev.<span class=\"built_in\">next</span>, node.<span class=\"built_in\">next</span>.prev = node.<span class=\"built_in\">next</span>, node.prev</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"链表与数组的差别\"><a href=\"#链表与数组的差别\" class=\"headerlink\" title=\"链表与数组的差别\"></a>链表与数组的差别</h3><ul>\n<li>链表<ul>\n<li>优点：插入删除操作较快，内存可以动态分配</li>\n<li>缺点：查找操作较慢</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>优点：结构简单，查找操作快</li>\n<li>缺点：插入删除操作较慢，内存不能动态分配</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><p>python中的<strong>集合</strong>，<strong>字典</strong>结构在底层都是用的哈希表来实现的</p>\n<h2 id=\"哈希表（开辟的一系列连续的地址即数组）\"><a href=\"#哈希表（开辟的一系列连续的地址即数组）\" class=\"headerlink\" title=\"哈希表（开辟的一系列连续的地址即数组）\"></a>哈希表（开辟的一系列连续的地址即数组）</h2><h2 id=\"哈希函数（计算输入的值在哈希表中对应下标的函数）\"><a href=\"#哈希函数（计算输入的值在哈希表中对应下标的函数）\" class=\"headerlink\" title=\"哈希函数（计算输入的值在哈希表中对应下标的函数）\"></a>哈希函数（计算输入的值在哈希表中对应下标的函数）</h2><h2 id=\"哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\"><a href=\"#哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\" class=\"headerlink\" title=\"哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\"></a>哈希冲突（对于不同的输入哈希函数输出的结果可能相同）</h2><ul>\n<li>解决哈希冲突的方法<ul>\n<li>线性探测法：如果地址冲突，那么它所存放的位置在哈希表中加一</li>\n<li>二次探测法：利用二次函数，计算冲突时，应该存储的位置</li>\n<li>拉链存储法：哈希表的每个节点存储的是链表<ul>\n<li><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142551-437647432.png\" style=\"zoom:80%;\" /></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"树和二叉树\"><a href=\"#树和二叉树\" class=\"headerlink\" title=\"树和二叉树\"></a>树和二叉树</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li>根节点</li>\n<li>叶子节点</li>\n<li>树的深度</li>\n<li>节点的度</li>\n<li>树的度</li>\n<li>父亲节点</li>\n<li>孩子节点（左孩子&#x2F;右孩子）</li>\n<li>子树</li>\n</ul>\n<h2 id=\"二叉树（度为2的树）\"><a href=\"#二叉树（度为2的树）\" class=\"headerlink\" title=\"二叉树（度为2的树）\"></a>二叉树（度为2的树）</h2><h3 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h3><ol>\n<li><p><strong>对于非空二叉树，如果叶子节点树为n<del>0</del>，度为2的节点数为n<del>2</del>，则有n<del>0</del>&#x3D;n<del>2</del>+1</strong></p>\n</li>\n<li><p><strong>对于非空二叉树的第i层上最多有2^i-1^个节点（满二叉树）</strong></p>\n</li>\n<li><p><strong>一颗深度为k的二叉树中，最多有2^k^-1个节点（满二叉树）</strong></p>\n</li>\n<li><p><strong>具有n个节点的完全二叉树的深度为：$\\lfloor log_2n \\rfloor+1$</strong></p>\n</li>\n<li><p><strong>如果对于一颗有n个节点的完全二叉树的节点按层序编号，则对任意节点i（1&lt;&#x3D;i&lt;&#x3D;n）</strong></p>\n<ol>\n<li><p><strong>如果i&#x3D;1，则节点i时二叉树的根节点，如果i&gt;1,则其父亲节点为$\\lfloor i&#x2F;2 \\rfloor$</strong></p>\n</li>\n<li><p><strong>如果$2i\\leq n$，则其左孩子是节点2i，否则i无左孩子，为叶子节点</strong></p>\n</li>\n<li><p><strong>如果$2i+1\\leq n$，其右孩子是节点2i+1，否则节点i无右孩子</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003143534-675539412.png\" alt=\"Snipaste_2023-01-26_11-05-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144113-2080533132.png\" alt=\"Snipaste_2023-01-26_11-08-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144872-1933819243.png\" alt=\"Snipaste_2023-01-26_11-08-32\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003145823-249465355.png\" alt=\"Snipaste_2023-01-26_11-09-15\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003146532-1929601304.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h3><h3 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h3><h3 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h3><ul>\n<li><p>顺序存储（用列表或者数组储存）（一般适用于完全二叉树）</p>\n</li>\n<li><p>链式存储</p>\n</li>\n<li><p>列表存储</p>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003147452-974457570.png\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"二叉树的创建\"><a href=\"#二叉树的创建\" class=\"headerlink\" title=\"二叉树的创建\"></a>二叉树的创建</h3><h4 id=\"层次按序创建\"><a href=\"#层次按序创建\" class=\"headerlink\" title=\"层次按序创建\"></a>层次按序创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span>, left=<span class=\"literal\">None</span>, right=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = left</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tree</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, li=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.lt = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.extend(li)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">extend</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):  <span class=\"comment\"># 层次添加创建</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.add(i)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, number</span>):</span><br><span class=\"line\">        <span class=\"comment\"># if number is None:</span></span><br><span class=\"line\">        <span class=\"comment\">#     self.lt.pop(0)</span></span><br><span class=\"line\">        <span class=\"comment\">#     return</span></span><br><span class=\"line\">        node = TreeNode(number)  <span class=\"comment\"># 将输入的数字节点化，使其具有左右孩子的属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.root == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.lt.append(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"variable language_\">self</span>.lt:</span><br><span class=\"line\">                point = <span class=\"variable language_\">self</span>.lt[<span class=\"number\">0</span>]  <span class=\"comment\"># 依次对左右孩子未满的节点分配孩子</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> point.val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> point.left == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    point.left = node</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.append(point.left)  <span class=\"comment\"># 该节点后面作为父节点也是未满的，也要加入到列表中。</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> point.right == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    point.right = node</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.append(point.right)  <span class=\"comment\"># 与左孩子同理</span></span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.pop(<span class=\"number\">0</span>)  <span class=\"comment\"># 表示该节点已拥有左右孩子，从未满列表中去除</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">clear</span>(<span class=\"params\">self</span>):  <span class=\"comment\"># 清除值为None的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">level_order_traversal</span>(<span class=\"params\">root: TreeNode</span>):</span><br><span class=\"line\">            queue = deque()</span><br><span class=\"line\">            queue.append(root)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                node = queue.popleft()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left <span class=\"keyword\">and</span> node.left.val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    node.left = <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right <span class=\"keyword\">and</span> node.right.val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    node.right = <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\"></span><br><span class=\"line\">        level_order_traversal(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">self</span>):  <span class=\"comment\"># 前序遍历输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(root.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">            dfs(root.left)</span><br><span class=\"line\">            dfs(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">searchdata</span>(<span class=\"params\">T, val</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> T == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> T.val == val:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> T</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                p = searchdata(T.left, val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">                p = searchdata(T.right, val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> searchdata(<span class=\"variable language_\">self</span>.root, val)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"函数前序创建\"><a href=\"#函数前序创建\" class=\"headerlink\" title=\"函数前序创建\"></a>函数前序创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">creat_binary_tree</span>(<span class=\"params\">input_list=[]</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 构建二叉树</span></span><br><span class=\"line\">    <span class=\"comment\"># param input_list:输入数列</span></span><br><span class=\"line\">    <span class=\"comment\"># 当我们在函数中传入的数列不存在或者传入的数列中元素的个数等于0时，表示是一棵空树</span></span><br><span class=\"line\">    <span class=\"comment\"># 此时不需要操作，直接返回None即可</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> input_list <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(input_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"comment\"># 结点中的数据等于列表中的第一个元素，每次pop出去一个元素，后面的元素会往前走一个位置</span></span><br><span class=\"line\">    <span class=\"comment\"># 这样可以保证元素的一次弹出</span></span><br><span class=\"line\">    val = input_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当弹出的元素是None时，表示该节点为空，直接返回None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> val <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过刚才定义的TreeNode类新建node</span></span><br><span class=\"line\">    node = TreeNode(val)</span><br><span class=\"line\">    <span class=\"comment\"># node的左孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class=\"line\">    node.left = creat_binary_tree(input_list)</span><br><span class=\"line\">    <span class=\"comment\"># node的右孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class=\"line\">    node.right = creat_binary_tree(input_list)</span><br><span class=\"line\">    <span class=\"comment\"># 返回node结点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3><ol>\n<li>递归遍历</li>\n<li>非递归遍历</li>\n</ol>\n<ul>\n<li>前序遍历</li>\n<li>中序遍历</li>\n<li>后序遍历</li>\n<li>层次遍历</li>\n</ul>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003148331-2135232511.png\" style=\"zoom:80%;\" />\n\n<h4 id=\"递归遍历代码\"><a href=\"#递归遍历代码\" class=\"headerlink\" title=\"递归遍历代码\"></a>递归遍历代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pre_order_traversal</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 前序遍历</span></span><br><span class=\"line\">    <span class=\"comment\"># param node:二叉树节点</span></span><br><span class=\"line\">    <span class=\"comment\"># 当node为空表示为一棵空树，不需要进行前序遍历直接返回即可</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 此时node不为空，直接打印node的val域</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的先序遍历node的左孩子</span></span><br><span class=\"line\">    pre_order_traversal(node.left)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的先序遍历node的左孩子</span></span><br><span class=\"line\">    pre_order_traversal(node.right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">in_order_traversal</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 中序遍历</span></span><br><span class=\"line\">    <span class=\"comment\"># param node:二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 递归的中序遍历node的左孩子</span></span><br><span class=\"line\">    in_order_traversal(node.left)</span><br><span class=\"line\">    <span class=\"comment\"># 打印节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的中序遍历node的左孩子</span></span><br><span class=\"line\">    in_order_traversal(node.right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">post_order_traversal</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 后序遍历</span></span><br><span class=\"line\">    <span class=\"comment\"># param node:二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 递归的后序遍历node的左孩子</span></span><br><span class=\"line\">    post_order_traversal(node.left)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的后序遍历node的左孩子</span></span><br><span class=\"line\">    post_order_traversal(node.right)</span><br><span class=\"line\">    <span class=\"comment\"># 打印节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque, Counter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level_order_traversal</span>(<span class=\"params\">root: TreeNode</span>):</span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    queue.append(root)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        node = queue.popleft()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">            queue.append(node.left)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">            queue.append(node.right)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"非递归遍历代码\"><a href=\"#非递归遍历代码\" class=\"headerlink\" title=\"非递归遍历代码\"></a>非递归遍历代码</h4><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003149366-1785461924.png\" style=\"zoom:80%;\" />\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">preorderTraversal</span>(<span class=\"params\">root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"comment\"># 根结点为空则返回空列表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    stack = [root]</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">        node = stack.pop()</span><br><span class=\"line\">        <span class=\"comment\"># 中结点先处理</span></span><br><span class=\"line\">        result.append(node.val)</span><br><span class=\"line\">        <span class=\"comment\"># 右孩子先入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">            stack.append(node.right)</span><br><span class=\"line\">        <span class=\"comment\"># 左孩子后入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">            stack.append(node.left)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中序遍历-迭代-LC94_二叉树的中序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inorderTraversal</span>(<span class=\"params\">root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    stack = []  <span class=\"comment\"># 不能提前将root结点加入stack中</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    cur = root</span><br><span class=\"line\">    <span class=\"keyword\">while</span> cur <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">        <span class=\"comment\"># 先迭代访问最底层的左子树结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur:</span><br><span class=\"line\">            stack.append(cur)</span><br><span class=\"line\">            cur = cur.left</span><br><span class=\"line\">        <span class=\"comment\"># 到达最左结点后处理栈顶结点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cur = stack.pop()</span><br><span class=\"line\">            result.append(cur.val)</span><br><span class=\"line\">            <span class=\"comment\"># 取栈顶元素右结点</span></span><br><span class=\"line\">            cur = cur.right</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后序遍历-迭代-LC145_二叉树的后序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">postorderTraversal</span>(<span class=\"params\">root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    stack = [root]</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">        node = stack.pop()</span><br><span class=\"line\">        <span class=\"comment\"># 中结点先处理</span></span><br><span class=\"line\">        result.append(node.val)</span><br><span class=\"line\">        <span class=\"comment\"># 左孩子先入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">            stack.append(node.left)</span><br><span class=\"line\">        <span class=\"comment\"># 右孩子后入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">            stack.append(node.right)</span><br><span class=\"line\">    <span class=\"comment\"># 将最终的数组翻转</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result[::-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"哈夫曼树\"><a href=\"#哈夫曼树\" class=\"headerlink\" title=\"哈夫曼树\"></a>哈夫曼树</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003150422-1241951893.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151230-137109831.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151864-1062009624.png\" style=\"zoom:80%;\" />\n\n<p><img src=\"/\"></p>\n<h4 id=\"哈夫曼编码\"><a href=\"#哈夫曼编码\" class=\"headerlink\" title=\"哈夫曼编码\"></a>哈夫曼编码</h4><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuffmanNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.parent = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuffmanTree</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, head=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.lst = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.huffman_code = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">            res.append(HuffmanNode(i))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.lst = res[:]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(res) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            res.sort(key=<span class=\"keyword\">lambda</span> item: item.val)</span><br><span class=\"line\">            node_left = res.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            node_right = res.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            node_father = HuffmanNode(node_left.val + node_right.val)</span><br><span class=\"line\">            node_father.left = node_left</span><br><span class=\"line\">            node_father.right = node_right</span><br><span class=\"line\">            node_left.parent = node_father</span><br><span class=\"line\">            node_right.parent = node_father</span><br><span class=\"line\">            res.append(node_father)</span><br><span class=\"line\"></span><br><span class=\"line\">        res[<span class=\"number\">0</span>].parent = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = res[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">encoding</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        huffman_code = [<span class=\"string\">&#x27;&#x27;</span>] * <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.lst)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.lst)):</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.lst[i]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node != <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.parent.left == node:</span><br><span class=\"line\">                    huffman_code[i] = <span class=\"string\">&quot;0&quot;</span> + huffman_code[i]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    huffman_code[i] = <span class=\"string\">&quot;1&quot;</span> + huffman_code[i]</span><br><span class=\"line\">                node = node.parent</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.huffman_code = huffman_code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">huffmantree = HuffmanTree()</span><br><span class=\"line\">huffmantree.create([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>])</span><br><span class=\"line\">level_order_traversal(huffmantree.head)</span><br><span class=\"line\">huffmantree.encoding()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(huffmantree.huffman_code)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003152778-490328608.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li>插入</li>\n<li>查询</li>\n<li>删除</li>\n</ul>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003153588-922353087.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154127-989110491.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154644-1062126191.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BiTreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = data</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.parent = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BST</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># if self.root is None:</span></span><br><span class=\"line\">            <span class=\"comment\">#     self.root=BiTreeNode(data[0])</span></span><br><span class=\"line\">            <span class=\"comment\">#     data=data[1:]</span></span><br><span class=\"line\">            <span class=\"comment\"># for i in data:</span></span><br><span class=\"line\">            <span class=\"comment\">#     self.insert(self.root, i)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.insert_no_rec(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, node, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">            node = BiTreeNode(val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> val &lt;= node.val:</span><br><span class=\"line\">            node.left = <span class=\"variable language_\">self</span>.insert(node.left, val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> val &gt; node.val:</span><br><span class=\"line\">            node.right = <span class=\"variable language_\">self</span>.insert(node.right, val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_no_rec</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        p = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> p:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = BiTreeNode(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> val &lt;= p.val:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p.left:</span><br><span class=\"line\">                    p = p.left</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    p.left = BiTreeNode(val)</span><br><span class=\"line\">                    p.left.parent = p</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> val &gt; p.val:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p.right:</span><br><span class=\"line\">                    p = p.right</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    p.right = BiTreeNode(val)</span><br><span class=\"line\">                    p.right.parent = p</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">query</span>(<span class=\"params\">self, node, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.val &lt; val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.query(node.right, val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.val &gt; val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.query(node.left, val)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">query_no_rec</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        p = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p.val &lt; val:</span><br><span class=\"line\">                p = p.right</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> p.val &gt; val:</span><br><span class=\"line\">                p = p.left</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__remove_node_1</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.parent:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node == node.parent.left:</span><br><span class=\"line\">            node.parent.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node.parent.right = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__remove_node_21</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.parent:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = node.left</span><br><span class=\"line\">            node.left.parent = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node == node.parent.left:</span><br><span class=\"line\">            node.parent.left = node.left</span><br><span class=\"line\">            node.left.parent = node.parent</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node.parent.right = node.left</span><br><span class=\"line\">            node.left.parent = node.parent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__remove_node_22</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.parent:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = node.right</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node == node.parent.left:</span><br><span class=\"line\">            node.parent.left = node.right</span><br><span class=\"line\">            node.right.parent = node.parent</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node.parent.right = node.right</span><br><span class=\"line\">            node.right.parent = node.parent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.root:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.query_no_rec(val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> node.right:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.__remove_node_1(node)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> node.right:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.__remove_node_21(node)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> node.left:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.__remove_node_22(node)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                min_node = node.right</span><br><span class=\"line\">                <span class=\"keyword\">while</span> min_node.left:</span><br><span class=\"line\">                    min_node = min_node.left</span><br><span class=\"line\">                node.val = min_node.val</span><br><span class=\"line\">                <span class=\"keyword\">if</span> min_node.right:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.__remove_node_22(min_node)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.__remove_node_1(min_node)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">T = BST([<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">in_order_traversal(T.root)</span><br><span class=\"line\">T.delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">T.delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">T.delete(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\">in_order_traversal(T.root)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"AVL树（平衡二叉搜索树）\"><a href=\"#AVL树（平衡二叉搜索树）\" class=\"headerlink\" title=\"AVL树（平衡二叉搜索树）\"></a>AVL树（平衡二叉搜索树）</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155158-1066944240.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155688-884961537.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156322-127906496.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156892-1756837025.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003157549-2080550850.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003158464-610122918.png\" style=\"zoom: 80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003159072-1840188905.png\" style=\"zoom:80%;\" />\n\n\n\n<p>旋转操作过于复杂，可以先将列表元素排好序，然后使用二分递归的方法</p>\n<p>代码如下：</p>\n<h3 id=\"二分递归代码\"><a href=\"#二分递归代码\" class=\"headerlink\" title=\"二分递归代码\"></a>二分递归代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sortedArrayToBST</span>(<span class=\"params\">nums: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; TreeNode:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">helper</span>(<span class=\"params\">left, right</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        root = TreeNode(nums[mid])</span><br><span class=\"line\">        root.left = helper(left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        root.right = helper(mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">root = sortedArrayToBST(li)</span><br><span class=\"line\">in_order_traversal(root)</span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\">pre_order_traversal(root)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"树和森林\"><a href=\"#树和森林\" class=\"headerlink\" title=\"树和森林\"></a>树和森林</h1><h2 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003200141-1341052574.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003201672-1580609190.png\" alt=\"Snipaste_2023-01-29_12-34-45\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003202403-279314825.png\" alt=\"Snipaste_2023-01-29_12-35-01\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203221-868073196.png\" alt=\"Snipaste_2023-01-29_12-35-20\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203861-1157806461.png\" alt=\"Snipaste_2023-01-29_12-35-47\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003204640-1744020770.png\" alt=\"Snipaste_2023-01-29_12-36-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003205278-1739834.png\" alt=\"Snipaste_2023-01-29_12-36-36\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206036-1784944727.png\" alt=\"Snipaste_2023-01-29_12-36-59\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206570-1588493395.png\" alt=\"Snipaste_2023-01-29_12-37-34\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png\" alt=\"Snipaste_2023-01-29_12-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png\" alt=\"Snipaste_2023-01-29_12-38-31\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"二叉树的转换\"><a href=\"#二叉树的转换\" class=\"headerlink\" title=\"二叉树的转换\"></a>二叉树的转换</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png\" alt=\"Snipaste_2023-01-29_12-42-06\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png\" alt=\"Snipaste_2023-01-29_12-42-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png\" alt=\"Snipaste_2023-01-29_12-42-43\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"树和森林的转换\"><a href=\"#树和森林的转换\" class=\"headerlink\" title=\"树和森林的转换\"></a>树和森林的转换</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png\" alt=\"Snipaste_2023-01-29_12-43-13\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png\" alt=\"Snipaste_2023-01-29_12-43-35\" style=\"zoom:80%;\" />\n\n\n\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png\" alt=\"Snipaste_2023-01-29_12-38-31\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png\" alt=\"Snipaste_2023-01-29_12-42-06\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png\" alt=\"Snipaste_2023-01-29_12-42-19\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png\" alt=\"Snipaste_2023-01-29_12-42-43\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png\" alt=\"Snipaste_2023-01-29_12-43-13\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png\" alt=\"Snipaste_2023-01-29_12-43-35\"></p>\n<h2 id=\"树的遍历\"><a href=\"#树的遍历\" class=\"headerlink\" title=\"树的遍历\"></a>树的遍历</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213366-1097965655.png\" alt=\"Snipaste_2023-01-29_12-53-48\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213974-555461917.png\" alt=\"Snipaste_2023-01-29_12-54-05\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003214649-1107760089.png\" alt=\"Snipaste_2023-01-29_12-54-16\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003215384-1593542650.png\" alt=\"Snipaste_2023-01-29_12-54-46\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003216741-1239051182.png\" alt=\"Snipaste_2023-01-29_12-55-05\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"森林的遍历\"><a href=\"#森林的遍历\" class=\"headerlink\" title=\"森林的遍历\"></a>森林的遍历</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003217958-1656900174.png\" alt=\"Snipaste_2023-01-29_12-55-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003219485-415832396.png\" alt=\"Snipaste_2023-01-29_12-55-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h1 id=\"KMP匹配算法\"><a href=\"#KMP匹配算法\" class=\"headerlink\" title=\"KMP匹配算法\"></a>KMP匹配算法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">strStr</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;KMP模板&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">prefix_function</span>(<span class=\"params\">s</span>):     </span><br><span class=\"line\">            n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">            pi = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\"></span><br><span class=\"line\">            j = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> s[i] != s[j]:     <span class=\"comment\"># 当前位置s[i]与s[j]不等</span></span><br><span class=\"line\">                    j = pi[j-<span class=\"number\">1</span>]                 <span class=\"comment\"># j指向之前位置，s[i]与s[j]继续比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> s[i] == s[j]:                <span class=\"comment\"># s[i]与s[j]相等，j+1，指向后一位</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                pi[i] = j</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pi</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        n, m = <span class=\"built_in\">len</span>(s), <span class=\"built_in\">len</span>(t)</span><br><span class=\"line\">        pi = prefix_function(t)             <span class=\"comment\"># 预处理得到t的前缀函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;再次基于KMP的思想在s中匹配t&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        j = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> s[i] != t[j]:</span><br><span class=\"line\">                j = pi[j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] == t[j]:</span><br><span class=\"line\">                j += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> j == m:          <span class=\"comment\"># 匹配到了t，直接返回</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i-m+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"基本概念-2\"><a href=\"#基本概念-2\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"图的定义\"><a href=\"#图的定义\" class=\"headerlink\" title=\"图的定义\"></a>图的定义</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003220125-1474032413.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221102-1400626471.png\" alt=\"Snipaste_2023-01-30_21-23-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221760-951587005.png\" alt=\"Snipaste_2023-01-30_21-23-51\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003223080-1565255626.png\" alt=\"Snipaste_2023-01-30_21-24-05\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"图的相关概念\"><a href=\"#图的相关概念\" class=\"headerlink\" title=\"图的相关概念\"></a>图的相关概念</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224084-979841846.png\" alt=\"Snipaste_2023-01-30_21-24-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224678-1822077730.png\" alt=\"Snipaste_2023-01-30_21-27-08\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003225334-754846157.png\" alt=\"Snipaste_2023-01-30_21-27-21\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003226064-2073402920.png\" alt=\"Snipaste_2023-01-30_21-28-02\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"图的相关性质\"><a href=\"#图的相关性质\" class=\"headerlink\" title=\"图的相关性质\"></a>图的相关性质</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003227782-1734937726.png\" alt=\"Snipaste_2023-01-30_21-28-23\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003228360-914587659.png\" alt=\"Snipaste_2023-01-30_21-28-57\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003229809-1591759326.png\" alt=\"Snipaste_2023-01-30_21-29-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230414-1174857769.png\" alt=\"Snipaste_2023-01-30_21-30-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230901-753351247.png\" alt=\"Snipaste_2023-01-30_21-30-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232047-1465767147.png\" alt=\"Snipaste_2023-01-30_21-32-43\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232591-1535683489.png\" alt=\"Snipaste_2023-01-30_21-32-49\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003233903-1441000794.png\" alt=\"Snipaste_2023-01-30_21-35-23\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003234489-1562431798.png\" alt=\"Snipaste_2023-01-30_21-37-04\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235002-186776549.png\" alt=\"Snipaste_2023-01-30_21-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235940-966594377.png\" alt=\"Snipaste_2023-01-30_21-38-52\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003236923-1957281841.png\" alt=\"Snipaste_2023-01-30_21-40-54\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003237832-290120583.png\" alt=\"Snipaste_2023-01-30_21-41-09\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"邻接矩阵的实现\"><a href=\"#邻接矩阵的实现\" class=\"headerlink\" title=\"邻接矩阵的实现\"></a>邻接矩阵的实现</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003238610-1261452464.png\" alt=\"Snipaste_2023-01-30_21-44-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003239140-377931477.png\" alt=\"Snipaste_2023-01-30_21-44-57\" style=\"zoom:80%;\" />\n\n<h3 id=\"邻接矩阵的优劣\"><a href=\"#邻接矩阵的优劣\" class=\"headerlink\" title=\"邻接矩阵的优劣\"></a>邻接矩阵的优劣</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240392-891512478.png\" alt=\"Snipaste_2023-01-30_21-45-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240971-599857625.png\" alt=\"Snipaste_2023-01-30_21-45-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003241646-615119159.png\" alt=\"Snipaste_2023-01-30_21-46-00\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242241-1455856646.png\" alt=\"Snipaste_2023-01-30_21-47-17\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242920-1071739990.png\" alt=\"Snipaste_2023-01-30_21-48-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244210-201636686.png\" alt=\"Snipaste_2023-01-30_21-49-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244800-1895554840.png\" alt=\"Snipaste_2023-01-30_21-51-13\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"邻接表的实现\"><a href=\"#邻接表的实现\" class=\"headerlink\" title=\"邻接表的实现\"></a>邻接表的实现</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003245466-1236361989.png\" alt=\"Snipaste_2023-01-30_21-52-09\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003246047-1124627896.png\" alt=\"Snipaste_2023-01-30_21-52-42\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003247795-1194230170.png\" alt=\"Snipaste_2023-01-30_22-01-57\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003248572-1701553633.png\" alt=\"Snipaste_2023-01-30_22-02-13\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"库的调用\"><a href=\"#库的调用\" class=\"headerlink\" title=\"库的调用\"></a>库的调用</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249097-1216946408.png\" alt=\"Snipaste_2023-01-30_22-02-38\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249555-896105563.png\" alt=\"Snipaste_2023-01-30_22-04-03\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003250450-820535375.png\" alt=\"Snipaste_2023-01-30_22-04-28\" style=\"zoom:80%;\" />\n\n<h3 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327912-1791489249.png\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003328541-504477056.png\" alt=\"Snipaste_2023-02-28_16-08-42\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003329403-1941220318.png\" alt=\"Snipaste_2023-02-28_16-13-13\"></p>\n<h3 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003330598-1653542503.png\" alt=\"Snipaste_2023-02-28_16-19-30\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331313-1137883969.png\" alt=\"Snipaste_2023-02-28_16-21-29\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331838-750586068.png\" alt=\"Snipaste_2023-02-28_16-23-46\"></p>\n<h3 id=\"BFS与DFS算法比较\"><a href=\"#BFS与DFS算法比较\" class=\"headerlink\" title=\"BFS与DFS算法比较\"></a>BFS与DFS算法比较</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003332467-729896859.png\" alt=\"Snipaste_2023-02-28_16-24-06\"></p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003333918-1866209963.png\" alt=\"Snipaste_2023-02-28_16-26-09\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003334742-393473291.png\" alt=\"Snipaste_2023-02-28_16-30-23\"></p>\n<h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335324-58306181.png\" alt=\"Snipaste_2023-02-28_16-44-11\"></p>\n<h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335897-1621272128.png\" alt=\"Snipaste_2023-02-28_16-44-51\"></p>\n<h3 id=\"算法比较\"><a href=\"#算法比较\" class=\"headerlink\" title=\"算法比较\"></a>算法比较</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003336585-2131642442.png\" alt=\"Snipaste_2023-02-28_16-45-00\"></p>\n<h2 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h2><h3 id=\"迪杰斯特拉算法\"><a href=\"#迪杰斯特拉算法\" class=\"headerlink\" title=\"迪杰斯特拉算法\"></a>迪杰斯特拉算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003337712-141859434.png\" alt=\"Snipaste_2023-02-28_17-03-13\"></p>\n<h3 id=\"弗洛伊德算法\"><a href=\"#弗洛伊德算法\" class=\"headerlink\" title=\"弗洛伊德算法\"></a>弗洛伊德算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339292-402468428.png\" alt=\"Snipaste_2023-02-28_17-10-57\"></p>\n<h2 id=\"AOV网\"><a href=\"#AOV网\" class=\"headerlink\" title=\"AOV网\"></a>AOV网</h2><h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339993-7971698.png\" alt=\"Snipaste_2023-02-28_19-06-17\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003340535-1327013302.png\" alt=\"Snipaste_2023-02-28_19-53-17\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003341740-1508867142.png\" alt=\"Snipaste_2023-02-28_19-06-41\"></p>\n<h2 id=\"AOE网\"><a href=\"#AOE网\" class=\"headerlink\" title=\"AOE网\"></a>AOE网</h2><h3 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003342477-1005485536.png\" alt=\"Snipaste_2023-02-28_19-54-05\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003343197-1311676865.png\" alt=\"Snipaste_2023-02-28_19-53-51\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003344783-1167898578.png\" alt=\"Snipaste_2023-02-28_19-54-39\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003345521-1452441577.png\" alt=\"Snipaste_2023-02-28_19-55-12\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003346601-1565523348.png\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003347998-887538165.png\" alt=\"Snipaste_2023-02-28_19-50-40\"></p>\n<h1 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003251575-1640247239.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"找零问题\"><a href=\"#找零问题\" class=\"headerlink\" title=\"找零问题\"></a>找零问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252277-1148509851.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = [<span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"number\">20</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">change</span>(<span class=\"params\">t, n</span>):</span><br><span class=\"line\">    m = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(t))]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, money <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(t):</span><br><span class=\"line\">        m[i] = n // money</span><br><span class=\"line\">        n = n % money</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m, n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(change(t, <span class=\"number\">376</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"分数背包问题\"><a href=\"#分数背包问题\" class=\"headerlink\" title=\"分数背包问题\"></a>分数背包问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252844-150015143.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253313-1442258686.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goods=[(<span class=\"number\">60</span>,<span class=\"number\">10</span>),(<span class=\"number\">100</span>,<span class=\"number\">20</span>),(<span class=\"number\">120</span>,<span class=\"number\">30</span>)]</span><br><span class=\"line\">goods.sort(key=<span class=\"keyword\">lambda</span>  x:x[<span class=\"number\">0</span>]/x[<span class=\"number\">1</span>],reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fractional_backpack</span>(<span class=\"params\">goods,w</span>):</span><br><span class=\"line\">    m=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(goods))]</span><br><span class=\"line\">    total_v=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,(prize,weight) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(goods):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> w&gt;=weight:</span><br><span class=\"line\">            m[i]=<span class=\"number\">1</span></span><br><span class=\"line\">            total_v+=prize</span><br><span class=\"line\">            w-=weight</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            m[i]=w/weight</span><br><span class=\"line\">            total_v+=m[i]*prize</span><br><span class=\"line\">            w=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_v,m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fractional_backpack(goods,<span class=\"number\">50</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"拼接最大数字问题\"><a href=\"#拼接最大数字问题\" class=\"headerlink\" title=\"拼接最大数字问题\"></a>拼接最大数字问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253781-1770455863.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> cmp_to_key</span><br><span class=\"line\"></span><br><span class=\"line\">li = [<span class=\"number\">32</span>, <span class=\"number\">94</span>, <span class=\"number\">128</span>, <span class=\"number\">1286</span>, <span class=\"number\">6</span>, <span class=\"number\">71</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">xy_cmp</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x + y &lt; y + x:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> x + y &gt; y + x:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">number_join</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    li = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, li))</span><br><span class=\"line\">    li.sort(key=cmp_to_key(xy_cmp))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(li)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(number_join(li))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"活动选择问题\"><a href=\"#活动选择问题\" class=\"headerlink\" title=\"活动选择问题\"></a>活动选择问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003254578-1413807720.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003255393-2021528861.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</span><br><span class=\"line\"></span><br><span class=\"line\">activities = [(<span class=\"number\">1</span>, <span class=\"number\">4</span>), (<span class=\"number\">3</span>, <span class=\"number\">5</span>), (<span class=\"number\">0</span>, <span class=\"number\">6</span>), (<span class=\"number\">5</span>, <span class=\"number\">7</span>), (<span class=\"number\">5</span>, <span class=\"number\">9</span>), (<span class=\"number\">3</span>, <span class=\"number\">9</span>), (<span class=\"number\">6</span>, <span class=\"number\">10</span>), (<span class=\"number\">8</span>, <span class=\"number\">11</span>), (<span class=\"number\">8</span>, <span class=\"number\">12</span>), (<span class=\"number\">2</span>, <span class=\"number\">14</span>), (<span class=\"number\">12</span>, <span class=\"number\">16</span>)]</span><br><span class=\"line\">activities.sort(key=itemgetter(<span class=\"number\">1</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(activities)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">activity_selection</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    res = [a[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a[i][<span class=\"number\">0</span>] &gt;= res[-<span class=\"number\">1</span>][<span class=\"number\">1</span>]:</span><br><span class=\"line\">            res.append(a[i])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(activity_selection(activities))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"动态规划（DP算法）\"><a href=\"#动态规划（DP算法）\" class=\"headerlink\" title=\"动态规划（DP算法）\"></a>动态规划（DP算法）</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256037-686054189.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"钢管切割问题\"><a href=\"#钢管切割问题\" class=\"headerlink\" title=\"钢管切割问题\"></a>钢管切割问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256581-759536913.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003257430-1510450101.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258325-770199969.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258821-873262621.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259320-454356517.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259850-370054211.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut_rot_dp</span>(<span class=\"params\">p, n</span>):</span><br><span class=\"line\">    r = p.copy()</span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">    solution_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">        res = r[i]</span><br><span class=\"line\">        solution = (i, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, (i + <span class=\"number\">1</span>) // <span class=\"number\">2</span> + <span class=\"number\">1</span>):</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, r[j] + r[i - j])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res == r[j] + r[i - j]:</span><br><span class=\"line\">                solution = (j, i - j)</span><br><span class=\"line\"></span><br><span class=\"line\">        solution_list.append(solution)</span><br><span class=\"line\">        r[i] = res</span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt;= length:</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        solution = <span class=\"built_in\">tuple</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, (length + <span class=\"number\">1</span>) // <span class=\"number\">2</span> + <span class=\"number\">1</span>):</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, r[j] + r[length - j])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res == r[j] + r[length - j]:</span><br><span class=\"line\">                solution = (j, length - j)</span><br><span class=\"line\">        solution_list.append(solution)</span><br><span class=\"line\">        r.append(res)</span><br><span class=\"line\">        length += <span class=\"number\">1</span></span><br><span class=\"line\">    solution_list.insert(<span class=\"number\">0</span>, <span class=\"built_in\">tuple</span>())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r[-<span class=\"number\">1</span>], solution_list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    queue = [li[-<span class=\"number\">1</span>]]</span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        tmp = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp[<span class=\"number\">1</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            res.append(tmp)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            queue.append(li[tmp[<span class=\"number\">0</span>]])</span><br><span class=\"line\">            queue.append(li[tmp[<span class=\"number\">1</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut_rot</span>(<span class=\"params\">p, n</span>):</span><br><span class=\"line\">    r, solution_list = cut_rot_dp(p, n)</span><br><span class=\"line\">    res = find(solution_list)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r, res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">17</span>, <span class=\"number\">17</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cut_rot(p,<span class=\"number\">49</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"最长公共子序列问题\"><a href=\"#最长公共子序列问题\" class=\"headerlink\" title=\"最长公共子序列问题\"></a>最长公共子序列问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003300320-1875440287.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302210-1297330831.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302759-1918691034.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lcs</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    m = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(y)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    b = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x[i - <span class=\"number\">1</span>] == y[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                c[i][j] = c[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">                b[i][j] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> c[i - <span class=\"number\">1</span>][j] &gt; c[i][j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                c[i][j] = c[i - <span class=\"number\">1</span>][j]</span><br><span class=\"line\">                b[i][j] = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                c[i][j] = c[i][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">                b[i][j] = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[m][n], b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lcs_trackback</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    c, b = lcs(x, y)</span><br><span class=\"line\">    i = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    j = <span class=\"built_in\">len</span>(y)</span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> j &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> b[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            res.append(x[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> b[i][j] == <span class=\"number\">2</span>:</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">reversed</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lcs_trackback(<span class=\"string\">&quot;ABCBDAB&quot;</span>,<span class=\"string\">&quot;BDCABA&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"欧几里得算法（求最大公约数）\"><a href=\"#欧几里得算法（求最大公约数）\" class=\"headerlink\" title=\"欧几里得算法（求最大公约数）\"></a>欧几里得算法（求最大公约数）</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303247-879832102.png\" style=\"zoom:80%;\" />\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gcd(b, a % b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd2</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> b &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        r = a % b</span><br><span class=\"line\">        a = b</span><br><span class=\"line\">        b = r</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gcd(<span class=\"number\">12</span>, <span class=\"number\">16</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(gcd2(<span class=\"number\">12</span>, <span class=\"number\">16</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303671-24523928.png\" style=\"zoom:80%;\" />\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fraction</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,a,b</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.molecule=a</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.denominator=b</span><br><span class=\"line\">        x=<span class=\"variable language_\">self</span>.gcd(a,b)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.molecule/=x</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.denominator/=x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">self,a,b</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> b &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            r = a % b</span><br><span class=\"line\">            a = b</span><br><span class=\"line\">            b = r</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__add__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        denominator=<span class=\"variable language_\">self</span>.zgs(<span class=\"variable language_\">self</span>.denominator,other.denominator)</span><br><span class=\"line\">        molecule=<span class=\"variable language_\">self</span>.molecule*denominator/<span class=\"variable language_\">self</span>.denominator+other.molecule*denominator/other.denominator</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Fraction(molecule,denominator)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">zgs</span>(<span class=\"params\">self,a,b</span>):</span><br><span class=\"line\">        x=<span class=\"variable language_\">self</span>.gcd(a,b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a*b/x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;%d/%d&quot;</span>%(<span class=\"variable language_\">self</span>.molecule,<span class=\"variable language_\">self</span>.denominator)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">num1=Fraction(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num1)</span><br><span class=\"line\">num2=Fraction(<span class=\"number\">1</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num1+num2)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"RSA加密算法\"><a href=\"#RSA加密算法\" class=\"headerlink\" title=\"RSA加密算法\"></a>RSA加密算法</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304114-1449543961.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304589-1304774116.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305197-1886034459.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305618-318237693.png\" style=\"zoom:80%;\" />\n\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306185-1583924888.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306636-1961503250.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307137-225997543.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307834-1722959623.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003308660-734490389.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309265-469661568.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309831-970662596.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310262-665839716.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310781-13662355.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003311241-1568389696.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312023-736659876.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312535-479714437.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313046-396414824.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313487-715915219.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314040-471835656.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314566-1454255918.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003315019-438218292.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003316020-1263868583.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317015-2100024309.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317621-1181143597.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"桥模式\"><a href=\"#桥模式\" class=\"headerlink\" title=\"桥模式\"></a>桥模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318427-1886468152.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318866-234284078.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319300-434134883.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319749-1583805141.png\" style=\"zoom:80%;\" />\n\n\n\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003348540-317771781.png\"></p>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320248-760156051.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320739-907826483.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321202-1035783405.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321658-1470874291.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003322212-866246714.png\" alt=\"Snipaste_2023-01-11_10-40-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323017-394699248.png\" alt=\"Snipaste_2023-01-11_10-44-09\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323959-1055100366.png\" alt=\"Snipaste_2023-01-11_10-44-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003324611-1326580995.png\" alt=\"Snipaste_2023-01-11_11-05-36\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003325672-1529465519.png\" alt=\"Snipaste_2023-01-11_11-12-14\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326296-584057204.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326910-962180721.png\" alt=\"Snipaste_2023-01-11_11-06-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327394-830844690.png\" alt=\"Snipaste_2023-01-11_11-11-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n","excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"绪论\"><a href=\"#绪论\" class=\"headerlink\" title=\"绪论\"></a>绪论</h1><h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>数据的两种结构<strong>逻辑结构</strong>和<strong>存储结构（物理结构）</strong></p>\n<ul>\n<li>逻辑结构<ul>\n<li>线性结构<ul>\n<li>线性表</li>\n<li>队列</li>\n<li>栈</li>\n</ul>\n</li>\n<li>非线性结构<ul>\n<li>树形结构</li>\n<li>图状结构</li>\n<li>集合结构</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>存储结构<ul>\n<li>顺序存储结构</li>\n<li>链式存储结构</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>算法是<strong>解决某一特定问题的指定描述</strong></p>\n<h3 id=\"算法的特征\"><a href=\"#算法的特征\" class=\"headerlink\" title=\"算法的特征\"></a>算法的特征</h3><ul>\n<li>有穷性</li>\n<li>确定性（唯一性）</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出</li>\n</ul>\n<h3 id=\"算法的评价\"><a href=\"#算法的评价\" class=\"headerlink\" title=\"算法的评价\"></a>算法的评价</h3><ul>\n<li>正确性</li>\n<li>可读性</li>\n<li>健壮性</li>\n<li>效率和低存储</li>\n</ul>\n<h4 id=\"算法的时间复杂度\"><a href=\"#算法的时间复杂度\" class=\"headerlink\" title=\"算法的时间复杂度\"></a>算法的时间复杂度</h4><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003136951-1004055513.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003137847-1896422554.png\" style=\"zoom:80%;\" />\n\n\n\n<h4 id=\"算法的空间复杂度\"><a href=\"#算法的空间复杂度\" class=\"headerlink\" title=\"算法的空间复杂度\"></a>算法的空间复杂度</h4><p>和时间复杂度相比不那么重要，一般算法采取的措施为用空间换时间，即用一部分的空间消耗来缩短计算时间。</p>\n<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><h2 id=\"汉诺塔问题（递归调用）\"><a href=\"#汉诺塔问题（递归调用）\" class=\"headerlink\" title=\"汉诺塔问题（递归调用）\"></a>汉诺塔问题（递归调用）</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003138540-1572386921.png\" style=\"zoom:60%;\" />\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 汉诺塔算法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">HanNoTa</span>(<span class=\"params\">n, a, b, c</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        HanNoTa(n - <span class=\"number\">1</span>, a, c, b)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;moving form <span class=\"subst\">&#123;a&#125;</span> to <span class=\"subst\">&#123;c&#125;</span>&quot;</span>)</span><br><span class=\"line\">        HanNoTa(n - <span class=\"number\">1</span>, b, a, c)</span><br><span class=\"line\"></span><br><span class=\"line\">HanNoTa(<span class=\"number\">3</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;B&quot;</span>,<span class=\"string\">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"查找排序\"><a href=\"#查找排序\" class=\"headerlink\" title=\"查找排序\"></a>查找排序</h1><h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二分查找</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binary_search</span>(<span class=\"params\">li, val, key=<span class=\"number\">1</span></span>):</span><br><span class=\"line\">    list_li = <span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li))), li))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key == <span class=\"number\">1</span>:</span><br><span class=\"line\">        list_li = <span class=\"built_in\">sorted</span>(list_li, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>])</span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(list_li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> list_li[mid][<span class=\"number\">1</span>] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list_li[mid][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list_li[mid][<span class=\"number\">1</span>] &gt; val:</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">ind = binary_search(a, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ind)</span><br><span class=\"line\">ind = binary_search(b, <span class=\"number\">5</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ind)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"检查排序是否完成\"><a href=\"#检查排序是否完成\" class=\"headerlink\" title=\"检查排序是否完成\"></a>检查排序是否完成</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">li, reverse=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> reverse == <span class=\"literal\">False</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[i] &gt; li[i + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> reverse == <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[i] &lt; li[i + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 冒泡排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        exchange = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - i - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j + <span class=\"number\">1</span>] = li[j + <span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">                exchange = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> exchange:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">bubble_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_loc = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[min_loc]:</span><br><span class=\"line\">                min_loc = j</span><br><span class=\"line\">        <span class=\"keyword\">if</span> min_loc != i:</span><br><span class=\"line\">            li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">select_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]:</span><br><span class=\"line\">            li[j + <span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[j + <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">insert_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"希尔排序（高级版插入排序）\"><a href=\"#希尔排序（高级版插入排序）\" class=\"headerlink\" title=\"希尔排序（高级版插入排序）\"></a>希尔排序（高级版插入排序）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 希尔排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort_gap</span>(<span class=\"params\">li, gap</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - gap</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]:</span><br><span class=\"line\">            li[j + gap] = li[j]</span><br><span class=\"line\">            j -= gap</span><br><span class=\"line\">        li[j + gap] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">shell_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    d = <span class=\"built_in\">len</span>(li) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        insert_sort_gap(li, d)</span><br><span class=\"line\">        d //= <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10000</span>))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\">li1 = copy.deepcopy(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li1)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">shell_sort(li)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li1)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">insert_sort_gap(li1, <span class=\"number\">1</span>)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li1)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"comment\"># import sys</span></span><br><span class=\"line\"><span class=\"comment\"># sys.setrecursionlimit(100000)     # 设置递归最大深度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">partition</span>(<span class=\"params\">li, left, right</span>):</span><br><span class=\"line\">    tmp = li[left]  <span class=\"comment\"># 记录下最左边的数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:  <span class=\"comment\"># 找到记录下的数的最合适的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[right] &gt;= tmp:  <span class=\"comment\"># 从右边找比tmp小的数的位置</span></span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[left] = li[right]  <span class=\"comment\"># 把右边较大的值写到左边的位置上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[left] &lt;= tmp:  <span class=\"comment\"># 从左边找比tmp大的数的位置</span></span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        li[right] = li[left]  <span class=\"comment\"># 把左边较小的值写到右边的位置上</span></span><br><span class=\"line\">    li[left] = tmp  <span class=\"comment\"># 把记录下的数写到合适的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left  <span class=\"comment\"># 返回找到的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_quick_sort</span>(<span class=\"params\">li, left, right</span>):  <span class=\"comment\"># 递归调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:  <span class=\"comment\"># 至少两个元素才进行递归调用</span></span><br><span class=\"line\">        mid = partition(li, left, right)</span><br><span class=\"line\">        _quick_sort(li, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        _quick_sort(li, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    _quick_sort(li, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">quick_sort(li)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"堆排序（二叉树）\"><a href=\"#堆排序（二叉树）\" class=\"headerlink\" title=\"堆排序（二叉树）\"></a>堆排序（二叉树）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 堆排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sift</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param li:列表</span></span><br><span class=\"line\"><span class=\"string\">    :param low: 堆的根节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    :param high: 堆的最后一个元素的位置</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low  <span class=\"comment\"># 最开始指向根节点</span></span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>  <span class=\"comment\"># j为根节点的左孩子</span></span><br><span class=\"line\">    tmp = li[low]  <span class=\"comment\"># 把堆顶元素存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:\t<span class=\"comment\"># 建立大根堆</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt;= high <span class=\"keyword\">and</span> li[j + <span class=\"number\">1</span>] &gt; li[j]:  <span class=\"comment\"># 如果右孩子存在并且比左孩子大</span></span><br><span class=\"line\">            j = j + <span class=\"number\">1</span>  <span class=\"comment\"># j指向右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[j] &gt; tmp:  <span class=\"comment\"># 如果孩子节点大于父亲节点</span></span><br><span class=\"line\">            li[i] = li[j]  <span class=\"comment\"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class=\"line\">            i = j  <span class=\"comment\"># 指针下移</span></span><br><span class=\"line\">            j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 因为tmp比孩子节点更大，找到合适的位置</span></span><br><span class=\"line\">            li[i] = tmp  <span class=\"comment\"># 找到根节点合适的位置并放入</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        li[i] = tmp  <span class=\"comment\"># 把tmp放到叶子节点上</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heap_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(li)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((n - <span class=\"number\">2</span>) // <span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class=\"line\">        sift(li, i, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 建堆完成</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># i指向当前堆的最后一个元素</span></span><br><span class=\"line\">        li[<span class=\"number\">0</span>], li[i] = li[i], li[<span class=\"number\">0</span>]  <span class=\"comment\"># 将最后一个元素与堆顶元素交换位置</span></span><br><span class=\"line\">        sift(li, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)  <span class=\"comment\"># i-1是新的high</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\">heap_sort(li)</span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(end - start)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"python中内置好的堆排序函数\"><a href=\"#python中内置好的堆排序函数\" class=\"headerlink\" title=\"python中内置好的堆排序函数\"></a>python中内置好的堆排序函数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python中内置好的堆排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">li = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\">random.shuffle(li)      <span class=\"comment\"># 打乱列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">heapq.heapify(li)       <span class=\"comment\"># 建堆</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(heapq.heappop(li), end=<span class=\"string\">&quot;,&quot;</span>)       <span class=\"comment\"># 弹出一个堆中最小的元素</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"利用堆排序解决topk问题\"><a href=\"#利用堆排序解决topk问题\" class=\"headerlink\" title=\"利用堆排序解决topk问题\"></a>利用堆排序解决topk问题</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用堆排序解决topk问题</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sift</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param li:列表</span></span><br><span class=\"line\"><span class=\"string\">    :param low: 堆的根节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    :param high: 堆的最后一个元素的位置</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low  <span class=\"comment\"># 最开始指向根节点</span></span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>  <span class=\"comment\"># j为根节点的左孩子</span></span><br><span class=\"line\">    tmp = li[low]  <span class=\"comment\"># 把堆顶元素存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:  <span class=\"comment\"># 建立小根堆</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt;= high <span class=\"keyword\">and</span> li[j + <span class=\"number\">1</span>] &lt; li[j]:  <span class=\"comment\"># 如果右孩子存在并且比左孩子小</span></span><br><span class=\"line\">            j = j + <span class=\"number\">1</span>  <span class=\"comment\"># j指向右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[j] &lt; tmp:  <span class=\"comment\"># 如果孩子节点小于父亲节点</span></span><br><span class=\"line\">            li[i] = li[j]  <span class=\"comment\"># 孩子节点元素调整到父亲节点的位置</span></span><br><span class=\"line\">            i = j  <span class=\"comment\"># 指针下移</span></span><br><span class=\"line\">            j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 因为tmp比孩子节点更小，找到合适的位置</span></span><br><span class=\"line\">            li[i] = tmp  <span class=\"comment\"># 找到根节点合适的位置并放入</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        li[i] = tmp  <span class=\"comment\"># 把tmp放到叶子节点上</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">topk</span>(<span class=\"params\">li, k</span>):</span><br><span class=\"line\">    heap = li[<span class=\"number\">0</span>:k]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((k - <span class=\"number\">2</span>) // <span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):  <span class=\"comment\"># 建立小根堆</span></span><br><span class=\"line\">        sift(heap, i, k - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k, <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>):  <span class=\"comment\"># 遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &gt; heap[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            heap[<span class=\"number\">0</span>] = li[i]</span><br><span class=\"line\">            sift(heap, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):  <span class=\"comment\"># 对结果排序</span></span><br><span class=\"line\">        heap[<span class=\"number\">0</span>], heap[i] = heap[i], heap[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(heap, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)]</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(topk(li, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 归并排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">li, low, mid, high</span>):  <span class=\"comment\"># 对列表中mid左右两边的子列表进行排序</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:  <span class=\"comment\"># 左右两个子列表都有数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &lt; li[j]:</span><br><span class=\"line\">            ltmp.append(li[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ltmp.append(li[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(li[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(li[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    li[low:high + <span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_merge_sort</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:  <span class=\"comment\"># 至少有两个元素，递归</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        _merge_sort(li, low, mid)</span><br><span class=\"line\">        _merge_sort(li, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        merge(li, low, mid, high)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    _merge_sort(li, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">merge_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"六种排序方法的总结\"><a href=\"#六种排序方法的总结\" class=\"headerlink\" title=\"六种排序方法的总结\"></a>六种排序方法的总结</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139244-909999252.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h2 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 计数排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">min</span>(li), <span class=\"built_in\">max</span>(li) + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    min_num = <span class=\"built_in\">min</span>(li)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        count[val - min_num] += <span class=\"number\">1</span></span><br><span class=\"line\">    li.clear()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind, val <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(val):</span><br><span class=\"line\">            li.append(ind + min_num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(-<span class=\"number\">9</span>, <span class=\"number\">21</span>))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">count_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"桶排序（高级版计数排序）\"><a href=\"#桶排序（高级版计数排序）\" class=\"headerlink\" title=\"桶排序（高级版计数排序）\"></a>桶排序（高级版计数排序）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 桶排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bucket_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    max_num = <span class=\"built_in\">max</span>(li)</span><br><span class=\"line\">    n = max_num // <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        n = <span class=\"number\">1</span></span><br><span class=\"line\">        buckets = [[]]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        buckets = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        i = <span class=\"built_in\">min</span>(var // (max_num // n), n - <span class=\"number\">1</span>)       <span class=\"comment\"># i表示var放到几号桶里</span></span><br><span class=\"line\">        buckets[i].append(var)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(buckets[i]) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):     <span class=\"comment\"># 保持桶内的顺序</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> buckets[i][j] &lt; buckets[i][j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                buckets[i][j], buckets[i][j - <span class=\"number\">1</span>] = buckets[i][j - <span class=\"number\">1</span>], buckets[i][j]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    li.clear()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> buc <span class=\"keyword\">in</span> buckets:</span><br><span class=\"line\">        li.extend(buc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">200</span>))</span><br><span class=\"line\">li1 = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">200</span>))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li == li1)</span><br><span class=\"line\">bucket_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li == li1)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基数排序</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">radix_sort</span>(<span class=\"params\">li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    max_num = <span class=\"built_in\">max</span>(li)</span><br><span class=\"line\">    it = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">10</span> ** it &lt;= max_num:  <span class=\"comment\"># 求最大数的位数</span></span><br><span class=\"line\">        buckets = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]  <span class=\"comment\"># 创建桶</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> li:  <span class=\"comment\"># 把数放入桶中</span></span><br><span class=\"line\">            digit = (var // <span class=\"number\">10</span> ** it) % <span class=\"number\">10</span>  <span class=\"comment\"># 依次取每个数的位数</span></span><br><span class=\"line\">            buckets[digit].append(var)</span><br><span class=\"line\"></span><br><span class=\"line\">        li.clear()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> buc <span class=\"keyword\">in</span> buckets:</span><br><span class=\"line\">            li.extend(buc)</span><br><span class=\"line\">        it += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [random.randint(<span class=\"number\">0</span>, <span class=\"number\">10000</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\">radix_sort(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(check(li))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"数据结构-1\"><a href=\"#数据结构-1\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><ul>\n<li><strong><a href=\"#%E5%88%97%E8%A1%A8%EF%BC%88%E5%8D%B3%E9%A1%BA%E5%BA%8F%E8%A1%A8%EF%BC%89\">顺序表</a></strong></li>\n<li><strong><a href=\"#%E9%93%BE%E8%A1%A8\">链表</a></strong></li>\n</ul>\n<h2 id=\"列表（即顺序表）\"><a href=\"#列表（即顺序表）\" class=\"headerlink\" title=\"列表（即顺序表）\"></a>列表（即顺序表）</h2><ol>\n<li>列表内的每个节点储存的元素为地址，所以列表内部可以时任意数据类型</li>\n<li>列表是动态分配存储空间，列表长度不够的时候，python底层会为列表重新开辟一个更大的空间，并把原先列表中存储的地址复制到新开辟的空间中</li>\n</ol>\n<h2 id=\"栈（后进先出）\"><a href=\"#栈（后进先出）\" class=\"headerlink\" title=\"栈（后进先出）\"></a>栈（后进先出）</h2><h3 id=\"顺序栈\"><a href=\"#顺序栈\" class=\"headerlink\" title=\"顺序栈\"></a>顺序栈</h3><p>列表（li）结构可以实现栈</p>\n<ul>\n<li>进栈：li.append</li>\n<li>出栈：li.pop</li>\n<li>取栈顶：li[-1]</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.stack = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, element</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.stack.append(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.stack.pop()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.stack) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack = Stack()</span><br><span class=\"line\">stack.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">stack.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">stack.push(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.is_empty())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.is_empty())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop())</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链式栈\"><a href=\"#链式栈\" class=\"headerlink\" title=\"链式栈\"></a>链式栈</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">stack_linked</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, Node=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = Node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = ListNode(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = ListNode(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        node = ListNode(val)</span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        val = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack = stack_linked()</span><br><span class=\"line\">stack.push(<span class=\"number\">5</span>)</span><br><span class=\"line\">stack.push(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.pop().val)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stack.head.val)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h3><h4 id=\"迷宫问题（找的不一定是最短路径）\"><a href=\"#迷宫问题（找的不一定是最短路径）\" class=\"headerlink\" title=\"迷宫问题（找的不一定是最短路径）\"></a>迷宫问题（找的不一定是最短路径）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span> = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x + <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x - <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y - <span class=\"number\">1</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">map_path</span>(<span class=\"params\">x1, y1, x2, y2</span>):</span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    stack.append((x1, y1))</span><br><span class=\"line\">    <span class=\"built_in\">map</span>[x1][y1]=<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        curNode = stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == x2 <span class=\"keyword\">and</span> curNode[<span class=\"number\">1</span>] == y2:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> stack:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">dir</span> <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = <span class=\"built_in\">dir</span>(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">map</span>[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                stack.append(nextNode)</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有路&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">map_path(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">map</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"十进制转化为其他进制\"><a href=\"#十进制转化为其他进制\" class=\"headerlink\" title=\"十进制转化为其他进制\"></a>十进制转化为其他进制</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 十进制转化为其他进制</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">base_conversion</span>(<span class=\"params\">val, base</span>):</span><br><span class=\"line\">    li = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> val != <span class=\"number\">0</span>:</span><br><span class=\"line\">        li.append(val % base)</span><br><span class=\"line\">        val = val // base</span><br><span class=\"line\"></span><br><span class=\"line\">    li.reverse()</span><br><span class=\"line\">    s = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>,li))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(base_conversion(<span class=\"number\">120</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"队列（先进先出）\"><a href=\"#队列（先进先出）\" class=\"headerlink\" title=\"队列（先进先出）\"></a>队列（先进先出）</h2><p>列表（li）可以实现队列</p>\n<ul>\n<li>入队：li.append</li>\n<li>出队：li.pop(0)</li>\n<li>取队头：li[0]</li>\n</ul>\n<h3 id=\"顺序队列\"><a href=\"#顺序队列\" class=\"headerlink\" title=\"顺序队列\"></a>顺序队列</h3><h4 id=\"基础队列类\"><a href=\"#基础队列类\" class=\"headerlink\" title=\"基础队列类\"></a>基础队列类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.queue = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, element</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.queue.append(element)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.queue) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_top</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">queue = Queue()</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_empty())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.get_top())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_empty())</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"循环队列类\"><a href=\"#循环队列类\" class=\"headerlink\" title=\"循环队列类\"></a>循环队列类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">100</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.queue = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size)]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = size</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rear = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.front = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, element</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_filled():</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear = (<span class=\"variable language_\">self</span>.rear + <span class=\"number\">1</span>) % <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.queue[<span class=\"variable language_\">self</span>.rear] = element</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is filled&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = (<span class=\"variable language_\">self</span>.front + <span class=\"number\">1</span>) % <span class=\"variable language_\">self</span>.size</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue[<span class=\"variable language_\">self</span>.front]</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is empty&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_top</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.queue[<span class=\"variable language_\">self</span>.rear]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.rear == <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_filled</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"variable language_\">self</span>.rear + <span class=\"number\">1</span>) % <span class=\"variable language_\">self</span>.size == <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\"></span><br><span class=\"line\">queue=Queue(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_empty())</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">3</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.is_filled())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.get_top())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop())</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"内置队列\"><a href=\"#内置队列\" class=\"headerlink\" title=\"内置队列\"></a>内置队列</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque  <span class=\"comment\"># 双向队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">q = deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">4</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">5</span>)  <span class=\"comment\"># 队尾进</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.popleft())  <span class=\"comment\"># 队首出</span></span><br><span class=\"line\"></span><br><span class=\"line\">q.clear()</span><br><span class=\"line\">q.appendleft(<span class=\"number\">1</span>)  <span class=\"comment\"># 队首进</span></span><br><span class=\"line\">q.appendleft(<span class=\"number\">2</span>)</span><br><span class=\"line\">q.appendleft(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())  <span class=\"comment\"># 队尾出</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链式队列\"><a href=\"#链式队列\" class=\"headerlink\" title=\"链式队列\"></a>链式队列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">queue_linked</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.front = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.rear = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        node = Node(val)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.front <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear = node</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.rear = <span class=\"variable language_\">self</span>.rear.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.front == <span class=\"variable language_\">self</span>.rear <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.front:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = <span class=\"variable language_\">self</span>.rear = <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.front:</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.front = <span class=\"variable language_\">self</span>.front.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">peek</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.is_empty():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.front.val</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_empty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.front <span class=\"keyword\">and</span> <span class=\"variable language_\">self</span>.rear:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        p = <span class=\"variable language_\">self</span>.front</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(p.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">            p = p.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">queue = queue_linked()</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.push(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop().val)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop().val)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(queue.pop().val)</span><br><span class=\"line\"><span class=\"comment\"># print(queue.peek())</span></span><br><span class=\"line\">queue.show()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"队列的应用\"><a href=\"#队列的应用\" class=\"headerlink\" title=\"队列的应用\"></a>队列的应用</h3><h4 id=\"迷宫问题（求的是最短路径）\"><a href=\"#迷宫问题（求的是最短路径）\" class=\"headerlink\" title=\"迷宫问题（求的是最短路径）\"></a>迷宫问题（求的是最短路径）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span> = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x + <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x - <span class=\"number\">1</span>, y),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> x, y: (x, y - <span class=\"number\">1</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_path</span>(<span class=\"params\">path, <span class=\"built_in\">map</span></span>):</span><br><span class=\"line\">    curNode = path[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    realpath = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> curNode[<span class=\"number\">2</span>] != -<span class=\"number\">1</span>:</span><br><span class=\"line\">        realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">map</span>[curNode[<span class=\"number\">0</span>]][curNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">        curNode = path[curNode[<span class=\"number\">2</span>]]</span><br><span class=\"line\">    realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"built_in\">map</span>[curNode[<span class=\"number\">0</span>]][curNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">    realpath.reverse()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> realpath:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">map_path_shortest</span>(<span class=\"params\">x1, y1, x2, y2, <span class=\"built_in\">map</span></span>):</span><br><span class=\"line\">    map1 = copy.deepcopy(<span class=\"built_in\">map</span>)</span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    queue.append((x1, y1, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    path = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        curNode = queue.popleft()</span><br><span class=\"line\">        path.append(curNode)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == x2 <span class=\"keyword\">and</span> curNode[<span class=\"number\">1</span>] == y2:</span><br><span class=\"line\">            print_path(path, <span class=\"built_in\">map</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> di <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = di(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> map1[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append((nextNode[<span class=\"number\">0</span>], nextNode[<span class=\"number\">1</span>], <span class=\"built_in\">len</span>(path) - <span class=\"number\">1</span>))</span><br><span class=\"line\">                map1[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有路&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">map_path_shortest(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"built_in\">map</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">map</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3><h4 id=\"单链表的创建\"><a href=\"#单链表的创建\" class=\"headerlink\" title=\"单链表的创建\"></a>单链表的创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span>, <span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span>:</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">LinkListIterator</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.node = node</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__next__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.node:</span><br><span class=\"line\">                cur_node = <span class=\"variable language_\">self</span>.node</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.node = cur_node.<span class=\"built_in\">next</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur_node.val</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, iterable=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tail = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> iterable:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.extend(iterable)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">append</span>(<span class=\"params\">self, obj</span>):</span><br><span class=\"line\">        s = ListNode(obj)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = s</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = s</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span> = s</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = s</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">extend</span>(<span class=\"params\">self, iterable</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.append(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">self, obj</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n == obj:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = ListNode(li[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tail = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">            node = ListNode(element)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = node</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_head</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = ListNode(li[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.tail = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">            node = ListNode(element)</span><br><span class=\"line\">            node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = node</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        Node = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> Node != <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(Node.val, end=<span class=\"string\">&#x27;\\t&#x27;</span>)</span><br><span class=\"line\">            Node = Node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_length</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node != <span class=\"variable language_\">self</span>.tail:</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_value</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.get_length():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur.val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_index</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> cur:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.val == value:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtIndex</span>(<span class=\"params\">self, index, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            node = ListNode(val)</span><br><span class=\"line\">            node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = node</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index &gt;= <span class=\"variable language_\">self</span>.get_length():</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span> = ListNode(val)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.tail = <span class=\"variable language_\">self</span>.tail.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        node = ListNode(val)</span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        pre = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">            pre = cur</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtIndex</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.get_length():</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        pre = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> index &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            pre = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtValue</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.head.val == value:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.head = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> cur.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.<span class=\"built_in\">next</span>.val == value:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        cur.<span class=\"built_in\">next</span> = cur.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.LinkListIterator(<span class=\"variable language_\">self</span>.head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;&lt;&quot;</span> + <span class=\"string\">&quot;,&quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, <span class=\"variable language_\">self</span>)) + <span class=\"string\">&quot;&gt;&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = LinkedList([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">li.show()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li.get_length())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li.get_index(<span class=\"number\">6</span>))</span><br><span class=\"line\">li.addAtIndex(<span class=\"number\">7</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">li.show()</span><br><span class=\"line\">li.deleteAtValue(<span class=\"number\">3</span>)</span><br><span class=\"line\">li.show()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(li.get_index(<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span>, <span class=\"built_in\">next</span>=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"built_in\">next</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = ListNode()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size = <span class=\"number\">0</span>  <span class=\"comment\"># 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index):</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur.val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtHead</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        new_node = ListNode(val)</span><br><span class=\"line\">        new_node.<span class=\"built_in\">next</span> = <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head.<span class=\"built_in\">next</span> = new_node</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtTail</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        new_node = ListNode(val)</span><br><span class=\"line\">        cur = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur.<span class=\"built_in\">next</span>):</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        cur.<span class=\"built_in\">next</span> = new_node</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtIndex</span>(<span class=\"params\">self, index, val</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.addAtHead(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index == <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.addAtTail(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index &gt; <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        node = ListNode(val)</span><br><span class=\"line\">        pre = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index):</span><br><span class=\"line\">            pre = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtIndex</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type index: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> index &gt;= <span class=\"variable language_\">self</span>.size:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        pre = <span class=\"variable language_\">self</span>.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index):</span><br><span class=\"line\">            pre = pre.<span class=\"built_in\">next</span></span><br><span class=\"line\">            index -= <span class=\"number\">1</span></span><br><span class=\"line\">        pre.<span class=\"built_in\">next</span> = pre.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.size -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003139985-802441053.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140429-1838041831.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"双链表\"><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003140952-1508005939.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003141477-1809483299.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142022-1131773000.png\" style=\"zoom:80%;\" />\n\n<h4 id=\"双链表的创建\"><a href=\"#双链表的创建\" class=\"headerlink\" title=\"双链表的创建\"></a>双链表的创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.prev = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedListDouble</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._head, <span class=\"variable language_\">self</span>._tail = Node(<span class=\"number\">0</span>), Node(<span class=\"number\">0</span>)  <span class=\"comment\"># 虚拟节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._head.<span class=\"built_in\">next</span>, <span class=\"variable language_\">self</span>._tail.prev = <span class=\"variable language_\">self</span>._tail, <span class=\"variable language_\">self</span>._head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._count = <span class=\"number\">0</span>  <span class=\"comment\"># 添加的节点数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_get_node</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span></span>) -&gt; Node:</span><br><span class=\"line\">        <span class=\"comment\"># 当index小于_count//2时, 使用_head查找更快, 反之_tail更快</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &gt;= <span class=\"variable language_\">self</span>._count // <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 使用prev往前找</span></span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._tail</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"variable language_\">self</span>._count - index):</span><br><span class=\"line\">                node = node.prev</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 使用next往后找</span></span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._head</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(index + <span class=\"number\">1</span>):</span><br><span class=\"line\">                node = node.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Get the value of the index-th node in the linked list. If the index is invalid, return -1.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= index &lt; <span class=\"variable language_\">self</span>._count:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._get_node(index)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.val</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtHead</span>(<span class=\"params\">self, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Add a node of value val before the first element of the linked list.</span></span><br><span class=\"line\"><span class=\"string\">         After the insertion, the new node will be the first node of the linked list.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update(<span class=\"variable language_\">self</span>._head, <span class=\"variable language_\">self</span>._head.<span class=\"built_in\">next</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtTail</span>(<span class=\"params\">self, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Append a node of value val to the last element of the linked list.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update(<span class=\"variable language_\">self</span>._tail.prev, <span class=\"variable language_\">self</span>._tail, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addAtIndex</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Add a node of value val before the index-th node in the linked list.</span></span><br><span class=\"line\"><span class=\"string\">        If index equals to the length of linked list, the node will be appended to the end of linked list.</span></span><br><span class=\"line\"><span class=\"string\">        If index is greater than the length, the node will not be inserted.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> index &gt; <span class=\"variable language_\">self</span>._count:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        node = <span class=\"variable language_\">self</span>._get_node(index)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._update(node.prev, node, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_update</span>(<span class=\"params\">self, prev: Node, <span class=\"built_in\">next</span>: Node, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            更新节点</span></span><br><span class=\"line\"><span class=\"string\">            :param prev: 相对于更新的前一个节点</span></span><br><span class=\"line\"><span class=\"string\">            :param next: 相对于更新的后一个节点</span></span><br><span class=\"line\"><span class=\"string\">            :param val:  要添加的节点值</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 计数累加</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>._count += <span class=\"number\">1</span></span><br><span class=\"line\">        node = Node(val)</span><br><span class=\"line\">        prev.<span class=\"built_in\">next</span>, <span class=\"built_in\">next</span>.prev = node, node</span><br><span class=\"line\">        node.prev, node.<span class=\"built_in\">next</span> = prev, <span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAtIndex</span>(<span class=\"params\">self, index: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Delete the index-th node in the linked list, if the index is valid.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= index &lt; <span class=\"variable language_\">self</span>._count:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>._get_node(index)</span><br><span class=\"line\">            <span class=\"comment\"># 计数-1</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>._count -= <span class=\"number\">1</span></span><br><span class=\"line\">            node.prev.<span class=\"built_in\">next</span>, node.<span class=\"built_in\">next</span>.prev = node.<span class=\"built_in\">next</span>, node.prev</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"链表与数组的差别\"><a href=\"#链表与数组的差别\" class=\"headerlink\" title=\"链表与数组的差别\"></a>链表与数组的差别</h3><ul>\n<li>链表<ul>\n<li>优点：插入删除操作较快，内存可以动态分配</li>\n<li>缺点：查找操作较慢</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>优点：结构简单，查找操作快</li>\n<li>缺点：插入删除操作较慢，内存不能动态分配</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><p>python中的<strong>集合</strong>，<strong>字典</strong>结构在底层都是用的哈希表来实现的</p>\n<h2 id=\"哈希表（开辟的一系列连续的地址即数组）\"><a href=\"#哈希表（开辟的一系列连续的地址即数组）\" class=\"headerlink\" title=\"哈希表（开辟的一系列连续的地址即数组）\"></a>哈希表（开辟的一系列连续的地址即数组）</h2><h2 id=\"哈希函数（计算输入的值在哈希表中对应下标的函数）\"><a href=\"#哈希函数（计算输入的值在哈希表中对应下标的函数）\" class=\"headerlink\" title=\"哈希函数（计算输入的值在哈希表中对应下标的函数）\"></a>哈希函数（计算输入的值在哈希表中对应下标的函数）</h2><h2 id=\"哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\"><a href=\"#哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\" class=\"headerlink\" title=\"哈希冲突（对于不同的输入哈希函数输出的结果可能相同）\"></a>哈希冲突（对于不同的输入哈希函数输出的结果可能相同）</h2><ul>\n<li>解决哈希冲突的方法<ul>\n<li>线性探测法：如果地址冲突，那么它所存放的位置在哈希表中加一</li>\n<li>二次探测法：利用二次函数，计算冲突时，应该存储的位置</li>\n<li>拉链存储法：哈希表的每个节点存储的是链表<ul>\n<li><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003142551-437647432.png\" style=\"zoom:80%;\" /></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"树和二叉树\"><a href=\"#树和二叉树\" class=\"headerlink\" title=\"树和二叉树\"></a>树和二叉树</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li>根节点</li>\n<li>叶子节点</li>\n<li>树的深度</li>\n<li>节点的度</li>\n<li>树的度</li>\n<li>父亲节点</li>\n<li>孩子节点（左孩子&#x2F;右孩子）</li>\n<li>子树</li>\n</ul>\n<h2 id=\"二叉树（度为2的树）\"><a href=\"#二叉树（度为2的树）\" class=\"headerlink\" title=\"二叉树（度为2的树）\"></a>二叉树（度为2的树）</h2><h3 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h3><ol>\n<li><p><strong>对于非空二叉树，如果叶子节点树为n<del>0</del>，度为2的节点数为n<del>2</del>，则有n<del>0</del>&#x3D;n<del>2</del>+1</strong></p>\n</li>\n<li><p><strong>对于非空二叉树的第i层上最多有2^i-1^个节点（满二叉树）</strong></p>\n</li>\n<li><p><strong>一颗深度为k的二叉树中，最多有2^k^-1个节点（满二叉树）</strong></p>\n</li>\n<li><p><strong>具有n个节点的完全二叉树的深度为：$\\lfloor log_2n \\rfloor+1$</strong></p>\n</li>\n<li><p><strong>如果对于一颗有n个节点的完全二叉树的节点按层序编号，则对任意节点i（1&lt;&#x3D;i&lt;&#x3D;n）</strong></p>\n<ol>\n<li><p><strong>如果i&#x3D;1，则节点i时二叉树的根节点，如果i&gt;1,则其父亲节点为$\\lfloor i&#x2F;2 \\rfloor$</strong></p>\n</li>\n<li><p><strong>如果$2i\\leq n$，则其左孩子是节点2i，否则i无左孩子，为叶子节点</strong></p>\n</li>\n<li><p><strong>如果$2i+1\\leq n$，其右孩子是节点2i+1，否则节点i无右孩子</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003143534-675539412.png\" alt=\"Snipaste_2023-01-26_11-05-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144113-2080533132.png\" alt=\"Snipaste_2023-01-26_11-08-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003144872-1933819243.png\" alt=\"Snipaste_2023-01-26_11-08-32\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003145823-249465355.png\" alt=\"Snipaste_2023-01-26_11-09-15\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003146532-1929601304.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h3><h3 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h3><h3 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h3><ul>\n<li><p>顺序存储（用列表或者数组储存）（一般适用于完全二叉树）</p>\n</li>\n<li><p>链式存储</p>\n</li>\n<li><p>列表存储</p>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003147452-974457570.png\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"二叉树的创建\"><a href=\"#二叉树的创建\" class=\"headerlink\" title=\"二叉树的创建\"></a>二叉树的创建</h3><h4 id=\"层次按序创建\"><a href=\"#层次按序创建\" class=\"headerlink\" title=\"层次按序创建\"></a>层次按序创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span>, left=<span class=\"literal\">None</span>, right=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = left</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tree</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, li=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.lt = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.extend(li)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">extend</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):  <span class=\"comment\"># 层次添加创建</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.add(i)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self, number</span>):</span><br><span class=\"line\">        <span class=\"comment\"># if number is None:</span></span><br><span class=\"line\">        <span class=\"comment\">#     self.lt.pop(0)</span></span><br><span class=\"line\">        <span class=\"comment\">#     return</span></span><br><span class=\"line\">        node = TreeNode(number)  <span class=\"comment\"># 将输入的数字节点化，使其具有左右孩子的属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.root == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = node</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.lt.append(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"variable language_\">self</span>.lt:</span><br><span class=\"line\">                point = <span class=\"variable language_\">self</span>.lt[<span class=\"number\">0</span>]  <span class=\"comment\"># 依次对左右孩子未满的节点分配孩子</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> point.val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> point.left == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    point.left = node</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.append(point.left)  <span class=\"comment\"># 该节点后面作为父节点也是未满的，也要加入到列表中。</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> point.right == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    point.right = node</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.append(point.right)  <span class=\"comment\"># 与左孩子同理</span></span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.lt.pop(<span class=\"number\">0</span>)  <span class=\"comment\"># 表示该节点已拥有左右孩子，从未满列表中去除</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">clear</span>(<span class=\"params\">self</span>):  <span class=\"comment\"># 清除值为None的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">level_order_traversal</span>(<span class=\"params\">root: TreeNode</span>):</span><br><span class=\"line\">            queue = deque()</span><br><span class=\"line\">            queue.append(root)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                node = queue.popleft()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left <span class=\"keyword\">and</span> node.left.val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    node.left = <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right <span class=\"keyword\">and</span> node.right.val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    node.right = <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\"></span><br><span class=\"line\">        level_order_traversal(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">self</span>):  <span class=\"comment\"># 前序遍历输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(root.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">            dfs(root.left)</span><br><span class=\"line\">            dfs(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">searchdata</span>(<span class=\"params\">T, val</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> T == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> T.val == val:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> T</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                p = searchdata(T.left, val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p</span><br><span class=\"line\">                p = searchdata(T.right, val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> searchdata(<span class=\"variable language_\">self</span>.root, val)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"函数前序创建\"><a href=\"#函数前序创建\" class=\"headerlink\" title=\"函数前序创建\"></a>函数前序创建</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">creat_binary_tree</span>(<span class=\"params\">input_list=[]</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 构建二叉树</span></span><br><span class=\"line\">    <span class=\"comment\"># param input_list:输入数列</span></span><br><span class=\"line\">    <span class=\"comment\"># 当我们在函数中传入的数列不存在或者传入的数列中元素的个数等于0时，表示是一棵空树</span></span><br><span class=\"line\">    <span class=\"comment\"># 此时不需要操作，直接返回None即可</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> input_list <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(input_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"comment\"># 结点中的数据等于列表中的第一个元素，每次pop出去一个元素，后面的元素会往前走一个位置</span></span><br><span class=\"line\">    <span class=\"comment\"># 这样可以保证元素的一次弹出</span></span><br><span class=\"line\">    val = input_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当弹出的元素是None时，表示该节点为空，直接返回None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> val <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过刚才定义的TreeNode类新建node</span></span><br><span class=\"line\">    node = TreeNode(val)</span><br><span class=\"line\">    <span class=\"comment\"># node的左孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class=\"line\">    node.left = creat_binary_tree(input_list)</span><br><span class=\"line\">    <span class=\"comment\"># node的右孩子等于弹出的结点，即input_list.pop(0)弹出的元素</span></span><br><span class=\"line\">    node.right = creat_binary_tree(input_list)</span><br><span class=\"line\">    <span class=\"comment\"># 返回node结点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3><ol>\n<li>递归遍历</li>\n<li>非递归遍历</li>\n</ol>\n<ul>\n<li>前序遍历</li>\n<li>中序遍历</li>\n<li>后序遍历</li>\n<li>层次遍历</li>\n</ul>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003148331-2135232511.png\" style=\"zoom:80%;\" />\n\n<h4 id=\"递归遍历代码\"><a href=\"#递归遍历代码\" class=\"headerlink\" title=\"递归遍历代码\"></a>递归遍历代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pre_order_traversal</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 前序遍历</span></span><br><span class=\"line\">    <span class=\"comment\"># param node:二叉树节点</span></span><br><span class=\"line\">    <span class=\"comment\"># 当node为空表示为一棵空树，不需要进行前序遍历直接返回即可</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 此时node不为空，直接打印node的val域</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的先序遍历node的左孩子</span></span><br><span class=\"line\">    pre_order_traversal(node.left)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的先序遍历node的左孩子</span></span><br><span class=\"line\">    pre_order_traversal(node.right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">in_order_traversal</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 中序遍历</span></span><br><span class=\"line\">    <span class=\"comment\"># param node:二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 递归的中序遍历node的左孩子</span></span><br><span class=\"line\">    in_order_traversal(node.left)</span><br><span class=\"line\">    <span class=\"comment\"># 打印节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的中序遍历node的左孩子</span></span><br><span class=\"line\">    in_order_traversal(node.right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">post_order_traversal</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 后序遍历</span></span><br><span class=\"line\">    <span class=\"comment\"># param node:二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 递归的后序遍历node的左孩子</span></span><br><span class=\"line\">    post_order_traversal(node.left)</span><br><span class=\"line\">    <span class=\"comment\"># 递归的后序遍历node的左孩子</span></span><br><span class=\"line\">    post_order_traversal(node.right)</span><br><span class=\"line\">    <span class=\"comment\"># 打印节点的值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque, Counter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">level_order_traversal</span>(<span class=\"params\">root: TreeNode</span>):</span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    queue.append(root)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        node = queue.popleft()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node.val, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">            queue.append(node.left)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">            queue.append(node.right)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"非递归遍历代码\"><a href=\"#非递归遍历代码\" class=\"headerlink\" title=\"非递归遍历代码\"></a>非递归遍历代码</h4><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003149366-1785461924.png\" style=\"zoom:80%;\" />\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">preorderTraversal</span>(<span class=\"params\">root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"comment\"># 根结点为空则返回空列表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    stack = [root]</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">        node = stack.pop()</span><br><span class=\"line\">        <span class=\"comment\"># 中结点先处理</span></span><br><span class=\"line\">        result.append(node.val)</span><br><span class=\"line\">        <span class=\"comment\"># 右孩子先入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">            stack.append(node.right)</span><br><span class=\"line\">        <span class=\"comment\"># 左孩子后入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">            stack.append(node.left)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中序遍历-迭代-LC94_二叉树的中序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inorderTraversal</span>(<span class=\"params\">root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    stack = []  <span class=\"comment\"># 不能提前将root结点加入stack中</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    cur = root</span><br><span class=\"line\">    <span class=\"keyword\">while</span> cur <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">        <span class=\"comment\"># 先迭代访问最底层的左子树结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur:</span><br><span class=\"line\">            stack.append(cur)</span><br><span class=\"line\">            cur = cur.left</span><br><span class=\"line\">        <span class=\"comment\"># 到达最左结点后处理栈顶结点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cur = stack.pop()</span><br><span class=\"line\">            result.append(cur.val)</span><br><span class=\"line\">            <span class=\"comment\"># 取栈顶元素右结点</span></span><br><span class=\"line\">            cur = cur.right</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后序遍历-迭代-LC145_二叉树的后序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">postorderTraversal</span>(<span class=\"params\">root: TreeNode</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    stack = [root]</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">        node = stack.pop()</span><br><span class=\"line\">        <span class=\"comment\"># 中结点先处理</span></span><br><span class=\"line\">        result.append(node.val)</span><br><span class=\"line\">        <span class=\"comment\"># 左孩子先入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">            stack.append(node.left)</span><br><span class=\"line\">        <span class=\"comment\"># 右孩子后入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">            stack.append(node.right)</span><br><span class=\"line\">    <span class=\"comment\"># 将最终的数组翻转</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result[::-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"哈夫曼树\"><a href=\"#哈夫曼树\" class=\"headerlink\" title=\"哈夫曼树\"></a>哈夫曼树</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003150422-1241951893.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151230-137109831.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003151864-1062009624.png\" style=\"zoom:80%;\" />\n\n<p><img src=\"/\"></p>\n<h4 id=\"哈夫曼编码\"><a href=\"#哈夫曼编码\" class=\"headerlink\" title=\"哈夫曼编码\"></a>哈夫曼编码</h4><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuffmanNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, val=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = val</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.parent = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuffmanTree</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, head=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = head</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.lst = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.huffman_code = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">self, li: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">            res.append(HuffmanNode(i))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.lst = res[:]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(res) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            res.sort(key=<span class=\"keyword\">lambda</span> item: item.val)</span><br><span class=\"line\">            node_left = res.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            node_right = res.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            node_father = HuffmanNode(node_left.val + node_right.val)</span><br><span class=\"line\">            node_father.left = node_left</span><br><span class=\"line\">            node_father.right = node_right</span><br><span class=\"line\">            node_left.parent = node_father</span><br><span class=\"line\">            node_right.parent = node_father</span><br><span class=\"line\">            res.append(node_father)</span><br><span class=\"line\"></span><br><span class=\"line\">        res[<span class=\"number\">0</span>].parent = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.head = res[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">encoding</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        huffman_code = [<span class=\"string\">&#x27;&#x27;</span>] * <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.lst)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.lst)):</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.lst[i]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node != <span class=\"variable language_\">self</span>.head:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.parent.left == node:</span><br><span class=\"line\">                    huffman_code[i] = <span class=\"string\">&quot;0&quot;</span> + huffman_code[i]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    huffman_code[i] = <span class=\"string\">&quot;1&quot;</span> + huffman_code[i]</span><br><span class=\"line\">                node = node.parent</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.huffman_code = huffman_code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">huffmantree = HuffmanTree()</span><br><span class=\"line\">huffmantree.create([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>])</span><br><span class=\"line\">level_order_traversal(huffmantree.head)</span><br><span class=\"line\">huffmantree.encoding()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(huffmantree.huffman_code)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003152778-490328608.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ul>\n<li>插入</li>\n<li>查询</li>\n<li>删除</li>\n</ul>\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003153588-922353087.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154127-989110491.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003154644-1062126191.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BiTreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.val = data</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.parent = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BST</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># if self.root is None:</span></span><br><span class=\"line\">            <span class=\"comment\">#     self.root=BiTreeNode(data[0])</span></span><br><span class=\"line\">            <span class=\"comment\">#     data=data[1:]</span></span><br><span class=\"line\">            <span class=\"comment\"># for i in data:</span></span><br><span class=\"line\">            <span class=\"comment\">#     self.insert(self.root, i)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.insert_no_rec(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, node, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">            node = BiTreeNode(val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> val &lt;= node.val:</span><br><span class=\"line\">            node.left = <span class=\"variable language_\">self</span>.insert(node.left, val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> val &gt; node.val:</span><br><span class=\"line\">            node.right = <span class=\"variable language_\">self</span>.insert(node.right, val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert_no_rec</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        p = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> p:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = BiTreeNode(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> val &lt;= p.val:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p.left:</span><br><span class=\"line\">                    p = p.left</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    p.left = BiTreeNode(val)</span><br><span class=\"line\">                    p.left.parent = p</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> val &gt; p.val:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p.right:</span><br><span class=\"line\">                    p = p.right</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    p.right = BiTreeNode(val)</span><br><span class=\"line\">                    p.right.parent = p</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">query</span>(<span class=\"params\">self, node, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.val &lt; val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.query(node.right, val)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.val &gt; val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.query(node.left, val)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">query_no_rec</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        p = <span class=\"variable language_\">self</span>.root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p.val &lt; val:</span><br><span class=\"line\">                p = p.right</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> p.val &gt; val:</span><br><span class=\"line\">                p = p.left</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__remove_node_1</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.parent:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node == node.parent.left:</span><br><span class=\"line\">            node.parent.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node.parent.right = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__remove_node_21</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.parent:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = node.left</span><br><span class=\"line\">            node.left.parent = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node == node.parent.left:</span><br><span class=\"line\">            node.parent.left = node.left</span><br><span class=\"line\">            node.left.parent = node.parent</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node.parent.right = node.left</span><br><span class=\"line\">            node.left.parent = node.parent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__remove_node_22</span>(<span class=\"params\">self, node</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.parent:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.root = node.right</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node == node.parent.left:</span><br><span class=\"line\">            node.parent.left = node.right</span><br><span class=\"line\">            node.right.parent = node.parent</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            node.parent.right = node.right</span><br><span class=\"line\">            node.right.parent = node.parent</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.root:</span><br><span class=\"line\">            node = <span class=\"variable language_\">self</span>.query_no_rec(val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> node.right:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.__remove_node_1(node)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> node.right:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.__remove_node_21(node)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> node.left:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.__remove_node_22(node)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                min_node = node.right</span><br><span class=\"line\">                <span class=\"keyword\">while</span> min_node.left:</span><br><span class=\"line\">                    min_node = min_node.left</span><br><span class=\"line\">                node.val = min_node.val</span><br><span class=\"line\">                <span class=\"keyword\">if</span> min_node.right:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.__remove_node_22(min_node)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.__remove_node_1(min_node)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">T = BST([<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">in_order_traversal(T.root)</span><br><span class=\"line\">T.delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">T.delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">T.delete(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\">in_order_traversal(T.root)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"AVL树（平衡二叉搜索树）\"><a href=\"#AVL树（平衡二叉搜索树）\" class=\"headerlink\" title=\"AVL树（平衡二叉搜索树）\"></a>AVL树（平衡二叉搜索树）</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155158-1066944240.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003155688-884961537.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156322-127906496.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003156892-1756837025.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003157549-2080550850.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003158464-610122918.png\" style=\"zoom: 80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003159072-1840188905.png\" style=\"zoom:80%;\" />\n\n\n\n<p>旋转操作过于复杂，可以先将列表元素排好序，然后使用二分递归的方法</p>\n<p>代码如下：</p>\n<h3 id=\"二分递归代码\"><a href=\"#二分递归代码\" class=\"headerlink\" title=\"二分递归代码\"></a>二分递归代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sortedArrayToBST</span>(<span class=\"params\">nums: <span class=\"built_in\">list</span>[<span class=\"built_in\">int</span>]</span>) -&gt; TreeNode:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">helper</span>(<span class=\"params\">left, right</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        root = TreeNode(nums[mid])</span><br><span class=\"line\">        root.left = helper(left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        root.right = helper(mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">li = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">root = sortedArrayToBST(li)</span><br><span class=\"line\">in_order_traversal(root)</span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\">pre_order_traversal(root)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"树和森林\"><a href=\"#树和森林\" class=\"headerlink\" title=\"树和森林\"></a>树和森林</h1><h2 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003200141-1341052574.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003201672-1580609190.png\" alt=\"Snipaste_2023-01-29_12-34-45\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003202403-279314825.png\" alt=\"Snipaste_2023-01-29_12-35-01\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203221-868073196.png\" alt=\"Snipaste_2023-01-29_12-35-20\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003203861-1157806461.png\" alt=\"Snipaste_2023-01-29_12-35-47\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003204640-1744020770.png\" alt=\"Snipaste_2023-01-29_12-36-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003205278-1739834.png\" alt=\"Snipaste_2023-01-29_12-36-36\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206036-1784944727.png\" alt=\"Snipaste_2023-01-29_12-36-59\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003206570-1588493395.png\" alt=\"Snipaste_2023-01-29_12-37-34\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png\" alt=\"Snipaste_2023-01-29_12-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png\" alt=\"Snipaste_2023-01-29_12-38-31\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"二叉树的转换\"><a href=\"#二叉树的转换\" class=\"headerlink\" title=\"二叉树的转换\"></a>二叉树的转换</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png\" alt=\"Snipaste_2023-01-29_12-42-06\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png\" alt=\"Snipaste_2023-01-29_12-42-19\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png\" alt=\"Snipaste_2023-01-29_12-42-43\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"树和森林的转换\"><a href=\"#树和森林的转换\" class=\"headerlink\" title=\"树和森林的转换\"></a>树和森林的转换</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png\" alt=\"Snipaste_2023-01-29_12-43-13\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png\" alt=\"Snipaste_2023-01-29_12-43-35\" style=\"zoom:80%;\" />\n\n\n\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207116-266004260.png\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003207678-1367845684.png\" alt=\"Snipaste_2023-01-29_12-38-31\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208328-1311563179.png\" alt=\"Snipaste_2023-01-29_12-42-06\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003208973-343044220.png\" alt=\"Snipaste_2023-01-29_12-42-19\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003210007-1283877873.png\" alt=\"Snipaste_2023-01-29_12-42-43\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003211090-2011676979.png\" alt=\"Snipaste_2023-01-29_12-43-13\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003212724-872005139.png\" alt=\"Snipaste_2023-01-29_12-43-35\"></p>\n<h2 id=\"树的遍历\"><a href=\"#树的遍历\" class=\"headerlink\" title=\"树的遍历\"></a>树的遍历</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213366-1097965655.png\" alt=\"Snipaste_2023-01-29_12-53-48\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003213974-555461917.png\" alt=\"Snipaste_2023-01-29_12-54-05\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003214649-1107760089.png\" alt=\"Snipaste_2023-01-29_12-54-16\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003215384-1593542650.png\" alt=\"Snipaste_2023-01-29_12-54-46\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003216741-1239051182.png\" alt=\"Snipaste_2023-01-29_12-55-05\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"森林的遍历\"><a href=\"#森林的遍历\" class=\"headerlink\" title=\"森林的遍历\"></a>森林的遍历</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003217958-1656900174.png\" alt=\"Snipaste_2023-01-29_12-55-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003219485-415832396.png\" alt=\"Snipaste_2023-01-29_12-55-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h1 id=\"KMP匹配算法\"><a href=\"#KMP匹配算法\" class=\"headerlink\" title=\"KMP匹配算法\"></a>KMP匹配算法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">strStr</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, t: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;KMP模板&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">prefix_function</span>(<span class=\"params\">s</span>):     </span><br><span class=\"line\">            n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">            pi = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\"></span><br><span class=\"line\">            j = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> s[i] != s[j]:     <span class=\"comment\"># 当前位置s[i]与s[j]不等</span></span><br><span class=\"line\">                    j = pi[j-<span class=\"number\">1</span>]                 <span class=\"comment\"># j指向之前位置，s[i]与s[j]继续比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> s[i] == s[j]:                <span class=\"comment\"># s[i]与s[j]相等，j+1，指向后一位</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                pi[i] = j</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pi</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        n, m = <span class=\"built_in\">len</span>(s), <span class=\"built_in\">len</span>(t)</span><br><span class=\"line\">        pi = prefix_function(t)             <span class=\"comment\"># 预处理得到t的前缀函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;再次基于KMP的思想在s中匹配t&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        j = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> s[i] != t[j]:</span><br><span class=\"line\">                j = pi[j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] == t[j]:</span><br><span class=\"line\">                j += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> j == m:          <span class=\"comment\"># 匹配到了t，直接返回</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i-m+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"基本概念-2\"><a href=\"#基本概念-2\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"图的定义\"><a href=\"#图的定义\" class=\"headerlink\" title=\"图的定义\"></a>图的定义</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003220125-1474032413.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221102-1400626471.png\" alt=\"Snipaste_2023-01-30_21-23-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003221760-951587005.png\" alt=\"Snipaste_2023-01-30_21-23-51\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003223080-1565255626.png\" alt=\"Snipaste_2023-01-30_21-24-05\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"图的相关概念\"><a href=\"#图的相关概念\" class=\"headerlink\" title=\"图的相关概念\"></a>图的相关概念</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224084-979841846.png\" alt=\"Snipaste_2023-01-30_21-24-39\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003224678-1822077730.png\" alt=\"Snipaste_2023-01-30_21-27-08\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003225334-754846157.png\" alt=\"Snipaste_2023-01-30_21-27-21\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003226064-2073402920.png\" alt=\"Snipaste_2023-01-30_21-28-02\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"图的相关性质\"><a href=\"#图的相关性质\" class=\"headerlink\" title=\"图的相关性质\"></a>图的相关性质</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003227782-1734937726.png\" alt=\"Snipaste_2023-01-30_21-28-23\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003228360-914587659.png\" alt=\"Snipaste_2023-01-30_21-28-57\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003229809-1591759326.png\" alt=\"Snipaste_2023-01-30_21-29-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230414-1174857769.png\" alt=\"Snipaste_2023-01-30_21-30-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003230901-753351247.png\" alt=\"Snipaste_2023-01-30_21-30-56\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232047-1465767147.png\" alt=\"Snipaste_2023-01-30_21-32-43\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003232591-1535683489.png\" alt=\"Snipaste_2023-01-30_21-32-49\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003233903-1441000794.png\" alt=\"Snipaste_2023-01-30_21-35-23\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003234489-1562431798.png\" alt=\"Snipaste_2023-01-30_21-37-04\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235002-186776549.png\" alt=\"Snipaste_2023-01-30_21-38-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003235940-966594377.png\" alt=\"Snipaste_2023-01-30_21-38-52\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003236923-1957281841.png\" alt=\"Snipaste_2023-01-30_21-40-54\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003237832-290120583.png\" alt=\"Snipaste_2023-01-30_21-41-09\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"邻接矩阵的实现\"><a href=\"#邻接矩阵的实现\" class=\"headerlink\" title=\"邻接矩阵的实现\"></a>邻接矩阵的实现</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003238610-1261452464.png\" alt=\"Snipaste_2023-01-30_21-44-14\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003239140-377931477.png\" alt=\"Snipaste_2023-01-30_21-44-57\" style=\"zoom:80%;\" />\n\n<h3 id=\"邻接矩阵的优劣\"><a href=\"#邻接矩阵的优劣\" class=\"headerlink\" title=\"邻接矩阵的优劣\"></a>邻接矩阵的优劣</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240392-891512478.png\" alt=\"Snipaste_2023-01-30_21-45-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003240971-599857625.png\" alt=\"Snipaste_2023-01-30_21-45-28\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003241646-615119159.png\" alt=\"Snipaste_2023-01-30_21-46-00\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242241-1455856646.png\" alt=\"Snipaste_2023-01-30_21-47-17\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003242920-1071739990.png\" alt=\"Snipaste_2023-01-30_21-48-11\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244210-201636686.png\" alt=\"Snipaste_2023-01-30_21-49-30\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003244800-1895554840.png\" alt=\"Snipaste_2023-01-30_21-51-13\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"邻接表的实现\"><a href=\"#邻接表的实现\" class=\"headerlink\" title=\"邻接表的实现\"></a>邻接表的实现</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003245466-1236361989.png\" alt=\"Snipaste_2023-01-30_21-52-09\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003246047-1124627896.png\" alt=\"Snipaste_2023-01-30_21-52-42\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003247795-1194230170.png\" alt=\"Snipaste_2023-01-30_22-01-57\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003248572-1701553633.png\" alt=\"Snipaste_2023-01-30_22-02-13\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"库的调用\"><a href=\"#库的调用\" class=\"headerlink\" title=\"库的调用\"></a>库的调用</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249097-1216946408.png\" alt=\"Snipaste_2023-01-30_22-02-38\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003249555-896105563.png\" alt=\"Snipaste_2023-01-30_22-04-03\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003250450-820535375.png\" alt=\"Snipaste_2023-01-30_22-04-28\" style=\"zoom:80%;\" />\n\n<h3 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327912-1791489249.png\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003328541-504477056.png\" alt=\"Snipaste_2023-02-28_16-08-42\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003329403-1941220318.png\" alt=\"Snipaste_2023-02-28_16-13-13\"></p>\n<h3 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003330598-1653542503.png\" alt=\"Snipaste_2023-02-28_16-19-30\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331313-1137883969.png\" alt=\"Snipaste_2023-02-28_16-21-29\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003331838-750586068.png\" alt=\"Snipaste_2023-02-28_16-23-46\"></p>\n<h3 id=\"BFS与DFS算法比较\"><a href=\"#BFS与DFS算法比较\" class=\"headerlink\" title=\"BFS与DFS算法比较\"></a>BFS与DFS算法比较</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003332467-729896859.png\" alt=\"Snipaste_2023-02-28_16-24-06\"></p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003333918-1866209963.png\" alt=\"Snipaste_2023-02-28_16-26-09\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003334742-393473291.png\" alt=\"Snipaste_2023-02-28_16-30-23\"></p>\n<h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335324-58306181.png\" alt=\"Snipaste_2023-02-28_16-44-11\"></p>\n<h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003335897-1621272128.png\" alt=\"Snipaste_2023-02-28_16-44-51\"></p>\n<h3 id=\"算法比较\"><a href=\"#算法比较\" class=\"headerlink\" title=\"算法比较\"></a>算法比较</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003336585-2131642442.png\" alt=\"Snipaste_2023-02-28_16-45-00\"></p>\n<h2 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h2><h3 id=\"迪杰斯特拉算法\"><a href=\"#迪杰斯特拉算法\" class=\"headerlink\" title=\"迪杰斯特拉算法\"></a>迪杰斯特拉算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003337712-141859434.png\" alt=\"Snipaste_2023-02-28_17-03-13\"></p>\n<h3 id=\"弗洛伊德算法\"><a href=\"#弗洛伊德算法\" class=\"headerlink\" title=\"弗洛伊德算法\"></a>弗洛伊德算法</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339292-402468428.png\" alt=\"Snipaste_2023-02-28_17-10-57\"></p>\n<h2 id=\"AOV网\"><a href=\"#AOV网\" class=\"headerlink\" title=\"AOV网\"></a>AOV网</h2><h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003339993-7971698.png\" alt=\"Snipaste_2023-02-28_19-06-17\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003340535-1327013302.png\" alt=\"Snipaste_2023-02-28_19-53-17\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003341740-1508867142.png\" alt=\"Snipaste_2023-02-28_19-06-41\"></p>\n<h2 id=\"AOE网\"><a href=\"#AOE网\" class=\"headerlink\" title=\"AOE网\"></a>AOE网</h2><h3 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h3><p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003342477-1005485536.png\" alt=\"Snipaste_2023-02-28_19-54-05\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003343197-1311676865.png\" alt=\"Snipaste_2023-02-28_19-53-51\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003344783-1167898578.png\" alt=\"Snipaste_2023-02-28_19-54-39\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003345521-1452441577.png\" alt=\"Snipaste_2023-02-28_19-55-12\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003346601-1565523348.png\"></p>\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003347998-887538165.png\" alt=\"Snipaste_2023-02-28_19-50-40\"></p>\n<h1 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003251575-1640247239.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"找零问题\"><a href=\"#找零问题\" class=\"headerlink\" title=\"找零问题\"></a>找零问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252277-1148509851.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = [<span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"number\">20</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">change</span>(<span class=\"params\">t, n</span>):</span><br><span class=\"line\">    m = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(t))]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, money <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(t):</span><br><span class=\"line\">        m[i] = n // money</span><br><span class=\"line\">        n = n % money</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m, n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(change(t, <span class=\"number\">376</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"分数背包问题\"><a href=\"#分数背包问题\" class=\"headerlink\" title=\"分数背包问题\"></a>分数背包问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003252844-150015143.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253313-1442258686.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goods=[(<span class=\"number\">60</span>,<span class=\"number\">10</span>),(<span class=\"number\">100</span>,<span class=\"number\">20</span>),(<span class=\"number\">120</span>,<span class=\"number\">30</span>)]</span><br><span class=\"line\">goods.sort(key=<span class=\"keyword\">lambda</span>  x:x[<span class=\"number\">0</span>]/x[<span class=\"number\">1</span>],reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fractional_backpack</span>(<span class=\"params\">goods,w</span>):</span><br><span class=\"line\">    m=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(goods))]</span><br><span class=\"line\">    total_v=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,(prize,weight) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(goods):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> w&gt;=weight:</span><br><span class=\"line\">            m[i]=<span class=\"number\">1</span></span><br><span class=\"line\">            total_v+=prize</span><br><span class=\"line\">            w-=weight</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            m[i]=w/weight</span><br><span class=\"line\">            total_v+=m[i]*prize</span><br><span class=\"line\">            w=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_v,m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fractional_backpack(goods,<span class=\"number\">50</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"拼接最大数字问题\"><a href=\"#拼接最大数字问题\" class=\"headerlink\" title=\"拼接最大数字问题\"></a>拼接最大数字问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003253781-1770455863.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> cmp_to_key</span><br><span class=\"line\"></span><br><span class=\"line\">li = [<span class=\"number\">32</span>, <span class=\"number\">94</span>, <span class=\"number\">128</span>, <span class=\"number\">1286</span>, <span class=\"number\">6</span>, <span class=\"number\">71</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">xy_cmp</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x + y &lt; y + x:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> x + y &gt; y + x:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">number_join</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    li = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, li))</span><br><span class=\"line\">    li.sort(key=cmp_to_key(xy_cmp))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(li)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(number_join(li))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"活动选择问题\"><a href=\"#活动选择问题\" class=\"headerlink\" title=\"活动选择问题\"></a>活动选择问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003254578-1413807720.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003255393-2021528861.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</span><br><span class=\"line\"></span><br><span class=\"line\">activities = [(<span class=\"number\">1</span>, <span class=\"number\">4</span>), (<span class=\"number\">3</span>, <span class=\"number\">5</span>), (<span class=\"number\">0</span>, <span class=\"number\">6</span>), (<span class=\"number\">5</span>, <span class=\"number\">7</span>), (<span class=\"number\">5</span>, <span class=\"number\">9</span>), (<span class=\"number\">3</span>, <span class=\"number\">9</span>), (<span class=\"number\">6</span>, <span class=\"number\">10</span>), (<span class=\"number\">8</span>, <span class=\"number\">11</span>), (<span class=\"number\">8</span>, <span class=\"number\">12</span>), (<span class=\"number\">2</span>, <span class=\"number\">14</span>), (<span class=\"number\">12</span>, <span class=\"number\">16</span>)]</span><br><span class=\"line\">activities.sort(key=itemgetter(<span class=\"number\">1</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(activities)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">activity_selection</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    res = [a[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a[i][<span class=\"number\">0</span>] &gt;= res[-<span class=\"number\">1</span>][<span class=\"number\">1</span>]:</span><br><span class=\"line\">            res.append(a[i])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(activity_selection(activities))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"动态规划（DP算法）\"><a href=\"#动态规划（DP算法）\" class=\"headerlink\" title=\"动态规划（DP算法）\"></a>动态规划（DP算法）</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256037-686054189.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"钢管切割问题\"><a href=\"#钢管切割问题\" class=\"headerlink\" title=\"钢管切割问题\"></a>钢管切割问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003256581-759536913.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003257430-1510450101.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258325-770199969.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003258821-873262621.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259320-454356517.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003259850-370054211.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut_rot_dp</span>(<span class=\"params\">p, n</span>):</span><br><span class=\"line\">    r = p.copy()</span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">    solution_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">        res = r[i]</span><br><span class=\"line\">        solution = (i, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, (i + <span class=\"number\">1</span>) // <span class=\"number\">2</span> + <span class=\"number\">1</span>):</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, r[j] + r[i - j])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res == r[j] + r[i - j]:</span><br><span class=\"line\">                solution = (j, i - j)</span><br><span class=\"line\"></span><br><span class=\"line\">        solution_list.append(solution)</span><br><span class=\"line\">        r[i] = res</span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt;= length:</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        solution = <span class=\"built_in\">tuple</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, (length + <span class=\"number\">1</span>) // <span class=\"number\">2</span> + <span class=\"number\">1</span>):</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, r[j] + r[length - j])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res == r[j] + r[length - j]:</span><br><span class=\"line\">                solution = (j, length - j)</span><br><span class=\"line\">        solution_list.append(solution)</span><br><span class=\"line\">        r.append(res)</span><br><span class=\"line\">        length += <span class=\"number\">1</span></span><br><span class=\"line\">    solution_list.insert(<span class=\"number\">0</span>, <span class=\"built_in\">tuple</span>())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r[-<span class=\"number\">1</span>], solution_list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">find</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    queue = [li[-<span class=\"number\">1</span>]]</span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        tmp = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp[<span class=\"number\">1</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            res.append(tmp)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            queue.append(li[tmp[<span class=\"number\">0</span>]])</span><br><span class=\"line\">            queue.append(li[tmp[<span class=\"number\">1</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut_rot</span>(<span class=\"params\">p, n</span>):</span><br><span class=\"line\">    r, solution_list = cut_rot_dp(p, n)</span><br><span class=\"line\">    res = find(solution_list)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r, res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">17</span>, <span class=\"number\">17</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cut_rot(p,<span class=\"number\">49</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"最长公共子序列问题\"><a href=\"#最长公共子序列问题\" class=\"headerlink\" title=\"最长公共子序列问题\"></a>最长公共子序列问题</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003300320-1875440287.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302210-1297330831.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003302759-1918691034.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lcs</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    m = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(y)</span><br><span class=\"line\">    c = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    b = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m + <span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x[i - <span class=\"number\">1</span>] == y[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                c[i][j] = c[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">                b[i][j] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> c[i - <span class=\"number\">1</span>][j] &gt; c[i][j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                c[i][j] = c[i - <span class=\"number\">1</span>][j]</span><br><span class=\"line\">                b[i][j] = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                c[i][j] = c[i][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">                b[i][j] = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[m][n], b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lcs_trackback</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    c, b = lcs(x, y)</span><br><span class=\"line\">    i = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    j = <span class=\"built_in\">len</span>(y)</span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> j &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> b[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            res.append(x[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> b[i][j] == <span class=\"number\">2</span>:</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">reversed</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lcs_trackback(<span class=\"string\">&quot;ABCBDAB&quot;</span>,<span class=\"string\">&quot;BDCABA&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"欧几里得算法（求最大公约数）\"><a href=\"#欧几里得算法（求最大公约数）\" class=\"headerlink\" title=\"欧几里得算法（求最大公约数）\"></a>欧几里得算法（求最大公约数）</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303247-879832102.png\" style=\"zoom:80%;\" />\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gcd(b, a % b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd2</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> b &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        r = a % b</span><br><span class=\"line\">        a = b</span><br><span class=\"line\">        b = r</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gcd(<span class=\"number\">12</span>, <span class=\"number\">16</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(gcd2(<span class=\"number\">12</span>, <span class=\"number\">16</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003303671-24523928.png\" style=\"zoom:80%;\" />\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fraction</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,a,b</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.molecule=a</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.denominator=b</span><br><span class=\"line\">        x=<span class=\"variable language_\">self</span>.gcd(a,b)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.molecule/=x</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.denominator/=x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">self,a,b</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> b &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            r = a % b</span><br><span class=\"line\">            a = b</span><br><span class=\"line\">            b = r</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__add__</span>(<span class=\"params\">self, other</span>):</span><br><span class=\"line\">        denominator=<span class=\"variable language_\">self</span>.zgs(<span class=\"variable language_\">self</span>.denominator,other.denominator)</span><br><span class=\"line\">        molecule=<span class=\"variable language_\">self</span>.molecule*denominator/<span class=\"variable language_\">self</span>.denominator+other.molecule*denominator/other.denominator</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Fraction(molecule,denominator)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">zgs</span>(<span class=\"params\">self,a,b</span>):</span><br><span class=\"line\">        x=<span class=\"variable language_\">self</span>.gcd(a,b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a*b/x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;%d/%d&quot;</span>%(<span class=\"variable language_\">self</span>.molecule,<span class=\"variable language_\">self</span>.denominator)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">num1=Fraction(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num1)</span><br><span class=\"line\">num2=Fraction(<span class=\"number\">1</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num1+num2)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"RSA加密算法\"><a href=\"#RSA加密算法\" class=\"headerlink\" title=\"RSA加密算法\"></a>RSA加密算法</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304114-1449543961.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003304589-1304774116.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305197-1886034459.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003305618-318237693.png\" style=\"zoom:80%;\" />\n\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306185-1583924888.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003306636-1961503250.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307137-225997543.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003307834-1722959623.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003308660-734490389.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309265-469661568.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003309831-970662596.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310262-665839716.png\" style=\"zoom:80%;\" />\n\n\n\n\n\n<h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003310781-13662355.png\" style=\"zoom:80%;\" />\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003311241-1568389696.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312023-736659876.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003312535-479714437.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313046-396414824.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003313487-715915219.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314040-471835656.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003314566-1454255918.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003315019-438218292.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003316020-1263868583.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317015-2100024309.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003317621-1181143597.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"桥模式\"><a href=\"#桥模式\" class=\"headerlink\" title=\"桥模式\"></a>桥模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318427-1886468152.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003318866-234284078.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319300-434134883.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003319749-1583805141.png\" style=\"zoom:80%;\" />\n\n\n\n<p><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003348540-317771781.png\"></p>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320248-760156051.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003320739-907826483.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321202-1035783405.png\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003321658-1470874291.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003322212-866246714.png\" alt=\"Snipaste_2023-01-11_10-40-01\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323017-394699248.png\" alt=\"Snipaste_2023-01-11_10-44-09\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003323959-1055100366.png\" alt=\"Snipaste_2023-01-11_10-44-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003324611-1326580995.png\" alt=\"Snipaste_2023-01-11_11-05-36\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003325672-1529465519.png\" alt=\"Snipaste_2023-01-11_11-12-14\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326296-584057204.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003326910-962180721.png\" alt=\"Snipaste_2023-01-11_11-06-47\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"https://img2023.cnblogs.com/blog/3531280/202410/3531280-20241004003327394-830844690.png\" alt=\"Snipaste_2023-01-11_11-11-40\" style=\"zoom:80%;\" />\n\n\n\n\n\n"},{"title":"second test","date":"2025-02-28T04:49:21.000Z","_content":"\n\n\n\n\n# 大家网卡端午安康\n\n\n\n看记得我骄傲达瓦的哇的\n\n\n\n的空间哇达瓦打开哇的哇d\n\n大家哇靠来得及哇达瓦 \n","source":"_posts/second-test.md","raw":"---\ntitle: second test\ndate: 2025-02-28 12:49:21\ntags:\n---\n\n\n\n\n\n# 大家网卡端午安康\n\n\n\n看记得我骄傲达瓦的哇的\n\n\n\n的空间哇达瓦打开哇的哇d\n\n大家哇靠来得及哇达瓦 \n","slug":"second-test","published":1,"updated":"2025-02-28T04:49:47.927Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqt30008doupbm45cs8e","content":"<h1 id=\"大家网卡端午安康\"><a href=\"#大家网卡端午安康\" class=\"headerlink\" title=\"大家网卡端午安康\"></a>大家网卡端午安康</h1><p>看记得我骄傲达瓦的哇的</p>\n<p>的空间哇达瓦打开哇的哇d</p>\n<p>大家哇靠来得及哇达瓦 </p>\n","excerpt":"","more":"<h1 id=\"大家网卡端午安康\"><a href=\"#大家网卡端午安康\" class=\"headerlink\" title=\"大家网卡端午安康\"></a>大家网卡端午安康</h1><p>看记得我骄傲达瓦的哇的</p>\n<p>的空间哇达瓦打开哇的哇d</p>\n<p>大家哇靠来得及哇达瓦 </p>\n"},{"title":"test","date":"2025-02-28T04:29:58.000Z","_content":"\n\n\n# 大家晚安的wa\n\n大家哇靠的哇dw\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2025-02-28 12:29:58\ntags:\n---\n\n\n\n# 大家晚安的wa\n\n大家哇靠的哇dw\n","slug":"test","published":1,"updated":"2025-02-28T04:30:14.504Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqt6000hdoup72ih4x4t","content":"<h1 id=\"大家晚安的wa\"><a href=\"#大家晚安的wa\" class=\"headerlink\" title=\"大家晚安的wa\"></a>大家晚安的wa</h1><p>大家哇靠的哇dw</p>\n","excerpt":"","more":"<h1 id=\"大家晚安的wa\"><a href=\"#大家晚安的wa\" class=\"headerlink\" title=\"大家晚安的wa\"></a>大家晚安的wa</h1><p>大家哇靠的哇dw</p>\n"},{"title":"测试","date":"2025-02-28T11:42:10.000Z","_content":"\n\n\n# dwja dkwa\\\n\n\n\nkjdwja dw a\n\n\n\ndjkwa dwa\n\n\n\njdwak \n","source":"_posts/测试.md","raw":"---\ntitle: 测试\ndate: 2025-02-28 19:42:10\ncategories:\n- web\n- Java\n---\n\n\n\n# dwja dkwa\\\n\n\n\nkjdwja dw a\n\n\n\ndjkwa dwa\n\n\n\njdwak \n","slug":"测试","published":1,"updated":"2025-02-28T11:45:00.698Z","comments":1,"layout":"post","photos":[],"_id":"cm7ozoqt7000idoupgos54nom","content":"<h1 id=\"dwja-dkwa\"><a href=\"#dwja-dkwa\" class=\"headerlink\" title=\"dwja dkwa\\\"></a>dwja dkwa\\</h1><p>kjdwja dw a</p>\n<p>djkwa dwa</p>\n<p>jdwak </p>\n","excerpt":"","more":"<h1 id=\"dwja-dkwa\"><a href=\"#dwja-dkwa\" class=\"headerlink\" title=\"dwja dkwa\\\"></a>dwja dkwa\\</h1><p>kjdwja dw a</p>\n<p>djkwa dwa</p>\n<p>jdwak </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm7ozoqt20007doup83zl6g77","category_id":"cm7ozoqt30009doupe7aj8w71","_id":"cm7ozoqt6000cdoupcf8l3k7d"},{"post_id":"cm7ozoqt7000idoupgos54nom","category_id":"cm7ozoqt7000jdoup2sevcyx9","_id":"cm7ozoqt8000ldoup5g487sjy"},{"post_id":"cm7ozoqt7000idoupgos54nom","category_id":"cm7ozoqt7000kdoupg1qtedr6","_id":"cm7ozoqt8000mdoup3ekk3c8j"}],"PostTag":[{"post_id":"cm7ozoqt20007doup83zl6g77","tag_id":"cm7ozoqt5000adoup0l5ffpf5","_id":"cm7ozoqt6000edoupfpnp4isa"},{"post_id":"cm7ozoqt20007doup83zl6g77","tag_id":"cm7ozoqt5000bdoup5qsod9bn","_id":"cm7ozoqt6000fdoupb0h85jp1"},{"post_id":"cm7ozoqt20007doup83zl6g77","tag_id":"cm7ozoqt6000ddoupfx3s4k1x","_id":"cm7ozoqt6000gdoupc3o0fwdy"}],"Tag":[{"name":"算法","_id":"cm7ozoqt5000adoup0l5ffpf5"},{"name":"学习","_id":"cm7ozoqt5000bdoup5qsod9bn"},{"name":"Python","_id":"cm7ozoqt6000ddoupfx3s4k1x"}]}}